{
"org.jfree.chart.entity.JFreeChartEntity.getChart": "/**\n     * Returns the chart that occupies the entity area.\n     *\n     * @return The chart (never {@code null}).\n     */\n",
"org.jfree.chart.entity.JFreeChartEntity.toString": "/**\n     * Returns a string representation of the chart entity, useful for\n     * debugging.\n     *\n     * @return A string.\n     */\n",
"org.jfree.chart.entity.JFreeChartEntity.equals": "/**\n     * Tests the entity for equality with an arbitrary object.\n     *\n     * @param obj  the object to test against ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.entity.JFreeChartEntity.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.entity.JFreeChartEntity.clone": "/**\n     * Returns a clone of the entity.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning the\n     *         entity.\n     */\n",
"org.jfree.chart.entity.JFreeChartEntity.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.entity.JFreeChartEntity.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.entity.CategoryItemEntity.getDataset": "/**\n     * Returns the dataset this entity refers to.  This can be used to\n     * differentiate between items in a chart that displays more than one\n     * dataset.\n     *\n     * @return The dataset (never {@code null}).\n     *\n     * @see #setDataset(CategoryDataset)\n     */\n",
"org.jfree.chart.entity.CategoryItemEntity.setDataset": "/**\n     * Sets the dataset this entity refers to.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @see #getDataset()\n     */\n",
"org.jfree.chart.entity.CategoryItemEntity.getRowKey": "/**\n     * Returns the row key.\n     *\n     * @return The row key (never {@code null}).\n     *\n     * @since 1.0.6\n     *\n     * @see #setRowKey(Comparable)\n     */\n",
"org.jfree.chart.entity.CategoryItemEntity.setRowKey": "/**\n     * Sets the row key.\n     *\n     * @param rowKey  the row key ({@code null} not permitted).\n     *\n     * @since 1.0.6\n     *\n     * @see #getRowKey()\n     */\n",
"org.jfree.chart.entity.CategoryItemEntity.getColumnKey": "/**\n     * Returns the column key.\n     *\n     * @return The column key (never {@code null}).\n     *\n     * @since 1.0.6\n     *\n     * @see #setColumnKey(Comparable)\n     */\n",
"org.jfree.chart.entity.CategoryItemEntity.setColumnKey": "/**\n     * Sets the column key.\n     *\n     * @param columnKey  the column key ({@code null} not permitted).\n     *\n     * @since 1.0.6\n     *\n     * @see #getColumnKey()\n     */\n",
"org.jfree.chart.entity.CategoryItemEntity.toString": "/**\n     * Returns a string representing this object (useful for debugging\n     * purposes).\n     *\n     * @return A string (never {@code null}).\n     */\n",
"org.jfree.chart.entity.CategoryItemEntity.equals": "/**\n     * Tests the entity for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.entity.PlotEntity.getPlot": "/**\n     * Returns the plot that occupies the entity area.\n     *\n     * @return The plot (never {@code null}).\n     */\n",
"org.jfree.chart.entity.PlotEntity.toString": "/**\n     * Returns a string representation of the plot entity, useful for\n     * debugging.\n     *\n     * @return A string.\n     */\n",
"org.jfree.chart.entity.PlotEntity.equals": "/**\n     * Tests the entity for equality with an arbitrary object.\n     *\n     * @param obj  the object to test against ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.entity.PlotEntity.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.entity.PlotEntity.clone": "/**\n     * Returns a clone of the entity.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning the\n     *         entity.\n     */\n",
"org.jfree.chart.entity.PlotEntity.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.entity.PlotEntity.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.entity.LegendItemEntity.getDataset": "/**\n     * Returns a reference to the dataset that this legend item is derived\n     * from.\n     *\n     * @return The dataset.\n     *\n     * @since 1.0.6\n     *\n     * @see #setDataset(Dataset)\n     */\n",
"org.jfree.chart.entity.LegendItemEntity.setDataset": "/**\n     * Sets a reference to the dataset that this legend item is derived from.\n     *\n     * @param dataset  the dataset.\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.chart.entity.LegendItemEntity.getSeriesKey": "/**\n     * Returns the series key that identifies the legend item.\n     *\n     * @return The series key.\n     *\n     * @since 1.0.6\n     *\n     * @see #setSeriesKey(Comparable)\n     */\n",
"org.jfree.chart.entity.LegendItemEntity.setSeriesKey": "/**\n     * Sets the key for the series.\n     *\n     * @param key  the key.\n     *\n     * @since 1.0.6\n     *\n     * @see #getSeriesKey()\n     */\n",
"org.jfree.chart.entity.LegendItemEntity.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.entity.LegendItemEntity.clone": "/**\n     * Returns a clone of the entity.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning the\n     *         object.\n     */\n",
"org.jfree.chart.entity.LegendItemEntity.toString": "/**\n     * Returns a string representing this object (useful for debugging\n     * purposes).\n     *\n     * @return A string (never {@code null}).\n     */\n",
"org.jfree.chart.entity.AxisEntity.getAxis": "/**\n     * Returns the axis that occupies the entity area.\n     *\n     * @return The axis (never {@code null}).\n     */\n",
"org.jfree.chart.entity.AxisEntity.toString": "/**\n     * Returns a string representation of the chart entity, useful for\n     * debugging.\n     *\n     * @return A string.\n     */\n",
"org.jfree.chart.entity.AxisEntity.equals": "/**\n     * Tests the entity for equality with an arbitrary object.\n     *\n     * @param obj  the object to test against ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.entity.AxisEntity.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.entity.AxisEntity.clone": "/**\n     * Returns a clone of the entity.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning the\n     *         entity.\n     */\n",
"org.jfree.chart.entity.AxisEntity.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.entity.AxisEntity.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.entity.CategoryLabelEntity.getKey": "/**\n     * Returns the category key.\n     *\n     * @return The category key.\n     */\n",
"org.jfree.chart.entity.CategoryLabelEntity.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.entity.CategoryLabelEntity.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.entity.CategoryLabelEntity.toString": "/**\n     * Returns a string representation of this entity.  This is primarily\n     * useful for debugging.\n     *\n     * @return A string representation of this entity.\n     */\n",
"org.jfree.chart.entity.StandardEntityCollection.getEntityCount": "/**\n     * Returns the number of entities in the collection.\n     *\n     * @return The entity count.\n     */\n",
"org.jfree.chart.entity.StandardEntityCollection.getEntity": "/**\n     * Returns a chart entity from the collection.\n     *\n     * @param index  the entity index.\n     *\n     * @return The entity.\n     *\n     * @see #add(ChartEntity)\n     */\n",
"org.jfree.chart.entity.StandardEntityCollection.clear": "/**\n     * Clears all the entities from the collection.\n     */\n",
"org.jfree.chart.entity.StandardEntityCollection.add": "/**\n     * Adds an entity to the collection.\n     *\n     * @param entity  the entity ({@code null} not permitted).\n     */\n",
"org.jfree.chart.entity.StandardEntityCollection.addAll": "/**\n     * Adds all the entities from the specified collection.\n     *\n     * @param collection  the collection of entities ({@code null} not\n     *     permitted).\n     */\n",
"org.jfree.chart.entity.StandardEntityCollection.getEntity": "/**\n     * Returns the last entity in the list with an area that encloses the\n     * specified coordinates, or {@code null} if there is no such entity.\n     *\n     * @param x  the x coordinate.\n     * @param y  the y coordinate.\n     *\n     * @return The entity (possibly {@code null}).\n     */\n",
"org.jfree.chart.entity.StandardEntityCollection.getEntities": "/**\n     * Returns the entities in an unmodifiable collection.\n     *\n     * @return The entities.\n     */\n",
"org.jfree.chart.entity.StandardEntityCollection.iterator": "/**\n     * Returns an iterator for the entities in the collection.\n     *\n     * @return An iterator.\n     */\n",
"org.jfree.chart.entity.StandardEntityCollection.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the object to test against ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.entity.StandardEntityCollection.clone": "/**\n     * Returns a clone of this entity collection.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if the object cannot be cloned.\n     */\n",
"org.jfree.chart.entity.EntityCollection.clear": "/**\n     * Clears all entities.\n     */\n",
"org.jfree.chart.entity.EntityCollection.add": "/**\n     * Adds an entity to the collection.\n     *\n     * @param entity  the entity ({@code null} not permitted).\n     */\n",
"org.jfree.chart.entity.EntityCollection.addAll": "/**\n     * Adds the entities from another collection to this collection.\n     *\n     * @param collection  the other collection.\n     */\n",
"org.jfree.chart.entity.EntityCollection.getEntity": "/**\n     * Returns an entity whose area contains the specified point.\n     *\n     * @param x  the x coordinate.\n     * @param y  the y coordinate.\n     *\n     * @return The entity.\n     */\n",
"org.jfree.chart.entity.EntityCollection.getEntity": "/**\n     * Returns an entity from the collection.\n     *\n     * @param index  the index (zero-based).\n     *\n     * @return An entity.\n     */\n",
"org.jfree.chart.entity.EntityCollection.getEntityCount": "/**\n     * Returns the entity count.\n     *\n     * @return The entity count.\n     */\n",
"org.jfree.chart.entity.EntityCollection.getEntities": "/**\n     * Returns the entities in an unmodifiable collection.\n     *\n     * @return The entities.\n     */\n",
"org.jfree.chart.entity.EntityCollection.iterator": "/**\n     * Returns an iterator for the entities in the collection.\n     *\n     * @return An iterator.\n     */\n",
"org.jfree.chart.entity.XYItemEntity.getDataset": "/**\n     * Returns the dataset this entity refers to.\n     *\n     * @return The dataset.\n     */\n",
"org.jfree.chart.entity.XYItemEntity.setDataset": "/**\n     * Sets the dataset this entity refers to.\n     *\n     * @param dataset  the dataset.\n     */\n",
"org.jfree.chart.entity.XYItemEntity.getSeriesIndex": "/**\n     * Returns the series index.\n     *\n     * @return The series index.\n     */\n",
"org.jfree.chart.entity.XYItemEntity.setSeriesIndex": "/**\n     * Sets the series index.\n     *\n     * @param series the series index (zero-based).\n     */\n",
"org.jfree.chart.entity.XYItemEntity.getItem": "/**\n     * Returns the item index.\n     *\n     * @return The item index.\n     */\n",
"org.jfree.chart.entity.XYItemEntity.setItem": "/**\n     * Sets the item index.\n     *\n     * @param item the item index (zero-based).\n     */\n",
"org.jfree.chart.entity.XYItemEntity.equals": "/**\n     * Tests the entity for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.entity.XYItemEntity.toString": "/**\n     * Returns a string representation of this instance, useful for debugging\n     * purposes.\n     *\n     * @return A string.\n     */\n",
"org.jfree.chart.entity.TitleEntity.getTitle": "/**\n     * Returns the title that occupies the entity area.\n     *\n     * @return The title (never {@code null}).\n     */\n",
"org.jfree.chart.entity.TitleEntity.toString": "/**\n     * Returns a string representation of the chart entity, useful for\n     * debugging.\n     *\n     * @return A string.\n     */\n",
"org.jfree.chart.entity.TitleEntity.equals": "/**\n     * Tests the entity for equality with an arbitrary object.\n     *\n     * @param obj  the object to test against ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.entity.TitleEntity.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.entity.TitleEntity.clone": "/**\n     * Returns a clone of the entity.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning the\n     *         entity.\n     */\n",
"org.jfree.chart.entity.TitleEntity.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.entity.TitleEntity.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.entity.XYAnnotationEntity.getRendererIndex": "/**\n     * Returns the renderer index.\n     *\n     * @return The renderer index.\n     */\n",
"org.jfree.chart.entity.XYAnnotationEntity.setRendererIndex": "/**\n     * Sets the renderer index.\n     *\n     * @param index  the item index (zero-based).\n     */\n",
"org.jfree.chart.entity.XYAnnotationEntity.equals": "/**\n     * Tests the entity for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.entity.PieSectionEntity.getDataset": "/**\n     * Returns the dataset this entity refers to.\n     *\n     * @return The dataset.\n     *\n     * @see #setDataset(PieDataset)\n     */\n",
"org.jfree.chart.entity.PieSectionEntity.setDataset": "/**\n     * Sets the dataset this entity refers to.\n     *\n     * @param dataset  the dataset.\n     *\n     * @see #getDataset()\n     */\n",
"org.jfree.chart.entity.PieSectionEntity.getPieIndex": "/**\n     * Returns the pie index.  For a regular pie chart, the section index is 0.\n     * For a pie chart containing multiple pie plots, the pie index is the row\n     * or column index from which the pie data is extracted.\n     *\n     * @return The pie index.\n     *\n     * @see #setPieIndex(int)\n     */\n",
"org.jfree.chart.entity.PieSectionEntity.setPieIndex": "/**\n     * Sets the pie index.\n     *\n     * @param index  the new index value.\n     *\n     * @see #getPieIndex()\n     */\n",
"org.jfree.chart.entity.PieSectionEntity.getSectionIndex": "/**\n     * Returns the section index.\n     *\n     * @return The section index.\n     *\n     * @see #setSectionIndex(int)\n     */\n",
"org.jfree.chart.entity.PieSectionEntity.setSectionIndex": "/**\n     * Sets the section index.\n     *\n     * @param index  the section index.\n     *\n     * @see #getSectionIndex()\n     */\n",
"org.jfree.chart.entity.PieSectionEntity.getSectionKey": "/**\n     * Returns the section key.\n     *\n     * @return The section key.\n     *\n     * @see #setSectionKey(Comparable)\n     */\n",
"org.jfree.chart.entity.PieSectionEntity.setSectionKey": "/**\n     * Sets the section key.\n     *\n     * @param key  the section key.\n     *\n     * @see #getSectionKey()\n     */\n",
"org.jfree.chart.entity.PieSectionEntity.equals": "/**\n     * Tests this entity for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.entity.PieSectionEntity.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.entity.PieSectionEntity.toString": "/**\n     * Returns a string representing the entity.\n     *\n     * @return A string representing the entity.\n     */\n",
"org.jfree.chart.entity.ChartEntity.getArea": "/**\n     * Returns the area occupied by the entity (in Java 2D space).\n     *\n     * @return The area (never {@code null}).\n     */\n",
"org.jfree.chart.entity.ChartEntity.setArea": "/**\n     * Sets the area for the entity.\n     * <P>\n     * This class conveys information about chart entities back to a client.\n     * Setting this area doesn't change the entity (which has already been\n     * drawn).\n     *\n     * @param area  the area ({@code null} not permitted).\n     */\n",
"org.jfree.chart.entity.ChartEntity.getToolTipText": "/**\n     * Returns the tool tip text for the entity.  Be aware that this text\n     * may have been generated from user supplied data, so for security\n     * reasons some form of filtering should be applied before incorporating\n     * this text into any HTML output.\n     *\n     * @return The tool tip text (possibly {@code null}).\n     */\n",
"org.jfree.chart.entity.ChartEntity.setToolTipText": "/**\n     * Sets the tool tip text.\n     *\n     * @param text  the text ({@code null} permitted).\n     */\n",
"org.jfree.chart.entity.ChartEntity.getURLText": "/**\n     * Returns the URL text for the entity.  Be aware that this text\n     * may have been generated from user supplied data, so some form of\n     * filtering should be applied before this \"URL\" is used in any output.\n     *\n     * @return The URL text (possibly {@code null}).\n     */\n",
"org.jfree.chart.entity.ChartEntity.setURLText": "/**\n     * Sets the URL text.\n     *\n     * @param text the text ({@code null} permitted).\n     */\n",
"org.jfree.chart.entity.ChartEntity.getShapeType": "/**\n     * Returns a string describing the entity area.  This string is intended\n     * for use in an AREA tag when generating an image map.\n     *\n     * @return The shape type (never {@code null}).\n     */\n",
"org.jfree.chart.entity.ChartEntity.getShapeCoords": "/**\n     * Returns the shape coordinates as a string.\n     *\n     * @return The shape coordinates (never {@code null}).\n     */\n",
"org.jfree.chart.entity.ChartEntity.getRectCoords": "/**\n     * Returns a string containing the coordinates (x1, y1, x2, y2) for a given\n     * rectangle.  This string is intended for use in an image map.\n     *\n     * @param rectangle  the rectangle ({@code null} not permitted).\n     *\n     * @return Upper left and lower right corner of a rectangle.\n     */\n",
"org.jfree.chart.entity.ChartEntity.getPolyCoords": "/**\n     * Returns a string containing the coordinates for a given shape.  This\n     * string is intended for use in an image map.\n     *\n     * @param shape  the shape ({@code null} not permitted).\n     *\n     * @return The coordinates for a given shape as string.\n     */\n",
"org.jfree.chart.entity.ChartEntity.getImageMapAreaTag": "/**\n     * Returns an HTML image map tag for this entity.  The returned fragment\n     * should be {@code XHTML 1.0} compliant.\n     *\n     * @param toolTipTagFragmentGenerator  a generator for the HTML fragment\n     *     that will contain the tooltip text ({@code null} not permitted\n     *     if this entity contains tooltip information).\n     * @param urlTagFragmentGenerator  a generator for the HTML fragment that\n     *     will contain the URL reference ({@code null} not permitted if\n     *     this entity has a URL).\n     *\n     * @return The HTML tag.\n     */\n",
"org.jfree.chart.entity.ChartEntity.toString": "/**\n     * Returns a string representation of the chart entity, useful for\n     * debugging.\n     *\n     * @return A string.\n     */\n",
"org.jfree.chart.entity.ChartEntity.equals": "/**\n     * Tests the entity for equality with an arbitrary object.\n     *\n     * @param obj  the object to test against ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.entity.ChartEntity.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.entity.ChartEntity.clone": "/**\n     * Returns a clone of the entity.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning the\n     *         entity.\n     */\n",
"org.jfree.chart.entity.ChartEntity.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.entity.ChartEntity.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.StandardChartTheme.createJFreeTheme": "/**\n     * Creates and returns the default 'JFree' chart theme.\n     *\n     * @return A chart theme.\n     */\n",
"org.jfree.chart.StandardChartTheme.createDarknessTheme": "/**\n     * Creates and returns a theme called \"Darkness\".  In this theme, the\n     * charts have a black background.\n     *\n     * @return The \"Darkness\" theme.\n     */\n",
"org.jfree.chart.StandardChartTheme.createLegacyTheme": "/**\n     * Creates and returns a {@link ChartTheme} that doesn't apply any changes\n     * to the JFreeChart defaults.  This produces the \"legacy\" look for\n     * JFreeChart.\n     *\n     * @return A legacy theme.\n     */\n",
"org.jfree.chart.StandardChartTheme.getExtraLargeFont": "/**\n     * Returns the largest font for this theme.\n     *\n     * @return The largest font for this theme.\n     *\n     * @see #setExtraLargeFont(Font)\n     */\n",
"org.jfree.chart.StandardChartTheme.setExtraLargeFont": "/**\n     * Sets the largest font for this theme.\n     *\n     * @param font  the font ({@code null} not permitted).\n     *\n     * @see #getExtraLargeFont()\n     */\n",
"org.jfree.chart.StandardChartTheme.getLargeFont": "/**\n     * Returns the large font for this theme.\n     *\n     * @return The large font (never {@code null}).\n     *\n     * @see #setLargeFont(Font)\n     */\n",
"org.jfree.chart.StandardChartTheme.setLargeFont": "/**\n     * Sets the large font for this theme.\n     *\n     * @param font  the font ({@code null} not permitted).\n     *\n     * @see #getLargeFont()\n     */\n",
"org.jfree.chart.StandardChartTheme.getRegularFont": "/**\n     * Returns the regular font.\n     *\n     * @return The regular font (never {@code null}).\n     *\n     * @see #setRegularFont(Font)\n     */\n",
"org.jfree.chart.StandardChartTheme.setRegularFont": "/**\n     * Sets the regular font for this theme.\n     *\n     * @param font  the font ({@code null} not permitted).\n     *\n     * @see #getRegularFont()\n     */\n",
"org.jfree.chart.StandardChartTheme.getSmallFont": "/**\n     * Returns the small font.\n     *\n     * @return The small font (never {@code null}).\n     *\n     * @see #setSmallFont(Font)\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.StandardChartTheme.setSmallFont": "/**\n     * Sets the small font for this theme.\n     *\n     * @param font  the font ({@code null} not permitted).\n     *\n     * @see #getSmallFont()\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.StandardChartTheme.getTitlePaint": "/**\n     * Returns the title paint.\n     *\n     * @return The title paint (never {@code null}).\n     *\n     * @see #setTitlePaint(Paint)\n     */\n",
"org.jfree.chart.StandardChartTheme.setTitlePaint": "/**\n     * Sets the title paint.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getTitlePaint()\n     */\n",
"org.jfree.chart.StandardChartTheme.getSubtitlePaint": "/**\n     * Returns the subtitle paint.\n     *\n     * @return The subtitle paint (never {@code null}).\n     *\n     * @see #setSubtitlePaint(Paint)\n     */\n",
"org.jfree.chart.StandardChartTheme.setSubtitlePaint": "/**\n     * Sets the subtitle paint.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getSubtitlePaint()\n     */\n",
"org.jfree.chart.StandardChartTheme.getChartBackgroundPaint": "/**\n     * Returns the chart background paint.\n     *\n     * @return The chart background paint (never {@code null}).\n     *\n     * @see #setChartBackgroundPaint(Paint)\n     */\n",
"org.jfree.chart.StandardChartTheme.setChartBackgroundPaint": "/**\n     * Sets the chart background paint.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getChartBackgroundPaint()\n     */\n",
"org.jfree.chart.StandardChartTheme.getLegendBackgroundPaint": "/**\n     * Returns the legend background paint.\n     *\n     * @return The legend background paint (never {@code null}).\n     *\n     * @see #setLegendBackgroundPaint(Paint)\n     */\n",
"org.jfree.chart.StandardChartTheme.setLegendBackgroundPaint": "/**\n     * Sets the legend background paint.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getLegendBackgroundPaint()\n     */\n",
"org.jfree.chart.StandardChartTheme.getLegendItemPaint": "/**\n     * Returns the legend item paint.\n     *\n     * @return The legend item paint (never {@code null}).\n     *\n     * @see #setLegendItemPaint(Paint)\n     */\n",
"org.jfree.chart.StandardChartTheme.setLegendItemPaint": "/**\n     * Sets the legend item paint.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getLegendItemPaint()\n     */\n",
"org.jfree.chart.StandardChartTheme.getPlotBackgroundPaint": "/**\n     * Returns the plot background paint.\n     *\n     * @return The plot background paint (never {@code null}).\n     *\n     * @see #setPlotBackgroundPaint(Paint)\n     */\n",
"org.jfree.chart.StandardChartTheme.setPlotBackgroundPaint": "/**\n     * Sets the plot background paint.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getPlotBackgroundPaint()\n     */\n",
"org.jfree.chart.StandardChartTheme.getPlotOutlinePaint": "/**\n     * Returns the plot outline paint.\n     *\n     * @return The plot outline paint (never {@code null}).\n     *\n     * @see #setPlotOutlinePaint(Paint)\n     */\n",
"org.jfree.chart.StandardChartTheme.setPlotOutlinePaint": "/**\n     * Sets the plot outline paint.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getPlotOutlinePaint()\n     */\n",
"org.jfree.chart.StandardChartTheme.getLabelLinkStyle": "/**\n     * Returns the label link style for pie charts.\n     *\n     * @return The label link style (never {@code null}).\n     *\n     * @see #setLabelLinkStyle(PieLabelLinkStyle)\n     */\n",
"org.jfree.chart.StandardChartTheme.setLabelLinkStyle": "/**\n     * Sets the label link style for pie charts.\n     *\n     * @param style  the style ({@code null} not permitted).\n     *\n     * @see #getLabelLinkStyle()\n     */\n",
"org.jfree.chart.StandardChartTheme.getLabelLinkPaint": "/**\n     * Returns the label link paint for pie charts.\n     *\n     * @return The label link paint (never {@code null}).\n     *\n     * @see #setLabelLinkPaint(Paint)\n     */\n",
"org.jfree.chart.StandardChartTheme.setLabelLinkPaint": "/**\n     * Sets the label link paint for pie charts.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getLabelLinkPaint()\n     */\n",
"org.jfree.chart.StandardChartTheme.getDomainGridlinePaint": "/**\n     * Returns the domain grid line paint.\n     *\n     * @return The domain grid line paint (never {@code null}).\n     *\n     * @see #setDomainGridlinePaint(Paint)\n     */\n",
"org.jfree.chart.StandardChartTheme.setDomainGridlinePaint": "/**\n     * Sets the domain grid line paint.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getDomainGridlinePaint()\n     */\n",
"org.jfree.chart.StandardChartTheme.getRangeGridlinePaint": "/**\n     * Returns the range grid line paint.\n     *\n     * @return The range grid line paint (never {@code null}).\n     *\n     * @see #setRangeGridlinePaint(Paint)\n     */\n",
"org.jfree.chart.StandardChartTheme.setRangeGridlinePaint": "/**\n     * Sets the range grid line paint.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getRangeGridlinePaint()\n     */\n",
"org.jfree.chart.StandardChartTheme.getBaselinePaint": "/**\n     * Returns the baseline paint.\n     *\n     * @return The baseline paint.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.StandardChartTheme.setBaselinePaint": "/**\n     * Sets the baseline paint.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.StandardChartTheme.getCrosshairPaint": "/**\n     * Returns the crosshair paint.\n     *\n     * @return The crosshair paint.\n     */\n",
"org.jfree.chart.StandardChartTheme.setCrosshairPaint": "/**\n     * Sets the crosshair paint.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     */\n",
"org.jfree.chart.StandardChartTheme.getAxisOffset": "/**\n     * Returns the axis offsets.\n     *\n     * @return The axis offsets (never {@code null}).\n     *\n     * @see #setAxisOffset(RectangleInsets)\n     */\n",
"org.jfree.chart.StandardChartTheme.setAxisOffset": "/**\n     * Sets the axis offset.\n     *\n     * @param offset  the offset ({@code null} not permitted).\n     *\n     * @see #getAxisOffset()\n     */\n",
"org.jfree.chart.StandardChartTheme.getAxisLabelPaint": "/**\n     * Returns the axis label paint.\n     *\n     * @return The axis label paint (never {@code null}).\n     *\n     * @see #setAxisLabelPaint(Paint)\n     */\n",
"org.jfree.chart.StandardChartTheme.setAxisLabelPaint": "/**\n     * Sets the axis label paint.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getAxisLabelPaint()\n     */\n",
"org.jfree.chart.StandardChartTheme.getTickLabelPaint": "/**\n     * Returns the tick label paint.\n     *\n     * @return The tick label paint (never {@code null}).\n     *\n     * @see #setTickLabelPaint(Paint)\n     */\n",
"org.jfree.chart.StandardChartTheme.setTickLabelPaint": "/**\n     * Sets the tick label paint.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getTickLabelPaint()\n     */\n",
"org.jfree.chart.StandardChartTheme.getItemLabelPaint": "/**\n     * Returns the item label paint.\n     *\n     * @return The item label paint (never {@code null}).\n     *\n     * @see #setItemLabelPaint(Paint)\n     */\n",
"org.jfree.chart.StandardChartTheme.setItemLabelPaint": "/**\n     * Sets the item label paint.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getItemLabelPaint()\n     */\n",
"org.jfree.chart.StandardChartTheme.isShadowVisible": "/**\n     * Returns the shadow visibility flag.\n     *\n     * @return The shadow visibility flag.\n     *\n     * @see #setShadowVisible(boolean)\n     */\n",
"org.jfree.chart.StandardChartTheme.setShadowVisible": "/**\n     * Sets the shadow visibility flag.\n     *\n     * @param visible  the flag.\n     *\n     * @see #isShadowVisible()\n     */\n",
"org.jfree.chart.StandardChartTheme.getShadowPaint": "/**\n     * Returns the shadow paint.\n     *\n     * @return The shadow paint (never {@code null}).\n     *\n     * @see #setShadowPaint(Paint)\n     */\n",
"org.jfree.chart.StandardChartTheme.setShadowPaint": "/**\n     * Sets the shadow paint.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getShadowPaint()\n     */\n",
"org.jfree.chart.StandardChartTheme.getBarPainter": "/**\n     * Returns the bar painter.\n     *\n     * @return The bar painter (never {@code null}).\n     *\n     * @see #setBarPainter(BarPainter)\n     */\n",
"org.jfree.chart.StandardChartTheme.setBarPainter": "/**\n     * Sets the bar painter.\n     *\n     * @param painter  the painter ({@code null} not permitted).\n     *\n     * @see #getBarPainter()\n     */\n",
"org.jfree.chart.StandardChartTheme.getXYBarPainter": "/**\n     * Returns the XY bar painter.\n     *\n     * @return The XY bar painter (never {@code null}).\n     *\n     * @see #setXYBarPainter(XYBarPainter)\n     */\n",
"org.jfree.chart.StandardChartTheme.setXYBarPainter": "/**\n     * Sets the XY bar painter.\n     *\n     * @param painter  the painter ({@code null} not permitted).\n     *\n     * @see #getXYBarPainter()\n     */\n",
"org.jfree.chart.StandardChartTheme.getThermometerPaint": "/**\n     * Returns the thermometer paint.\n     *\n     * @return The thermometer paint (never {@code null}).\n     *\n     * @see #setThermometerPaint(Paint)\n     */\n",
"org.jfree.chart.StandardChartTheme.setThermometerPaint": "/**\n     * Sets the thermometer paint.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getThermometerPaint()\n     */\n",
"org.jfree.chart.StandardChartTheme.getErrorIndicatorPaint": "/**\n     * Returns the error indicator paint.\n     *\n     * @return The error indicator paint (never {@code null}).\n     *\n     * @see #setErrorIndicatorPaint(Paint)\n     */\n",
"org.jfree.chart.StandardChartTheme.setErrorIndicatorPaint": "/**\n     * Sets the error indicator paint.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getErrorIndicatorPaint()\n     */\n",
"org.jfree.chart.StandardChartTheme.getGridBandPaint": "/**\n     * Returns the grid band paint.\n     *\n     * @return The grid band paint (never {@code null}).\n     *\n     * @see #setGridBandPaint(Paint)\n     */\n",
"org.jfree.chart.StandardChartTheme.setGridBandPaint": "/**\n     * Sets the grid band paint.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getGridBandPaint()\n     */\n",
"org.jfree.chart.StandardChartTheme.getGridBandAlternatePaint": "/**\n     * Returns the grid band alternate paint (used for a {@link SymbolAxis}).\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setGridBandAlternatePaint(Paint)\n     */\n",
"org.jfree.chart.StandardChartTheme.setGridBandAlternatePaint": "/**\n     * Sets the grid band alternate paint (used for a {@link SymbolAxis}).\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getGridBandAlternatePaint()\n     */\n",
"org.jfree.chart.StandardChartTheme.getName": "/**\n     * Returns the name of this theme.\n     *\n     * @return The name of this theme.\n     */\n",
"org.jfree.chart.StandardChartTheme.getDrawingSupplier": "/**\n     * Returns a clone of the drawing supplier for this theme.\n     *\n     * @return A clone of the drawing supplier.\n     */\n",
"org.jfree.chart.StandardChartTheme.setDrawingSupplier": "/**\n     * Sets the drawing supplier for this theme.\n     *\n     * @param supplier  the supplier ({@code null} not permitted).\n     *\n     * @see #getDrawingSupplier()\n     */\n",
"org.jfree.chart.StandardChartTheme.apply": "/**\n     * Applies this theme to the supplied chart.\n     *\n     * @param chart  the chart ({@code null} not permitted).\n     */\n",
"org.jfree.chart.StandardChartTheme.applyToTitle": "/**\n     * Applies the attributes of this theme to the specified title.\n     *\n     * @param title  the title.\n     */\n",
"org.jfree.chart.StandardChartTheme.applyToBlockContainer": "/**\n     * Applies the attributes of this theme to the specified container.\n     *\n     * @param bc  a block container ({@code null} not permitted).\n     */\n",
"org.jfree.chart.StandardChartTheme.applyToBlock": "/**\n     * Applies the attributes of this theme to the specified block.\n     *\n     * @param b  the block.\n     */\n",
"org.jfree.chart.StandardChartTheme.applyToPlot": "/**\n     * Applies the attributes of this theme to a plot.\n     *\n     * @param plot  the plot ({@code null}).\n     */\n",
"org.jfree.chart.StandardChartTheme.applyToPiePlot": "/**\n     * Applies the attributes of this theme to a {@link PiePlot} instance.\n     * This method also clears any set values for the section paint, outline\n     * etc, so that the theme's {@link DrawingSupplier} will be used.\n     *\n     * @param plot  the plot ({@code null} not permitted).\n     */\n",
"org.jfree.chart.StandardChartTheme.applyToMultiplePiePlot": "/**\n     * Applies the attributes of this theme to a {@link MultiplePiePlot}.\n     *\n     * @param plot  the plot ({@code null} not permitted).\n     */\n",
"org.jfree.chart.StandardChartTheme.applyToCategoryPlot": "/**\n     * Applies the attributes of this theme to a {@link CategoryPlot}.\n     *\n     * @param plot  the plot ({@code null} not permitted).\n     */\n",
"org.jfree.chart.StandardChartTheme.applyToXYPlot": "/**\n     * Applies the attributes of this theme to a {@link XYPlot}.\n     *\n     * @param plot  the plot ({@code null} not permitted).\n     */\n",
"org.jfree.chart.StandardChartTheme.applyToFastScatterPlot": "/**\n     * Applies the attributes of this theme to a {@link FastScatterPlot}.\n     * \n     * @param plot  the plot ({@code null} not permitted).\n     */\n",
"org.jfree.chart.StandardChartTheme.applyToPolarPlot": "/**\n     * Applies the attributes of this theme to a {@link PolarPlot}.  This\n     * method is called from the {@link #applyToPlot(Plot)} method.\n     *\n     * @param plot  the plot ({@code null} not permitted).\n     */\n",
"org.jfree.chart.StandardChartTheme.applyToSpiderWebPlot": "/**\n     * Applies the attributes of this theme to a {@link SpiderWebPlot}.\n     *\n     * @param plot  the plot ({@code null} not permitted).\n     */\n",
"org.jfree.chart.StandardChartTheme.applyToMeterPlot": "/**\n     * Applies the attributes of this theme to a {@link MeterPlot}.\n     *\n     * @param plot  the plot ({@code null} not permitted).\n     */\n",
"org.jfree.chart.StandardChartTheme.applyToThermometerPlot": "/**\n     * Applies the attributes for this theme to a {@link ThermometerPlot}.\n     * This method is called from the {@link #applyToPlot(Plot)} method.\n     *\n     * @param plot  the plot.\n     */\n",
"org.jfree.chart.StandardChartTheme.applyToCategoryAxis": "/**\n     * Applies the attributes for this theme to a {@link CategoryAxis}.\n     *\n     * @param axis  the axis ({@code null} not permitted).\n     */\n",
"org.jfree.chart.StandardChartTheme.applyToValueAxis": "/**\n     * Applies the attributes for this theme to a {@link ValueAxis}.\n     *\n     * @param axis  the axis ({@code null} not permitted).\n     */\n",
"org.jfree.chart.StandardChartTheme.applyToSymbolAxis": "/**\n     * Applies the attributes for this theme to a {@link SymbolAxis}.\n     *\n     * @param axis  the axis ({@code null} not permitted).\n     */\n",
"org.jfree.chart.StandardChartTheme.applyToPeriodAxis": "/**\n     * Applies the attributes for this theme to a {@link PeriodAxis}.\n     *\n     * @param axis  the axis ({@code null} not permitted).\n     */\n",
"org.jfree.chart.StandardChartTheme.applyToAbstractRenderer": "/**\n     * Applies the attributes for this theme to an {@link AbstractRenderer}.\n     *\n     * @param renderer  the renderer ({@code null} not permitted).\n     */\n",
"org.jfree.chart.StandardChartTheme.applyToCategoryItemRenderer": "/**\n     * Applies the settings of this theme to the specified renderer.\n     *\n     * @param renderer  the renderer ({@code null} not permitted).\n     */\n",
"org.jfree.chart.StandardChartTheme.applyToXYItemRenderer": "/**\n     * Applies the settings of this theme to the specified renderer.\n     *\n     * @param renderer  the renderer ({@code null} not permitted).\n     */\n",
"org.jfree.chart.StandardChartTheme.applyToXYAnnotation": "/**\n     * Applies the settings of this theme to the specified annotation.\n     *\n     * @param annotation  the annotation.\n     */\n",
"org.jfree.chart.StandardChartTheme.equals": "/**\n     * Tests this theme for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.StandardChartTheme.clone": "/**\n     * Returns a clone of this theme.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if the theme cannot be cloned.\n     */\n",
"org.jfree.chart.StandardChartTheme.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream ({@code null} not permitted).\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.StandardChartTheme.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream ({@code null} not permitted).\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.StrokeMap.getStroke": "/**\n     * Returns the stroke associated with the specified key, or\n     * {@code null}.\n     *\n     * @param key  the key ({@code null} not permitted).\n     *\n     * @return The stroke, or {@code null}.\n     *\n     * @throws IllegalArgumentException if {@code key} is\n     *     {@code null}.\n     */\n",
"org.jfree.chart.StrokeMap.containsKey": "/**\n     * Returns {@code true} if the map contains the specified key, and\n     * {@code false} otherwise.\n     *\n     * @param key  the key.\n     *\n     * @return {@code true} if the map contains the specified key, and\n     * {@code false} otherwise.\n     */\n",
"org.jfree.chart.StrokeMap.put": "/**\n     * Adds a mapping between the specified {@code key} and\n     * {@code stroke} values.\n     *\n     * @param key  the key ({@code null} not permitted).\n     * @param stroke  the stroke.\n     */\n",
"org.jfree.chart.StrokeMap.clear": "/**\n     * Resets the map to empty.\n     */\n",
"org.jfree.chart.StrokeMap.equals": "/**\n     * Tests this map for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.StrokeMap.clone": "/**\n     * Returns a clone of this {@code StrokeMap}.\n     *\n     * @return A clone of this instance.\n     *\n     * @throws CloneNotSupportedException if any key is not cloneable.\n     */\n",
"org.jfree.chart.StrokeMap.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.StrokeMap.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.MouseWheelHandler.getZoomFactor": "/**\n     * Returns the current zoom factor.  The default value is 0.10 (ten\n     * percent).\n     *\n     * @return The zoom factor.\n     *\n     * @see #setZoomFactor(double)\n     */\n",
"org.jfree.chart.MouseWheelHandler.setZoomFactor": "/**\n     * Sets the zoom factor.\n     *\n     * @param zoomFactor  the zoom factor.\n     *\n     * @see #getZoomFactor()\n     */\n",
"org.jfree.chart.MouseWheelHandler.mouseWheelMoved": "/**\n     * Handles a mouse wheel event from the underlying chart panel.\n     *\n     * @param e  the event.\n     */\n",
"org.jfree.chart.MouseWheelHandler.handleZoomable": "/**\n     * Handle the case where a plot implements the {@link Zoomable} interface.\n     *\n     * @param zoomable  the zoomable plot.\n     * @param e  the mouse wheel event.\n     */\n",
"org.jfree.chart.panel.Overlay.paintOverlay": "/**\n     * Paints the crosshairs in the layer.\n     *\n     * @param g2  the graphics target.\n     * @param chartPanel  the chart panel.\n     */\n",
"org.jfree.chart.panel.Overlay.addChangeListener": "/**\n     * Registers a change listener with the overlay.\n     * \n     * @param listener  the listener.\n     */\n",
"org.jfree.chart.panel.Overlay.removeChangeListener": "/**\n     * Deregisters a listener from the overlay.\n     * \n     * @param listener  the listener.\n     */\n",
"org.jfree.chart.panel.CrosshairOverlay.addDomainCrosshair": "/**\n     * Adds a crosshair against the domain axis (x-axis) and sends an\n     * {@link OverlayChangeEvent} to all registered listeners.\n     *\n     * @param crosshair  the crosshair ({@code null} not permitted).\n     *\n     * @see #removeDomainCrosshair(org.jfree.chart.plot.Crosshair)\n     * @see #addRangeCrosshair(org.jfree.chart.plot.Crosshair)\n     */\n",
"org.jfree.chart.panel.CrosshairOverlay.removeDomainCrosshair": "/**\n     * Removes a domain axis crosshair and sends an {@link OverlayChangeEvent}\n     * to all registered listeners.\n     *\n     * @param crosshair  the crosshair ({@code null} not permitted).\n     *\n     * @see #addDomainCrosshair(org.jfree.chart.plot.Crosshair)\n     */\n",
"org.jfree.chart.panel.CrosshairOverlay.clearDomainCrosshairs": "/**\n     * Clears all the domain crosshairs from the overlay and sends an\n     * {@link OverlayChangeEvent} to all registered listeners (unless there\n     * were no crosshairs to begin with).\n     */\n",
"org.jfree.chart.panel.CrosshairOverlay.getDomainCrosshairs": "/**\n     * Returns a new list containing the domain crosshairs for this overlay.\n     *\n     * @return A list of crosshairs.\n     */\n",
"org.jfree.chart.panel.CrosshairOverlay.addRangeCrosshair": "/**\n     * Adds a crosshair against the range axis and sends an\n     * {@link OverlayChangeEvent} to all registered listeners.\n     *\n     * @param crosshair  the crosshair ({@code null} not permitted).\n     */\n",
"org.jfree.chart.panel.CrosshairOverlay.removeRangeCrosshair": "/**\n     * Removes a range axis crosshair and sends an {@link OverlayChangeEvent}\n     * to all registered listeners.\n     *\n     * @param crosshair  the crosshair ({@code null} not permitted).\n     *\n     * @see #addRangeCrosshair(org.jfree.chart.plot.Crosshair)\n     */\n",
"org.jfree.chart.panel.CrosshairOverlay.clearRangeCrosshairs": "/**\n     * Clears all the range crosshairs from the overlay and sends an\n     * {@link OverlayChangeEvent} to all registered listeners (unless there\n     * were no crosshairs to begin with).\n     */\n",
"org.jfree.chart.panel.CrosshairOverlay.getRangeCrosshairs": "/**\n     * Returns a new list containing the range crosshairs for this overlay.\n     *\n     * @return A list of crosshairs.\n     */\n",
"org.jfree.chart.panel.CrosshairOverlay.propertyChange": "/**\n     * Receives a property change event (typically a change in one of the\n     * crosshairs).\n     *\n     * @param e  the event.\n     */\n",
"org.jfree.chart.panel.CrosshairOverlay.paintOverlay": "/**\n     * Renders the crosshairs in the overlay on top of the chart that has just\n     * been rendered in the specified {@code chartPanel}.  This method is\n     * called by the JFreeChart framework, you won't normally call it from\n     * user code.\n     *\n     * @param g2  the graphics target.\n     * @param chartPanel  the chart panel.\n     */\n",
"org.jfree.chart.panel.CrosshairOverlay.drawHorizontalCrosshair": "/**\n     * Draws a crosshair horizontally across the plot.\n     *\n     * @param g2  the graphics target.\n     * @param dataArea  the data area.\n     * @param y  the y-value in Java2D space.\n     * @param crosshair  the crosshair.\n     */\n",
"org.jfree.chart.panel.CrosshairOverlay.drawVerticalCrosshair": "/**\n     * Draws a crosshair vertically on the plot.\n     *\n     * @param g2  the graphics target.\n     * @param dataArea  the data area.\n     * @param x  the x-value in Java2D space.\n     * @param crosshair  the crosshair.\n     */\n",
"org.jfree.chart.panel.CrosshairOverlay.calculateLabelPoint": "/**\n     * Calculates the anchor point for a label.\n     *\n     * @param line  the line for the crosshair.\n     * @param anchor  the anchor point.\n     * @param deltaX  the x-offset.\n     * @param deltaY  the y-offset.\n     *\n     * @return The anchor point.\n     */\n",
"org.jfree.chart.panel.CrosshairOverlay.textAlignPtForLabelAnchorV": "/**\n     * Returns the text anchor that is used to align a label to its anchor \n     * point.\n     * \n     * @param anchor  the anchor.\n     * \n     * @return The text alignment point.\n     */\n",
"org.jfree.chart.panel.CrosshairOverlay.textAlignPtForLabelAnchorH": "/**\n     * Returns the text anchor that is used to align a label to its anchor\n     * point.\n     *\n     * @param anchor  the anchor.\n     *\n     * @return The text alignment point.\n     */\n",
"org.jfree.chart.panel.CrosshairOverlay.equals": "/**\n     * Tests this overlay for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.panel.CrosshairOverlay.clone": "/**\n     * Returns a clone of this instance.\n     *\n     * @return A clone of this instance.\n     *\n     * @throws java.lang.CloneNotSupportedException if there is some problem\n     *     with the cloning.\n     */\n",
"org.jfree.chart.panel.AbstractOverlay.addChangeListener": "/**\n     * Registers an object for notification of changes to the overlay.\n     *\n     * @param listener  the listener ({@code null} not permitted).\n     *\n     * @see #removeChangeListener(OverlayChangeListener)\n     */\n",
"org.jfree.chart.panel.AbstractOverlay.removeChangeListener": "/**\n     * Deregisters an object for notification of changes to the overlay.\n     *\n     * @param listener  the listener ({@code null} not permitted)\n     *\n     * @see #addChangeListener(OverlayChangeListener)\n     */\n",
"org.jfree.chart.panel.AbstractOverlay.fireOverlayChanged": "/**\n     * Sends a default {@link ChartChangeEvent} to all registered listeners.\n     * <P>\n     * This method is for convenience only.\n     */\n",
"org.jfree.chart.panel.AbstractOverlay.notifyListeners": "/**\n     * Sends a {@link ChartChangeEvent} to all registered listeners.\n     *\n     * @param event  information about the event that triggered the\n     *               notification.\n     */\n",
"org.jfree.chart.urls.StandardPieURLGenerator.generateURL": "/**\n     * Generates a URL.\n     *\n     * @param dataset  the dataset (ignored).\n     * @param key  the item key ({@code null} not permitted).\n     * @param pieIndex  the pie index.\n     *\n     * @return A string containing the generated URL.\n     */\n",
"org.jfree.chart.urls.StandardPieURLGenerator.equals": "/**\n     * Tests if this object is equal to another.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.urls.CustomCategoryURLGenerator.getListCount": "/**\n     * Returns the number of URL lists stored by the renderer.\n     *\n     * @return The list count.\n     */\n",
"org.jfree.chart.urls.CustomCategoryURLGenerator.getURLCount": "/**\n     * Returns the number of URLs in a given list.\n     *\n     * @param list  the list index (zero based).\n     *\n     * @return The URL count.\n     */\n",
"org.jfree.chart.urls.CustomCategoryURLGenerator.getURL": "/**\n     * Returns the URL for an item.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The URL (possibly {@code null}).\n     */\n",
"org.jfree.chart.urls.CustomCategoryURLGenerator.generateURL": "/**\n     * Generates a URL.\n     *\n     * @param dataset  the dataset (ignored in this implementation).\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return A string containing the URL (possibly {@code null}).\n     */\n",
"org.jfree.chart.urls.CustomCategoryURLGenerator.addURLSeries": "/**\n     * Adds a list of URLs.\n     *\n     * @param urls  the list of URLs ({@code null} permitted).\n     */\n",
"org.jfree.chart.urls.CustomCategoryURLGenerator.equals": "/**\n     * Tests if this object is equal to another.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.urls.CustomCategoryURLGenerator.clone": "/**\n     * Returns a new generator that is a copy of, and independent from, this\n     * generator.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem with cloning.\n     */\n",
"org.jfree.chart.urls.StandardXYZURLGenerator.generateURL": "/**\n     * Generates a URL for a particular item within a series.\n     *\n     * @param dataset  the dataset.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return A string containing the generated URL.\n     */\n",
"org.jfree.chart.urls.CategoryURLGenerator.generateURL": "/**\n     * Returns a URL for one item in a dataset. As a guideline, the URL\n     * should be valid within the context of an XHTML 1.0 document.  Classes\n     * that implement this interface are responsible for correctly escaping\n     * any text that is derived from the dataset, as this may be user-specified\n     * and could pose a security risk.\n     *\n     * @param dataset  the dataset.\n     * @param series  the series (zero-based index).\n     * @param category  the category.\n     *\n     * @return A string containing the URL.\n     */\n",
"org.jfree.chart.urls.XYURLGenerator.generateURL": "/**\n     * Generates a URL for a particular item within a series. As a guideline,\n     * the URL should be valid within the context of an XHTML 1.0 document.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return A string containing the generated URL (possibly\n     *         {@code null}).\n     */\n",
"org.jfree.chart.urls.CustomPieURLGenerator.generateURL": "/**\n     * Generates a URL fragment.\n     *\n     * @param dataset  the dataset (ignored).\n     * @param key  the item key.\n     * @param pieIndex  the pie index.\n     *\n     * @return A string containing the generated URL.\n     *\n     * @see #getURL(Comparable, int)\n     */\n",
"org.jfree.chart.urls.CustomPieURLGenerator.getListCount": "/**\n     * Returns the number of URL maps stored by the renderer.\n     *\n     * @return The list count.\n     *\n     * @see #addURLs(Map)\n     */\n",
"org.jfree.chart.urls.CustomPieURLGenerator.getURLCount": "/**\n     * Returns the number of URLs in a given map (specified by its position\n     * in the map list).\n     *\n     * @param list  the list index (zero based).\n     *\n     * @return The URL count.\n     *\n     * @see #getListCount()\n     */\n",
"org.jfree.chart.urls.CustomPieURLGenerator.getURL": "/**\n     * Returns the URL for a section in the specified map.\n     *\n     * @param key  the key.\n     * @param mapIndex  the map index.\n     *\n     * @return The URL.\n     */\n",
"org.jfree.chart.urls.CustomPieURLGenerator.addURLs": "/**\n     * Adds a map containing {@code (key, URL)} mappings where each\n     * {@code key} is an instance of {@code Comparable}\n     * (corresponding to the key for an item in a pie dataset) and each\n     * {@code URL} is a {@code String} representing a URL fragment.\n     * <br><br>\n     * The map is appended to an internal list...you can add multiple maps\n     * if you are working with, say, a {@link MultiplePiePlot}.\n     *\n     * @param urlMap  the URLs ({@code null} permitted).\n     */\n",
"org.jfree.chart.urls.CustomPieURLGenerator.equals": "/**\n     * Tests if this object is equal to another.\n     *\n     * @param o  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.urls.CustomPieURLGenerator.clone": "/**\n     * Returns a clone of the generator.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if cloning is not supported.\n     */\n",
"org.jfree.chart.urls.PieURLGenerator.generateURL": "/**\n     * Generates a URL for one item in a {@link PieDataset}. As a guideline,\n     * the URL should be valid within the context of an XHTML 1.0 document.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param key  the item key ({@code null} not permitted).\n     * @param pieIndex  the pie index (differentiates between pies in a\n     *                  'multi' pie chart).\n     *\n     * @return A string containing the URL.\n     */\n",
"org.jfree.chart.urls.StandardCategoryURLGenerator.generateURL": "/**\n     * Generates a URL for a particular item within a series.\n     *\n     * @param dataset  the dataset.\n     * @param series  the series index (zero-based).\n     * @param category  the category index (zero-based).\n     *\n     * @return The generated URL.\n     */\n",
"org.jfree.chart.urls.StandardCategoryURLGenerator.clone": "/**\n     * Returns an independent copy of the URL generator.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException not thrown by this class, but\n     *         subclasses (if any) might.\n     */\n",
"org.jfree.chart.urls.StandardCategoryURLGenerator.equals": "/**\n     * Tests the generator for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.urls.StandardCategoryURLGenerator.hashCode": "/**\n     * Returns a hash code.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.urls.URLUtilities.encode": "/**\n     * Calls {@code java.net.URLEncoder.encode(String, String)} via\n     * reflection, if we are running on JRE 1.4 or later, otherwise reverts to\n     * the deprecated {@code URLEncoder.encode(String)} method.\n     *\n     * @param s  the string to encode.\n     * @param encoding  the encoding.\n     *\n     * @return The encoded string.\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.chart.urls.TimeSeriesURLGenerator.getDateFormat": "/**\n     * Returns a clone of the date format assigned to this URL generator.\n     *\n     * @return The date format (never {@code null}).\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.chart.urls.TimeSeriesURLGenerator.getPrefix": "/**\n     * Returns the prefix string.\n     *\n     * @return The prefix string (never {@code null}).\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.chart.urls.TimeSeriesURLGenerator.getSeriesParameterName": "/**\n     * Returns the series parameter name.\n     *\n     * @return The series parameter name (never {@code null}).\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.chart.urls.TimeSeriesURLGenerator.getItemParameterName": "/**\n     * Returns the item parameter name.\n     *\n     * @return The item parameter name (never {@code null}).\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.chart.urls.TimeSeriesURLGenerator.generateURL": "/**\n     * Generates a URL for a particular item within a series.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series number (zero-based index).\n     * @param item  the item number (zero-based index).\n     *\n     * @return The generated URL.\n     */\n",
"org.jfree.chart.urls.TimeSeriesURLGenerator.equals": "/**\n     * Tests this generator for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.urls.CustomXYURLGenerator.getListCount": "/**\n     * Returns the number of URL lists stored by the renderer.\n     *\n     * @return The list count.\n     */\n",
"org.jfree.chart.urls.CustomXYURLGenerator.getURLCount": "/**\n     * Returns the number of URLs in a given list.\n     *\n     * @param list  the list index (zero based).\n     *\n     * @return The URL count.\n     */\n",
"org.jfree.chart.urls.CustomXYURLGenerator.getURL": "/**\n     * Returns the URL for an item.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The URL (possibly {@code null}).\n     */\n",
"org.jfree.chart.urls.CustomXYURLGenerator.generateURL": "/**\n     * Generates a URL.\n     *\n     * @param dataset  the dataset.\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return A string containing the URL (possibly {@code null}).\n     */\n",
"org.jfree.chart.urls.CustomXYURLGenerator.addURLSeries": "/**\n     * Adds a list of URLs.\n     *\n     * @param urls  the list of URLs ({@code null} permitted, the list\n     *     is copied).\n     */\n",
"org.jfree.chart.urls.CustomXYURLGenerator.equals": "/**\n     * Tests this generator for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.urls.CustomXYURLGenerator.clone": "/**\n     * Returns a new generator that is a copy of, and independent from, this\n     * generator.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem with cloning.\n     */\n",
"org.jfree.chart.urls.StandardXYURLGenerator.generateURL": "/**\n     * Generates a URL for a particular item within a series.\n     *\n     * @param dataset  the dataset.\n     * @param series  the series number (zero-based index).\n     * @param item  the item number (zero-based index).\n     *\n     * @return The generated URL.\n     */\n",
"org.jfree.chart.urls.StandardXYURLGenerator.equals": "/**\n     * Tests this generator for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.urls.XYZURLGenerator.generateURL": "/**\n     * Generates a URL for a particular item within a series. As a guideline,\n     * the URL should be valid within the context of an XHTML 1.0 document.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return A string containing the generated URL.\n     */\n",
"org.jfree.chart.annotations.XYImageAnnotation.getX": "/**\n     * Returns the x-coordinate (in data space) for the annotation.\n     *\n     * @return The x-coordinate.\n     *\n     * @since 1.0.4\n     */\n",
"org.jfree.chart.annotations.XYImageAnnotation.getY": "/**\n     * Returns the y-coordinate (in data space) for the annotation.\n     *\n     * @return The y-coordinate.\n     *\n     * @since 1.0.4\n     */\n",
"org.jfree.chart.annotations.XYImageAnnotation.getImage": "/**\n     * Returns the image for the annotation.\n     *\n     * @return The image.\n     *\n     * @since 1.0.4\n     */\n",
"org.jfree.chart.annotations.XYImageAnnotation.getImageAnchor": "/**\n     * Returns the image anchor for the annotation.\n     *\n     * @return The image anchor.\n     *\n     * @since 1.0.4\n     */\n",
"org.jfree.chart.annotations.XYImageAnnotation.draw": "/**\n     * Draws the annotation.  This method is called by the drawing code in the\n     * {@link XYPlot} class, you don't normally need to call this method\n     * directly.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param rendererIndex  the renderer index.\n     * @param info  if supplied, this info object will be populated with\n     *              entity information.\n     */\n",
"org.jfree.chart.annotations.XYImageAnnotation.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.annotations.XYImageAnnotation.hashCode": "/**\n     * Returns a hash code for this object.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.annotations.XYImageAnnotation.clone": "/**\n     * Returns a clone of the annotation.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the annotation can't be cloned.\n     */\n",
"org.jfree.chart.annotations.XYImageAnnotation.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.annotations.XYImageAnnotation.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.annotations.XYBoxAnnotation.draw": "/**\n     * Draws the annotation.  This method is usually called by the\n     * {@link XYPlot} class, you shouldn't need to call it directly.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param rendererIndex  the renderer index.\n     * @param info  the plot rendering info.\n     */\n",
"org.jfree.chart.annotations.XYBoxAnnotation.equals": "/**\n     * Tests this annotation for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.annotations.XYBoxAnnotation.hashCode": "/**\n     * Returns a hash code.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.annotations.XYBoxAnnotation.clone": "/**\n     * Returns a clone.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException not thrown by this class, but may be\n     *                                    by subclasses.\n     */\n",
"org.jfree.chart.annotations.XYBoxAnnotation.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream ({@code null} not permitted).\n     *\n     * @throws IOException if there is an I/O error.\n     */\n",
"org.jfree.chart.annotations.XYBoxAnnotation.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream ({@code null} not permitted).\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.annotations.CategoryAnnotation.draw": "/**\n     * Draws the annotation.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     */\n",
"org.jfree.chart.annotations.XYPointerAnnotation.getAngle": "/**\n     * Returns the angle of the arrow.\n     *\n     * @return The angle (in radians).\n     *\n     * @see #setAngle(double)\n     */\n",
"org.jfree.chart.annotations.XYPointerAnnotation.setAngle": "/**\n     * Sets the angle of the arrow and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param angle  the angle (in radians).\n     *\n     * @see #getAngle()\n     */\n",
"org.jfree.chart.annotations.XYPointerAnnotation.getTipRadius": "/**\n     * Returns the tip radius.\n     *\n     * @return The tip radius (in Java2D units).\n     *\n     * @see #setTipRadius(double)\n     */\n",
"org.jfree.chart.annotations.XYPointerAnnotation.setTipRadius": "/**\n     * Sets the tip radius and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param radius  the radius (in Java2D units).\n     *\n     * @see #getTipRadius()\n     */\n",
"org.jfree.chart.annotations.XYPointerAnnotation.getBaseRadius": "/**\n     * Returns the base radius.\n     *\n     * @return The base radius (in Java2D units).\n     *\n     * @see #setBaseRadius(double)\n     */\n",
"org.jfree.chart.annotations.XYPointerAnnotation.setBaseRadius": "/**\n     * Sets the base radius and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param radius  the radius (in Java2D units).\n     *\n     * @see #getBaseRadius()\n     */\n",
"org.jfree.chart.annotations.XYPointerAnnotation.getLabelOffset": "/**\n     * Returns the label offset.\n     *\n     * @return The label offset (in Java2D units).\n     *\n     * @see #setLabelOffset(double)\n     */\n",
"org.jfree.chart.annotations.XYPointerAnnotation.setLabelOffset": "/**\n     * Sets the label offset (from the arrow base, continuing in a straight\n     * line, in Java2D units) and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param offset  the offset (in Java2D units).\n     *\n     * @see #getLabelOffset()\n     */\n",
"org.jfree.chart.annotations.XYPointerAnnotation.getArrowLength": "/**\n     * Returns the arrow length.\n     *\n     * @return The arrow length.\n     *\n     * @see #setArrowLength(double)\n     */\n",
"org.jfree.chart.annotations.XYPointerAnnotation.setArrowLength": "/**\n     * Sets the arrow length and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param length  the length.\n     *\n     * @see #getArrowLength()\n     */\n",
"org.jfree.chart.annotations.XYPointerAnnotation.getArrowWidth": "/**\n     * Returns the arrow width.\n     *\n     * @return The arrow width (in Java2D units).\n     *\n     * @see #setArrowWidth(double)\n     */\n",
"org.jfree.chart.annotations.XYPointerAnnotation.setArrowWidth": "/**\n     * Sets the arrow width and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param width  the width (in Java2D units).\n     *\n     * @see #getArrowWidth()\n     */\n",
"org.jfree.chart.annotations.XYPointerAnnotation.getArrowStroke": "/**\n     * Returns the stroke used to draw the arrow line.\n     *\n     * @return The arrow stroke (never {@code null}).\n     *\n     * @see #setArrowStroke(Stroke)\n     */\n",
"org.jfree.chart.annotations.XYPointerAnnotation.setArrowStroke": "/**\n     * Sets the stroke used to draw the arrow line and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getArrowStroke()\n     */\n",
"org.jfree.chart.annotations.XYPointerAnnotation.getArrowPaint": "/**\n     * Returns the paint used for the arrow.\n     *\n     * @return The arrow paint (never {@code null}).\n     *\n     * @see #setArrowPaint(Paint)\n     */\n",
"org.jfree.chart.annotations.XYPointerAnnotation.setArrowPaint": "/**\n     * Sets the paint used for the arrow and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param paint  the arrow paint ({@code null} not permitted).\n     *\n     * @see #getArrowPaint()\n     */\n",
"org.jfree.chart.annotations.XYPointerAnnotation.draw": "/**\n     * Draws the annotation.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param rendererIndex  the renderer index.\n     * @param info  the plot rendering info.\n     */\n",
"org.jfree.chart.annotations.XYPointerAnnotation.equals": "/**\n     * Tests this annotation for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.annotations.XYPointerAnnotation.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.annotations.XYPointerAnnotation.clone": "/**\n     * Returns a clone of the annotation.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the annotation can't be cloned.\n     */\n",
"org.jfree.chart.annotations.XYPointerAnnotation.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException if there is an I/O error.\n     */\n",
"org.jfree.chart.annotations.XYPointerAnnotation.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.annotations.XYShapeAnnotation.draw": "/**\n     * Draws the annotation.  This method is usually called by the\n     * {@link XYPlot} class, you shouldn't need to call it directly.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param rendererIndex  the renderer index.\n     * @param info  the plot rendering info.\n     */\n",
"org.jfree.chart.annotations.XYShapeAnnotation.equals": "/**\n     * Tests this annotation for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.annotations.XYShapeAnnotation.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.annotations.XYShapeAnnotation.clone": "/**\n     * Returns a clone.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException ???.\n     */\n",
"org.jfree.chart.annotations.XYShapeAnnotation.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException if there is an I/O error.\n     */\n",
"org.jfree.chart.annotations.XYShapeAnnotation.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.annotations.CategoryLineAnnotation.getCategory1": "/**\n     * Returns the category for the start of the line.\n     *\n     * @return The category for the start of the line (never {@code null}).\n     *\n     * @see #setCategory1(Comparable)\n     */\n",
"org.jfree.chart.annotations.CategoryLineAnnotation.setCategory1": "/**\n     * Sets the category for the start of the line and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param category  the category ({@code null} not permitted).\n     *\n     * @see #getCategory1()\n     */\n",
"org.jfree.chart.annotations.CategoryLineAnnotation.getValue1": "/**\n     * Returns the y-value for the start of the line.\n     *\n     * @return The y-value for the start of the line.\n     *\n     * @see #setValue1(double)\n     */\n",
"org.jfree.chart.annotations.CategoryLineAnnotation.setValue1": "/**\n     * Sets the y-value for the start of the line and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param value  the value.\n     *\n     * @see #getValue1()\n     */\n",
"org.jfree.chart.annotations.CategoryLineAnnotation.getCategory2": "/**\n     * Returns the category for the end of the line.\n     *\n     * @return The category for the end of the line (never {@code null}).\n     *\n     * @see #setCategory2(Comparable)\n     */\n",
"org.jfree.chart.annotations.CategoryLineAnnotation.setCategory2": "/**\n     * Sets the category for the end of the line and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param category  the category ({@code null} not permitted).\n     *\n     * @see #getCategory2()\n     */\n",
"org.jfree.chart.annotations.CategoryLineAnnotation.getValue2": "/**\n     * Returns the y-value for the end of the line.\n     *\n     * @return The y-value for the end of the line.\n     *\n     * @see #setValue2(double)\n     */\n",
"org.jfree.chart.annotations.CategoryLineAnnotation.setValue2": "/**\n     * Sets the y-value for the end of the line and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param value  the value.\n     *\n     * @see #getValue2()\n     */\n",
"org.jfree.chart.annotations.CategoryLineAnnotation.getPaint": "/**\n     * Returns the paint used to draw the connecting line.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setPaint(Paint)\n     */\n",
"org.jfree.chart.annotations.CategoryLineAnnotation.setPaint": "/**\n     * Sets the paint used to draw the connecting line and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getPaint()\n     */\n",
"org.jfree.chart.annotations.CategoryLineAnnotation.getStroke": "/**\n     * Returns the stroke used to draw the connecting line.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setStroke(Stroke)\n     */\n",
"org.jfree.chart.annotations.CategoryLineAnnotation.setStroke": "/**\n     * Sets the stroke used to draw the connecting line and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getStroke()\n     */\n",
"org.jfree.chart.annotations.CategoryLineAnnotation.draw": "/**\n     * Draws the annotation.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     */\n",
"org.jfree.chart.annotations.CategoryLineAnnotation.equals": "/**\n     * Tests this object for equality with another.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.annotations.CategoryLineAnnotation.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.annotations.CategoryLineAnnotation.clone": "/**\n     * Returns a clone of the annotation.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  this class will not throw this\n     *         exception, but subclasses (if any) might.\n     */\n",
"org.jfree.chart.annotations.CategoryLineAnnotation.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException if there is an I/O error.\n     */\n",
"org.jfree.chart.annotations.CategoryLineAnnotation.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.annotations.XYTitleAnnotation.getCoordinateType": "/**\n     * Returns the coordinate type (set in the constructor).\n     *\n     * @return The coordinate type (never {@code null}).\n     */\n",
"org.jfree.chart.annotations.XYTitleAnnotation.getX": "/**\n     * Returns the x-coordinate for the annotation.\n     *\n     * @return The x-coordinate.\n     */\n",
"org.jfree.chart.annotations.XYTitleAnnotation.getY": "/**\n     * Returns the y-coordinate for the annotation.\n     *\n     * @return The y-coordinate.\n     */\n",
"org.jfree.chart.annotations.XYTitleAnnotation.getTitle": "/**\n     * Returns the title for the annotation.\n     *\n     * @return The title.\n     */\n",
"org.jfree.chart.annotations.XYTitleAnnotation.getTitleAnchor": "/**\n     * Returns the title anchor for the annotation.\n     *\n     * @return The title anchor.\n     */\n",
"org.jfree.chart.annotations.XYTitleAnnotation.getMaxWidth": "/**\n     * Returns the maximum width.\n     *\n     * @return The maximum width.\n     */\n",
"org.jfree.chart.annotations.XYTitleAnnotation.setMaxWidth": "/**\n     * Sets the maximum width and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param max  the maximum width (0.0 or less means no maximum).\n     */\n",
"org.jfree.chart.annotations.XYTitleAnnotation.getMaxHeight": "/**\n     * Returns the maximum height.\n     *\n     * @return The maximum height.\n     */\n",
"org.jfree.chart.annotations.XYTitleAnnotation.setMaxHeight": "/**\n     * Sets the maximum height and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param max  the maximum height.\n     */\n",
"org.jfree.chart.annotations.XYTitleAnnotation.draw": "/**\n     * Draws the annotation.  This method is called by the drawing code in the\n     * {@link XYPlot} class, you don't normally need to call this method\n     * directly.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param rendererIndex  the renderer index.\n     * @param info  if supplied, this info object will be populated with\n     *              entity information.\n     */\n",
"org.jfree.chart.annotations.XYTitleAnnotation.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.annotations.XYTitleAnnotation.hashCode": "/**\n     * Returns a hash code for this object.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.annotations.XYTitleAnnotation.clone": "/**\n     * Returns a clone of the annotation.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the annotation can't be cloned.\n     */\n",
"org.jfree.chart.annotations.CategoryPointerAnnotation.getAngle": "/**\n     * Returns the angle of the arrow.\n     *\n     * @return The angle (in radians).\n     *\n     * @see #setAngle(double)\n     */\n",
"org.jfree.chart.annotations.CategoryPointerAnnotation.setAngle": "/**\n     * Sets the angle of the arrow and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param angle  the angle (in radians).\n     *\n     * @see #getAngle()\n     */\n",
"org.jfree.chart.annotations.CategoryPointerAnnotation.getTipRadius": "/**\n     * Returns the tip radius.\n     *\n     * @return The tip radius (in Java2D units).\n     *\n     * @see #setTipRadius(double)\n     */\n",
"org.jfree.chart.annotations.CategoryPointerAnnotation.setTipRadius": "/**\n     * Sets the tip radius and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param radius  the radius (in Java2D units).\n     *\n     * @see #getTipRadius()\n     */\n",
"org.jfree.chart.annotations.CategoryPointerAnnotation.getBaseRadius": "/**\n     * Returns the base radius.\n     *\n     * @return The base radius (in Java2D units).\n     *\n     * @see #setBaseRadius(double)\n     */\n",
"org.jfree.chart.annotations.CategoryPointerAnnotation.setBaseRadius": "/**\n     * Sets the base radius and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param radius  the radius (in Java2D units).\n     *\n     * @see #getBaseRadius()\n     */\n",
"org.jfree.chart.annotations.CategoryPointerAnnotation.getLabelOffset": "/**\n     * Returns the label offset.\n     *\n     * @return The label offset (in Java2D units).\n     *\n     * @see #setLabelOffset(double)\n     */\n",
"org.jfree.chart.annotations.CategoryPointerAnnotation.setLabelOffset": "/**\n     * Sets the label offset (from the arrow base, continuing in a straight\n     * line, in Java2D units) and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param offset  the offset (in Java2D units).\n     *\n     * @see #getLabelOffset()\n     */\n",
"org.jfree.chart.annotations.CategoryPointerAnnotation.getArrowLength": "/**\n     * Returns the arrow length.\n     *\n     * @return The arrow length.\n     *\n     * @see #setArrowLength(double)\n     */\n",
"org.jfree.chart.annotations.CategoryPointerAnnotation.setArrowLength": "/**\n     * Sets the arrow length and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param length  the length.\n     *\n     * @see #getArrowLength()\n     */\n",
"org.jfree.chart.annotations.CategoryPointerAnnotation.getArrowWidth": "/**\n     * Returns the arrow width.\n     *\n     * @return The arrow width (in Java2D units).\n     *\n     * @see #setArrowWidth(double)\n     */\n",
"org.jfree.chart.annotations.CategoryPointerAnnotation.setArrowWidth": "/**\n     * Sets the arrow width and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param width  the width (in Java2D units).\n     *\n     * @see #getArrowWidth()\n     */\n",
"org.jfree.chart.annotations.CategoryPointerAnnotation.getArrowStroke": "/**\n     * Returns the stroke used to draw the arrow line.\n     *\n     * @return The arrow stroke (never {@code null}).\n     *\n     * @see #setArrowStroke(Stroke)\n     */\n",
"org.jfree.chart.annotations.CategoryPointerAnnotation.setArrowStroke": "/**\n     * Sets the stroke used to draw the arrow line and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getArrowStroke()\n     */\n",
"org.jfree.chart.annotations.CategoryPointerAnnotation.getArrowPaint": "/**\n     * Returns the paint used for the arrow.\n     *\n     * @return The arrow paint (never {@code null}).\n     *\n     * @see #setArrowPaint(Paint)\n     */\n",
"org.jfree.chart.annotations.CategoryPointerAnnotation.setArrowPaint": "/**\n     * Sets the paint used for the arrow and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param paint  the arrow paint ({@code null} not permitted).\n     *\n     * @see #getArrowPaint()\n     */\n",
"org.jfree.chart.annotations.CategoryPointerAnnotation.draw": "/**\n     * Draws the annotation.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     */\n",
"org.jfree.chart.annotations.CategoryPointerAnnotation.equals": "/**\n     * Tests this annotation for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.annotations.CategoryPointerAnnotation.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.annotations.CategoryPointerAnnotation.clone": "/**\n     * Returns a clone of the annotation.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the annotation can't be cloned.\n     */\n",
"org.jfree.chart.annotations.CategoryPointerAnnotation.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException if there is an I/O error.\n     */\n",
"org.jfree.chart.annotations.CategoryPointerAnnotation.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.annotations.XYAnnotationBoundsInfo.getIncludeInDataBounds": "/**\n     * Returns a flag that determines whether or not the annotation's\n     * bounds should be taken into account for auto-range calculations on\n     * the axes that the annotation is plotted against.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.annotations.XYAnnotationBoundsInfo.getXRange": "/**\n     * Returns the range of x-values (in data space) that the annotation\n     * uses.\n     *\n     * @return The x-range.\n     */\n",
"org.jfree.chart.annotations.XYAnnotationBoundsInfo.getYRange": "/**\n     * Returns the range of y-values (in data space) that the annotation\n     * uses.\n     *\n     * @return The y-range.\n     */\n",
"org.jfree.chart.annotations.AbstractAnnotation.addChangeListener": "/**\n     * Registers an object to receive notification of changes to the\n     * annotation.\n     *\n     * @param listener  the object to register.\n     *\n     * @see #removeChangeListener(AnnotationChangeListener)\n     */\n",
"org.jfree.chart.annotations.AbstractAnnotation.removeChangeListener": "/**\n     * Deregisters an object so that it no longer receives notification of\n     * changes to the annotation.\n     *\n     * @param listener  the object to deregister.\n     *\n     * @see #addChangeListener(AnnotationChangeListener)\n     */\n",
"org.jfree.chart.annotations.AbstractAnnotation.hasListener": "/**\n     * Returns {@code true} if the specified object is registered with\n     * the annotation as a listener.  Most applications won't need to call this\n     * method, it exists mainly for use by unit testing code.\n     *\n     * @param listener  the listener.\n     *\n     * @return A boolean.\n     *\n     * @see #addChangeListener(AnnotationChangeListener)\n     * @see #removeChangeListener(AnnotationChangeListener)\n     */\n",
"org.jfree.chart.annotations.AbstractAnnotation.fireAnnotationChanged": "/**\n     * Notifies all registered listeners that the annotation has changed.\n     *\n     * @see #addChangeListener(AnnotationChangeListener)\n     */\n",
"org.jfree.chart.annotations.AbstractAnnotation.notifyListeners": "/**\n     * Notifies all registered listeners that the annotation has changed.\n     *\n     * @param event  contains information about the event that triggered the\n     *               notification.\n     *\n     * @see #addChangeListener(AnnotationChangeListener)\n     * @see #removeChangeListener(AnnotationChangeListener)\n     */\n",
"org.jfree.chart.annotations.AbstractAnnotation.getNotify": "/**\n     * Returns a flag that indicates whether listeners should be \n     * notified about changes to the annotation.\n     *\n     * @return  the flag.\n     *\n     * @see #setNotify(boolean)\n     */\n",
"org.jfree.chart.annotations.AbstractAnnotation.setNotify": "/**\n     * Sets a flag that indicates whether listeners should be notified about\n     * changes of an annotation.\n     *\n     * @param flag  the flag\n     *\n     * @see #getNotify()\n     */\n",
"org.jfree.chart.annotations.AbstractAnnotation.clone": "/**\n     * Returns a clone of the annotation. The cloned annotation will NOT \n     * include the {@link AnnotationChangeListener} references that have been\n     * registered with this annotation.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the annotation does not support\n     *                                     cloning.\n     */\n",
"org.jfree.chart.annotations.AbstractAnnotation.writeObject": "/**\n     * Handles serialization.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException if there is an I/O problem.\n     */\n",
"org.jfree.chart.annotations.AbstractAnnotation.readObject": "/**\n     * Restores a serialized object.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException if there is an I/O problem.\n     * @throws ClassNotFoundException if there is a problem loading a class.\n     */\n",
"org.jfree.chart.annotations.XYDataImageAnnotation.getImage": "/**\n     * Returns the image for the annotation.\n     *\n     * @return The image.\n     */\n",
"org.jfree.chart.annotations.XYDataImageAnnotation.getX": "/**\n     * Returns the x-coordinate (in data space) for the annotation.\n     *\n     * @return The x-coordinate.\n     */\n",
"org.jfree.chart.annotations.XYDataImageAnnotation.getY": "/**\n     * Returns the y-coordinate (in data space) for the annotation.\n     *\n     * @return The y-coordinate.\n     */\n",
"org.jfree.chart.annotations.XYDataImageAnnotation.getWidth": "/**\n     * Returns the width (in data space) of the data rectangle into which the\n     * image will be drawn.\n     *\n     * @return The width.\n     */\n",
"org.jfree.chart.annotations.XYDataImageAnnotation.getHeight": "/**\n     * Returns the height (in data space) of the data rectangle into which the\n     * image will be drawn.\n     *\n     * @return The height.\n     */\n",
"org.jfree.chart.annotations.XYDataImageAnnotation.getIncludeInDataBounds": "/**\n     * Returns the flag that controls whether or not the annotation should\n     * contribute to the autoRange for the axis it is plotted against.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.annotations.XYDataImageAnnotation.getXRange": "/**\n     * Returns the x-range for the annotation.\n     *\n     * @return The range.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.annotations.XYDataImageAnnotation.getYRange": "/**\n     * Returns the y-range for the annotation.\n     *\n     * @return The range.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.annotations.XYDataImageAnnotation.draw": "/**\n     * Draws the annotation.  This method is called by the drawing code in the\n     * {@link XYPlot} class, you don't normally need to call this method\n     * directly.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param rendererIndex  the renderer index.\n     * @param info  if supplied, this info object will be populated with\n     *              entity information.\n     */\n",
"org.jfree.chart.annotations.XYDataImageAnnotation.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.annotations.XYDataImageAnnotation.hashCode": "/**\n     * Returns a hash code for this object.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.annotations.XYDataImageAnnotation.clone": "/**\n     * Returns a clone of the annotation.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the annotation can't be cloned.\n     */\n",
"org.jfree.chart.annotations.XYDataImageAnnotation.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.annotations.XYDataImageAnnotation.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.annotations.XYDrawableAnnotation.draw": "/**\n     * Draws the annotation.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param rendererIndex  the renderer index.\n     * @param info  if supplied, this info object will be populated with\n     *              entity information.\n     */\n",
"org.jfree.chart.annotations.XYDrawableAnnotation.equals": "/**\n     * Tests this annotation for equality with an arbitrary object.\n     *\n     * @param obj  the object to test against.\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.annotations.XYDrawableAnnotation.hashCode": "/**\n     * Returns a hash code.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.annotations.XYDrawableAnnotation.clone": "/**\n     * Returns a clone of the annotation.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the annotation can't be cloned.\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.getText": "/**\n     * Returns the text for the annotation.\n     *\n     * @return The text (never {@code null}).\n     *\n     * @see #setText(String)\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.setText": "/**\n     * Sets the text for the annotation.\n     *\n     * @param text  the text ({@code null} not permitted).\n     *\n     * @see #getText()\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.getFont": "/**\n     * Returns the font for the annotation.\n     *\n     * @return The font (never {@code null}).\n     *\n     * @see #setFont(Font)\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.setFont": "/**\n     * Sets the font for the annotation and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param font  the font ({@code null} not permitted).\n     *\n     * @see #getFont()\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.getPaint": "/**\n     * Returns the paint for the annotation.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setPaint(Paint)\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.setPaint": "/**\n     * Sets the paint for the annotation and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getPaint()\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.getTextAnchor": "/**\n     * Returns the text anchor.\n     *\n     * @return The text anchor (never {@code null}).\n     *\n     * @see #setTextAnchor(TextAnchor)\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.setTextAnchor": "/**\n     * Sets the text anchor (the point on the text bounding rectangle that is\n     * aligned to the (x, y) coordinate of the annotation) and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param anchor  the anchor point ({@code null} not permitted).\n     *\n     * @see #getTextAnchor()\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.getRotationAnchor": "/**\n     * Returns the rotation anchor.\n     *\n     * @return The rotation anchor point (never {@code null}).\n     *\n     * @see #setRotationAnchor(TextAnchor)\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.setRotationAnchor": "/**\n     * Sets the rotation anchor point and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param anchor  the anchor ({@code null} not permitted).\n     *\n     * @see #getRotationAnchor()\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.getRotationAngle": "/**\n     * Returns the rotation angle.\n     *\n     * @return The rotation angle.\n     *\n     * @see #setRotationAngle(double)\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.setRotationAngle": "/**\n     * Sets the rotation angle and sends an {@link AnnotationChangeEvent} to\n     * all registered listeners.  The angle is measured clockwise in radians.\n     *\n     * @param angle  the angle (in radians).\n     *\n     * @see #getRotationAngle()\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.getX": "/**\n     * Returns the x coordinate for the text anchor point (measured against the\n     * domain axis).\n     *\n     * @return The x coordinate (in data space).\n     *\n     * @see #setX(double)\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.setX": "/**\n     * Sets the x coordinate for the text anchor point (measured against the\n     * domain axis) and sends an {@link AnnotationChangeEvent} to all\n     * registered listeners.\n     *\n     * @param x  the x coordinate (in data space).\n     *\n     * @see #getX()\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.getY": "/**\n     * Returns the y coordinate for the text anchor point (measured against the\n     * range axis).\n     *\n     * @return The y coordinate (in data space).\n     *\n     * @see #setY(double)\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.setY": "/**\n     * Sets the y coordinate for the text anchor point (measured against the\n     * range axis) and sends an {@link AnnotationChangeEvent} to all registered\n     * listeners.\n     *\n     * @param y  the y coordinate.\n     *\n     * @see #getY()\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.getBackgroundPaint": "/**\n     * Returns the background paint for the annotation.\n     *\n     * @return The background paint (possibly {@code null}).\n     *\n     * @see #setBackgroundPaint(Paint)\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.setBackgroundPaint": "/**\n     * Sets the background paint for the annotation and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getBackgroundPaint()\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.getOutlinePaint": "/**\n     * Returns the outline paint for the annotation.\n     *\n     * @return The outline paint (never {@code null}).\n     *\n     * @see #setOutlinePaint(Paint)\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.setOutlinePaint": "/**\n     * Sets the outline paint for the annotation and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getOutlinePaint()\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.getOutlineStroke": "/**\n     * Returns the outline stroke for the annotation.\n     *\n     * @return The outline stroke (never {@code null}).\n     *\n     * @see #setOutlineStroke(Stroke)\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.setOutlineStroke": "/**\n     * Sets the outline stroke for the annotation and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getOutlineStroke()\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.isOutlineVisible": "/**\n     * Returns the flag that controls whether or not the outline is drawn.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.setOutlineVisible": "/**\n     * Sets the flag that controls whether or not the outline is drawn and\n     * sends an {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param visible  the new flag value.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.draw": "/**\n     * Draws the annotation.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param rendererIndex  the renderer index.\n     * @param info  an optional info object that will be populated with\n     *              entity information.\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.equals": "/**\n     * Tests this annotation for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.hashCode": "/**\n     * Returns a hash code for the object.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.clone": "/**\n     * Returns a clone of the annotation.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the annotation can't be cloned.\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.annotations.XYTextAnnotation.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.annotations.TextAnnotation.getText": "/**\n     * Returns the text for the annotation.\n     *\n     * @return The text (never {@code null}).\n     *\n     * @see #setText(String)\n     */\n",
"org.jfree.chart.annotations.TextAnnotation.setText": "/**\n     * Sets the text for the annotation and sends an \n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param text  the text ({@code null} not permitted).\n     *\n     * @see #getText()\n     */\n",
"org.jfree.chart.annotations.TextAnnotation.getFont": "/**\n     * Returns the font for the annotation.\n     *\n     * @return The font (never {@code null}).\n     *\n     * @see #setFont(Font)\n     */\n",
"org.jfree.chart.annotations.TextAnnotation.setFont": "/**\n     * Sets the font for the annotation and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param font  the font ({@code null} not permitted).\n     *\n     * @see #getFont()\n     */\n",
"org.jfree.chart.annotations.TextAnnotation.getPaint": "/**\n     * Returns the paint for the annotation.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setPaint(Paint)\n     */\n",
"org.jfree.chart.annotations.TextAnnotation.setPaint": "/**\n     * Sets the paint for the annotation and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getPaint()\n     */\n",
"org.jfree.chart.annotations.TextAnnotation.getTextAnchor": "/**\n     * Returns the text anchor.\n     *\n     * @return The text anchor.\n     *\n     * @see #setTextAnchor(TextAnchor)\n     */\n",
"org.jfree.chart.annotations.TextAnnotation.setTextAnchor": "/**\n     * Sets the text anchor (the point on the text bounding rectangle that is\n     * aligned to the (x, y) coordinate of the annotation) and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param anchor  the anchor point ({@code null} not permitted).\n     *\n     * @see #getTextAnchor()\n     */\n",
"org.jfree.chart.annotations.TextAnnotation.getRotationAnchor": "/**\n     * Returns the rotation anchor.\n     *\n     * @return The rotation anchor point (never {@code null}).\n     *\n     * @see #setRotationAnchor(TextAnchor)\n     */\n",
"org.jfree.chart.annotations.TextAnnotation.setRotationAnchor": "/**\n     * Sets the rotation anchor point and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param anchor  the anchor ({@code null} not permitted).\n     *\n     * @see #getRotationAnchor()\n     */\n",
"org.jfree.chart.annotations.TextAnnotation.getRotationAngle": "/**\n     * Returns the rotation angle in radians.\n     *\n     * @return The rotation angle.\n     *\n     * @see #setRotationAngle(double)\n     */\n",
"org.jfree.chart.annotations.TextAnnotation.setRotationAngle": "/**\n     * Sets the rotation angle and sends an {@link AnnotationChangeEvent} to\n     * all registered listeners.  The angle is measured clockwise in radians.\n     *\n     * @param angle  the angle (in radians).\n     *\n     * @see #getRotationAngle()\n     */\n",
"org.jfree.chart.annotations.TextAnnotation.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.annotations.TextAnnotation.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.annotations.TextAnnotation.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException if there is an I/O error.\n     */\n",
"org.jfree.chart.annotations.TextAnnotation.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.annotations.AbstractXYAnnotation.getToolTipText": "/**\n     * Returns the tool tip text for the annotation.  This will be displayed in\n     * a {@link org.jfree.chart.ChartPanel} when the mouse pointer hovers over\n     * the annotation.\n     *\n     * @return The tool tip text (possibly {@code null}).\n     *\n     * @see #setToolTipText(String)\n     */\n",
"org.jfree.chart.annotations.AbstractXYAnnotation.setToolTipText": "/**\n     * Sets the tool tip text for the annotation.\n     *\n     * @param text  the tool tip text ({@code null} permitted).\n     *\n     * @see #getToolTipText()\n     */\n",
"org.jfree.chart.annotations.AbstractXYAnnotation.getURL": "/**\n     * Returns the URL for the annotation.  This URL will be used to provide\n     * hyperlinks when an HTML image map is created for the chart.\n     *\n     * @return The URL (possibly {@code null}).\n     *\n     * @see #setURL(String)\n     */\n",
"org.jfree.chart.annotations.AbstractXYAnnotation.setURL": "/**\n     * Sets the URL for the annotation.\n     *\n     * @param url  the URL ({@code null} permitted).\n     *\n     * @see #getURL()\n     */\n",
"org.jfree.chart.annotations.AbstractXYAnnotation.draw": "/**\n     * Draws the annotation.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param rendererIndex  the renderer index.\n     * @param info  if supplied, this info object will be populated with\n     *              entity information.\n     */\n",
"org.jfree.chart.annotations.AbstractXYAnnotation.addEntity": "/**\n     * A utility method for adding an {@link XYAnnotationEntity} to\n     * a {@link PlotRenderingInfo} instance.\n     *\n     * @param info  the plot rendering info ({@code null} permitted).\n     * @param hotspot  the hotspot area.\n     * @param rendererIndex  the renderer index.\n     * @param toolTipText  the tool tip text.\n     * @param urlText  the URL text.\n     */\n",
"org.jfree.chart.annotations.AbstractXYAnnotation.equals": "/**\n     * Tests this annotation for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.annotations.AbstractXYAnnotation.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.annotations.XYAnnotation.draw": "/**\n     * Draws the annotation.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param rendererIndex  the renderer index.\n     * @param info  an optional info object that will be populated with\n     *              entity information.\n     */\n",
"org.jfree.chart.annotations.XYPolygonAnnotation.getPolygonCoordinates": "/**\n     * Returns the coordinates of the polygon's vertices.  The returned array\n     * is a copy, so it is safe to modify without altering the annotation's\n     * state.\n     *\n     * @return The coordinates of the polygon's vertices.\n     *\n     * @since 1.0.2\n     */\n",
"org.jfree.chart.annotations.XYPolygonAnnotation.getFillPaint": "/**\n     * Returns the fill paint.\n     *\n     * @return The fill paint (possibly {@code null}).\n     *\n     * @since 1.0.2\n     */\n",
"org.jfree.chart.annotations.XYPolygonAnnotation.getOutlineStroke": "/**\n     * Returns the outline stroke.\n     *\n     * @return The outline stroke (possibly {@code null}).\n     *\n     * @since 1.0.2\n     */\n",
"org.jfree.chart.annotations.XYPolygonAnnotation.getOutlinePaint": "/**\n     * Returns the outline paint.\n     *\n     * @return The outline paint (possibly {@code null}).\n     *\n     * @since 1.0.2\n     */\n",
"org.jfree.chart.annotations.XYPolygonAnnotation.draw": "/**\n     * Draws the annotation.  This method is usually called by the\n     * {@link XYPlot} class, you shouldn't need to call it directly.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param rendererIndex  the renderer index.\n     * @param info  the plot rendering info.\n     */\n",
"org.jfree.chart.annotations.XYPolygonAnnotation.equals": "/**\n     * Tests this annotation for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.annotations.XYPolygonAnnotation.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.annotations.XYPolygonAnnotation.clone": "/**\n     * Returns a clone.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException not thrown by this class, but may be\n     *                                    by subclasses.\n     */\n",
"org.jfree.chart.annotations.XYPolygonAnnotation.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream ({@code null} not permitted).\n     *\n     * @throws IOException if there is an I/O error.\n     */\n",
"org.jfree.chart.annotations.XYPolygonAnnotation.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream ({@code null} not permitted).\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.annotations.CategoryTextAnnotation.getCategory": "/**\n     * Returns the category.\n     *\n     * @return The category (never {@code null}).\n     *\n     * @see #setCategory(Comparable)\n     */\n",
"org.jfree.chart.annotations.CategoryTextAnnotation.setCategory": "/**\n     * Sets the category that the annotation attaches to and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param category  the category ({@code null} not permitted).\n     *\n     * @see #getCategory()\n     */\n",
"org.jfree.chart.annotations.CategoryTextAnnotation.getCategoryAnchor": "/**\n     * Returns the category anchor point.\n     *\n     * @return The category anchor point.\n     *\n     * @see #setCategoryAnchor(CategoryAnchor)\n     */\n",
"org.jfree.chart.annotations.CategoryTextAnnotation.setCategoryAnchor": "/**\n     * Sets the category anchor point and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param anchor  the anchor point ({@code null} not permitted).\n     *\n     * @see #getCategoryAnchor()\n     */\n",
"org.jfree.chart.annotations.CategoryTextAnnotation.getValue": "/**\n     * Returns the value that the annotation attaches to.\n     *\n     * @return The value.\n     *\n     * @see #setValue(double)\n     */\n",
"org.jfree.chart.annotations.CategoryTextAnnotation.setValue": "/**\n     * Sets the value and sends an\n     * {@link AnnotationChangeEvent} to all registered listeners.\n     *\n     * @param value  the value.\n     *\n     * @see #getValue()\n     */\n",
"org.jfree.chart.annotations.CategoryTextAnnotation.draw": "/**\n     * Draws the annotation.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     */\n",
"org.jfree.chart.annotations.CategoryTextAnnotation.equals": "/**\n     * Tests this object for equality with another.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.annotations.CategoryTextAnnotation.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.annotations.CategoryTextAnnotation.clone": "/**\n     * Returns a clone of the annotation.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  this class will not throw this\n     *         exception, but subclasses (if any) might.\n     */\n",
"org.jfree.chart.annotations.Annotation.addChangeListener": "/**\n     * Registers an object for notification of changes to the annotation.\n     *\n     * @param listener  the object to register.\n     */\n",
"org.jfree.chart.annotations.Annotation.removeChangeListener": "/**\n     * Deregisters an object for notification of changes to the annotation.\n     *\n     * @param listener  the object to deregister.\n     */\n",
"org.jfree.chart.annotations.XYLineAnnotation.draw": "/**\n     * Draws the annotation.  This method is called by the {@link XYPlot}\n     * class, you won't normally need to call it yourself.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param rendererIndex  the renderer index.\n     * @param info  if supplied, this info object will be populated with\n     *              entity information.\n     */\n",
"org.jfree.chart.annotations.XYLineAnnotation.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the object to test against ({@code null} permitted).\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.annotations.XYLineAnnotation.hashCode": "/**\n     * Returns a hash code.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.annotations.XYLineAnnotation.clone": "/**\n     * Returns a clone of the annotation.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the annotation can't be cloned.\n     */\n",
"org.jfree.chart.annotations.XYLineAnnotation.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.annotations.XYLineAnnotation.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.ChartColor.createDefaultPaintArray": "/**\n     * Convenience method to return an array of {@code Paint} objects that\n     * represent the pre-defined colors in the {@code Color} and\n     * {@code ChartColor} objects.\n     *\n     * @return An array of objects with the {@code Paint} interface.\n     */\n",
"org.jfree.chart.LegendItem.characterIteratorToString": "/**\n     * Returns a string containing the characters from the given iterator.\n     *\n     * @param iterator  the iterator ({@code null} not permitted).\n     *\n     * @return A string.\n     */\n",
"org.jfree.chart.LegendItem.getDataset": "/**\n     * Returns the dataset.\n     *\n     * @return The dataset.\n     *\n     * @since 1.0.6\n     *\n     * @see #setDatasetIndex(int)\n     */\n",
"org.jfree.chart.LegendItem.setDataset": "/**\n     * Sets the dataset.\n     *\n     * @param dataset  the dataset.\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.chart.LegendItem.getDatasetIndex": "/**\n     * Returns the dataset index for this legend item.\n     *\n     * @return The dataset index.\n     *\n     * @since 1.0.2\n     *\n     * @see #setDatasetIndex(int)\n     * @see #getDataset()\n     */\n",
"org.jfree.chart.LegendItem.setDatasetIndex": "/**\n     * Sets the dataset index for this legend item.\n     *\n     * @param index  the index.\n     *\n     * @since 1.0.2\n     *\n     * @see #getDatasetIndex()\n     */\n",
"org.jfree.chart.LegendItem.getSeriesKey": "/**\n     * Returns the series key.\n     *\n     * @return The series key.\n     *\n     * @since 1.0.6\n     *\n     * @see #setSeriesKey(Comparable)\n     */\n",
"org.jfree.chart.LegendItem.setSeriesKey": "/**\n     * Sets the series key.\n     *\n     * @param key  the series key.\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.chart.LegendItem.getSeriesIndex": "/**\n     * Returns the series index for this legend item.\n     *\n     * @return The series index.\n     *\n     * @since 1.0.2\n     */\n",
"org.jfree.chart.LegendItem.setSeriesIndex": "/**\n     * Sets the series index for this legend item.\n     *\n     * @param index  the index.\n     *\n     * @since 1.0.2\n     */\n",
"org.jfree.chart.LegendItem.getLabel": "/**\n     * Returns the label.\n     *\n     * @return The label (never {@code null}).\n     */\n",
"org.jfree.chart.LegendItem.getLabelFont": "/**\n     * Returns the label font.\n     *\n     * @return The label font (possibly {@code null}).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.LegendItem.setLabelFont": "/**\n     * Sets the label font.\n     *\n     * @param font  the font ({@code null} permitted).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.LegendItem.getLabelPaint": "/**\n     * Returns the paint used to draw the label.\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.LegendItem.setLabelPaint": "/**\n     * Sets the paint used to draw the label.\n     *\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.LegendItem.getAttributedLabel": "/**\n     * Returns the attributed label.\n     *\n     * @return The attributed label (possibly {@code null}).\n     */\n",
"org.jfree.chart.LegendItem.getDescription": "/**\n     * Returns the description for the legend item.\n     *\n     * @return The description (possibly {@code null}).\n     *\n     * @see #setDescription(java.lang.String) \n     */\n",
"org.jfree.chart.LegendItem.setDescription": "/**\n     * Sets the description for this legend item.\n     *\n     * @param text  the description ({@code null} permitted).\n     *\n     * @see #getDescription()\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.LegendItem.getToolTipText": "/**\n     * Returns the tool tip text.\n     *\n     * @return The tool tip text (possibly {@code null}).\n     *\n     * @see #setToolTipText(java.lang.String) \n     */\n",
"org.jfree.chart.LegendItem.setToolTipText": "/**\n     * Sets the tool tip text for this legend item.\n     *\n     * @param text  the text ({@code null} permitted).\n     *\n     * @see #getToolTipText()\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.LegendItem.getURLText": "/**\n     * Returns the URL text.\n     *\n     * @return The URL text (possibly {@code null}).\n     *\n     * @see #setURLText(java.lang.String) \n     */\n",
"org.jfree.chart.LegendItem.setURLText": "/**\n     * Sets the URL text.\n     *\n     * @param text  the text ({@code null} permitted).\n     *\n     * @see #getURLText()\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.LegendItem.isShapeVisible": "/**\n     * Returns a flag that indicates whether or not the shape is visible.\n     *\n     * @return A boolean.\n     *\n     * @see #setShapeVisible(boolean)\n     */\n",
"org.jfree.chart.LegendItem.setShapeVisible": "/**\n     * Sets the flag that controls whether or not the shape is visible.\n     *\n     * @param visible  the new flag value.\n     *\n     * @see #isShapeVisible()\n     * @see #isLineVisible()\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.LegendItem.getShape": "/**\n     * Returns the shape used to label the series represented by this legend\n     * item.\n     *\n     * @return The shape (never {@code null}).\n     *\n     * @see #setShape(java.awt.Shape) \n     */\n",
"org.jfree.chart.LegendItem.setShape": "/**\n     * Sets the shape for the legend item.\n     *\n     * @param shape  the shape ({@code null} not permitted).\n     *\n     * @see #getShape()\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.LegendItem.isShapeFilled": "/**\n     * Returns a flag that controls whether or not the shape is filled.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.LegendItem.getFillPaint": "/**\n     * Returns the fill paint.\n     *\n     * @return The fill paint (never {@code null}).\n     */\n",
"org.jfree.chart.LegendItem.setFillPaint": "/**\n     * Sets the fill paint.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.LegendItem.isShapeOutlineVisible": "/**\n     * Returns the flag that controls whether or not the shape outline\n     * is visible.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.LegendItem.getLineStroke": "/**\n     * Returns the line stroke for the series.\n     *\n     * @return The stroke (never {@code null}).\n     */\n",
"org.jfree.chart.LegendItem.setLineStroke": "/**\n     * Sets the line stroke.\n     * \n     * @param stroke  the stroke ({@code null} not permitted).\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.chart.LegendItem.getLinePaint": "/**\n     * Returns the paint used for lines.\n     *\n     * @return The paint (never {@code null}).\n     */\n",
"org.jfree.chart.LegendItem.setLinePaint": "/**\n     * Sets the line paint.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.LegendItem.getOutlinePaint": "/**\n     * Returns the outline paint.\n     *\n     * @return The outline paint (never {@code null}).\n     */\n",
"org.jfree.chart.LegendItem.setOutlinePaint": "/**\n     * Sets the outline paint.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.LegendItem.getOutlineStroke": "/**\n     * Returns the outline stroke.\n     *\n     * @return The outline stroke (never {@code null}).\n     *\n     * @see #setOutlineStroke(java.awt.Stroke) \n     */\n",
"org.jfree.chart.LegendItem.setOutlineStroke": "/**\n     * Sets the outline stroke.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getOutlineStroke()\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.LegendItem.isLineVisible": "/**\n     * Returns a flag that indicates whether or not the line is visible.\n     *\n     * @return A boolean.\n     *\n     * @see #setLineVisible(boolean) \n     */\n",
"org.jfree.chart.LegendItem.setLineVisible": "/**\n     * Sets the flag that controls whether or not the line shape is visible for\n     * this legend item.\n     *\n     * @param visible  the new flag value.\n     *\n     * @see #isLineVisible()\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.LegendItem.getLine": "/**\n     * Returns the line.\n     *\n     * @return The line (never {@code null}).\n     *\n     * @see #setLine(java.awt.Shape)\n     * @see #isLineVisible() \n     */\n",
"org.jfree.chart.LegendItem.setLine": "/**\n     * Sets the line.\n     *\n     * @param line  the line ({@code null} not permitted).\n     *\n     * @see #getLine()\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.LegendItem.getFillPaintTransformer": "/**\n     * Returns the transformer used when the fill paint is an instance of\n     * {@code GradientPaint}.\n     *\n     * @return The transformer (never {@code null}).\n     *\n     * @since 1.0.4\n     *\n     * @see #setFillPaintTransformer(GradientPaintTransformer)\n     */\n",
"org.jfree.chart.LegendItem.setFillPaintTransformer": "/**\n     * Sets the transformer used when the fill paint is an instance of\n     * {@code GradientPaint}.\n     *\n     * @param transformer  the transformer ({@code null} not permitted).\n     *\n     * @since 1.0.4\n     *\n     * @see #getFillPaintTransformer()\n     */\n",
"org.jfree.chart.LegendItem.equals": "/**\n     * Tests this item for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.LegendItem.clone": "/**\n     * Returns an independent copy of this object (except that the clone will\n     * still reference the same dataset as the original {@code LegendItem}).\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if the legend item cannot be cloned.\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.LegendItem.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream ({@code null} not permitted).\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.LegendItem.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream ({@code null} not permitted).\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.servlet.ChartDeleter.addChart": "/**\n     * Add a chart to be deleted when the session expires\n     *\n     * @param filename  the name of the chart in the temporary directory to be\n     *                  deleted.\n     */\n",
"org.jfree.chart.servlet.ChartDeleter.isChartAvailable": "/**\n     * Checks to see if a chart is in the list of charts to be deleted\n     *\n     * @param filename  the name of the chart in the temporary directory.\n     *\n     * @return A boolean value indicating whether the chart is present in the\n     *         list.\n     */\n",
"org.jfree.chart.servlet.ChartDeleter.valueBound": "/**\n     * Binding this object to the session has no additional effects.\n     *\n     * @param event  the session bind event.\n     */\n",
"org.jfree.chart.servlet.ChartDeleter.valueUnbound": "/**\n     * When this object is unbound from the session (including upon session\n     * expiry) the files that have been added to the ArrayList are iterated\n     * and deleted.\n     *\n     * @param event  the session unbind event.\n     */\n",
"org.jfree.chart.servlet.DisplayChart.init": "/**\n     * Init method.\n     *\n     * @throws ServletException never.\n     */\n",
"org.jfree.chart.servlet.DisplayChart.service": "/**\n     * Service method.\n     *\n     * @param request  the request.\n     * @param response  the response.\n     *\n     * @throws ServletException ??.\n     * @throws IOException ??.\n     */\n",
"org.jfree.chart.servlet.ServletUtilities.getTempFilePrefix": "/**\n     * Returns the prefix for the temporary file names generated by this class.\n     *\n     * @return The prefix (never {@code null}).\n     */\n",
"org.jfree.chart.servlet.ServletUtilities.setTempFilePrefix": "/**\n     * Sets the prefix for the temporary file names generated by this class.\n     *\n     * @param prefix  the prefix ({@code null} not permitted).\n     */\n",
"org.jfree.chart.servlet.ServletUtilities.getTempOneTimeFilePrefix": "/**\n     * Returns the prefix for \"one time\" temporary file names generated by\n     * this class.\n     *\n     * @return The prefix.\n     */\n",
"org.jfree.chart.servlet.ServletUtilities.setTempOneTimeFilePrefix": "/**\n     * Sets the prefix for the \"one time\" temporary file names generated by\n     * this class.\n     *\n     * @param prefix  the prefix ({@code null} not permitted).\n     */\n",
"org.jfree.chart.servlet.ServletUtilities.saveChartAsPNG": "/**\n     * Saves the chart as a PNG format file in the temporary directory.\n     *\n     * @param chart  the JFreeChart to be saved.\n     * @param width  the width of the chart.\n     * @param height  the height of the chart.\n     * @param session  the HttpSession of the client (if {@code null}, the\n     *                 temporary file is marked as \"one-time\" and deleted by\n     *                 the {@link DisplayChart} servlet right after it is\n     *                 streamed to the client).\n     *\n     * @return The filename of the chart saved in the temporary directory.\n     *\n     * @throws IOException if there is a problem saving the file.\n     */\n",
"org.jfree.chart.servlet.ServletUtilities.saveChartAsPNG": "/**\n     * Saves the chart as a PNG format file in the temporary directory and\n     * populates the {@link ChartRenderingInfo} object which can be used to\n     * generate an HTML image map.\n     *\n     * @param chart  the chart to be saved ({@code null} not permitted).\n     * @param width  the width of the chart.\n     * @param height  the height of the chart.\n     * @param info  the ChartRenderingInfo object to be populated\n     *              ({@code null} permitted).\n     * @param session  the HttpSession of the client (if {@code null}, the\n     *                 temporary file is marked as \"one-time\" and deleted by\n     *                 the {@link DisplayChart} servlet right after it is\n     *                 streamed to the client).\n     *\n     * @return The filename of the chart saved in the temporary directory.\n     *\n     * @throws IOException if there is a problem saving the file.\n     */\n",
"org.jfree.chart.servlet.ServletUtilities.saveChartAsJPEG": "/**\n     * Saves the chart as a JPEG format file in the temporary directory.\n     * <p>\n     * SPECIAL NOTE: Please avoid using JPEG as an image format for charts,\n     * it is a \"lossy\" format that introduces visible distortions in the\n     * resulting image - use PNG instead.  In addition, note that JPEG output\n     * is supported by JFreeChart only for JRE 1.4.2 or later.\n     *\n     * @param chart  the JFreeChart to be saved.\n     * @param width  the width of the chart.\n     * @param height  the height of the chart.\n     * @param session  the HttpSession of the client (if {@code null}, the\n     *                 temporary file is marked as \"one-time\" and deleted by\n     *                 the {@link DisplayChart} servlet right after it is\n     *                 streamed to the client).\n     *\n     * @return The filename of the chart saved in the temporary directory.\n     *\n     * @throws IOException if there is a problem saving the file.\n     */\n",
"org.jfree.chart.servlet.ServletUtilities.saveChartAsJPEG": "/**\n     * Saves the chart as a JPEG format file in the temporary directory and\n     * populates the {@code ChartRenderingInfo} object which can be used\n     * to generate an HTML image map.\n     * <p>\n     * SPECIAL NOTE: Please avoid using JPEG as an image format for charts,\n     * it is a \"lossy\" format that introduces visible distortions in the\n     * resulting image - use PNG instead.  In addition, note that JPEG output\n     * is supported by JFreeChart only for JRE 1.4.2 or later.\n     *\n     * @param chart  the chart to be saved ({@code null} not permitted).\n     * @param width  the width of the chart\n     * @param height  the height of the chart\n     * @param info  the ChartRenderingInfo object to be populated\n     * @param session  the HttpSession of the client (if {@code null}, the\n     *                 temporary file is marked as \"one-time\" and deleted by\n     *                 the {@link DisplayChart} servlet right after it is\n     *                 streamed to the client).\n     *\n     * @return The filename of the chart saved in the temporary directory\n     *\n     * @throws IOException if there is a problem saving the file.\n     */\n",
"org.jfree.chart.servlet.ServletUtilities.createTempDir": "/**\n     * Creates the temporary directory if it does not exist.  Throws a\n     * {@code RuntimeException} if the temporary directory is\n     * {@code null}.  Uses the system property {@code java.io.tmpdir}\n     * as the temporary directory.  This sounds like a strange thing to do but\n     * my temporary directory was not created on my default Tomcat 4.0.3\n     * installation.  Could save some questions on the forum if it is created\n     * when not present.\n     */\n",
"org.jfree.chart.servlet.ServletUtilities.registerChartForDeletion": "/**\n     * Adds a {@link ChartDeleter} object to the session object with the name\n     * {@code JFreeChart_Deleter} if there is not already one bound to the\n     * session and adds the filename to the list of charts to be deleted.\n     *\n     * @param tempFile  the file to be deleted.\n     * @param session  the HTTP session of the client.\n     */\n",
"org.jfree.chart.servlet.ServletUtilities.sendTempFile": "/**\n     * Binary streams the specified file in the temporary directory to the\n     * HTTP response in 1KB chunks.\n     *\n     * @param filename  the name of the file in the temporary directory.\n     * @param response  the HTTP response object.\n     *\n     * @throws IOException  if there is an I/O problem.\n     */\n",
"org.jfree.chart.servlet.ServletUtilities.sendTempFile": "/**\n     * Binary streams the specified file to the HTTP response in 1KB chunks.\n     *\n     * @param file  the file to be streamed.\n     * @param response  the HTTP response object.\n     *\n     * @throws IOException if there is an I/O problem.\n     */\n",
"org.jfree.chart.servlet.ServletUtilities.sendTempFile": "/**\n     * Binary streams the specified file to the HTTP response in 1KB chunks.\n     *\n     * @param file  the file to be streamed.\n     * @param response  the HTTP response object.\n     * @param mimeType  the mime type of the file, null allowed.\n     *\n     * @throws IOException if there is an I/O problem.\n     */\n",
"org.jfree.chart.servlet.ServletUtilities.searchReplace": "/**\n     * Perform a search/replace operation on a String\n     * There are String methods to do this since (JDK 1.4)\n     *\n     * @param inputString  the String to have the search/replace operation.\n     * @param searchString  the search String.\n     * @param replaceString  the replace String.\n     *\n     * @return The String with the replacements made.\n     */\n",
"org.jfree.chart.needle.ArrowNeedle.drawNeedle": "/**\n     * Draws the needle.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param rotate  the rotation point.\n     * @param angle  the angle.\n     */\n",
"org.jfree.chart.needle.ArrowNeedle.equals": "/**\n     * Tests another object for equality with this object.\n     *\n     * @param obj  the object to test ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.needle.ArrowNeedle.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.needle.ArrowNeedle.clone": "/**\n     * Returns a clone of this needle.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if the {@code ArrowNeedle}\n     *     cannot be cloned (in theory, this should not happen).\n     */\n",
"org.jfree.chart.needle.PinNeedle.drawNeedle": "/**\n     * Draws the needle.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param rotate  the rotation point.\n     * @param angle  the angle.\n     */\n",
"org.jfree.chart.needle.PinNeedle.equals": "/**\n     * Tests another object for equality with this object.\n     *\n     * @param obj  the object to test ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.needle.PinNeedle.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.needle.PinNeedle.clone": "/**\n     * Returns a clone of this needle.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if the {@code PinNeedle}\n     *     cannot be cloned (in theory, this should not happen).\n     */\n",
"org.jfree.chart.needle.MeterNeedle.getOutlinePaint": "/**\n     * Returns the outline paint.\n     *\n     * @return The outline paint.\n     */\n",
"org.jfree.chart.needle.MeterNeedle.setOutlinePaint": "/**\n     * Sets the outline paint.\n     *\n     * @param p  the new paint.\n     */\n",
"org.jfree.chart.needle.MeterNeedle.getOutlineStroke": "/**\n     * Returns the outline stroke.\n     *\n     * @return The outline stroke.\n     */\n",
"org.jfree.chart.needle.MeterNeedle.setOutlineStroke": "/**\n     * Sets the outline stroke.\n     *\n     * @param s  the new stroke.\n     */\n",
"org.jfree.chart.needle.MeterNeedle.getFillPaint": "/**\n     * Returns the fill paint.\n     *\n     * @return The fill paint.\n     */\n",
"org.jfree.chart.needle.MeterNeedle.setFillPaint": "/**\n     * Sets the fill paint.\n     *\n     * @param p  the fill paint.\n     */\n",
"org.jfree.chart.needle.MeterNeedle.getHighlightPaint": "/**\n     * Returns the highlight paint.\n     *\n     * @return The highlight paint.\n     */\n",
"org.jfree.chart.needle.MeterNeedle.setHighlightPaint": "/**\n     * Sets the highlight paint.\n     *\n     * @param p  the highlight paint.\n     */\n",
"org.jfree.chart.needle.MeterNeedle.getRotateX": "/**\n     * Returns the scalar used for determining the rotation x value.\n     *\n     * @return The x rotate scalar.\n     */\n",
"org.jfree.chart.needle.MeterNeedle.setRotateX": "/**\n     * Sets the rotateX value.\n     *\n     * @param x  the new value.\n     */\n",
"org.jfree.chart.needle.MeterNeedle.setRotateY": "/**\n     * Sets the rotateY value.\n     *\n     * @param y  the new value.\n     */\n",
"org.jfree.chart.needle.MeterNeedle.getRotateY": "/**\n     * Returns the scalar used for determining the rotation y value.\n     *\n     * @return The y rotate scalar.\n     */\n",
"org.jfree.chart.needle.MeterNeedle.draw": "/**\n     * Draws the needle.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     */\n",
"org.jfree.chart.needle.MeterNeedle.draw": "/**\n     * Draws the needle.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param angle  the angle.\n     */\n",
"org.jfree.chart.needle.MeterNeedle.draw": "/**\n     * Draws the needle.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param rotate  the rotation point.\n     * @param angle  the angle.\n     */\n",
"org.jfree.chart.needle.MeterNeedle.drawNeedle": "/**\n     * Draws the needle.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param rotate  the rotation point.\n     * @param angle  the angle.\n     */\n",
"org.jfree.chart.needle.MeterNeedle.defaultDisplay": "/**\n     * Displays a shape.\n     *\n     * @param g2  the graphics device.\n     * @param shape  the shape.\n     */\n",
"org.jfree.chart.needle.MeterNeedle.getSize": "/**\n     * Returns the size.\n     *\n     * @return The size.\n     */\n",
"org.jfree.chart.needle.MeterNeedle.setSize": "/**\n     * Sets the size.\n     *\n     * @param pixels  the new size.\n     */\n",
"org.jfree.chart.needle.MeterNeedle.getTransform": "/**\n     * Returns the transform.\n     *\n     * @return The transform.\n     */\n",
"org.jfree.chart.needle.MeterNeedle.equals": "/**\n     * Tests another object for equality with this object.\n     *\n     * @param obj the object to test ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.needle.MeterNeedle.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.needle.MeterNeedle.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.needle.MeterNeedle.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.needle.LongNeedle.drawNeedle": "/**\n     * Draws the needle.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param rotate  the rotation point.\n     * @param angle  the angle.\n     */\n",
"org.jfree.chart.needle.LongNeedle.equals": "/**\n     * Tests another object for equality with this object.\n     *\n     * @param obj  the object to test ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.needle.LongNeedle.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.needle.LongNeedle.clone": "/**\n     * Returns a clone of this needle.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if the {@code LongNeedle}\n     *     cannot be cloned (in theory, this should not happen).\n     */\n",
"org.jfree.chart.needle.MiddlePinNeedle.drawNeedle": "/**\n     * Draws the needle.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param rotate  the rotation point.\n     * @param angle  the angle.\n     */\n",
"org.jfree.chart.needle.MiddlePinNeedle.equals": "/**\n     * Tests another object for equality with this object.\n     *\n     * @param object  the object to test.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.needle.MiddlePinNeedle.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.needle.MiddlePinNeedle.clone": "/**\n     * Returns a clone of this needle.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if the {@code MiddlePinNeedle}\n     *     cannot be cloned (in theory, this should not happen).\n     */\n",
"org.jfree.chart.needle.PlumNeedle.drawNeedle": "/**\n     * Draws the needle.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param rotate  the rotation point.\n     * @param angle  the angle.\n     */\n",
"org.jfree.chart.needle.PlumNeedle.equals": "/**\n     * Tests another object for equality with this object.\n     *\n     * @param obj  the object to test ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.needle.PlumNeedle.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.needle.PlumNeedle.clone": "/**\n     * Returns a clone of this needle.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if the {@code PlumNeedle}\n     *     cannot be cloned (in theory, this should not happen).\n     */\n",
"org.jfree.chart.needle.ShipNeedle.drawNeedle": "/**\n     * Draws the needle.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param rotate  the rotation point.\n     * @param angle  the angle.\n     */\n",
"org.jfree.chart.needle.ShipNeedle.equals": "/**\n     * Tests another object for equality with this object.\n     *\n     * @param object  the object to test.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.needle.ShipNeedle.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.needle.ShipNeedle.clone": "/**\n     * Returns a clone of this needle.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if the {@code ShipNeedle}\n     *     cannot be cloned (in theory, this should not happen).\n     */\n",
"org.jfree.chart.needle.LineNeedle.drawNeedle": "/**\n     * Draws the needle.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param rotate  the rotation point.\n     * @param angle  the angle.\n     */\n",
"org.jfree.chart.needle.LineNeedle.equals": "/**\n     * Tests another object for equality with this object.\n     *\n     * @param obj  the object to test ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.needle.LineNeedle.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.needle.LineNeedle.clone": "/**\n     * Returns a clone of this needle.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if the {@code LineNeedle}\n     *     cannot be cloned (in theory, this should not happen).\n     */\n",
"org.jfree.chart.needle.WindNeedle.drawNeedle": "/**\n     * Draws the needle.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param rotate  the rotation point.\n     * @param angle  the angle.\n     */\n",
"org.jfree.chart.needle.WindNeedle.equals": "/**\n     * Tests another object for equality with this object.\n     *\n     * @param object  the object to test.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.needle.WindNeedle.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.needle.PointerNeedle.drawNeedle": "/**\n     * Draws the needle.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param rotate  the rotation point.\n     * @param angle  the angle.\n     */\n",
"org.jfree.chart.needle.PointerNeedle.equals": "/**\n     * Tests another object for equality with this object.\n     *\n     * @param obj  the object to test ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.needle.PointerNeedle.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.needle.PointerNeedle.clone": "/**\n     * Returns a clone of this needle.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if the {@code PointerNeedle}\n     *     cannot be cloned (in theory, this should not happen).\n     */\n",
"org.jfree.chart.ChartFrame.getChartPanel": "/**\n     * Returns the chart panel for the frame.\n     *\n     * @return The chart panel.\n     */\n",
"org.jfree.chart.event.ChartChangeEvent.getChart": "/**\n     * Returns the chart that generated the change event.\n     *\n     * @return The chart that generated the change event.\n     */\n",
"org.jfree.chart.event.ChartChangeEvent.setChart": "/**\n     * Sets the chart that generated the change event.\n     *\n     * @param chart  the chart that generated the event.\n     */\n",
"org.jfree.chart.event.ChartChangeEvent.getType": "/**\n     * Returns the event type.\n     *\n     * @return The event type.\n     */\n",
"org.jfree.chart.event.ChartChangeEvent.setType": "/**\n     * Sets the event type.\n     *\n     * @param type  the event type.\n     */\n",
"org.jfree.chart.event.ChartChangeEventType.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.chart.event.ChartChangeEventType.equals": "/**\n     * Returns {@code true} if this object is equal to the specified\n     * object, and {@code false} otherwise.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.event.ChartChangeEventType.hashCode": "/**\n     * Returns a hash code value for the object.\n     *\n     * @return The hashcode\n     */\n",
"org.jfree.chart.event.ChartChangeEventType.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     *\n     * @return The object.\n     *\n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.chart.event.ChartChangeListener.chartChanged": "/**\n     * Receives notification of a chart change event.\n     *\n     * @param event  the event.\n     */\n",
"org.jfree.chart.event.MarkerChangeListener.markerChanged": "/**\n     * Receives notification of a marker change event.\n     *\n     * @param event  the event.\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.event.AnnotationChangeEvent.getAnnotation": "/**\n     * Returns the annotation that triggered the event.\n     *\n     * @return The annotation that triggered the event (never {@code null}).\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.event.PlotChangeListener.plotChanged": "/**\n     * Receives notification of a plot change event.\n     *\n     * @param event  the event.\n     */\n",
"org.jfree.chart.event.AxisChangeEvent.getAxis": "/**\n     * Returns the axis that generated the event.\n     *\n     * @return The axis that generated the event.\n     */\n",
"org.jfree.chart.event.TitleChangeEvent.getTitle": "/**\n     * Returns the title that generated the event.\n     *\n     * @return The title that generated the event.\n     */\n",
"org.jfree.chart.event.AxisChangeListener.axisChanged": "/**\n     * Receives notification of an axis change event.\n     *\n     * @param event  the event.\n     */\n",
"org.jfree.chart.event.AnnotationChangeListener.annotationChanged": "/**\n     * Receives notification of an annotation change event.\n     *\n     * @param event  the event.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.event.RendererChangeListener.rendererChanged": "/**\n     * Receives notification of a renderer change event.\n     *\n     * @param event  the event.\n     */\n",
"org.jfree.chart.event.MarkerChangeEvent.getMarker": "/**\n     * Returns the marker that triggered the event.\n     *\n     * @return The marker that triggered the event (never {@code null}).\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.event.ChartProgressListener.chartProgress": "/**\n     * Receives notification of a chart progress event.\n     *\n     * @param event  the event.\n     */\n",
"org.jfree.chart.event.RendererChangeEvent.getRenderer": "/**\n     * Returns the renderer that generated the event.\n     *\n     * @return The renderer that generated the event.\n     */\n",
"org.jfree.chart.event.RendererChangeEvent.getSeriesVisibilityChanged": "/**\n     * Returns the flag that indicates whether or not the event relates to\n     * a change in series visibility.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.event.ChartProgressEvent.getChart": "/**\n     * Returns the chart that generated the change event.\n     *\n     * @return The chart that generated the change event.\n     */\n",
"org.jfree.chart.event.ChartProgressEvent.setChart": "/**\n     * Sets the chart that generated the change event.\n     *\n     * @param chart  the chart that generated the event.\n     */\n",
"org.jfree.chart.event.ChartProgressEvent.getType": "/**\n     * Returns the event type.\n     *\n     * @return The event type.\n     */\n",
"org.jfree.chart.event.ChartProgressEvent.setType": "/**\n     * Sets the event type.\n     *\n     * @param type  the event type.\n     */\n",
"org.jfree.chart.event.ChartProgressEvent.getPercent": "/**\n     * Returns the percentage complete.\n     *\n     * @return The percentage complete.\n     */\n",
"org.jfree.chart.event.ChartProgressEvent.setPercent": "/**\n     * Sets the percentage complete.\n     *\n     * @param percent  the percentage.\n     */\n",
"org.jfree.chart.event.TitleChangeListener.titleChanged": "/**\n     * Receives notification of a chart title change event.\n     *\n     * @param event  the event.\n     */\n",
"org.jfree.chart.event.OverlayChangeListener.overlayChanged": "/**\n     * This method is called to notify a listener of a change event.\n     *\n     * @param event  the event.\n     */\n",
"org.jfree.chart.event.PlotChangeEvent.getPlot": "/**\n     * Returns the plot that generated the event (set in the constructor).\n     *\n     * @return The plot that generated the event.\n     */\n",
"org.jfree.chart.ChartMouseListener.chartMouseClicked": "/**\n     * Callback method for receiving notification of a mouse click on a chart.\n     *\n     * @param event  information about the event.\n     */\n",
"org.jfree.chart.ChartMouseListener.chartMouseMoved": "/**\n     * Callback method for receiving notification of a mouse movement on a\n     * chart.\n     *\n     * @param event  information about the event.\n     */\n",
"org.jfree.chart.JFreeChart.getID": "/**\n     * Returns the ID for the chart.\n     * \n     * @return The ID for the chart (possibly {@code null}).\n     * \n     * @since 1.0.20\n     */\n",
"org.jfree.chart.JFreeChart.setID": "/**\n     * Sets the ID for the chart.\n     * \n     * @param id  the id ({@code null} permitted). \n     * \n     * @since 1.0.20\n     */\n",
"org.jfree.chart.JFreeChart.getElementHinting": "/**\n     * Returns the flag that controls whether or not rendering hints \n     * ({@link ChartHints#KEY_BEGIN_ELEMENT} and \n     * {@link ChartHints#KEY_END_ELEMENT}) that identify chart elements are \n     * added during rendering.  The default value is {@code false}.\n     * \n     * @return A boolean.\n     * \n     * @see #setElementHinting(boolean) \n     * @since 1.0.20\n     */\n",
"org.jfree.chart.JFreeChart.setElementHinting": "/**\n     * Sets the flag that controls whether or not rendering hints \n     * ({@link ChartHints#KEY_BEGIN_ELEMENT} and \n     * {@link ChartHints#KEY_END_ELEMENT}) that identify chart elements are \n     * added during rendering.\n     * \n     * @param hinting  the new flag value.\n     * \n     * @see #getElementHinting() \n     * @since 1.0.20\n     */\n",
"org.jfree.chart.JFreeChart.getRenderingHints": "/**\n     * Returns the collection of rendering hints for the chart.\n     *\n     * @return The rendering hints for the chart (never {@code null}).\n     *\n     * @see #setRenderingHints(RenderingHints)\n     */\n",
"org.jfree.chart.JFreeChart.setRenderingHints": "/**\n     * Sets the rendering hints for the chart.  These will be added (using the\n     * {@code Graphics2D.addRenderingHints()} method) near the start of the\n     * {@code JFreeChart.draw()} method.\n     *\n     * @param renderingHints  the rendering hints ({@code null} not permitted).\n     *\n     * @see #getRenderingHints()\n     */\n",
"org.jfree.chart.JFreeChart.isBorderVisible": "/**\n     * Returns a flag that controls whether or not a border is drawn around the\n     * outside of the chart.\n     *\n     * @return A boolean.\n     *\n     * @see #setBorderVisible(boolean)\n     */\n",
"org.jfree.chart.JFreeChart.setBorderVisible": "/**\n     * Sets a flag that controls whether or not a border is drawn around the\n     * outside of the chart.\n     *\n     * @param visible  the flag.\n     *\n     * @see #isBorderVisible()\n     */\n",
"org.jfree.chart.JFreeChart.getBorderStroke": "/**\n     * Returns the stroke used to draw the chart border (if visible).\n     *\n     * @return The border stroke.\n     *\n     * @see #setBorderStroke(Stroke)\n     */\n",
"org.jfree.chart.JFreeChart.setBorderStroke": "/**\n     * Sets the stroke used to draw the chart border (if visible).\n     *\n     * @param stroke  the stroke.\n     *\n     * @see #getBorderStroke()\n     */\n",
"org.jfree.chart.JFreeChart.getBorderPaint": "/**\n     * Returns the paint used to draw the chart border (if visible).\n     *\n     * @return The border paint.\n     *\n     * @see #setBorderPaint(Paint)\n     */\n",
"org.jfree.chart.JFreeChart.setBorderPaint": "/**\n     * Sets the paint used to draw the chart border (if visible).\n     *\n     * @param paint  the paint.\n     *\n     * @see #getBorderPaint()\n     */\n",
"org.jfree.chart.JFreeChart.getPadding": "/**\n     * Returns the padding between the chart border and the chart drawing area.\n     *\n     * @return The padding (never {@code null}).\n     *\n     * @see #setPadding(RectangleInsets)\n     */\n",
"org.jfree.chart.JFreeChart.setPadding": "/**\n     * Sets the padding between the chart border and the chart drawing area,\n     * and sends a {@link ChartChangeEvent} to all registered listeners.\n     *\n     * @param padding  the padding ({@code null} not permitted).\n     *\n     * @see #getPadding()\n     */\n",
"org.jfree.chart.JFreeChart.getTitle": "/**\n     * Returns the main chart title.  Very often a chart will have just one\n     * title, so we make this case simple by providing accessor methods for\n     * the main title.  However, multiple titles are supported - see the\n     * {@link #addSubtitle(Title)} method.\n     *\n     * @return The chart title (possibly {@code null}).\n     *\n     * @see #setTitle(TextTitle)\n     */\n",
"org.jfree.chart.JFreeChart.setTitle": "/**\n     * Sets the main title for the chart and sends a {@link ChartChangeEvent}\n     * to all registered listeners.  If you do not want a title for the\n     * chart, set it to {@code null}.  If you want more than one title on\n     * a chart, use the {@link #addSubtitle(Title)} method.\n     *\n     * @param title  the title ({@code null} permitted).\n     *\n     * @see #getTitle()\n     */\n",
"org.jfree.chart.JFreeChart.setTitle": "/**\n     * Sets the chart title and sends a {@link ChartChangeEvent} to all\n     * registered listeners.  This is a convenience method that ends up calling\n     * the {@link #setTitle(TextTitle)} method.  If there is an existing title,\n     * its text is updated, otherwise a new title using the default font is\n     * added to the chart.  If {@code text} is {@code null} the chart\n     * title is set to {@code null}.\n     *\n     * @param text  the title text ({@code null} permitted).\n     *\n     * @see #getTitle()\n     */\n",
"org.jfree.chart.JFreeChart.addLegend": "/**\n     * Adds a legend to the plot and sends a {@link ChartChangeEvent} to all\n     * registered listeners.\n     *\n     * @param legend  the legend ({@code null} not permitted).\n     *\n     * @see #removeLegend()\n     */\n",
"org.jfree.chart.JFreeChart.getLegend": "/**\n     * Returns the legend for the chart, if there is one.  Note that a chart\n     * can have more than one legend - this method returns the first.\n     *\n     * @return The legend (possibly {@code null}).\n     *\n     * @see #getLegend(int)\n     */\n",
"org.jfree.chart.JFreeChart.getLegend": "/**\n     * Returns the nth legend for a chart, or {@code null}.\n     *\n     * @param index  the legend index (zero-based).\n     *\n     * @return The legend (possibly {@code null}).\n     *\n     * @see #addLegend(LegendTitle)\n     */\n",
"org.jfree.chart.JFreeChart.removeLegend": "/**\n     * Removes the first legend in the chart and sends a\n     * {@link ChartChangeEvent} to all registered listeners.\n     *\n     * @see #getLegend()\n     */\n",
"org.jfree.chart.JFreeChart.getSubtitles": "/**\n     * Returns the list of subtitles for the chart.\n     *\n     * @return The subtitle list (possibly empty, but never {@code null}).\n     *\n     * @see #setSubtitles(List)\n     */\n",
"org.jfree.chart.JFreeChart.setSubtitles": "/**\n     * Sets the title list for the chart (completely replaces any existing\n     * titles) and sends a {@link ChartChangeEvent} to all registered\n     * listeners.\n     *\n     * @param subtitles  the new list of subtitles ({@code null} not\n     *                   permitted).\n     *\n     * @see #getSubtitles()\n     */\n",
"org.jfree.chart.JFreeChart.getSubtitleCount": "/**\n     * Returns the number of titles for the chart.\n     *\n     * @return The number of titles for the chart.\n     *\n     * @see #getSubtitles()\n     */\n",
"org.jfree.chart.JFreeChart.getSubtitle": "/**\n     * Returns a chart subtitle.\n     *\n     * @param index  the index of the chart subtitle (zero based).\n     *\n     * @return A chart subtitle.\n     *\n     * @see #addSubtitle(Title)\n     */\n",
"org.jfree.chart.JFreeChart.addSubtitle": "/**\n     * Adds a chart subtitle, and notifies registered listeners that the chart\n     * has been modified.\n     *\n     * @param subtitle  the subtitle ({@code null} not permitted).\n     *\n     * @see #getSubtitle(int)\n     */\n",
"org.jfree.chart.JFreeChart.addSubtitle": "/**\n     * Adds a subtitle at a particular position in the subtitle list, and sends\n     * a {@link ChartChangeEvent} to all registered listeners.\n     *\n     * @param index  the index (in the range 0 to {@link #getSubtitleCount()}).\n     * @param subtitle  the subtitle to add ({@code null} not permitted).\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.chart.JFreeChart.clearSubtitles": "/**\n     * Clears all subtitles from the chart and sends a {@link ChartChangeEvent}\n     * to all registered listeners.\n     *\n     * @see #addSubtitle(Title)\n     */\n",
"org.jfree.chart.JFreeChart.removeSubtitle": "/**\n     * Removes the specified subtitle and sends a {@link ChartChangeEvent} to\n     * all registered listeners.\n     *\n     * @param title  the title.\n     *\n     * @see #addSubtitle(Title)\n     */\n",
"org.jfree.chart.JFreeChart.getPlot": "/**\n     * Returns the plot for the chart.  The plot is a class responsible for\n     * coordinating the visual representation of the data, including the axes\n     * (if any).\n     *\n     * @return The plot.\n     */\n",
"org.jfree.chart.JFreeChart.getCategoryPlot": "/**\n     * Returns the plot cast as a {@link CategoryPlot}.\n     * <p>\n     * NOTE: if the plot is not an instance of {@link CategoryPlot}, then a\n     * {@code ClassCastException} is thrown.\n     *\n     * @return The plot.\n     *\n     * @see #getPlot()\n     */\n",
"org.jfree.chart.JFreeChart.getXYPlot": "/**\n     * Returns the plot cast as an {@link XYPlot}.\n     * <p>\n     * NOTE: if the plot is not an instance of {@link XYPlot}, then a\n     * {@code ClassCastException} is thrown.\n     *\n     * @return The plot.\n     *\n     * @see #getPlot()\n     */\n",
"org.jfree.chart.JFreeChart.getAntiAlias": "/**\n     * Returns a flag that indicates whether or not anti-aliasing is used when\n     * the chart is drawn.\n     *\n     * @return The flag.\n     *\n     * @see #setAntiAlias(boolean)\n     */\n",
"org.jfree.chart.JFreeChart.setAntiAlias": "/**\n     * Sets a flag that indicates whether or not anti-aliasing is used when the\n     * chart is drawn.\n     * <P>\n     * Anti-aliasing usually improves the appearance of charts, but is slower.\n     *\n     * @param flag  the new value of the flag.\n     *\n     * @see #getAntiAlias()\n     */\n",
"org.jfree.chart.JFreeChart.getTextAntiAlias": "/**\n     * Returns the current value stored in the rendering hints table for\n     * {@link RenderingHints#KEY_TEXT_ANTIALIASING}.\n     *\n     * @return The hint value (possibly {@code null}).\n     *\n     * @since 1.0.5\n     *\n     * @see #setTextAntiAlias(Object)\n     */\n",
"org.jfree.chart.JFreeChart.setTextAntiAlias": "/**\n     * Sets the value in the rendering hints table for\n     * {@link RenderingHints#KEY_TEXT_ANTIALIASING} to either\n     * {@link RenderingHints#VALUE_TEXT_ANTIALIAS_ON} or\n     * {@link RenderingHints#VALUE_TEXT_ANTIALIAS_OFF}, then sends a\n     * {@link ChartChangeEvent} to all registered listeners.\n     *\n     * @param flag  the new value of the flag.\n     *\n     * @since 1.0.5\n     *\n     * @see #getTextAntiAlias()\n     * @see #setTextAntiAlias(Object)\n     */\n",
"org.jfree.chart.JFreeChart.setTextAntiAlias": "/**\n     * Sets the value in the rendering hints table for\n     * {@link RenderingHints#KEY_TEXT_ANTIALIASING} and sends a\n     * {@link ChartChangeEvent} to all registered listeners.\n     *\n     * @param val  the new value ({@code null} permitted).\n     *\n     * @since 1.0.5\n     *\n     * @see #getTextAntiAlias()\n     * @see #setTextAntiAlias(boolean)\n     */\n",
"org.jfree.chart.JFreeChart.getBackgroundPaint": "/**\n     * Returns the paint used for the chart background.\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setBackgroundPaint(Paint)\n     */\n",
"org.jfree.chart.JFreeChart.setBackgroundPaint": "/**\n     * Sets the paint used to fill the chart background and sends a\n     * {@link ChartChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getBackgroundPaint()\n     */\n",
"org.jfree.chart.JFreeChart.getBackgroundImage": "/**\n     * Returns the background image for the chart, or {@code null} if\n     * there is no image.\n     *\n     * @return The image (possibly {@code null}).\n     *\n     * @see #setBackgroundImage(Image)\n     */\n",
"org.jfree.chart.JFreeChart.setBackgroundImage": "/**\n     * Sets the background image for the chart and sends a\n     * {@link ChartChangeEvent} to all registered listeners.\n     *\n     * @param image  the image ({@code null} permitted).\n     *\n     * @see #getBackgroundImage()\n     */\n",
"org.jfree.chart.JFreeChart.getBackgroundImageAlignment": "/**\n     * Returns the background image alignment. Alignment constants are defined\n     * in the {@link Align} class.\n     *\n     * @return The alignment.\n     *\n     * @see #setBackgroundImageAlignment(int)\n     */\n",
"org.jfree.chart.JFreeChart.setBackgroundImageAlignment": "/**\n     * Sets the background alignment.  Alignment options are defined by the\n     * {@link org.jfree.chart.ui.Align} class.\n     *\n     * @param alignment  the alignment.\n     *\n     * @see #getBackgroundImageAlignment()\n     */\n",
"org.jfree.chart.JFreeChart.getBackgroundImageAlpha": "/**\n     * Returns the alpha-transparency for the chart's background image.\n     *\n     * @return The alpha-transparency.\n     *\n     * @see #setBackgroundImageAlpha(float)\n     */\n",
"org.jfree.chart.JFreeChart.setBackgroundImageAlpha": "/**\n     * Sets the alpha-transparency for the chart's background image.\n     * Registered listeners are notified that the chart has been changed.\n     *\n     * @param alpha  the alpha value.\n     *\n     * @see #getBackgroundImageAlpha()\n     */\n",
"org.jfree.chart.JFreeChart.isNotify": "/**\n     * Returns a flag that controls whether or not change events are sent to\n     * registered listeners.\n     *\n     * @return A boolean.\n     *\n     * @see #setNotify(boolean)\n     */\n",
"org.jfree.chart.JFreeChart.setNotify": "/**\n     * Sets a flag that controls whether or not listeners receive\n     * {@link ChartChangeEvent} notifications.\n     *\n     * @param notify  a boolean.\n     *\n     * @see #isNotify()\n     */\n",
"org.jfree.chart.JFreeChart.draw": "/**\n     * Draws the chart on a Java 2D graphics device (such as the screen or a\n     * printer).\n     * <P>\n     * This method is the focus of the entire JFreeChart library.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area within which the chart should be drawn.\n     */\n",
"org.jfree.chart.JFreeChart.draw": "/**\n     * Draws the chart on a Java 2D graphics device (such as the screen or a\n     * printer).  This method is the focus of the entire JFreeChart library.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area within which the chart should be drawn.\n     * @param info  records info about the drawing (null means collect no info).\n     */\n",
"org.jfree.chart.JFreeChart.draw": "/**\n     * Draws the chart on a Java 2D graphics device (such as the screen or a\n     * printer).\n     * <P>\n     * This method is the focus of the entire JFreeChart library.\n     *\n     * @param g2  the graphics device.\n     * @param chartArea  the area within which the chart should be drawn.\n     * @param anchor  the anchor point (in Java2D space) for the chart\n     *                ({@code null} permitted).\n     * @param info  records info about the drawing (null means collect no info).\n     */\n",
"org.jfree.chart.JFreeChart.createAlignedRectangle2D": "/**\n     * Creates a rectangle that is aligned to the frame.\n     *\n     * @param dimensions  the dimensions for the rectangle.\n     * @param frame  the frame to align to.\n     * @param hAlign  the horizontal alignment.\n     * @param vAlign  the vertical alignment.\n     *\n     * @return A rectangle.\n     */\n",
"org.jfree.chart.JFreeChart.drawTitle": "/**\n     * Draws a title.  The title should be drawn at the top, bottom, left or\n     * right of the specified area, and the area should be updated to reflect\n     * the amount of space used by the title.\n     *\n     * @param t  the title ({@code null} not permitted).\n     * @param g2  the graphics device ({@code null} not permitted).\n     * @param area  the chart area, excluding any existing titles\n     *              ({@code null} not permitted).\n     * @param entities  a flag that controls whether or not an entity\n     *                  collection is returned for the title.\n     *\n     * @return An entity collection for the title (possibly {@code null}).\n     */\n",
"org.jfree.chart.JFreeChart.createBufferedImage": "/**\n     * Creates and returns a buffered image into which the chart has been drawn.\n     *\n     * @param width  the width.\n     * @param height  the height.\n     *\n     * @return A buffered image.\n     */\n",
"org.jfree.chart.JFreeChart.createBufferedImage": "/**\n     * Creates and returns a buffered image into which the chart has been drawn.\n     *\n     * @param width  the width.\n     * @param height  the height.\n     * @param info  carries back chart state information ({@code null}\n     *              permitted).\n     *\n     * @return A buffered image.\n     */\n",
"org.jfree.chart.JFreeChart.createBufferedImage": "/**\n     * Creates and returns a buffered image into which the chart has been drawn.\n     *\n     * @param width  the width.\n     * @param height  the height.\n     * @param imageType  the image type.\n     * @param info  carries back chart state information ({@code null}\n     *              permitted).\n     *\n     * @return A buffered image.\n     */\n",
"org.jfree.chart.JFreeChart.createBufferedImage": "/**\n     * Creates and returns a buffered image into which the chart has been drawn.\n     *\n     * @param imageWidth  the image width.\n     * @param imageHeight  the image height.\n     * @param drawWidth  the width for drawing the chart (will be scaled to\n     *                   fit image).\n     * @param drawHeight  the height for drawing the chart (will be scaled to\n     *                    fit image).\n     * @param info  optional object for collection chart dimension and entity\n     *              information.\n     *\n     * @return A buffered image.\n     */\n",
"org.jfree.chart.JFreeChart.handleClick": "/**\n     * Handles a 'click' on the chart.  JFreeChart is not a UI component, so\n     * some other object (for example, {@link ChartPanel}) needs to capture\n     * the click event and pass it onto the JFreeChart object.\n     * If you are not using JFreeChart in a client application, then this\n     * method is not required.\n     *\n     * @param x  x-coordinate of the click (in Java2D space).\n     * @param y  y-coordinate of the click (in Java2D space).\n     * @param info  contains chart dimension and entity information\n     *              ({@code null} not permitted).\n     */\n",
"org.jfree.chart.JFreeChart.addChangeListener": "/**\n     * Registers an object for notification of changes to the chart.\n     *\n     * @param listener  the listener ({@code null} not permitted).\n     *\n     * @see #removeChangeListener(ChartChangeListener)\n     */\n",
"org.jfree.chart.JFreeChart.removeChangeListener": "/**\n     * Deregisters an object for notification of changes to the chart.\n     *\n     * @param listener  the listener ({@code null} not permitted)\n     *\n     * @see #addChangeListener(ChartChangeListener)\n     */\n",
"org.jfree.chart.JFreeChart.fireChartChanged": "/**\n     * Sends a default {@link ChartChangeEvent} to all registered listeners.\n     * <P>\n     * This method is for convenience only.\n     */\n",
"org.jfree.chart.JFreeChart.notifyListeners": "/**\n     * Sends a {@link ChartChangeEvent} to all registered listeners.\n     *\n     * @param event  information about the event that triggered the\n     *               notification.\n     */\n",
"org.jfree.chart.JFreeChart.addProgressListener": "/**\n     * Registers an object for notification of progress events relating to the\n     * chart.\n     *\n     * @param listener  the object being registered.\n     *\n     * @see #removeProgressListener(ChartProgressListener)\n     */\n",
"org.jfree.chart.JFreeChart.removeProgressListener": "/**\n     * Deregisters an object for notification of changes to the chart.\n     *\n     * @param listener  the object being deregistered.\n     *\n     * @see #addProgressListener(ChartProgressListener)\n     */\n",
"org.jfree.chart.JFreeChart.notifyListeners": "/**\n     * Sends a {@link ChartProgressEvent} to all registered listeners.\n     *\n     * @param event  information about the event that triggered the\n     *               notification.\n     */\n",
"org.jfree.chart.JFreeChart.titleChanged": "/**\n     * Receives notification that a chart title has changed, and passes this\n     * on to registered listeners.\n     *\n     * @param event  information about the chart title change.\n     */\n",
"org.jfree.chart.JFreeChart.plotChanged": "/**\n     * Receives notification that the plot has changed, and passes this on to\n     * registered listeners.\n     *\n     * @param event  information about the plot change.\n     */\n",
"org.jfree.chart.JFreeChart.equals": "/**\n     * Tests this chart for equality with another object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.JFreeChart.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.JFreeChart.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.JFreeChart.clone": "/**\n     * Clones the object, and takes care of listeners.\n     * Note: caller shall register its own listeners on cloned graph.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if the chart is not cloneable.\n     */\n",
"org.jfree.chart.resources.JFreeChartResources.getContents": "/**\n     * Returns the array of strings in the resource bundle.\n     *\n     * @return The resources.\n     */\n",
"org.jfree.chart.text.G2TextMeasurer.getStringWidth": "/**\n     * Returns the string width.\n     * \n     * @param text  the text.\n     * @param start  the index of the first character to measure.\n     * @param end  the index of the last character to measure.\n     * \n     * @return The string width.\n     */\n",
"org.jfree.chart.text.TextFragment.getText": "/**\n     * Returns the text.\n     * \n     * @return The text (possibly {@code null}).\n     */\n",
"org.jfree.chart.text.TextFragment.getFont": "/**\n     * Returns the font.\n     * \n     * @return The font (never {@code null}).\n     */\n",
"org.jfree.chart.text.TextFragment.getPaint": "/**\n     * Returns the text paint.\n     * \n     * @return The text paint (never {@code null}).\n     */\n",
"org.jfree.chart.text.TextFragment.getBaselineOffset": "/**\n     * Returns the baseline offset.\n     * \n     * @return The baseline offset.\n     */\n",
"org.jfree.chart.text.TextFragment.draw": "/**\n     * Draws the text fragment.\n     * \n     * @param g2  the graphics device.\n     * @param anchorX  the x-coordinate of the anchor point.\n     * @param anchorY  the y-coordinate of the anchor point.\n     * @param anchor  the location of the text that is aligned to the anchor \n     *                point.\n     * @param rotateX  the x-coordinate of the rotation point.\n     * @param rotateY  the y-coordinate of the rotation point.\n     * @param angle  the angle.\n     */\n",
"org.jfree.chart.text.TextFragment.calculateDimensions": "/**\n     * Calculates the dimensions of the text fragment.\n     * \n     * @param g2  the graphics device.\n     * \n     * @return The width and height of the text.\n     */\n",
"org.jfree.chart.text.TextFragment.calculateBaselineOffset": "/**\n     * Calculates the vertical offset between the baseline and the specified \n     * text anchor.\n     * \n     * @param g2  the graphics device.\n     * @param anchor  the anchor.\n     * \n     * @return the offset.\n     */\n",
"org.jfree.chart.text.TextFragment.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     * \n     * @param obj  the object to test against ({@code null} permitted).\n     * \n     * @return A boolean.\n     */\n",
"org.jfree.chart.text.TextFragment.hashCode": "/**\n     * Returns a hash code for this object.\n     * \n     * @return A hash code.\n     */\n",
"org.jfree.chart.text.TextFragment.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.text.TextFragment.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.text.TextLine.addFragment": "/**\n     * Adds a text fragment to the text line.\n     * \n     * @param fragment  the text fragment ({@code null} not permitted).\n     */\n",
"org.jfree.chart.text.TextLine.removeFragment": "/**\n     * Removes a fragment from the line.\n     * \n     * @param fragment  the fragment to remove.\n     */\n",
"org.jfree.chart.text.TextLine.draw": "/**\n     * Draws the text line.\n     * \n     * @param g2  the graphics device.\n     * @param anchorX  the x-coordinate for the anchor point.\n     * @param anchorY  the y-coordinate for the anchor point.\n     * @param anchor  the point on the text line that is aligned to the anchor \n     *                point.\n     * @param rotateX  the x-coordinate for the rotation point.\n     * @param rotateY  the y-coordinate for the rotation point.\n     * @param angle  the rotation angle (in radians).\n     */\n",
"org.jfree.chart.text.TextLine.calculateDimensions": "/**\n     * Calculates the width and height of the text line.\n     * \n     * @param g2  the graphics device.\n     * \n     * @return The width and height.\n     */\n",
"org.jfree.chart.text.TextLine.getFirstTextFragment": "/**\n     * Returns the first text fragment in the line.\n     * \n     * @return The first text fragment in the line.\n     */\n",
"org.jfree.chart.text.TextLine.getLastTextFragment": "/**\n     * Returns the last text fragment in the line.\n     * \n     * @return The last text fragment in the line.\n     */\n",
"org.jfree.chart.text.TextLine.calculateBaselineOffset": "/**\n     * Calculate the offsets required to translate from the specified anchor \n     * position to the left baseline position.\n     * \n     * @param g2  the graphics device.\n     * @param anchor  the anchor position.\n     * \n     * @return The offsets.\n     */\n",
"org.jfree.chart.text.TextLine.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     * \n     * @param obj  the object to test against ({@code null} permitted).\n     * \n     * @return A boolean.\n     */\n",
"org.jfree.chart.text.TextLine.hashCode": "/**\n     * Returns a hash code for this object.\n     * \n     * @return A hash code.\n     */\n",
"org.jfree.chart.text.TextBox.getOutlinePaint": "/**\n     * Returns the outline paint.\n     *\n     * @return The outline paint.\n     */\n",
"org.jfree.chart.text.TextBox.setOutlinePaint": "/**\n     * Sets the outline paint.\n     *\n     * @param paint  the paint.\n     */\n",
"org.jfree.chart.text.TextBox.getOutlineStroke": "/**\n     * Returns the outline stroke.\n     *\n     * @return The outline stroke.\n     */\n",
"org.jfree.chart.text.TextBox.setOutlineStroke": "/**\n     * Sets the outline stroke.\n     *\n     * @param stroke  the stroke.\n     */\n",
"org.jfree.chart.text.TextBox.getInteriorGap": "/**\n     * Returns the interior gap.\n     *\n     * @return The interior gap.\n     */\n",
"org.jfree.chart.text.TextBox.setInteriorGap": "/**\n     * Sets the interior gap.\n     *\n     * @param gap  the gap.\n     */\n",
"org.jfree.chart.text.TextBox.getBackgroundPaint": "/**\n     * Returns the background paint.\n     *\n     * @return The background paint.\n     */\n",
"org.jfree.chart.text.TextBox.setBackgroundPaint": "/**\n     * Sets the background paint.\n     *\n     * @param paint  the paint.\n     */\n",
"org.jfree.chart.text.TextBox.getShadowPaint": "/**\n     * Returns the shadow paint.\n     *\n     * @return The shadow paint.\n     */\n",
"org.jfree.chart.text.TextBox.setShadowPaint": "/**\n     * Sets the shadow paint.\n     *\n     * @param paint  the paint.\n     */\n",
"org.jfree.chart.text.TextBox.getShadowXOffset": "/**\n     * Returns the x-offset for the shadow effect.\n     *\n     * @return The offset.\n     */\n",
"org.jfree.chart.text.TextBox.setShadowXOffset": "/**\n     * Sets the x-offset for the shadow effect.\n     *\n     * @param offset  the offset (in Java2D units).\n     */\n",
"org.jfree.chart.text.TextBox.getShadowYOffset": "/**\n     * Returns the y-offset for the shadow effect.\n     *\n     * @return The offset.\n     */\n",
"org.jfree.chart.text.TextBox.setShadowYOffset": "/**\n     * Sets the y-offset for the shadow effect.\n     *\n     * @param offset  the offset (in Java2D units).\n     */\n",
"org.jfree.chart.text.TextBox.getTextBlock": "/**\n     * Returns the text block.\n     *\n     * @return The text block.\n     */\n",
"org.jfree.chart.text.TextBox.setTextBlock": "/**\n     * Sets the text block.\n     *\n     * @param block  the block.\n     */\n",
"org.jfree.chart.text.TextBox.draw": "/**\n     * Draws the text box.\n     *\n     * @param g2  the graphics device.\n     * @param x  the x-coordinate.\n     * @param y  the y-coordinate.\n     * @param anchor  the anchor point.\n     */\n",
"org.jfree.chart.text.TextBox.getHeight": "/**\n     * Returns the height of the text box.\n     *\n     * @param g2  the graphics device.\n     *\n     * @return The height (in Java2D units).\n     */\n",
"org.jfree.chart.text.TextBox.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the object to test against ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.text.TextBox.hashCode": "/**\n     * Returns a hash code for this object.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.text.TextBox.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.text.TextBox.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.text.TextMeasurer.getStringWidth": "/**\n     * Calculates the width of a {@code String} in the current \n     * {@code Graphics} context.\n     *\n     * @param text  the text.\n     * @param start  the start position of the substring to be measured.\n     * @param end  the position of the last character to be measured.\n     *\n     * @return The width of the string in Java2D units.\n     */\n",
"org.jfree.chart.text.TextUtils.createTextBlock": "/**\n     * Creates a {@link TextBlock} from a {@code String}.  Line breaks\n     * are added where the {@code String} contains '\\n' characters.\n     *\n     * @param text  the text.\n     * @param font  the font.\n     * @param paint  the paint.\n     *\n     * @return A text block.\n     */\n",
"org.jfree.chart.text.TextUtils.createTextBlock": "/**\n     * Creates a new text block from the given string, breaking the\n     * text into lines so that the {@code maxWidth} value is respected.\n     *\n     * @param text  the text.\n     * @param font  the font.\n     * @param paint  the paint.\n     * @param maxWidth  the maximum width for each line.\n     * @param measurer  the text measurer.\n     *\n     * @return A text block.\n     */\n",
"org.jfree.chart.text.TextUtils.createTextBlock": "/**\n     * Creates a new text block from the given string, breaking the\n     * text into lines so that the {@code maxWidth} value is\n     * respected.\n     *\n     * @param text  the text.\n     * @param font  the font.\n     * @param paint  the paint.\n     * @param maxWidth  the maximum width for each line.\n     * @param maxLines  the maximum number of lines.\n     * @param measurer  the text measurer.\n     *\n     * @return A text block.\n     */\n",
"org.jfree.chart.text.TextUtils.nextLineBreak": "/**\n     * Returns the character index of the next line break.  If the next\n     * character is wider than {@code width]} this method will return\n     * {@code start} - the caller should check for this case.\n     *\n     * @param text  the text ({@code null} not permitted).\n     * @param start  the start index.\n     * @param width  the target display width.\n     * @param iterator  the word break iterator.\n     * @param measurer  the text measurer.\n     *\n     * @return The index of the next line break.\n     */\n",
"org.jfree.chart.text.TextUtils.getTextBounds": "/**\n     * Returns the bounds for the specified text.\n     *\n     * @param text  the text ({@code null} permitted).\n     * @param g2  the graphics context (not {@code null}).\n     * @param fm  the font metrics (not {@code null}).\n     *\n     * @return The text bounds ({@code null} if the {@code text}\n     *         argument is {@code null}).\n     */\n",
"org.jfree.chart.text.TextUtils.calcAlignedStringBounds": "/**\n     * Returns the bounds of an aligned string.\n     * \n     * @param text  the string ({@code null} not permitted).\n     * @param g2  the graphics target ({@code null} not permitted).\n     * @param x  the x-coordinate.\n     * @param y  the y-coordinate.\n     * @param anchor  the anchor point that will be aligned to \n     *     {@code (x, y)} ({@code null} not permitted).\n     * \n     * @return The text bounds (never {@code null}).\n     * \n     * @since 1.3\n     */\n",
"org.jfree.chart.text.TextUtils.drawAlignedString": "/**\n     * Draws a string such that the specified anchor point is aligned to the\n     * given (x, y) location.\n     *\n     * @param text  the text.\n     * @param g2  the graphics device.\n     * @param x  the x coordinate (Java 2D).\n     * @param y  the y coordinate (Java 2D).\n     * @param anchor  the anchor location.\n     *\n     * @return The text bounds (adjusted for the text position).\n     */\n",
"org.jfree.chart.text.TextUtils.deriveTextBoundsAnchorOffsets": "/**\n     * A utility method that calculates the anchor offsets for a string.\n     * Normally, the (x, y) coordinate for drawing text is a point on the\n     * baseline at the left of the text string.  If you add these offsets to\n     * (x, y) and draw the string, then the anchor point should coincide with\n     * the (x, y) point.\n     *\n     * @param g2  the graphics device (not {@code null}).\n     * @param text  the text.\n     * @param anchor  the anchor point.\n     * @param textBounds  the text bounds (if not {@code null}, this\n     *                    object will be updated by this method to match the\n     *                    string bounds).\n     *\n     * @return  The offsets.\n     */\n",
"org.jfree.chart.text.TextUtils.drawRotatedString": "/**\n     * A utility method for drawing rotated text.\n     * <P>\n     * A common rotation is -Math.PI/2 which draws text 'vertically' (with the\n     * top of the characters on the left).\n     *\n     * @param text  the text.\n     * @param g2  the graphics device.\n     * @param angle  the angle of the (clockwise) rotation (in radians).\n     * @param x  the x-coordinate.\n     * @param y  the y-coordinate.\n     */\n",
"org.jfree.chart.text.TextUtils.drawRotatedString": "/**\n     * A utility method for drawing rotated text.\n     * <P>\n     * A common rotation is -Math.PI/2 which draws text 'vertically' (with the\n     * top of the characters on the left).\n     *\n     * @param text  the text.\n     * @param g2  the graphics device.\n     * @param textX  the x-coordinate for the text (before rotation).\n     * @param textY  the y-coordinate for the text (before rotation).\n     * @param angle  the angle of the (clockwise) rotation (in radians).\n     * @param rotateX  the point about which the text is rotated.\n     * @param rotateY  the point about which the text is rotated.\n     */\n",
"org.jfree.chart.text.TextUtils.drawRotatedString": "/**\n     * Draws a string that is aligned by one anchor point and rotated about\n     * another anchor point.\n     *\n     * @param text  the text.\n     * @param g2  the graphics device.\n     * @param x  the x-coordinate for positioning the text.\n     * @param y  the y-coordinate for positioning the text.\n     * @param textAnchor  the text anchor.\n     * @param angle  the rotation angle.\n     * @param rotationX  the x-coordinate for the rotation anchor point.\n     * @param rotationY  the y-coordinate for the rotation anchor point.\n     */\n",
"org.jfree.chart.text.TextUtils.drawRotatedString": "/**\n     * Draws a string that is aligned by one anchor point and rotated about\n     * another anchor point.\n     *\n     * @param text  the text.\n     * @param g2  the graphics device.\n     * @param x  the x-coordinate for positioning the text.\n     * @param y  the y-coordinate for positioning the text.\n     * @param textAnchor  the text anchor.\n     * @param angle  the rotation angle (in radians).\n     * @param rotationAnchor  the rotation anchor.\n     */\n",
"org.jfree.chart.text.TextUtils.calculateRotatedStringBounds": "/**\n     * Returns a shape that represents the bounds of the string after the\n     * specified rotation has been applied.\n     *\n     * @param text  the text ({@code null} permitted).\n     * @param g2  the graphics device.\n     * @param x  the x coordinate for the anchor point.\n     * @param y  the y coordinate for the anchor point.\n     * @param textAnchor  the text anchor.\n     * @param angle  the angle.\n     * @param rotationAnchor  the rotation anchor.\n     *\n     * @return The bounds (possibly {@code null}).\n     */\n",
"org.jfree.chart.text.TextUtils.deriveTextBoundsAnchorOffsets": "/**\n     * A utility method that calculates the anchor offsets for a string.\n     * Normally, the (x, y) coordinate for drawing text is a point on the\n     * baseline at the left of the text string.  If you add these offsets to\n     * (x, y) and draw the string, then the anchor point should coincide with\n     * the (x, y) point.\n     *\n     * @param g2  the graphics device (not {@code null}).\n     * @param text  the text.\n     * @param anchor  the anchor point.\n     *\n     * @return  The offsets.\n     */\n",
"org.jfree.chart.text.TextUtils.deriveRotationAnchorOffsets": "/**\n     * A utility method that calculates the rotation anchor offsets for a\n     * string.  These offsets are relative to the text starting coordinate\n     * ({@code BASELINE_LEFT}).\n     *\n     * @param g2  the graphics device.\n     * @param text  the text.\n     * @param anchor  the anchor point.\n     *\n     * @return The offsets.\n     */\n",
"org.jfree.chart.text.TextUtils.calculateRotatedStringBounds": "/**\n     * Returns a shape that represents the bounds of the string after the\n     * specified rotation has been applied.\n     *\n     * @param text  the text ({@code null} permitted).\n     * @param g2  the graphics device.\n     * @param textX  the x coordinate for the text.\n     * @param textY  the y coordinate for the text.\n     * @param angle  the angle.\n     * @param rotateX  the x coordinate for the rotation point.\n     * @param rotateY  the y coordinate for the rotation point.\n     *\n     * @return The bounds ({@code null} if {@code text} is\n     *         {@code null} or has zero length).\n     */\n",
"org.jfree.chart.text.TextUtils.getUseFontMetricsGetStringBounds": "/**\n     * Returns the flag that controls whether the FontMetrics.getStringBounds()\n     * method is used or not.  If you are having trouble with label alignment\n     * or positioning, try changing the value of this flag.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.text.TextUtils.setUseFontMetricsGetStringBounds": "/**\n     * Sets the flag that controls whether the FontMetrics.getStringBounds()\n     * method is used or not.  If you are having trouble with label alignment\n     * or positioning, try changing the value of this flag.\n     *\n     * @param use  the flag.\n     */\n",
"org.jfree.chart.text.TextUtils.isUseDrawRotatedStringWorkaround": "/**\n     * Returns the flag that controls whether or not a workaround is used for\n     * drawing rotated strings.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.text.TextUtils.setUseDrawRotatedStringWorkaround": "/**\n     * Sets the flag that controls whether or not a workaround is used for\n     * drawing rotated strings.  The related bug is on Sun's bug parade\n     * (id 4312117) and the workaround involves using a {@code TextLayout}\n     * instance to draw the text instead of calling the\n     * {@code drawString()} method in the {@code Graphics2D} class.\n     *\n     * @param use  the new flag value.\n     */\n",
"org.jfree.chart.text.TextUtils.getDrawStringsWithFontAttributes": "/**\n     * Returns the flag that controls whether or not strings are drawn using\n     * the current font attributes (such as underlining, strikethrough etc).\n     * The default value is {@code false}.\n     * \n     * @return A boolean. \n     * \n     * @since 1.0.21\n     */\n",
"org.jfree.chart.text.TextUtils.setDrawStringsWithFontAttributes": "/**\n     * Sets the flag that controls whether or not strings are drawn using the\n     * current font attributes.  This is a hack to allow underlining of titles\n     * without big changes to the API.  See:\n     * http://www.jfree.org/phpBB2/viewtopic.php?p=45459&amp;highlight=#45459\n     * \n     * @param b  the new flag value.\n     * \n     * @since 1.0.21\n     */\n",
"org.jfree.chart.text.AttributedStringUtils.equal": "/**\n     * Tests two attributed strings for equality.\n     * \n     * @param s1  string 1 ({@code null} permitted).\n     * @param s2  string 2 ({@code null} permitted).\n     * \n     * @return {@code true} if {@code s1} and {@code s2} are\n     *         equal or both {@code null}, and {@code false} \n     *         otherwise.\n     */\n",
"org.jfree.chart.text.TextBlockAnchor.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.chart.text.TextBlockAnchor.equals": "/**\n     * Returns {@code true} if this object is equal to the specified \n     * object, and {@code false} otherwise.\n     *\n     * @param o  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.text.TextBlockAnchor.hashCode": "/**\n     * Returns a hash code value for the object.\n     *\n     * @return the hashcode\n     */\n",
"org.jfree.chart.text.TextBlockAnchor.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     * \n     * @return The object.\n     * \n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.chart.text.TextBlock.getLineAlignment": "/**\n     * Returns the alignment of the lines of text within the block.\n     * \n     * @return The alignment (never {@code null}).\n     */\n",
"org.jfree.chart.text.TextBlock.setLineAlignment": "/**\n     * Sets the alignment of the lines of text within the block.\n     * \n     * @param alignment  the alignment ({@code null} not permitted).\n     */\n",
"org.jfree.chart.text.TextBlock.addLine": "/**\n     * Adds a line of text that will be displayed using the specified font.\n     * \n     * @param text  the text.\n     * @param font  the font.\n     * @param paint  the paint.\n     */\n",
"org.jfree.chart.text.TextBlock.addLine": "/**\n     * Adds a {@link TextLine} to the block.\n     * \n     * @param line  the line.\n     */\n",
"org.jfree.chart.text.TextBlock.getLastLine": "/**\n     * Returns the last line in the block.\n     * \n     * @return The last line in the block.\n     */\n",
"org.jfree.chart.text.TextBlock.getLines": "/**\n     * Returns an unmodifiable list containing the lines for the text block.\n     *\n     * @return A list of {@link TextLine} objects.\n     */\n",
"org.jfree.chart.text.TextBlock.calculateDimensions": "/**\n     * Returns the width and height of the text block.\n     * \n     * @param g2  the graphics device.\n     * \n     * @return The width and height.\n     */\n",
"org.jfree.chart.text.TextBlock.calculateBounds": "/**\n     * Returns the bounds of the text block.\n     * \n     * @param g2  the graphics device ({@code null} not permitted).\n     * @param anchorX  the x-coordinate for the anchor point.\n     * @param anchorY  the y-coordinate for the anchor point.\n     * @param anchor  the text block anchor ({@code null} not permitted).\n     * @param rotateX  the x-coordinate for the rotation point.\n     * @param rotateY  the y-coordinate for the rotation point.\n     * @param angle  the rotation angle.\n     * \n     * @return The bounds.\n     */\n",
"org.jfree.chart.text.TextBlock.draw": "/**\n     * Draws the text block at a specific location.\n     * \n     * @param g2  the graphics device.\n     * @param x  the x-coordinate for the anchor point.\n     * @param y  the y-coordinate for the anchor point.\n     * @param anchor  the anchor point.\n     */\n",
"org.jfree.chart.text.TextBlock.draw": "/**\n     * Draws the text block, aligning it with the specified anchor point and \n     * rotating it about the specified rotation point.\n     * \n     * @param g2  the graphics device.\n     * @param anchorX  the x-coordinate for the anchor point.\n     * @param anchorY  the y-coordinate for the anchor point.\n     * @param anchor  the point on the text block that is aligned to the \n     *                anchor point.\n     * @param rotateX  the x-coordinate for the rotation point.\n     * @param rotateY  the x-coordinate for the rotation point.\n     * @param angle  the rotation (in radians).\n     */\n",
"org.jfree.chart.text.TextBlock.calculateOffsets": "/**\n     * Calculates the x and y offsets required to align the text block with the\n     * specified anchor point.  This assumes that the top left of the text \n     * block is at (0.0, 0.0).\n     * \n     * @param anchor  the anchor position.\n     * @param width  the width of the text block.\n     * @param height  the height of the text block.\n     * \n     * @return The offsets (float[0] = x offset, float[1] = y offset).\n     */\n",
"org.jfree.chart.text.TextBlock.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     * \n     * @param obj  the object to test against ({@code null} permitted).\n     * \n     * @return A boolean.\n     */\n",
"org.jfree.chart.text.TextBlock.hashCode": "/**\n     * Returns a hash code for this object.\n     * \n     * @return A hash code.\n     */\n",
"org.jfree.chart.ChartHints.isCompatibleValue": "/**\n         * Returns {@code true} if {@code val} is a value that is\n         * compatible with this key, and {@code false} otherwise.\n         * \n         * @param val  the value.\n         * \n         * @return A boolean. \n         */\n",
"org.jfree.chart.labels.CrosshairLabelGenerator.generateLabel": "/**\n     * Returns a string that can be used as the label for a crosshair.\n     * \n     * @param crosshair  the crosshair ({@code null} not permitted).\n     * \n     * @return The label (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.CategorySeriesLabelGenerator.generateLabel": "/**\n     * Generates a label for the specified series.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series index.\n     *\n     * @return A series label.\n     */\n",
"org.jfree.chart.labels.StandardXYSeriesLabelGenerator.generateLabel": "/**\n     * Generates a label for the specified series.  This label will be\n     * used for the chart legend.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series.\n     *\n     * @return A series label.\n     */\n",
"org.jfree.chart.labels.StandardXYSeriesLabelGenerator.createItemArray": "/**\n     * Creates the array of items that can be passed to the\n     * {@link MessageFormat} class for creating labels.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series (zero-based index).\n     *\n     * @return The items (never {@code null}).\n     */\n",
"org.jfree.chart.labels.StandardXYSeriesLabelGenerator.clone": "/**\n     * Returns an independent copy of the generator.  This is unnecessary,\n     * because instances are immutable anyway, but we retain this\n     * behaviour for backwards compatibility.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if cloning is not supported.\n     */\n",
"org.jfree.chart.labels.StandardXYSeriesLabelGenerator.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the other object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.labels.StandardXYSeriesLabelGenerator.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.labels.XYSeriesLabelGenerator.generateLabel": "/**\n     * Generates a label for the specified series.  This label will be\n     * used for the chart legend.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series.\n     *\n     * @return A series label.\n     */\n",
"org.jfree.chart.labels.HighLowItemLabelGenerator.generateToolTip": "/**\n     * Generates a tooltip text item for a particular item within a series.\n     *\n     * @param dataset  the dataset.\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The tooltip text.\n     */\n",
"org.jfree.chart.labels.HighLowItemLabelGenerator.generateLabel": "/**\n     * Generates a label for the specified item. The label is typically a \n     * formatted version of the data value, but any text can be used.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series index (zero-based).\n     * @param category  the category index (zero-based).\n     *\n     * @return The label (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.HighLowItemLabelGenerator.clone": "/**\n     * Returns an independent copy of the generator.\n     * \n     * @return A clone.\n     * \n     * @throws CloneNotSupportedException if cloning is not supported.\n     */\n",
"org.jfree.chart.labels.HighLowItemLabelGenerator.equals": "/**\n     * Tests if this object is equal to another.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.labels.HighLowItemLabelGenerator.hashCode": "/**\n     * Returns a hash code for this instance.\n     * \n     * @return A hash code.\n     */\n",
"org.jfree.chart.labels.AbstractPieItemLabelGenerator.getLabelFormat": "/**\n     * Returns the label format string.\n     *\n     * @return The label format string (never {@code null}).\n     */\n",
"org.jfree.chart.labels.AbstractPieItemLabelGenerator.getNumberFormat": "/**\n     * Returns the number formatter.\n     *\n     * @return The formatter (never {@code null}).\n     */\n",
"org.jfree.chart.labels.AbstractPieItemLabelGenerator.getPercentFormat": "/**\n     * Returns the percent formatter.\n     *\n     * @return The formatter (never {@code null}).\n     */\n",
"org.jfree.chart.labels.AbstractPieItemLabelGenerator.createItemArray": "/**\n     * Creates the array of items that can be passed to the\n     * {@link MessageFormat} class for creating labels.  The returned array\n     * contains four values:\n     * <ul>\n     * <li>result[0] = the section key converted to a {@code String};</li>\n     * <li>result[1] = the formatted data value;</li>\n     * <li>result[2] = the formatted percentage (of the total);</li>\n     * <li>result[3] = the formatted total value.</li>\n     * </ul>\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param key  the key ({@code null} not permitted).\n     *\n     * @return The items (never {@code null}).\n     */\n",
"org.jfree.chart.labels.AbstractPieItemLabelGenerator.generateSectionLabel": "/**\n     * Generates a label for a pie section.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param key  the section key ({@code null} not permitted).\n     *\n     * @return The label (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.AbstractPieItemLabelGenerator.equals": "/**\n     * Tests the generator for equality with an arbitrary object.\n     *\n     * @param obj  the object to test against ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.labels.AbstractPieItemLabelGenerator.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.labels.AbstractPieItemLabelGenerator.clone": "/**\n     * Returns an independent copy of the generator.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  should not happen.\n     */\n",
"org.jfree.chart.labels.ItemLabelPosition.getItemLabelAnchor": "/**\n     * Returns the item label anchor.\n     *\n     * @return The item label anchor (never {@code null}).\n     */\n",
"org.jfree.chart.labels.ItemLabelPosition.getTextAnchor": "/**\n     * Returns the text anchor.\n     *\n     * @return The text anchor (never {@code null}).\n     */\n",
"org.jfree.chart.labels.ItemLabelPosition.getRotationAnchor": "/**\n     * Returns the rotation anchor point.\n     *\n     * @return The rotation anchor point (never {@code null}).\n     */\n",
"org.jfree.chart.labels.ItemLabelPosition.getAngle": "/**\n     * Returns the angle of rotation for the label.\n     *\n     * @return The angle (in radians).\n     */\n",
"org.jfree.chart.labels.ItemLabelPosition.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.labels.StandardPieToolTipGenerator.generateToolTip": "/**\n     * Generates a tool tip text item for one section in a pie chart.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param key  the section key ({@code null} not permitted).\n     *\n     * @return The tool tip text (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.StandardPieToolTipGenerator.clone": "/**\n     * Returns an independent copy of the generator.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  should not happen.\n     */\n",
"org.jfree.chart.labels.MultipleXYSeriesLabelGenerator.addSeriesLabel": "/**\n     * Adds an extra label for the specified series.\n     *\n     * @param series  the series index.\n     * @param label  the label.\n     */\n",
"org.jfree.chart.labels.MultipleXYSeriesLabelGenerator.clearSeriesLabels": "/**\n     * Clears the extra labels for the specified series.\n     *\n     * @param series  the series index.\n     */\n",
"org.jfree.chart.labels.MultipleXYSeriesLabelGenerator.generateLabel": "/**\n     * Generates a label for the specified series.  This label will be\n     * used for the chart legend.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series.\n     *\n     * @return A series label.\n     */\n",
"org.jfree.chart.labels.MultipleXYSeriesLabelGenerator.createItemArray": "/**\n     * Creates the array of items that can be passed to the\n     * {@link MessageFormat} class for creating labels.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series (zero-based index).\n     *\n     * @return The items (never {@code null}).\n     */\n",
"org.jfree.chart.labels.MultipleXYSeriesLabelGenerator.clone": "/**\n     * Returns an independent copy of the generator.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if cloning is not supported.\n     */\n",
"org.jfree.chart.labels.MultipleXYSeriesLabelGenerator.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the other object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.labels.MultipleXYSeriesLabelGenerator.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.labels.IntervalCategoryItemLabelGenerator.createItemArray": "/**\n     * Creates the array of items that can be passed to the\n     * {@code MessageFormat} class for creating labels.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The items (never {@code null}).\n     */\n",
"org.jfree.chart.labels.StandardCrosshairLabelGenerator.getLabelTemplate": "/**\n     * Returns the label template string.\n     *\n     * @return The label template string (never {@code null}).\n     */\n",
"org.jfree.chart.labels.StandardCrosshairLabelGenerator.getNumberFormat": "/**\n     * Returns the number formatter.\n     *\n     * @return The formatter (never {@code null}).\n     */\n",
"org.jfree.chart.labels.StandardCrosshairLabelGenerator.generateLabel": "/**\n     * Returns a string that can be used as the label for a crosshair.\n     *\n     * @param crosshair  the crosshair ({@code null} not permitted).\n     *\n     * @return The label (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.StandardCrosshairLabelGenerator.equals": "/**\n     * Tests this generator for equality with an arbitrary object.\n     * \n     * @param obj  the object ({@code null} permitted).\n     * \n     * @return A boolean.\n     */\n",
"org.jfree.chart.labels.StandardCrosshairLabelGenerator.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code for this instance.\n     */\n",
"org.jfree.chart.labels.ItemLabelAnchor.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.chart.labels.ItemLabelAnchor.equals": "/**\n     * Returns {@code true} if this object is equal to the specified\n     * object, and {@code false} otherwise.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.labels.ItemLabelAnchor.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     *\n     * @return The object.\n     *\n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.chart.labels.CustomXYToolTipGenerator.getListCount": "/**\n     * Returns the number of tool tip lists stored by the renderer.\n     *\n     * @return The list count.\n     */\n",
"org.jfree.chart.labels.CustomXYToolTipGenerator.getToolTipCount": "/**\n     * Returns the number of tool tips in a given list.\n     *\n     * @param list  the list index (zero based).\n     *\n     * @return The tooltip count.\n     */\n",
"org.jfree.chart.labels.CustomXYToolTipGenerator.getToolTipText": "/**\n     * Returns the tool tip text for an item.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The tool tip text.\n     */\n",
"org.jfree.chart.labels.CustomXYToolTipGenerator.addToolTipSeries": "/**\n     * Adds a list of tooltips for a series.\n     *\n     * @param toolTips  the list of tool tips.\n     */\n",
"org.jfree.chart.labels.CustomXYToolTipGenerator.generateToolTip": "/**\n     * Generates a tool tip text item for a particular item within a series.\n     *\n     * @param data  the dataset (ignored in this implementation).\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The tooltip text.\n     */\n",
"org.jfree.chart.labels.CustomXYToolTipGenerator.clone": "/**\n     * Returns an independent copy of the generator.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if cloning is not supported.\n     */\n",
"org.jfree.chart.labels.CustomXYToolTipGenerator.equals": "/**\n     * Tests if this object is equal to another.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.labels.AbstractXYItemLabelGenerator.getFormatString": "/**\n     * Returns the format string (this controls the overall structure of the\n     * label).\n     *\n     * @return The format string (never {@code null}).\n     */\n",
"org.jfree.chart.labels.AbstractXYItemLabelGenerator.getXFormat": "/**\n     * Returns the number formatter for the x-values.\n     *\n     * @return The number formatter (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.AbstractXYItemLabelGenerator.getXDateFormat": "/**\n     * Returns the date formatter for the x-values.\n     *\n     * @return The date formatter (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.AbstractXYItemLabelGenerator.getYFormat": "/**\n     * Returns the number formatter for the y-values.\n     *\n     * @return The number formatter (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.AbstractXYItemLabelGenerator.getYDateFormat": "/**\n     * Returns the date formatter for the y-values.\n     *\n     * @return The date formatter (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.AbstractXYItemLabelGenerator.generateLabelString": "/**\n     * Generates a label string for an item in the dataset.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The label (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.AbstractXYItemLabelGenerator.getNullYString": "/**\n     * Returns the string representing a null value.\n     *\n     * @return The string representing a null value.\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.labels.AbstractXYItemLabelGenerator.createItemArray": "/**\n     * Creates the array of items that can be passed to the\n     * {@link MessageFormat} class for creating labels.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return An array of three items from the dataset formatted as\n     *         {@code String} objects (never {@code null}).\n     */\n",
"org.jfree.chart.labels.AbstractXYItemLabelGenerator.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the other object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.labels.AbstractXYItemLabelGenerator.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.labels.AbstractXYItemLabelGenerator.clone": "/**\n     * Returns an independent copy of the generator.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if cloning is not supported.\n     */\n",
"org.jfree.chart.labels.SymbolicXYItemLabelGenerator.generateToolTip": "/**\n     * Generates a tool tip text item for a particular item within a series.\n     *\n     * @param data  the dataset.\n     * @param series  the series number (zero-based index).\n     * @param item  the item number (zero-based index).\n     *\n     * @return The tool tip text (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.SymbolicXYItemLabelGenerator.generateLabel": "/**\n     * Generates a label for the specified item. The label is typically a\n     * formatted version of the data value, but any text can be used.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series index (zero-based).\n     * @param category  the category index (zero-based).\n     *\n     * @return The label (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.SymbolicXYItemLabelGenerator.round": "/**\n    * Round a double value.\n    *\n    * @param value  the value.\n    * @param nb  the exponent.\n    *\n    * @return The rounded value.\n    */\n",
"org.jfree.chart.labels.SymbolicXYItemLabelGenerator.clone": "/**\n     * Returns an independent copy of the generator.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if cloning is not supported.\n     */\n",
"org.jfree.chart.labels.SymbolicXYItemLabelGenerator.equals": "/**\n     * Tests if this object is equal to another.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.labels.SymbolicXYItemLabelGenerator.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.labels.IntervalXYToolTipGenerator.createItemArray": "/**\n     * Creates the array of items that can be passed to the\n     * {@link MessageFormat} class for creating labels.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return An array of seven items from the dataset formatted as\n     *         {@code String} objects (never {@code null}).\n     */\n",
"org.jfree.chart.labels.IntervalXYToolTipGenerator.generateToolTip": "/**\n     * Generates the tool tip text for an item in a dataset.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The tool tip text (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.IntervalXYToolTipGenerator.clone": "/**\n     * Returns an independent copy of the generator.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if cloning is not supported.\n     */\n",
"org.jfree.chart.labels.IntervalXYToolTipGenerator.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the other object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.labels.PieToolTipGenerator.generateToolTip": "/**\n     * Generates a tool tip text item for the specified item in the dataset.\n     * This method can return {@code null} to indicate that no tool tip\n     * should be displayed for an item.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param key  the section key ({@code null} not permitted).\n     *\n     * @return The tool tip text (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.IntervalCategoryToolTipGenerator.createItemArray": "/**\n     * Creates the array of items that can be passed to the\n     * {@code MessageFormat} class for creating labels.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The items (never {@code null}).\n     */\n",
"org.jfree.chart.labels.IntervalCategoryToolTipGenerator.equals": "/**\n     * Tests this tool tip generator for equality with an arbitrary\n     * object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.labels.CategoryItemLabelGenerator.generateRowLabel": "/**\n     * Generates a label for the specified row.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param row  the row index (zero-based).\n     *\n     * @return The label.\n     */\n",
"org.jfree.chart.labels.CategoryItemLabelGenerator.generateColumnLabel": "/**\n     * Generates a label for the specified row.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param column  the column index (zero-based).\n     *\n     * @return The label.\n     */\n",
"org.jfree.chart.labels.CategoryItemLabelGenerator.generateLabel": "/**\n     * Generates a label for the specified item. The label is typically a\n     * formatted version of the data value, but any text can be used.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The label (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.XYZToolTipGenerator.generateToolTip": "/**\n     * Generates a tool tip text item for a particular item within a series.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The tooltip text (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator.createItemArray": "/**\n     * Creates the array of items that can be passed to the\n     * {@link MessageFormat} class for creating labels.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The items (never {@code null}).\n     */\n",
"org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator.equals": "/**\n     * Tests if this object is equal to another.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.labels.StandardCategoryToolTipGenerator.generateToolTip": "/**\n     * Generates the tool tip text for an item in a dataset.  Note: in the\n     * current dataset implementation, each row is a series, and each column\n     * contains values for a particular category.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The tooltip text (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.StandardCategoryToolTipGenerator.equals": "/**\n     * Tests this generator for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.labels.IntervalXYItemLabelGenerator.createItemArray": "/**\n     * Creates the array of items that can be passed to the\n     * {@link MessageFormat} class for creating labels.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return An array of seven items from the dataset formatted as\n     *         {@code String} objects (never {@code null}).\n     */\n",
"org.jfree.chart.labels.IntervalXYItemLabelGenerator.generateLabel": "/**\n     * Generates the item label text for an item in a dataset.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The label text (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.IntervalXYItemLabelGenerator.clone": "/**\n     * Returns an independent copy of the generator.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if cloning is not supported.\n     */\n",
"org.jfree.chart.labels.IntervalXYItemLabelGenerator.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the other object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.labels.BubbleXYItemLabelGenerator.getZFormat": "/**\n     * Returns the number formatter for the z-values.\n     *\n     * @return The number formatter (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.BubbleXYItemLabelGenerator.getZDateFormat": "/**\n     * Returns the date formatter for the z-values.\n     *\n     * @return The date formatter (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.BubbleXYItemLabelGenerator.generateLabel": "/**\n     * Generates an item label for a particular item within a series.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The item label (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.BubbleXYItemLabelGenerator.generateLabelString": "/**\n     * Generates a label string for an item in the dataset.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The label (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.BubbleXYItemLabelGenerator.createItemArray": "/**\n     * Creates the array of items that can be passed to the\n     * {@link MessageFormat} class for creating labels.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The items (never {@code null}).\n     */\n",
"org.jfree.chart.labels.BubbleXYItemLabelGenerator.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the other object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.labels.BubbleXYItemLabelGenerator.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.labels.CategoryToolTipGenerator.generateToolTip": "/**\n     * Generates the tool tip text for an item in a dataset.  Note: in the\n     * current dataset implementation, each row is a series, and each column\n     * contains values for a particular category.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The tooltip text (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.generateRowLabel": "/**\n     * Generates a label for the specified row.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param row  the row index (zero-based).\n     *\n     * @return The label.\n     */\n",
"org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.generateColumnLabel": "/**\n     * Generates a label for the specified row.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param column  the column index (zero-based).\n     *\n     * @return The label.\n     */\n",
"org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.getLabelFormat": "/**\n     * Returns the label format string.\n     *\n     * @return The label format string (never {@code null}).\n     */\n",
"org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.getNumberFormat": "/**\n     * Returns the number formatter.\n     *\n     * @return The number formatter (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.getDateFormat": "/**\n     * Returns the date formatter.\n     *\n     * @return The date formatter (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.generateLabelString": "/**\n     * Generates a for the specified item.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The label (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.createItemArray": "/**\n     * Creates the array of items that can be passed to the\n     * {@link MessageFormat} class for creating labels.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The items (never {@code null}).\n     */\n",
"org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the other object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.clone": "/**\n     * Returns an independent copy of the generator.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  should not happen.\n     */\n",
"org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.generateLabel": "/**\n     * Generates a label for the specified series.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series.\n     *\n     * @return A series label.\n     */\n",
"org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.createItemArray": "/**\n     * Creates the array of items that can be passed to the\n     * {@link MessageFormat} class for creating labels.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series (zero-based index).\n     *\n     * @return The items (never {@code null}).\n     */\n",
"org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.clone": "/**\n     * Returns an independent copy of the generator.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if cloning is not supported.\n     */\n",
"org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the other object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator.createItemArray": "/**\n     * Creates the array of items that can be passed to the\n     * {@link MessageFormat} class for creating labels.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The items (never {@code null}).\n     */\n",
"org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator.equals": "/**\n     * Tests if this object is equal to another.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.labels.PieSectionLabelGenerator.generateSectionLabel": "/**\n     * Generates a label for a pie section.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param key  the section key ({@code null} not permitted).\n     *\n     * @return The label (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.PieSectionLabelGenerator.generateAttributedSectionLabel": "/**\n     * Generates an attributed label for the specified series, or\n     * {@code null} if no attributed label is available (in which case,\n     * the string returned by\n     * {@link #generateSectionLabel(PieDataset, Comparable)} will\n     * provide the fallback).  Only certain attributes are recognised by the\n     * code that ultimately displays the labels:\n     * <ul>\n     * <li>{@link TextAttribute#FONT}: will set the font;</li>\n     * <li>{@link TextAttribute#POSTURE}: a value of\n     *     {@link TextAttribute#POSTURE_OBLIQUE} will add {@link Font#ITALIC} to\n     *     the current font;</li>\n     * <li>{@link TextAttribute#WEIGHT}: a value of\n     *     {@link TextAttribute#WEIGHT_BOLD} will add {@link Font#BOLD} to the\n     *     current font;</li>\n     * <li>{@link TextAttribute#FOREGROUND}: this will set the {@link Paint}\n     *     for the current</li>\n     * <li>{@link TextAttribute#SUPERSCRIPT}: the values\n     *     {@link TextAttribute#SUPERSCRIPT_SUB} and\n     *     {@link TextAttribute#SUPERSCRIPT_SUPER} are recognised.</li>\n     * </ul>\n     *\n     * @param dataset  the dataset.\n     * @param key  the key.\n     *\n     * @return An attributed label (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.StandardPieSectionLabelGenerator.getAttributedLabel": "/**\n     * Returns the attributed label for a section, or {@code null} if none\n     * is defined.\n     *\n     * @param section  the section index.\n     *\n     * @return The attributed label.\n     */\n",
"org.jfree.chart.labels.StandardPieSectionLabelGenerator.setAttributedLabel": "/**\n     * Sets the attributed label for a section.\n     *\n     * @param section  the section index.\n     * @param label  the label ({@code null} permitted).\n     */\n",
"org.jfree.chart.labels.StandardPieSectionLabelGenerator.generateSectionLabel": "/**\n     * Generates a label for a pie section.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param key  the section key ({@code null} not permitted).\n     *\n     * @return The label (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.StandardPieSectionLabelGenerator.generateAttributedSectionLabel": "/**\n     * Generates an attributed label for the specified series, or\n     * {@code null} if no attributed label is available (in which case,\n     * the string returned by\n     * {@link #generateSectionLabel(PieDataset, Comparable)} will\n     * provide the fallback).  Only certain attributes are recognised by the\n     * code that ultimately displays the labels:\n     * <ul>\n     * <li>{@link TextAttribute#FONT}: will set the font;</li>\n     * <li>{@link TextAttribute#POSTURE}: a value of\n     *     {@link TextAttribute#POSTURE_OBLIQUE} will add {@link Font#ITALIC} to\n     *     the current font;</li>\n     * <li>{@link TextAttribute#WEIGHT}: a value of\n     *     {@link TextAttribute#WEIGHT_BOLD} will add {@link Font#BOLD} to the\n     *     current font;</li>\n     * <li>{@link TextAttribute#FOREGROUND}: this will set the {@link Paint}\n     *     for the current</li>\n     * <li>{@link TextAttribute#SUPERSCRIPT}: the values\n     *     {@link TextAttribute#SUPERSCRIPT_SUB} and\n     *     {@link TextAttribute#SUPERSCRIPT_SUPER} are recognised.</li>\n     * </ul>\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param key  the key.\n     *\n     * @return An attributed label (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.StandardPieSectionLabelGenerator.equals": "/**\n     * Tests the generator for equality with an arbitrary object.\n     *\n     * @param obj  the object to test against ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.labels.StandardPieSectionLabelGenerator.clone": "/**\n     * Returns an independent copy of the generator.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  should not happen.\n     */\n",
"org.jfree.chart.labels.StandardXYToolTipGenerator.getTimeSeriesInstance": "/**\n     * Returns a tool tip generator that formats the x-values as dates and the\n     * y-values as numbers.\n     *\n     * @return A tool tip generator (never {@code null}).\n     */\n",
"org.jfree.chart.labels.StandardXYToolTipGenerator.generateToolTip": "/**\n     * Generates the tool tip text for an item in a dataset.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The tooltip text (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.StandardXYToolTipGenerator.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the other object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.labels.StandardXYToolTipGenerator.clone": "/**\n     * Returns an independent copy of the generator.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if cloning is not supported.\n     */\n",
"org.jfree.chart.labels.StandardCategoryItemLabelGenerator.generateLabel": "/**\n     * Generates the label for an item in a dataset.  Note: in the current\n     * dataset implementation, each row is a series, and each column contains\n     * values for a particular category.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The label (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.StandardCategoryItemLabelGenerator.equals": "/**\n     * Tests this generator for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} if this generator is equal to\n     *     {@code obj}, and {@code false} otherwise.\n     */\n",
"org.jfree.chart.labels.StandardXYItemLabelGenerator.generateLabel": "/**\n     * Generates the item label text for an item in a dataset.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The label text (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.StandardXYItemLabelGenerator.clone": "/**\n     * Returns an independent copy of the generator.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if cloning is not supported.\n     */\n",
"org.jfree.chart.labels.StandardXYItemLabelGenerator.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the other object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.labels.XYItemLabelGenerator.generateLabel": "/**\n     * Generates a label for the specified item. The label is typically a\n     * formatted version of the data value, but any text can be used.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The label (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.XYToolTipGenerator.generateToolTip": "/**\n     * Generates the tooltip text for the specified item.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The tooltip text (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.StandardXYZToolTipGenerator.getZFormat": "/**\n     * Returns the number formatter for the z-values.\n     *\n     * @return The number formatter (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.StandardXYZToolTipGenerator.getZDateFormat": "/**\n     * Returns the date formatter for the z-values.\n     *\n     * @return The date formatter (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.StandardXYZToolTipGenerator.generateToolTip": "/**\n     * Generates a tool tip text item for a particular item within a series.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The tooltip text (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.StandardXYZToolTipGenerator.generateLabelString": "/**\n     * Generates a label string for an item in the dataset.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The label (possibly {@code null}).\n     */\n",
"org.jfree.chart.labels.StandardXYZToolTipGenerator.createItemArray": "/**\n     * Creates the array of items that can be passed to the\n     * {@link MessageFormat} class for creating labels.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The items (never {@code null}).\n     */\n",
"org.jfree.chart.labels.StandardXYZToolTipGenerator.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the other object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.encoders.SunPNGEncoderAdapter.getQuality": "/**\n     * Get the quality of the image encoding (always 0.0).\n     *\n     * @return A float representing the quality.\n     */\n",
"org.jfree.chart.encoders.SunPNGEncoderAdapter.setQuality": "/**\n     * Set the quality of the image encoding (not supported in this\n     * ImageEncoder).\n     *\n     * @param quality  A float representing the quality.\n     */\n",
"org.jfree.chart.encoders.SunPNGEncoderAdapter.isEncodingAlpha": "/**\n     * Get whether the encoder should encode alpha transparency (always false).\n     *\n     * @return Whether the encoder is encoding alpha transparency.\n     */\n",
"org.jfree.chart.encoders.SunPNGEncoderAdapter.setEncodingAlpha": "/**\n     * Set whether the encoder should encode alpha transparency (not\n     * supported in this ImageEncoder).\n     *\n     * @param encodingAlpha  Whether the encoder should encode alpha\n     *                       transparency.\n     */\n",
"org.jfree.chart.encoders.SunPNGEncoderAdapter.encode": "/**\n     * Encodes an image in PNG format.\n     *\n     * @param bufferedImage  The image to be encoded.\n     *\n     * @return The byte[] that is the encoded image.\n     *\n     * @throws IOException if there is an IO problem.\n     */\n",
"org.jfree.chart.encoders.SunPNGEncoderAdapter.encode": "/**\n     * Encodes an image in PNG format and writes it to an OutputStream.\n     *\n     * @param bufferedImage  The image to be encoded.\n     * @param outputStream  The OutputStream to write the encoded image to.\n     * @throws IOException if there is an IO problem.\n     */\n",
"org.jfree.chart.encoders.ImageEncoder.encode": "/**\n     * Encodes an image in a particular format.\n     *\n     * @param bufferedImage  The image to be encoded.\n     *\n     * @return The byte[] that is the encoded image.\n     *\n     * @throws IOException if there is an IO problem.\n     */\n",
"org.jfree.chart.encoders.ImageEncoder.encode": "/**\n     * Encodes an image in a particular format and writes it to an OutputStream.\n     *\n     * @param bufferedImage  The image to be encoded.\n     * @param outputStream  The OutputStream to write the encoded image to.\n     * @throws IOException if there is an IO problem.\n     */\n",
"org.jfree.chart.encoders.ImageEncoder.getQuality": "/**\n     * Get the quality of the image encoding.\n     *\n     * @return A float representing the quality.\n     */\n",
"org.jfree.chart.encoders.ImageEncoder.setQuality": "/**\n     * Set the quality of the image encoding (not supported by all\n     * ImageEncoders).\n     *\n     * @param quality  A float representing the quality.\n     */\n",
"org.jfree.chart.encoders.ImageEncoder.isEncodingAlpha": "/**\n     * Get whether the encoder should encode alpha transparency.\n     *\n     * @return Whether the encoder is encoding alpha transparency.\n     */\n",
"org.jfree.chart.encoders.ImageEncoder.setEncodingAlpha": "/**\n     * Set whether the encoder should encode alpha transparency (not\n     * supported by all ImageEncoders).\n     *\n     * @param encodingAlpha  Whether the encoder should encode alpha\n     *                       transparency.\n     */\n",
"org.jfree.chart.encoders.ImageEncoderFactory.init": "/**\n     * Sets up default encoders (uses Sun PNG Encoder if JDK 1.4+ and the\n     * SunPNGEncoderAdapter class is available).\n     */\n",
"org.jfree.chart.encoders.ImageEncoderFactory.setImageEncoder": "/**\n     * Used to set additional encoders or replace default ones.\n     *\n     * @param format  The image format name.\n     * @param imageEncoderClassName  The name of the ImageEncoder class.\n     */\n",
"org.jfree.chart.encoders.ImageEncoderFactory.newInstance": "/**\n     * Used to retrieve an ImageEncoder for a specific image format.\n     *\n     * @param format  The image format required.\n     *\n     * @return The ImageEncoder or {@code null} if none available.\n     */\n",
"org.jfree.chart.encoders.ImageEncoderFactory.newInstance": "/**\n     * Used to retrieve an ImageEncoder for a specific image format.\n     *\n     * @param format  The image format required.\n     * @param quality  The quality to be set before returning.\n     *\n     * @return The ImageEncoder or {@code null} if none available.\n     */\n",
"org.jfree.chart.encoders.ImageEncoderFactory.newInstance": "/**\n     * Used to retrieve an ImageEncoder for a specific image format.\n     *\n     * @param format  The image format required.\n     * @param encodingAlpha  Sets whether alpha transparency should be encoded.\n     *\n     * @return The ImageEncoder or {@code null} if none available.\n     */\n",
"org.jfree.chart.encoders.ImageEncoderFactory.newInstance": "/**\n     * Used to retrieve an ImageEncoder for a specific image format.\n     *\n     * @param format  The image format required.\n     * @param quality  The quality to be set before returning.\n     * @param encodingAlpha  Sets whether alpha transparency should be encoded.\n     *\n     * @return The ImageEncoder or {@code null} if none available.\n     */\n",
"org.jfree.chart.encoders.SunJPEGEncoderAdapter.getQuality": "/**\n     * Returns the quality of the image encoding, which is a number in the\n     * range 0.0f to 1.0f (higher values give better quality output, but larger\n     * file sizes).  The default value is 0.95f.\n     *\n     * @return A float representing the quality, in the range 0.0f to 1.0f.\n     *\n     * @see #setQuality(float)\n     */\n",
"org.jfree.chart.encoders.SunJPEGEncoderAdapter.setQuality": "/**\n     * Set the quality of the image encoding.\n     *\n     * @param quality  A float representing the quality (in the range 0.0f to\n     *     1.0f).\n     *\n     * @see #getQuality()\n     */\n",
"org.jfree.chart.encoders.SunJPEGEncoderAdapter.isEncodingAlpha": "/**\n     * Returns {@code false} always, indicating that this encoder does not\n     * encode alpha transparency.\n     *\n     * @return {@code false}.\n     */\n",
"org.jfree.chart.encoders.SunJPEGEncoderAdapter.setEncodingAlpha": "/**\n     * Set whether the encoder should encode alpha transparency (this is not\n     * supported for JPEG, so this method does nothing).\n     *\n     * @param encodingAlpha  ignored.\n     */\n",
"org.jfree.chart.encoders.SunJPEGEncoderAdapter.encode": "/**\n     * Encodes an image in JPEG format.\n     *\n     * @param bufferedImage  the image to be encoded ({@code null} not\n     *     permitted).\n     *\n     * @return The byte[] that is the encoded image.\n     *\n     * @throws IOException if there is an I/O problem.\n     * @throws NullPointerException if {@code bufferedImage} is\n     *     {@code null}.\n     */\n",
"org.jfree.chart.encoders.SunJPEGEncoderAdapter.encode": "/**\n     * Encodes an image in JPEG format and writes it to an output stream.\n     *\n     * @param bufferedImage  the image to be encoded ({@code null} not\n     *     permitted).\n     * @param outputStream  the OutputStream to write the encoded image to\n     *     ({@code null} not permitted).\n     *\n     * @throws IOException if there is an I/O problem.\n     * @throws NullPointerException if {@code bufferedImage} is {@code null}.\n     */\n",
"org.jfree.chart.encoders.EncoderUtil.encode": "/**\n     * Encode the image in a specific format.\n     *\n     * @param image  The image to be encoded.\n     * @param format  The {@link ImageFormat} to use.\n     *\n     * @return The byte[] that is the encoded image.\n     * @throws IOException if there is an IO problem.\n     */\n",
"org.jfree.chart.encoders.EncoderUtil.encode": "/**\n     * Encode the image in a specific format.\n     *\n     * @param image  The image to be encoded.\n     * @param format  The {@link ImageFormat} to use.\n     * @param encodeAlpha  Whether to encode alpha transparency (not supported\n     *                     by all ImageEncoders).\n     * @return The byte[] that is the encoded image.\n     * @throws IOException if there is an IO problem.\n     */\n",
"org.jfree.chart.encoders.EncoderUtil.encode": "/**\n     * Encode the image in a specific format.\n     *\n     * @param image  The image to be encoded.\n     * @param format  The {@link ImageFormat} to use.\n     * @param quality  The quality to use for the image encoding (not supported\n     *                 by all ImageEncoders).\n     * @return The byte[] that is the encoded image.\n     * @throws IOException if there is an IO problem.\n     */\n",
"org.jfree.chart.encoders.EncoderUtil.encode": "/**\n     * Encode the image in a specific format.\n     *\n     * @param image  The image to be encoded.\n     * @param format  The {@link ImageFormat} to use.\n     * @param quality  The quality to use for the image encoding (not supported\n     *                 by all ImageEncoders).\n     * @param encodeAlpha  Whether to encode alpha transparency (not supported\n     *                     by all ImageEncoders).\n     * @return The byte[] that is the encoded image.\n     * @throws IOException if there is an IO problem.\n     */\n",
"org.jfree.chart.encoders.EncoderUtil.writeBufferedImage": "/**\n     * Encode the image in a specific format and write it to an OutputStream.\n     *\n     * @param image  The image to be encoded.\n     * @param format  The {@link ImageFormat} to use.\n     * @param outputStream  The OutputStream to write the encoded image to.\n     * @throws IOException if there is an IO problem.\n     */\n",
"org.jfree.chart.encoders.EncoderUtil.writeBufferedImage": "/**\n     * Encode the image in a specific format and write it to an OutputStream.\n     *\n     * @param image  The image to be encoded.\n     * @param format  The {@link ImageFormat} to use.\n     * @param outputStream  The OutputStream to write the encoded image to.\n     * @param quality  The quality to use for the image encoding (not\n     *                 supported by all ImageEncoders).\n     * @throws IOException if there is an IO problem.\n     */\n",
"org.jfree.chart.encoders.EncoderUtil.writeBufferedImage": "/**\n     * Encode the image in a specific format and write it to an OutputStream.\n     *\n     * @param image  The image to be encoded.\n     * @param format  The {@link ImageFormat} to use.\n     * @param outputStream  The OutputStream to write the encoded image to.\n     * @param encodeAlpha  Whether to encode alpha transparency (not\n     *                     supported by all ImageEncoders).\n     * @throws IOException if there is an IO problem.\n     */\n",
"org.jfree.chart.encoders.EncoderUtil.writeBufferedImage": "/**\n     * Encode the image in a specific format and write it to an OutputStream.\n     *\n     * @param image  The image to be encoded.\n     * @param format  The {@link ImageFormat} to use.\n     * @param outputStream  The OutputStream to write the encoded image to.\n     * @param quality  The quality to use for the image encoding (not\n     *                 supported by all ImageEncoders).\n     * @param encodeAlpha  Whether to encode alpha transparency (not supported\n     *                     by all ImageEncoders).\n     * @throws IOException if there is an IO problem.\n     */\n",
"org.jfree.chart.ChartUtils.applyCurrentTheme": "/**\n     * Applies the current theme to the specified chart.  This method is\n     * provided for convenience, the theme itself is stored in the\n     * {@link ChartFactory} class.\n     *\n     * @param chart  the chart ({@code null} not permitted).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.ChartUtils.writeChartAsPNG": "/**\n     * Writes a chart to an output stream in PNG format.\n     *\n     * @param out  the output stream ({@code null} not permitted).\n     * @param chart  the chart ({@code null} not permitted).\n     * @param width  the image width.\n     * @param height  the image height.\n     *\n     * @throws IOException if there are any I/O errors.\n     */\n",
"org.jfree.chart.ChartUtils.writeChartAsPNG": "/**\n     * Writes a chart to an output stream in PNG format.\n     *\n     * @param out  the output stream ({@code null} not permitted).\n     * @param chart  the chart ({@code null} not permitted).\n     * @param width  the image width.\n     * @param height  the image height.\n     * @param encodeAlpha  encode alpha?\n     * @param compression  the compression level (0-9).\n     *\n     * @throws IOException if there are any I/O errors.\n     */\n",
"org.jfree.chart.ChartUtils.writeChartAsPNG": "/**\n     * Writes a chart to an output stream in PNG format.  This method allows\n     * you to pass in a {@link ChartRenderingInfo} object, to collect\n     * information about the chart dimensions/entities.  You will need this\n     * info if you want to create an HTML image map.\n     *\n     * @param out  the output stream ({@code null} not permitted).\n     * @param chart  the chart ({@code null} not permitted).\n     * @param width  the image width.\n     * @param height  the image height.\n     * @param info  the chart rendering info ({@code null} permitted).\n     *\n     * @throws IOException if there are any I/O errors.\n     */\n",
"org.jfree.chart.ChartUtils.writeChartAsPNG": "/**\n     * Writes a chart to an output stream in PNG format.  This method allows\n     * you to pass in a {@link ChartRenderingInfo} object, to collect\n     * information about the chart dimensions/entities.  You will need this\n     * info if you want to create an HTML image map.\n     *\n     * @param out  the output stream ({@code null} not permitted).\n     * @param chart  the chart ({@code null} not permitted).\n     * @param width  the image width.\n     * @param height  the image height.\n     * @param info  carries back chart rendering info ({@code null}\n     *              permitted).\n     * @param encodeAlpha  encode alpha?\n     * @param compression  the PNG compression level (0-9).\n     *\n     * @throws IOException if there are any I/O errors.\n     */\n",
"org.jfree.chart.ChartUtils.writeScaledChartAsPNG": "/**\n     * Writes a scaled version of a chart to an output stream in PNG format.\n     *\n     * @param out  the output stream ({@code null} not permitted).\n     * @param chart  the chart ({@code null} not permitted).\n     * @param width  the unscaled chart width.\n     * @param height  the unscaled chart height.\n     * @param widthScaleFactor  the horizontal scale factor.\n     * @param heightScaleFactor  the vertical scale factor.\n     *\n     * @throws IOException if there are any I/O problems.\n     */\n",
"org.jfree.chart.ChartUtils.saveChartAsPNG": "/**\n     * Saves a chart to the specified file in PNG format.\n     *\n     * @param file  the file name ({@code null} not permitted).\n     * @param chart  the chart ({@code null} not permitted).\n     * @param width  the image width.\n     * @param height  the image height.\n     *\n     * @throws IOException if there are any I/O errors.\n     */\n",
"org.jfree.chart.ChartUtils.saveChartAsPNG": "/**\n     * Saves a chart to a file in PNG format.  This method allows you to pass\n     * in a {@link ChartRenderingInfo} object, to collect information about the\n     * chart dimensions/entities.  You will need this info if you want to\n     * create an HTML image map.\n     *\n     * @param file  the file ({@code null} not permitted).\n     * @param chart  the chart ({@code null} not permitted).\n     * @param width  the image width.\n     * @param height  the image height.\n     * @param info  the chart rendering info ({@code null} permitted).\n     *\n     * @throws IOException if there are any I/O errors.\n     */\n",
"org.jfree.chart.ChartUtils.saveChartAsPNG": "/**\n     * Saves a chart to a file in PNG format.  This method allows you to pass\n     * in a {@link ChartRenderingInfo} object, to collect information about the\n     * chart dimensions/entities.  You will need this info if you want to\n     * create an HTML image map.\n     *\n     * @param file  the file ({@code null} not permitted).\n     * @param chart  the chart ({@code null} not permitted).\n     * @param width  the image width.\n     * @param height  the image height.\n     * @param info  the chart rendering info ({@code null} permitted).\n     * @param encodeAlpha  encode alpha?\n     * @param compression  the PNG compression level (0-9).\n     *\n     * @throws IOException if there are any I/O errors.\n     */\n",
"org.jfree.chart.ChartUtils.writeChartAsJPEG": "/**\n     * Writes a chart to an output stream in JPEG format.  Please note that\n     * JPEG is a poor format for chart images, use PNG if possible.\n     *\n     * @param out  the output stream ({@code null} not permitted).\n     * @param chart  the chart ({@code null} not permitted).\n     * @param width  the image width.\n     * @param height  the image height.\n     *\n     * @throws IOException if there are any I/O errors.\n     */\n",
"org.jfree.chart.ChartUtils.writeChartAsJPEG": "/**\n     * Writes a chart to an output stream in JPEG format.  Please note that\n     * JPEG is a poor format for chart images, use PNG if possible.\n     *\n     * @param out  the output stream ({@code null} not permitted).\n     * @param quality  the quality setting.\n     * @param chart  the chart ({@code null} not permitted).\n     * @param width  the image width.\n     * @param height  the image height.\n     *\n     * @throws IOException if there are any I/O errors.\n     */\n",
"org.jfree.chart.ChartUtils.writeChartAsJPEG": "/**\n     * Writes a chart to an output stream in JPEG format. This method allows\n     * you to pass in a {@link ChartRenderingInfo} object, to collect\n     * information about the chart dimensions/entities.  You will need this\n     * info if you want to create an HTML image map.\n     *\n     * @param out  the output stream ({@code null} not permitted).\n     * @param chart  the chart ({@code null} not permitted).\n     * @param width  the image width.\n     * @param height  the image height.\n     * @param info  the chart rendering info ({@code null} permitted).\n     *\n     * @throws IOException if there are any I/O errors.\n     */\n",
"org.jfree.chart.ChartUtils.writeChartAsJPEG": "/**\n     * Writes a chart to an output stream in JPEG format.  This method allows\n     * you to pass in a {@link ChartRenderingInfo} object, to collect\n     * information about the chart dimensions/entities.  You will need this\n     * info if you want to create an HTML image map.\n     *\n     * @param out  the output stream ({@code null} not permitted).\n     * @param quality  the output quality (0.0f to 1.0f).\n     * @param chart  the chart ({@code null} not permitted).\n     * @param width  the image width.\n     * @param height  the image height.\n     * @param info  the chart rendering info ({@code null} permitted).\n     *\n     * @throws IOException if there are any I/O errors.\n     */\n",
"org.jfree.chart.ChartUtils.saveChartAsJPEG": "/**\n     * Saves a chart to a file in JPEG format.\n     *\n     * @param file  the file ({@code null} not permitted).\n     * @param chart  the chart ({@code null} not permitted).\n     * @param width  the image width.\n     * @param height  the image height.\n     *\n     * @throws IOException if there are any I/O errors.\n     */\n",
"org.jfree.chart.ChartUtils.saveChartAsJPEG": "/**\n     * Saves a chart to a file in JPEG format.\n     *\n     * @param file  the file ({@code null} not permitted).\n     * @param quality  the JPEG quality setting.\n     * @param chart  the chart ({@code null} not permitted).\n     * @param width  the image width.\n     * @param height  the image height.\n     *\n     * @throws IOException if there are any I/O errors.\n     */\n",
"org.jfree.chart.ChartUtils.saveChartAsJPEG": "/**\n     * Saves a chart to a file in JPEG format.  This method allows you to pass\n     * in a {@link ChartRenderingInfo} object, to collect information about the\n     * chart dimensions/entities.  You will need this info if you want to\n     * create an HTML image map.\n     *\n     * @param file  the file name ({@code null} not permitted).\n     * @param chart  the chart ({@code null} not permitted).\n     * @param width  the image width.\n     * @param height  the image height.\n     * @param info  the chart rendering info ({@code null} permitted).\n     *\n     * @throws IOException if there are any I/O errors.\n     */\n",
"org.jfree.chart.ChartUtils.saveChartAsJPEG": "/**\n     * Saves a chart to a file in JPEG format.  This method allows you to pass\n     * in a {@link ChartRenderingInfo} object, to collect information about the\n     * chart dimensions/entities.  You will need this info if you want to\n     * create an HTML image map.\n     *\n     * @param file  the file name ({@code null} not permitted).\n     * @param quality  the quality setting.\n     * @param chart  the chart ({@code null} not permitted).\n     * @param width  the image width.\n     * @param height  the image height.\n     * @param info  the chart rendering info ({@code null} permitted).\n     *\n     * @throws IOException if there are any I/O errors.\n     */\n",
"org.jfree.chart.ChartUtils.writeBufferedImageAsJPEG": "/**\n     * Writes a {@link BufferedImage} to an output stream in JPEG format.\n     *\n     * @param out  the output stream ({@code null} not permitted).\n     * @param image  the image ({@code null} not permitted).\n     *\n     * @throws IOException if there are any I/O errors.\n     */\n",
"org.jfree.chart.ChartUtils.writeBufferedImageAsJPEG": "/**\n     * Writes a {@link BufferedImage} to an output stream in JPEG format.\n     *\n     * @param out  the output stream ({@code null} not permitted).\n     * @param quality  the image quality (0.0f to 1.0f).\n     * @param image  the image ({@code null} not permitted).\n     *\n     * @throws IOException if there are any I/O errors.\n     */\n",
"org.jfree.chart.ChartUtils.writeBufferedImageAsPNG": "/**\n     * Writes a {@link BufferedImage} to an output stream in PNG format.\n     *\n     * @param out  the output stream ({@code null} not permitted).\n     * @param image  the image ({@code null} not permitted).\n     *\n     * @throws IOException if there are any I/O errors.\n     */\n",
"org.jfree.chart.ChartUtils.writeBufferedImageAsPNG": "/**\n     * Writes a {@link BufferedImage} to an output stream in PNG format.\n     *\n     * @param out  the output stream ({@code null} not permitted).\n     * @param image  the image ({@code null} not permitted).\n     * @param encodeAlpha  encode alpha?\n     * @param compression  the compression level (0-9).\n     *\n     * @throws IOException if there are any I/O errors.\n     */\n",
"org.jfree.chart.ChartUtils.encodeAsPNG": "/**\n     * Encodes a {@link BufferedImage} to PNG format.\n     *\n     * @param image  the image ({@code null} not permitted).\n     *\n     * @return A byte array in PNG format.\n     *\n     * @throws IOException if there is an I/O problem.\n     */\n",
"org.jfree.chart.ChartUtils.encodeAsPNG": "/**\n     * Encodes a {@link BufferedImage} to PNG format.\n     *\n     * @param image  the image ({@code null} not permitted).\n     * @param encodeAlpha  encode alpha?\n     * @param compression  the PNG compression level (0-9).\n     *\n     * @return The byte array in PNG format.\n     *\n     * @throws IOException if there is an I/O problem.\n     */\n",
"org.jfree.chart.ChartUtils.writeImageMap": "/**\n     * Writes an image map to an output stream.\n     *\n     * @param writer  the writer ({@code null} not permitted).\n     * @param name  the map name ({@code null} not permitted).\n     * @param info  the chart rendering info ({@code null} not permitted).\n     * @param useOverLibForToolTips  whether to use OverLIB for tooltips\n     *                               (http://www.bosrup.com/web/overlib/).\n     *\n     * @throws IOException if there are any I/O errors.\n     */\n",
"org.jfree.chart.ChartUtils.writeImageMap": "/**\n     * Writes an image map to the specified writer.\n     *\n     * @param writer  the writer ({@code null} not permitted).\n     * @param name  the map name ({@code null} not permitted).\n     * @param info  the chart rendering info ({@code null} not permitted).\n     * @param toolTipTagFragmentGenerator  a generator for the HTML fragment\n     *     that will contain the tooltip text ({@code null} not permitted\n     *     if {@code info} contains tooltip information).\n     * @param urlTagFragmentGenerator  a generator for the HTML fragment that\n     *     will contain the URL reference ({@code null} not permitted if\n     *     {@code info} contains URLs).\n     *\n     * @throws IOException if there are any I/O errors.\n     */\n",
"org.jfree.chart.ChartUtils.getImageMap": "/**\n     * Creates an HTML image map.  This method maps to\n     * {@link ImageMapUtils#getImageMap(String, ChartRenderingInfo,\n     * ToolTipTagFragmentGenerator, URLTagFragmentGenerator)}, using default\n     * generators.\n     *\n     * @param name  the map name ({@code null} not permitted).\n     * @param info  the chart rendering info ({@code null} not permitted).\n     *\n     * @return The map tag.\n     */\n",
"org.jfree.chart.ChartUtils.getImageMap": "/**\n     * Creates an HTML image map.  This method maps directly to\n     * {@link ImageMapUtils#getImageMap(String, ChartRenderingInfo,\n     * ToolTipTagFragmentGenerator, URLTagFragmentGenerator)}.\n     *\n     * @param name  the map name ({@code null} not permitted).\n     * @param info  the chart rendering info ({@code null} not permitted).\n     * @param toolTipTagFragmentGenerator  a generator for the HTML fragment\n     *     that will contain the tooltip text ({@code null} not permitted\n     *     if {@code info} contains tooltip information).\n     * @param urlTagFragmentGenerator  a generator for the HTML fragment that\n     *     will contain the URL reference ({@code null} not permitted if\n     *     {@code info} contains URLs).\n     *\n     * @return The map tag.\n     */\n",
"org.jfree.chart.ui.Drawable.draw": "/**\n     * Draws the object.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area inside which the object should be drawn.\n     */\n",
"org.jfree.chart.ui.StandardGradientPaintTransformer.getType": "/**\n     * Returns the type of transform.\n     * \n     * @return The type of transform (never {@code null}).\n     * \n     * @since 1.0.10\n     */\n",
"org.jfree.chart.ui.StandardGradientPaintTransformer.transform": "/**\n     * Transforms a {@code GradientPaint} instance to fit the specified\n     * {@code target} shape.\n     * \n     * @param paint  the original paint ({@code null} not permitted).\n     * @param target  the target shape ({@code null} not permitted).\n     * \n     * @return The transformed paint.\n     */\n",
"org.jfree.chart.ui.StandardGradientPaintTransformer.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     * \n     * @param obj  the object ({@code null} permitted).\n     * \n     * @return A boolean.\n     */\n",
"org.jfree.chart.ui.StandardGradientPaintTransformer.clone": "/**\n     * Returns a clone of the transformer.  Note that instances of this class\n     * are immutable, so cloning an instance isn't really necessary.\n     * \n     * @return A clone.\n     * \n     * @throws CloneNotSupportedException not thrown by this class, but \n     *         subclasses (if any) might.\n     */\n",
"org.jfree.chart.ui.StandardGradientPaintTransformer.hashCode": "/**\n     * Returns a hash code for this object.\n     * \n     * @return A hash code.\n     */\n",
"org.jfree.chart.ui.LCBLayout.preferredLayoutSize": "/**\n     * Returns the preferred size using this layout manager.\n     *\n     * @param parent  the parent.\n     *\n     * @return the preferred size using this layout manager.\n    */\n",
"org.jfree.chart.ui.LCBLayout.minimumLayoutSize": "/**\n     * Returns the minimum size using this layout manager.\n     *\n     * @param parent  the parent.\n     *\n     * @return the minimum size using this layout manager.\n     */\n",
"org.jfree.chart.ui.LCBLayout.layoutContainer": "/**\n     * Lays out the components.\n     *\n     * @param parent  the parent.\n     */\n",
"org.jfree.chart.ui.LCBLayout.addLayoutComponent": "/**\n     * Not used.\n     *\n     * @param comp  the component.\n     */\n",
"org.jfree.chart.ui.LCBLayout.removeLayoutComponent": "/**\n     * Not used.\n     *\n     * @param comp  the component.\n     */\n",
"org.jfree.chart.ui.LCBLayout.addLayoutComponent": "/**\n     * Not used.\n     *\n     * @param name  the component name.\n     * @param comp  the component.\n     */\n",
"org.jfree.chart.ui.LCBLayout.removeLayoutComponent": "/**\n     * Not used.\n     *\n     * @param name  the component name.\n     * @param comp  the component.\n     */\n",
"org.jfree.chart.ui.StrokeSample.getStroke": "/**\n     * Returns the current Stroke object being displayed.\n     *\n     * @return The stroke (possibly {@code null}).\n     */\n",
"org.jfree.chart.ui.StrokeSample.setStroke": "/**\n     * Sets the stroke object being displayed and repaints the component.\n     *\n     * @param stroke  the stroke ({@code null} permitted).\n     */\n",
"org.jfree.chart.ui.StrokeSample.getPreferredSize": "/**\n     * Returns the preferred size of the component.\n     *\n     * @return the preferred size of the component.\n     */\n",
"org.jfree.chart.ui.StrokeSample.paintComponent": "/**\n     * Draws a line using the sample stroke.\n     *\n     * @param g  the graphics device.\n     */\n",
"org.jfree.chart.ui.StrokeSample.getListCellRendererComponent": "/**\n     * Returns a list cell renderer for the stroke, so the sample can be\n     * displayed in a list or combo.\n     *\n     * @param list  the list.\n     * @param value  the value.\n     * @param index  the index.\n     * @param isSelected  selected?\n     * @param cellHasFocus  focussed?\n     *\n     * @return the component for rendering.\n     */\n",
"org.jfree.chart.ui.GradientPaintTransformType.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.chart.ui.GradientPaintTransformType.equals": "/**\n     * Returns {@code true} if this object is equal to the specified \n     * object, and {@code false} otherwise.\n     *\n     * @param o  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.ui.GradientPaintTransformType.hashCode": "/**\n     * Returns a hash code value for the object.\n     *\n     * @return the hashcode\n     */\n",
"org.jfree.chart.ui.GradientPaintTransformType.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     * \n     * @return The object.\n     * \n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.chart.ui.PaintSample.getPaint": "/**\n     * Returns the current Paint object being displayed in the panel.\n     *\n     * @return the paint.\n     */\n",
"org.jfree.chart.ui.PaintSample.setPaint": "/**\n     * Sets the Paint object being displayed in the panel.\n     *\n     * @param paint  the paint.\n     */\n",
"org.jfree.chart.ui.PaintSample.getPreferredSize": "/**\n     * Returns the preferred size of the component.\n     *\n     * @return the preferred size.\n     */\n",
"org.jfree.chart.ui.PaintSample.paintComponent": "/**\n     * Fills the component with the current Paint.\n     *\n     * @param g  the graphics device.\n     */\n",
"org.jfree.chart.ui.FontDisplayField.getDisplayFont": "/**\n     * Returns the current font.\n     *\n     * @return the font.\n     */\n",
"org.jfree.chart.ui.FontDisplayField.setDisplayFont": "/**\n     * Sets the font.\n     *\n     * @param font  the font.\n     */\n",
"org.jfree.chart.ui.FontDisplayField.fontToString": "/**\n     * Returns a string representation of the specified font.\n     *\n     * @param font  the font.\n     *\n     * @return a string describing the font.\n     */\n",
"org.jfree.chart.ui.StrokeChooserPanel.getSelector": "/**\n     * Returns the selector component.\n     *\n     * @return Returns the selector.\n     */\n",
"org.jfree.chart.ui.StrokeChooserPanel.getSelectedStroke": "/**\n     * Returns the selected stroke.\n     *\n     * @return The selected stroke (possibly {@code null}).\n     */\n",
"org.jfree.chart.ui.Size2D.getWidth": "/**\n     * Returns the width.\n     *\n     * @return The width.\n     */\n",
"org.jfree.chart.ui.Size2D.setWidth": "/**\n     * Sets the width.\n     * \n     * @param width  the width.\n     */\n",
"org.jfree.chart.ui.Size2D.getHeight": "/**\n     * Returns the height.\n     *\n     * @return The height.\n     */\n",
"org.jfree.chart.ui.Size2D.setHeight": "/**\n     * Sets the height.\n     * \n     * @param height  the height.\n     */\n",
"org.jfree.chart.ui.Size2D.toString": "/**\n     * Returns a string representation of this instance, mostly used for \n     * debugging purposes.\n     * \n     * @return A string.\n     */\n",
"org.jfree.chart.ui.Size2D.equals": "/**\n     * Compares this instance for equality with an arbitrary object.\n     * \n     * @param obj  the object ({@code null} permitted).\n     * \n     * @return A boolean.\n     */\n",
"org.jfree.chart.ui.Size2D.clone": "/**\n     * Returns a clone of this object.\n     * \n     * @return A clone.\n     * \n     * @throws CloneNotSupportedException if the object cannot be cloned.\n     */\n",
"org.jfree.chart.ui.NumberCellRenderer.getTableCellRendererComponent": "/**\n     * Returns itself as the renderer. Supports the TableCellRenderer interface.\n     *\n     * @param table  the table.\n     * @param value  the data to be rendered.\n     * @param isSelected  a boolean that indicates whether or not the cell is \n     *                    selected.\n     * @param hasFocus  a boolean that indicates whether or not the cell has \n     *                  the focus.\n     * @param row  the (zero-based) row index.\n     * @param column  the (zero-based) column index.\n     *\n     * @return the component that can render the contents of the cell.\n     */\n",
"org.jfree.chart.ui.RectangleEdge.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.chart.ui.RectangleEdge.equals": "/**\n     * Returns {@code true} if this object is equal to the specified \n     * object, and {@code false} otherwise.\n     *\n     * @param o  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.ui.RectangleEdge.hashCode": "/**\n     * Returns a hash code value for the object.\n     *\n     * @return the hashcode\n     */\n",
"org.jfree.chart.ui.RectangleEdge.isTopOrBottom": "/**\n     * Returns {@code true} if the edge is {@code TOP} or \n     * {@code BOTTOM}, and {@code false} otherwise.\n     * \n     * @param edge  the edge.\n     * \n     * @return A boolean.\n     */\n",
"org.jfree.chart.ui.RectangleEdge.isLeftOrRight": "/**\n     * Returns {@code true} if the edge is {@code LEFT} or \n     * {@code RIGHT}, and {@code false} otherwise.\n     * \n     * @param edge  the edge.\n     * \n     * @return A boolean.\n     */\n",
"org.jfree.chart.ui.RectangleEdge.opposite": "/**\n     * Returns the opposite edge.\n     * \n     * @param edge  an edge.\n     * \n     * @return The opposite edge.\n     */\n",
"org.jfree.chart.ui.RectangleEdge.coordinate": "/**\n     * Returns the x or y coordinate of the specified edge.\n     * \n     * @param rectangle  the rectangle.\n     * @param edge  the edge.\n     * \n     * @return The coordinate.\n     */\n",
"org.jfree.chart.ui.RectangleEdge.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     * \n     * @return The object.\n     * \n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.chart.ui.UIUtils.centerFrameOnScreen": "/**\n     * Positions the specified frame in the middle of the screen.\n     *\n     * @param frame  the frame to be centered on the screen.\n     */\n",
"org.jfree.chart.ui.UIUtils.positionFrameOnScreen": "/**\n     * Positions the specified frame at a relative position in the screen, where 50% is considered\n     * to be the center of the screen.\n     *\n     * @param frame  the frame.\n     * @param horizontalPercent  the relative horizontal position of the frame (0.0 to 1.0,\n     *                           where 0.5 is the center of the screen).\n     * @param verticalPercent  the relative vertical position of the frame (0.0 to 1.0, where\n     *                         0.5 is the center of the screen).\n     */\n",
"org.jfree.chart.ui.UIUtils.positionFrameRandomly": "/**\n     * Positions the specified frame at a random location on the screen while ensuring that the\n     * entire frame is visible (provided that the frame is smaller than the screen).\n     *\n     * @param frame  the frame.\n     */\n",
"org.jfree.chart.ui.UIUtils.centerDialogInParent": "/**\n     * Positions the specified dialog within its parent.\n     *\n     * @param dialog  the dialog to be positioned on the screen.\n     */\n",
"org.jfree.chart.ui.UIUtils.positionDialogRelativeToParent": "/**\n     * Positions the specified dialog at a position relative to its parent.\n     *\n     * @param dialog  the dialog to be positioned.\n     * @param horizontalPercent  the relative location.\n     * @param verticalPercent  the relative location.\n     */\n",
"org.jfree.chart.ui.UIUtils.createTablePanel": "/**\n     * Creates a panel that contains a table based on the specified table model.\n     *\n     * @param model  the table model to use when constructing the table.\n     *\n     * @return The panel.\n     */\n",
"org.jfree.chart.ui.UIUtils.createJLabel": "/**\n     * Creates a label with a specific font.\n     *\n     * @param text  the text for the label.\n     * @param font  the font.\n     *\n     * @return The label.\n     */\n",
"org.jfree.chart.ui.UIUtils.createJLabel": "/**\n     * Creates a label with a specific font and color.\n     *\n     * @param text  the text for the label.\n     * @param font  the font.\n     * @param color  the color.\n     *\n     * @return The label.\n     */\n",
"org.jfree.chart.ui.UIUtils.createJButton": "/**\n     * Creates a {@link JButton}.\n     *\n     * @param label  the label.\n     * @param font  the font.\n     *\n     * @return The button.\n     */\n",
"org.jfree.chart.ui.LengthAdjustmentType.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.chart.ui.LengthAdjustmentType.equals": "/**\n     * Returns {@code true} if this object is equal to the specified \n     * object, and {@code false} otherwise.\n     *\n     * @param obj  the other object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.ui.LengthAdjustmentType.hashCode": "/**\n     * Returns a hash code value for the object.\n     *\n     * @return The hashcode\n     */\n",
"org.jfree.chart.ui.LengthAdjustmentType.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     * \n     * @return The object.\n     * \n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.chart.ui.Layer.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.chart.ui.ApplicationFrame.windowClosing": "/**\n     * Listens for the main window closing, and shuts down the application.\n     *\n     * @param event  information about the window event.\n     */\n",
"org.jfree.chart.ui.ApplicationFrame.windowClosed": "/**\n     * Required for WindowListener interface, but not used by this class.\n     *\n     * @param event  information about the window event.\n     */\n",
"org.jfree.chart.ui.ApplicationFrame.windowActivated": "/**\n     * Required for WindowListener interface, but not used by this class.\n     *\n     * @param event  information about the window event.\n     */\n",
"org.jfree.chart.ui.ApplicationFrame.windowDeactivated": "/**\n     * Required for WindowListener interface, but not used by this class.\n     *\n     * @param event  information about the window event.\n     */\n",
"org.jfree.chart.ui.ApplicationFrame.windowDeiconified": "/**\n     * Required for WindowListener interface, but not used by this class.\n     *\n     * @param event  information about the window event.\n     */\n",
"org.jfree.chart.ui.ApplicationFrame.windowIconified": "/**\n     * Required for WindowListener interface, but not used by this class.\n     *\n     * @param event  information about the window event.\n     */\n",
"org.jfree.chart.ui.ApplicationFrame.windowOpened": "/**\n     * Required for WindowListener interface, but not used by this class.\n     *\n     * @param event  information about the window event.\n     */\n",
"org.jfree.chart.ui.VerticalAlignment.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return the string.\n     */\n",
"org.jfree.chart.ui.VerticalAlignment.equals": "/**\n     * Returns {@code true} if this object is equal to the specified \n     * object, and {@code false} otherwise.\n     *\n     * @param o  the other object.\n     *\n     * @return a boolean.\n     */\n",
"org.jfree.chart.ui.VerticalAlignment.hashCode": "/**\n     * Returns a hash code value for the object.\n     *\n     * @return the hashcode\n     */\n",
"org.jfree.chart.ui.VerticalAlignment.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     * \n     * @return The object.\n     * \n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.chart.ui.RectangleInsets.getUnitType": "/**\n     * Returns the unit type (absolute or relative).  This specifies whether \n     * the insets are measured as Java2D units or percentages.\n     * \n     * @return The unit type (never {@code null}).\n     */\n",
"org.jfree.chart.ui.RectangleInsets.getTop": "/**\n     * Returns the top insets.\n     * \n     * @return The top insets.\n     */\n",
"org.jfree.chart.ui.RectangleInsets.getBottom": "/**\n     * Returns the bottom insets.\n     * \n     * @return The bottom insets.\n     */\n",
"org.jfree.chart.ui.RectangleInsets.getLeft": "/**\n     * Returns the left insets.\n     * \n     * @return The left insets.\n     */\n",
"org.jfree.chart.ui.RectangleInsets.getRight": "/**\n     * Returns the right insets.\n     * \n     * @return The right insets.\n     */\n",
"org.jfree.chart.ui.RectangleInsets.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     * \n     * @param obj  the object ({@code null} permitted).\n     * \n     * @return A boolean.\n     */\n",
"org.jfree.chart.ui.RectangleInsets.hashCode": "/**\n     * Returns a hash code for the object.\n     * \n     * @return A hash code.\n     */\n",
"org.jfree.chart.ui.RectangleInsets.toString": "/**\n     * Returns a textual representation of this instance, useful for debugging\n     * purposes.\n     * \n     * @return A string representing this instance.\n     */\n",
"org.jfree.chart.ui.RectangleInsets.createAdjustedRectangle": "/**\n     * Creates an adjusted rectangle using the supplied rectangle, the insets\n     * specified by this instance, and the horizontal and vertical \n     * adjustment types.\n     * \n     * @param base  the base rectangle ({@code null} not permitted).\n     * @param horizontal  the horizontal adjustment type ({@code null} not\n     *                    permitted).\n     * @param vertical  the vertical adjustment type ({@code null} not \n     *                  permitted).\n     * \n     * @return The inset rectangle.\n     */\n",
"org.jfree.chart.ui.RectangleInsets.createInsetRectangle": "/**\n     * Creates an 'inset' rectangle.\n     * \n     * @param base  the base rectangle ({@code null} not permitted).\n     * \n     * @return The inset rectangle.\n     */\n",
"org.jfree.chart.ui.RectangleInsets.createInsetRectangle": "/**\n     * Creates an 'inset' rectangle.\n     * \n     * @param base  the base rectangle ({@code null} not permitted).\n     * @param horizontal  apply horizontal insets?\n     * @param vertical  apply vertical insets?\n     * \n     * @return The inset rectangle.\n     */\n",
"org.jfree.chart.ui.RectangleInsets.createOutsetRectangle": "/**\n     * Creates an outset rectangle.\n     * \n     * @param base  the base rectangle ({@code null} not permitted).\n     * \n     * @return An outset rectangle.\n     */\n",
"org.jfree.chart.ui.RectangleInsets.createOutsetRectangle": "/**\n     * Creates an outset rectangle.\n     * \n     * @param base  the base rectangle ({@code null} not permitted).\n     * @param horizontal  apply horizontal insets?\n     * @param vertical  apply vertical insets? \n     * \n     * @return An outset rectangle.\n     */\n",
"org.jfree.chart.ui.RectangleInsets.calculateTopInset": "/**\n     * Returns the top margin.\n     * \n     * @param height  the height of the base rectangle.\n     * \n     * @return The top margin (in Java2D units).\n     */\n",
"org.jfree.chart.ui.RectangleInsets.calculateTopOutset": "/**\n     * Returns the top margin.\n     * \n     * @param height  the height of the base rectangle.\n     * \n     * @return The top margin (in Java2D units).\n     */\n",
"org.jfree.chart.ui.RectangleInsets.calculateBottomInset": "/**\n     * Returns the bottom margin.\n     * \n     * @param height  the height of the base rectangle.\n     * \n     * @return The bottom margin (in Java2D units).\n     */\n",
"org.jfree.chart.ui.RectangleInsets.calculateBottomOutset": "/**\n     * Returns the bottom margin.\n     * \n     * @param height  the height of the base rectangle.\n     * \n     * @return The bottom margin (in Java2D units).\n     */\n",
"org.jfree.chart.ui.RectangleInsets.calculateLeftInset": "/**\n     * Returns the left margin.\n     * \n     * @param width  the width of the base rectangle.\n     * \n     * @return The left margin (in Java2D units).\n     */\n",
"org.jfree.chart.ui.RectangleInsets.calculateLeftOutset": "/**\n     * Returns the left margin.\n     * \n     * @param width  the width of the base rectangle.\n     * \n     * @return The left margin (in Java2D units).\n     */\n",
"org.jfree.chart.ui.RectangleInsets.calculateRightInset": "/**\n     * Returns the right margin.\n     * \n     * @param width  the width of the base rectangle.\n     * \n     * @return The right margin (in Java2D units).\n     */\n",
"org.jfree.chart.ui.RectangleInsets.calculateRightOutset": "/**\n     * Returns the right margin.\n     * \n     * @param width  the width of the base rectangle.\n     * \n     * @return The right margin (in Java2D units).\n     */\n",
"org.jfree.chart.ui.RectangleInsets.trimWidth": "/**\n     * Trims the given width to allow for the insets.\n     * \n     * @param width  the width.\n     * \n     * @return The trimmed width.\n     */\n",
"org.jfree.chart.ui.RectangleInsets.extendWidth": "/**\n     * Extends the given width to allow for the insets.\n     * \n     * @param width  the width.\n     * \n     * @return The extended width.\n     */\n",
"org.jfree.chart.ui.RectangleInsets.trimHeight": "/**\n     * Trims the given height to allow for the insets.\n     * \n     * @param height  the height.\n     * \n     * @return The trimmed height.\n     */\n",
"org.jfree.chart.ui.RectangleInsets.extendHeight": "/**\n     * Extends the given height to allow for the insets.\n     * \n     * @param height  the height.\n     * \n     * @return The extended height.\n     */\n",
"org.jfree.chart.ui.RectangleInsets.trim": "/**\n     * Shrinks the given rectangle by the amount of these insets.\n     * \n     * @param area  the area ({@code null} not permitted).\n     */\n",
"org.jfree.chart.ui.HorizontalAlignment.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.chart.ui.HorizontalAlignment.equals": "/**\n     * Returns {@code true} if this object is equal to the specified \n     * object, and {@code false} otherwise.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.ui.HorizontalAlignment.hashCode": "/**\n     * Returns a hash code value for the object.\n     *\n     * @return The hashcode\n     */\n",
"org.jfree.chart.ui.HorizontalAlignment.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     * \n     * @return The object.\n     * \n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.chart.ui.Align.align": "/**\n     * Aligns one rectangle ({@code rect}) relative to another rectangle ({@code frame}).\n     *\n     * @param rect  the rectangle to be aligned ({@code null} not permitted).\n     * @param frame  the reference frame ({@code null} not permitted).\n     * @param align  the alignment code.\n     */\n",
"org.jfree.chart.ui.FontChooserPanel.getSelectedFont": "/**\n     * Returns a Font object representing the selection in the panel.\n     *\n     * @return the font.\n     */\n",
"org.jfree.chart.ui.FontChooserPanel.getSelectedName": "/**\n     * Returns the selected name.\n     *\n     * @return the name.\n     */\n",
"org.jfree.chart.ui.FontChooserPanel.getSelectedStyle": "/**\n     * Returns the selected style.\n     *\n     * @return the style.\n     */\n",
"org.jfree.chart.ui.FontChooserPanel.getSelectedSize": "/**\n     * Returns the selected size.\n     *\n     * @return the size.\n     */\n",
"org.jfree.chart.ui.FontChooserPanel.setSelectedFont": "/**\n     * Initializes the contents of the dialog from the given font\n     * object.\n     *\n     * @param font the font from which to read the properties.\n     */\n",
"org.jfree.chart.ui.TextAnchor.isLeft": "/** \n     * Returns {@code true} if the anchor is a left-side anchor, and\n     * {@code false} otherwise.\n     * \n     * @return A boolean.\n     * \n     * @since 1.0.20\n     */\n",
"org.jfree.chart.ui.TextAnchor.isRight": "/** \n     * Returns {@code true} if the anchor is a right-side anchor, and\n     * {@code false} otherwise.\n     * \n     * @return A boolean.\n     * \n     * @since 1.0.20\n     */\n",
"org.jfree.chart.ui.TextAnchor.isHorizontalCenter": "/** \n     * Returns {@code true} if the anchor is a center anchor, and\n     * {@code false} otherwise.\n     * \n     * @return A boolean.\n     * \n     * @since 1.0.20\n     */\n",
"org.jfree.chart.ui.TextAnchor.isTop": "/** \n     * Returns {@code true} if the anchor is a top anchor, and\n     * {@code false} otherwise.\n     * \n     * @return A boolean.\n     * \n     * @since 1.0.20\n     */\n",
"org.jfree.chart.ui.TextAnchor.isBottom": "/** \n     * Returns {@code true} if the anchor is a bottom anchor, and\n     * {@code false} otherwise.\n     * \n     * @return A boolean.\n     * \n     * @since 1.0.20\n     */\n",
"org.jfree.chart.ui.TextAnchor.isBaseline": "/** \n     * Returns {@code true} if the anchor is a baseline anchor, and\n     * {@code false} otherwise.\n     * \n     * @return A boolean.\n     * \n     * @since 1.0.20\n     */\n",
"org.jfree.chart.ui.TextAnchor.isHalfAscent": "/** \n     * Returns {@code true} if the anchor is a half-ascent anchor, and\n     * {@code false} otherwise.\n     * \n     * @return A boolean.\n     * \n     * @since 1.0.20\n     */\n",
"org.jfree.chart.ui.TextAnchor.isVerticalCenter": "/** \n     * Returns {@code true} if the anchor is a half-ascent anchor, and\n     * {@code false} otherwise.\n     * \n     * @return A boolean.\n     * \n     * @since 1.0.20\n     */\n",
"org.jfree.chart.ui.TextAnchor.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.chart.ui.TextAnchor.equals": "/**\n     * Returns {@code true} if this object is equal to the specified \n     * object, and {@code false} otherwise.\n     *\n     * @param o  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.ui.TextAnchor.hashCode": "/**\n     * Returns a hash code value for the object.\n     *\n     * @return The hashcode\n     */\n",
"org.jfree.chart.ui.TextAnchor.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     * \n     * @return The object.\n     * \n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.chart.ui.GradientPaintTransformer.transform": "/**\n     * Transforms a {@code GradientPaint} instance to fit some target \n     * shape.  Classes that implement this method typically return a new\n     * instance of {@code GradientPaint}.\n     * \n     * @param paint  the original paint (not {@code null}).\n     * @param target  the reference area (not {@code null}).\n     * \n     * @return A transformed paint.\n     */\n",
"org.jfree.chart.ui.RectangleAnchor.getAnchorPoint": "/**\n     * Returns the anchor point relative to the specified rectangle.\n     * \n     * @param rectangle  the rectangle (<code>null</code> not permitted).\n     * \n     * @return The anchor point (never <code>null</code>). \n     */\n",
"org.jfree.chart.ui.RectangleAnchor.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.chart.ui.RectangleAnchor.createRectangle": "/**\n     * Creates a new rectangle with the specified dimensions that is aligned to\n     * the given anchor point {@code (anchorX, anchorY)}.\n     * \n     * @param dimensions  the dimensions ({@code null} not permitted).\n     * @param anchorX  the x-anchor.\n     * @param anchorY  the y-anchor.\n     * @param anchor  the anchor ({@code null} not permitted).\n     * \n     * @return A rectangle.\n     */\n",
"org.jfree.chart.ChartTransferable.getTransferDataFlavors": "/**\n     * Returns the data flavors supported.\n     * \n     * @return The data flavors supported.\n     */\n",
"org.jfree.chart.ChartTransferable.isDataFlavorSupported": "/**\n     * Returns {@code true} if the specified flavor is supported.\n     *\n     * @param flavor  the flavor.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.ChartTransferable.getTransferData": "/**\n     * Returns the content for the requested flavor, if it is supported.\n     *\n     * @param flavor  the requested flavor.\n     *\n     * @return The content.\n     *\n     * @throws java.awt.datatransfer.UnsupportedFlavorException if the flavor \n     *         is not supported.\n     * @throws java.io.IOException if there is an IO problem.\n     */\n",
"org.jfree.chart.ChartTransferable.createBufferedImage": "/**\n     * A utility method that creates an image of a chart, with scaling.\n     *\n     * @param chart  the chart.\n     * @param w  the image width.\n     * @param h  the image height.\n     * @param minDrawW  the minimum width for chart drawing.\n     * @param minDrawH  the minimum height for chart drawing.\n     * @param maxDrawW  the maximum width for chart drawing.\n     * @param maxDrawH  the maximum height for chart drawing.\n     *\n     * @return  A chart image.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.ChartTheme.apply": "/**\n     * Applies this theme to the supplied chart.\n     *\n     * @param chart  the chart ({@code null} not permitted).\n     */\n",
"org.jfree.chart.editor.DefaultPlotEditor.createPlotPanel": "/**\n     * Creates and returns a panel for editing the settings of the specified\n     * plot.\n     * \n     * @param plot  the plot.\n     * \n     * @return A panel. \n     */\n",
"org.jfree.chart.editor.DefaultPlotEditor.createPlotTabs": "/**\n     * Creates and returns a tabbed pane containing controls for setting\n     * the attributes of the specified plot.\n     * \n     * @param plot  the plot.\n     * \n     * @return A tabbed pane. \n     */\n",
"org.jfree.chart.editor.DefaultPlotEditor.getPlotInsets": "/**\n     * Returns the current plot insets.\n     *\n     * @return The current plot insets.\n     */\n",
"org.jfree.chart.editor.DefaultPlotEditor.getBackgroundPaint": "/**\n     * Returns the current background paint.\n     *\n     * @return The current background paint.\n     */\n",
"org.jfree.chart.editor.DefaultPlotEditor.getOutlineStroke": "/**\n     * Returns the current outline stroke.\n     *\n     * @return The current outline stroke (possibly {@code null}).\n     */\n",
"org.jfree.chart.editor.DefaultPlotEditor.getOutlinePaint": "/**\n     * Returns the current outline paint.\n     *\n     * @return The current outline paint.\n     */\n",
"org.jfree.chart.editor.DefaultPlotEditor.getDomainAxisPropertyEditPanel": "/**\n     * Returns a reference to the panel for editing the properties of the\n     * domain axis.\n     *\n     * @return A reference to a panel.\n     */\n",
"org.jfree.chart.editor.DefaultPlotEditor.getRangeAxisPropertyEditPanel": "/**\n     * Returns a reference to the panel for editing the properties of the\n     * range axis.\n     *\n     * @return A reference to a panel.\n     */\n",
"org.jfree.chart.editor.DefaultPlotEditor.actionPerformed": "/**\n     * Handles user actions generated within the panel.\n     * @param event     the event\n     */\n",
"org.jfree.chart.editor.DefaultPlotEditor.attemptBackgroundPaintSelection": "/**\n     * Allow the user to change the background paint.\n     */\n",
"org.jfree.chart.editor.DefaultPlotEditor.attemptOutlineStrokeSelection": "/**\n     * Allow the user to change the outline stroke.\n     */\n",
"org.jfree.chart.editor.DefaultPlotEditor.attemptOutlinePaintSelection": "/**\n     * Allow the user to change the outline paint.  We use JColorChooser, so\n     * the user can only choose colors (a subset of all possible paints).\n     */\n",
"org.jfree.chart.editor.DefaultPlotEditor.attemptOrientationSelection": "/**\n     * Allow the user to modify the plot orientation if this is an editor for a\n     * <tt>CategoryPlot</tt> or a <tt>XYPlot</tt>.\n     */\n",
"org.jfree.chart.editor.DefaultPlotEditor.attemptDrawLinesSelection": "/**\n     * Allow the user to modify whether or not lines are drawn between data\n     * points by <tt>LineAndShapeRenderer</tt>s and\n     * <tt>StandardXYItemRenderer</tt>s.\n     */\n",
"org.jfree.chart.editor.DefaultPlotEditor.attemptDrawShapesSelection": "/**\n     * Allow the user to modify whether or not shapes are drawn at data points\n     * by <tt>LineAndShapeRenderer</tt>s and <tt>StandardXYItemRenderer</tt>s.\n     */\n",
"org.jfree.chart.editor.DefaultPlotEditor.updatePlotProperties": "/**\n     * Updates the plot properties to match the properties defined on the panel.\n     *\n     * @param plot  The plot.\n     */\n",
"org.jfree.chart.editor.DefaultChartEditorFactory.createEditor": "/**\n     * Returns a new instance of a {@link ChartEditor}.\n     *\n     * @param chart  the chart.\n     *\n     * @return A chart editor for the given chart.\n     */\n",
"org.jfree.chart.editor.DefaultChartEditor.getTitleEditor": "/**\n     * Returns a reference to the title editor.\n     *\n     * @return A panel for editing the title.\n     */\n",
"org.jfree.chart.editor.DefaultChartEditor.getPlotEditor": "/**\n     * Returns a reference to the plot property sub-panel.\n     *\n     * @return A panel for editing the plot properties.\n     */\n",
"org.jfree.chart.editor.DefaultChartEditor.getAntiAlias": "/**\n     * Returns the current setting of the anti-alias flag.\n     *\n     * @return {@code true} if anti-aliasing is enabled.\n     */\n",
"org.jfree.chart.editor.DefaultChartEditor.getBackgroundPaint": "/**\n     * Returns the current background paint.\n     *\n     * @return The current background paint.\n     */\n",
"org.jfree.chart.editor.DefaultChartEditor.actionPerformed": "/**\n     * Handles user interactions with the panel.\n     *\n     * @param event  a BackgroundPaint action.\n     */\n",
"org.jfree.chart.editor.DefaultChartEditor.attemptModifyBackgroundPaint": "/**\n     * Allows the user the opportunity to select a new background paint.  Uses\n     * JColorChooser, so we are only allowing a subset of all Paint objects to\n     * be selected (fix later).\n     */\n",
"org.jfree.chart.editor.DefaultChartEditor.updateChart": "/**\n     * Updates the properties of a chart to match the properties defined on the\n     * panel.\n     *\n     * @param chart  the chart.\n     */\n",
"org.jfree.chart.editor.ChartEditorManager.getChartEditorFactory": "/**\n     * Returns the current factory.\n     *\n     * @return The current factory (never {@code null}).\n     */\n",
"org.jfree.chart.editor.ChartEditorManager.setChartEditorFactory": "/**\n     * Sets the chart editor factory.\n     *\n     * @param f  the new factory ({@code null} not permitted).\n     */\n",
"org.jfree.chart.editor.ChartEditorManager.getChartEditor": "/**\n     * Returns a component that can be used to edit the given chart.\n     *\n     * @param chart  the chart.\n     *\n     * @return The chart editor.\n     */\n",
"org.jfree.chart.editor.DefaultLogAxisEditor.createTickUnitPanel": "/**\n     * Creates a panel for editing the tick unit.\n     * \n     * @return A panel.\n     */\n",
"org.jfree.chart.editor.DefaultLogAxisEditor.actionPerformed": "/**\n     * Handles actions from within the property panel.\n     * \n     * @param event an event.\n     */\n",
"org.jfree.chart.editor.DefaultLogAxisEditor.toggleAutoTick": "/**\n     * Toggles the auto-tick-unit setting.\n     */\n",
"org.jfree.chart.editor.DefaultLogAxisEditor.validateTickUnit": "/**\n     * Validates the tick unit entered.\n     */\n",
"org.jfree.chart.editor.DefaultLogAxisEditor.setAxisProperties": "/**\n     * Sets the properties of the specified axis to match the properties\n     * defined on this panel.\n     *\n     * @param axis  the axis.\n     */\n",
"org.jfree.chart.editor.DefaultNumberAxisEditor.actionPerformed": "/**\n     * Handles actions from within the property panel.\n     * @param event an event.\n     */\n",
"org.jfree.chart.editor.DefaultNumberAxisEditor.setAxisProperties": "/**\n     * Sets the properties of the specified axis to match the properties\n     * defined on this panel.\n     *\n     * @param axis  the axis.\n     */\n",
"org.jfree.chart.editor.DefaultTitleEditor.getTitleText": "/**\n     * Returns the title text entered in the panel.\n     *\n     * @return The title text entered in the panel.\n     */\n",
"org.jfree.chart.editor.DefaultTitleEditor.getTitleFont": "/**\n     * Returns the font selected in the panel.\n     *\n     * @return The font selected in the panel.\n     */\n",
"org.jfree.chart.editor.DefaultTitleEditor.getTitlePaint": "/**\n     * Returns the paint selected in the panel.\n     *\n     * @return The paint selected in the panel.\n     */\n",
"org.jfree.chart.editor.DefaultTitleEditor.actionPerformed": "/**\n     * Handles button clicks by passing control to an appropriate handler\n     * method.\n     *\n     * @param event  the event\n     */\n",
"org.jfree.chart.editor.DefaultTitleEditor.attemptFontSelection": "/**\n     * Presents a font selection dialog to the user.\n     */\n",
"org.jfree.chart.editor.DefaultTitleEditor.attemptPaintSelection": "/**\n     * Allow the user the opportunity to select a Paint object.  For now, we\n     * just use the standard color chooser - all colors are Paint objects, but\n     * not all Paint objects are colors (later we can implement a more general\n     * Paint chooser).\n     */\n",
"org.jfree.chart.editor.DefaultTitleEditor.attemptModifyShowTitle": "/**\n     * Allow the user the opportunity to change whether the title is\n     * displayed on the chart or not.\n     */\n",
"org.jfree.chart.editor.DefaultTitleEditor.enableOrDisableControls": "/**\n     * If we are supposed to show the title, the controls are enabled.\n     * If we are not supposed to show the title, the controls are disabled.\n     */\n",
"org.jfree.chart.editor.DefaultTitleEditor.setTitleProperties": "/**\n     * Sets the properties of the specified title to match the properties\n     * defined on this panel.\n     *\n     * @param chart  the chart whose title is to be modified.\n     */\n",
"org.jfree.chart.editor.DefaultPolarPlotEditor.createPlotTabs": "/**\n     * Creates a tabbed pane for editing the plot attributes.\n     * \n     * @param plot  the plot.\n     * \n     * @return A tabbed pane. \n     */\n",
"org.jfree.chart.editor.DefaultPolarPlotEditor.focusGained": "/**\n     * Does nothing.\n     *\n     * @param event  the event.\n     */\n",
"org.jfree.chart.editor.DefaultPolarPlotEditor.focusLost": "/**\n     *  Revalidates minimum/maximum range.\n     *\n     *  @param event  the event.\n     */\n",
"org.jfree.chart.editor.DefaultPolarPlotEditor.actionPerformed": "/**\n     * Handles actions from within the property panel.\n     * @param event an event.\n     */\n",
"org.jfree.chart.editor.DefaultPolarPlotEditor.validateAngleOffset": "/**\n     * Validates the angle offset entered by the user.\n     */\n",
"org.jfree.chart.editor.DefaultPolarPlotEditor.validateTickUnit": "/**\n     * Validates the tick unit entered by the user.\n     */\n",
"org.jfree.chart.editor.DefaultValueAxisEditor.createTickUnitPanel": "/**\n     * Creates and returns a panel for displaying tick unit settings.\n     * \n     * @return A panel.\n     */\n",
"org.jfree.chart.editor.DefaultValueAxisEditor.isAutoTickUnitSelection": "/**\n     * Getter for the {@link #autoTickUnitSelection} flag.\n     * \n     * @return The value of the flag for enabling auto-tickunit-selection.\n     */\n",
"org.jfree.chart.editor.DefaultValueAxisEditor.setAutoTickUnitSelection": "/**\n     * Setter for the {@link #autoTickUnitSelection} flag.\n     * @param autoTickUnitSelection The new value for auto-tickunit-selection.\n     */\n",
"org.jfree.chart.editor.DefaultValueAxisEditor.getAutoTickUnitSelectionCheckBox": "/**\n     * Get the checkbox that enables/disables auto-tickunit-selection.\n     * \n     * @return The checkbox.\n     */\n",
"org.jfree.chart.editor.DefaultValueAxisEditor.setAutoTickUnitSelectionCheckBox": "/**\n     * Set the checkbox that enables/disables auto-tickunit-selection.\n     *\n     * @param autoTickUnitSelectionCheckBox The checkbox.\n     */\n",
"org.jfree.chart.editor.DefaultValueAxisEditor.isAutoRange": "/**\n     * Returns the current setting of the auto-range property.\n     *\n     * @return {@code true} if auto range is enabled.\n     */\n",
"org.jfree.chart.editor.DefaultValueAxisEditor.getMinimumValue": "/**\n     * Returns the current setting of the minimum value in the axis range.\n     *\n     * @return The current setting of the minimum value in the axis range.\n     */\n",
"org.jfree.chart.editor.DefaultValueAxisEditor.getMaximumValue": "/**\n     * Returns the current setting of the maximum value in the axis range.\n     *\n     * @return The current setting of the maximum value in the axis range.\n     */\n",
"org.jfree.chart.editor.DefaultValueAxisEditor.actionPerformed": "/**\n     * Handles actions from within the property panel.\n     * @param event an event.\n     */\n",
"org.jfree.chart.editor.DefaultValueAxisEditor.attemptGridStrokeSelection": "/**\n     * Handle a grid stroke selection.\n     */\n",
"org.jfree.chart.editor.DefaultValueAxisEditor.attemptGridPaintSelection": "/**\n     * Handle a grid paint selection.\n     */\n",
"org.jfree.chart.editor.DefaultValueAxisEditor.focusGained": "/**\n     * Does nothing.\n     *\n     * @param event  the event.\n     */\n",
"org.jfree.chart.editor.DefaultValueAxisEditor.focusLost": "/**\n     *  Revalidates minimum/maximum range.\n     *\n     *  @param event  the event.\n     */\n",
"org.jfree.chart.editor.DefaultValueAxisEditor.toggleAutoRange": "/**\n     *  Toggle the auto range setting.\n     */\n",
"org.jfree.chart.editor.DefaultValueAxisEditor.toggleAutoTick": "/**\n     * Sets the {@code autoTickUnitSelection} flag to match the control.\n     */\n",
"org.jfree.chart.editor.DefaultValueAxisEditor.validateMinimum": "/**\n     * Revalidate the range minimum.\n     */\n",
"org.jfree.chart.editor.DefaultValueAxisEditor.validateMaximum": "/**\n     * Revalidate the range maximum.\n     */\n",
"org.jfree.chart.editor.DefaultValueAxisEditor.setAxisProperties": "/**\n     * Sets the properties of the specified axis to match the properties\n     * defined on this panel.\n     *\n     * @param axis  the axis.\n     */\n",
"org.jfree.chart.editor.DefaultAxisEditor.getInstance": "/**\n     * A static method that returns a panel that is appropriate for the axis\n     * type.\n     *\n     * @param axis  the axis whose properties are to be displayed/edited in\n     *              the panel.\n     *\n     * @return A panel or {@code null} if axis is {@code null}.\n     */\n",
"org.jfree.chart.editor.DefaultAxisEditor.getLabel": "/**\n     * Returns the current axis label.\n     *\n     * @return The current axis label.\n     */\n",
"org.jfree.chart.editor.DefaultAxisEditor.getLabelFont": "/**\n     * Returns the current label font.\n     *\n     * @return The current label font.\n     */\n",
"org.jfree.chart.editor.DefaultAxisEditor.getLabelPaint": "/**\n     * Returns the current label paint.\n     *\n     * @return The current label paint.\n     */\n",
"org.jfree.chart.editor.DefaultAxisEditor.isTickLabelsVisible": "/**\n     * Returns a flag that indicates whether or not the tick labels are visible.\n     *\n     * @return {@code true} if tick mark labels are visible.\n     */\n",
"org.jfree.chart.editor.DefaultAxisEditor.getTickLabelFont": "/**\n     * Returns the font used to draw the tick labels (if they are showing).\n     *\n     * @return The font used to draw the tick labels.\n     */\n",
"org.jfree.chart.editor.DefaultAxisEditor.getTickLabelPaint": "/**\n     * Returns the current tick label paint.\n     *\n     * @return The current tick label paint.\n     */\n",
"org.jfree.chart.editor.DefaultAxisEditor.isTickMarksVisible": "/**\n     * Returns the current value of the flag that determines whether or not\n     * tick marks are visible.\n     *\n     * @return {@code true} if tick marks are visible.\n     */\n",
"org.jfree.chart.editor.DefaultAxisEditor.getTickLabelInsets": "/**\n     * Returns the current tick label insets value\n     *\n     * @return The current tick label insets value.\n     */\n",
"org.jfree.chart.editor.DefaultAxisEditor.getLabelInsets": "/**\n     * Returns the current label insets value\n     *\n     * @return The current label insets value.\n     */\n",
"org.jfree.chart.editor.DefaultAxisEditor.getOtherTabs": "/**\n     * Returns a reference to the tabbed pane.\n     *\n     * @return A reference to the tabbed pane.\n     */\n",
"org.jfree.chart.editor.DefaultAxisEditor.actionPerformed": "/**\n     * Handles user interaction with the property panel.\n     *\n     * @param event  information about the event that triggered the call to\n     *      this method.\n     */\n",
"org.jfree.chart.editor.DefaultAxisEditor.attemptLabelFontSelection": "/**\n     * Presents a font selection dialog to the user.\n     */\n",
"org.jfree.chart.editor.DefaultAxisEditor.attemptModifyLabelPaint": "/**\n     * Allows the user the opportunity to change the outline paint.\n     */\n",
"org.jfree.chart.editor.DefaultAxisEditor.attemptTickLabelFontSelection": "/**\n     * Presents a tick label font selection dialog to the user.\n     */\n",
"org.jfree.chart.editor.DefaultAxisEditor.setAxisProperties": "/**\n     * Sets the properties of the specified axis to match the properties\n     * defined on this panel.\n     *\n     * @param axis  the axis.\n     */\n",
"org.jfree.chart.editor.ChartEditorFactory.createEditor": "/**\n     * Creates an editor for the given chart.\n     *\n     * @param chart  the chart.\n     *\n     * @return A chart editor.\n     */\n",
"org.jfree.chart.editor.ChartEditor.updateChart": "/**\n     * Applies the changes to the specified chart.\n     *\n     * @param chart  the chart.\n     */\n",
"org.jfree.chart.axis.Axis.isVisible": "/**\n     * Returns {@code true} if the axis is visible, and\n     * {@code false} otherwise.\n     *\n     * @return A boolean.\n     *\n     * @see #setVisible(boolean)\n     */\n",
"org.jfree.chart.axis.Axis.setVisible": "/**\n     * Sets a flag that controls whether or not the axis is visible and sends\n     * an {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #isVisible()\n     */\n",
"org.jfree.chart.axis.Axis.getLabel": "/**\n     * Returns the label for the axis.\n     *\n     * @return The label for the axis ({@code null} possible).\n     *\n     * @see #getLabelFont()\n     * @see #getLabelPaint()\n     * @see #setLabel(String)\n     */\n",
"org.jfree.chart.axis.Axis.setLabel": "/**\n     * Sets the label for the axis and sends an {@link AxisChangeEvent} to all\n     * registered listeners.\n     *\n     * @param label  the new label ({@code null} permitted).\n     *\n     * @see #getLabel()\n     * @see #setLabelFont(Font)\n     * @see #setLabelPaint(Paint)\n     */\n",
"org.jfree.chart.axis.Axis.getAttributedLabel": "/**\n     * Returns the attributed label (the returned value is a copy, so \n     * modifying it will not impact the state of the axis).  The default value \n     * is {@code null}.\n     * \n     * @return The attributed label (possibly {@code null}).\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.axis.Axis.setAttributedLabel": "/**\n     * Sets the attributed label for the axis and sends an \n     * {@link AxisChangeEvent} to all registered listeners.  This is a \n     * convenience method that converts the string into an \n     * {@code AttributedString} using the current font attributes.\n     * \n     * @param label  the label ({@code null} permitted).\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.axis.Axis.setAttributedLabel": "/**\n     * Sets the attributed label for the axis and sends an \n     * {@link AxisChangeEvent} to all registered listeners.\n     * \n     * @param label  the label ({@code null} permitted).\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.axis.Axis.createAttributedLabel": "/**\n     * Creates and returns an {@code AttributedString} with the specified\n     * text and the labelFont and labelPaint applied as attributes.\n     * \n     * @param label  the label ({@code null} permitted).\n     * \n     * @return An attributed string or {@code null}.\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.axis.Axis.getLabelFont": "/**\n     * Returns the font for the axis label.\n     *\n     * @return The font (never {@code null}).\n     *\n     * @see #setLabelFont(Font)\n     */\n",
"org.jfree.chart.axis.Axis.setLabelFont": "/**\n     * Sets the font for the axis label and sends an {@link AxisChangeEvent}\n     * to all registered listeners.\n     *\n     * @param font  the font ({@code null} not permitted).\n     *\n     * @see #getLabelFont()\n     */\n",
"org.jfree.chart.axis.Axis.getLabelPaint": "/**\n     * Returns the color/shade used to draw the axis label.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setLabelPaint(Paint)\n     */\n",
"org.jfree.chart.axis.Axis.setLabelPaint": "/**\n     * Sets the paint used to draw the axis label and sends an\n     * {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getLabelPaint()\n     */\n",
"org.jfree.chart.axis.Axis.getLabelInsets": "/**\n     * Returns the insets for the label (that is, the amount of blank space\n     * that should be left around the label).\n     *\n     * @return The label insets (never {@code null}).\n     *\n     * @see #setLabelInsets(RectangleInsets)\n     */\n",
"org.jfree.chart.axis.Axis.setLabelInsets": "/**\n     * Sets the insets for the axis label, and sends an {@link AxisChangeEvent}\n     * to all registered listeners.\n     *\n     * @param insets  the insets ({@code null} not permitted).\n     *\n     * @see #getLabelInsets()\n     */\n",
"org.jfree.chart.axis.Axis.setLabelInsets": "/**\n     * Sets the insets for the axis label, and sends an {@link AxisChangeEvent}\n     * to all registered listeners.\n     *\n     * @param insets  the insets ({@code null} not permitted).\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.axis.Axis.getLabelAngle": "/**\n     * Returns the angle of the axis label.\n     *\n     * @return The angle (in radians).\n     *\n     * @see #setLabelAngle(double)\n     */\n",
"org.jfree.chart.axis.Axis.setLabelAngle": "/**\n     * Sets the angle for the label and sends an {@link AxisChangeEvent} to all\n     * registered listeners.\n     *\n     * @param angle  the angle (in radians).\n     *\n     * @see #getLabelAngle()\n     */\n",
"org.jfree.chart.axis.Axis.getLabelLocation": "/**\n     * Returns the location of the axis label.  The default is\n     * {@link AxisLabelLocation#MIDDLE}.\n     * \n     * @return The location of the axis label (never {@code null}). \n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.axis.Axis.setLabelLocation": "/**\n     * Sets the axis label location and sends an {@link AxisChangeEvent} to\n     * all registered listeners.\n     * \n     * @param location  the new location ({@code null} not permitted).\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.axis.Axis.isAxisLineVisible": "/**\n     * A flag that controls whether or not the axis line is drawn.\n     *\n     * @return A boolean.\n     *\n     * @see #getAxisLinePaint()\n     * @see #getAxisLineStroke()\n     * @see #setAxisLineVisible(boolean)\n     */\n",
"org.jfree.chart.axis.Axis.setAxisLineVisible": "/**\n     * Sets a flag that controls whether or not the axis line is visible and\n     * sends an {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param visible  the flag.\n     *\n     * @see #isAxisLineVisible()\n     * @see #setAxisLinePaint(Paint)\n     * @see #setAxisLineStroke(Stroke)\n     */\n",
"org.jfree.chart.axis.Axis.getAxisLinePaint": "/**\n     * Returns the paint used to draw the axis line.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setAxisLinePaint(Paint)\n     */\n",
"org.jfree.chart.axis.Axis.setAxisLinePaint": "/**\n     * Sets the paint used to draw the axis line and sends an\n     * {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getAxisLinePaint()\n     */\n",
"org.jfree.chart.axis.Axis.getAxisLineStroke": "/**\n     * Returns the stroke used to draw the axis line.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setAxisLineStroke(Stroke)\n     */\n",
"org.jfree.chart.axis.Axis.setAxisLineStroke": "/**\n     * Sets the stroke used to draw the axis line and sends an\n     * {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getAxisLineStroke()\n     */\n",
"org.jfree.chart.axis.Axis.isTickLabelsVisible": "/**\n     * Returns a flag indicating whether or not the tick labels are visible.\n     *\n     * @return The flag.\n     *\n     * @see #getTickLabelFont()\n     * @see #getTickLabelPaint()\n     * @see #setTickLabelsVisible(boolean)\n     */\n",
"org.jfree.chart.axis.Axis.setTickLabelsVisible": "/**\n     * Sets the flag that determines whether or not the tick labels are\n     * visible and sends an {@link AxisChangeEvent} to all registered\n     * listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #isTickLabelsVisible()\n     * @see #setTickLabelFont(Font)\n     * @see #setTickLabelPaint(Paint)\n     */\n",
"org.jfree.chart.axis.Axis.isMinorTickMarksVisible": "/**\n     * Returns the flag that indicates whether or not the minor tick marks are\n     * showing.\n     *\n     * @return The flag that indicates whether or not the minor tick marks are\n     *         showing.\n     *\n     * @see #setMinorTickMarksVisible(boolean)\n     *\n     * @since 1.0.12\n     */\n",
"org.jfree.chart.axis.Axis.setMinorTickMarksVisible": "/**\n     * Sets the flag that indicates whether or not the minor tick marks are \n     * showing and sends an {@link AxisChangeEvent} to all registered\n     * listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #isMinorTickMarksVisible()\n     *\n     * @since 1.0.12\n     */\n",
"org.jfree.chart.axis.Axis.getTickLabelFont": "/**\n     * Returns the font used for the tick labels (if showing).\n     *\n     * @return The font (never {@code null}).\n     *\n     * @see #setTickLabelFont(Font)\n     */\n",
"org.jfree.chart.axis.Axis.setTickLabelFont": "/**\n     * Sets the font for the tick labels and sends an {@link AxisChangeEvent}\n     * to all registered listeners.\n     *\n     * @param font  the font ({@code null} not allowed).\n     *\n     * @see #getTickLabelFont()\n     */\n",
"org.jfree.chart.axis.Axis.getTickLabelPaint": "/**\n     * Returns the color/shade used for the tick labels.\n     *\n     * @return The paint used for the tick labels.\n     *\n     * @see #setTickLabelPaint(Paint)\n     */\n",
"org.jfree.chart.axis.Axis.setTickLabelPaint": "/**\n     * Sets the paint used to draw tick labels (if they are showing) and\n     * sends an {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getTickLabelPaint()\n     */\n",
"org.jfree.chart.axis.Axis.getTickLabelInsets": "/**\n     * Returns the insets for the tick labels.\n     *\n     * @return The insets (never {@code null}).\n     *\n     * @see #setTickLabelInsets(RectangleInsets)\n     */\n",
"org.jfree.chart.axis.Axis.setTickLabelInsets": "/**\n     * Sets the insets for the tick labels and sends an {@link AxisChangeEvent}\n     * to all registered listeners.\n     *\n     * @param insets  the insets ({@code null} not permitted).\n     *\n     * @see #getTickLabelInsets()\n     */\n",
"org.jfree.chart.axis.Axis.isTickMarksVisible": "/**\n     * Returns the flag that indicates whether or not the tick marks are\n     * showing.\n     *\n     * @return The flag that indicates whether or not the tick marks are\n     *         showing.\n     *\n     * @see #setTickMarksVisible(boolean)\n     */\n",
"org.jfree.chart.axis.Axis.setTickMarksVisible": "/**\n     * Sets the flag that indicates whether or not the tick marks are showing\n     * and sends an {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #isTickMarksVisible()\n     */\n",
"org.jfree.chart.axis.Axis.getTickMarkInsideLength": "/**\n     * Returns the inside length of the tick marks.\n     *\n     * @return The length.\n     *\n     * @see #getTickMarkOutsideLength()\n     * @see #setTickMarkInsideLength(float)\n     */\n",
"org.jfree.chart.axis.Axis.setTickMarkInsideLength": "/**\n     * Sets the inside length of the tick marks and sends\n     * an {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param length  the new length.\n     *\n     * @see #getTickMarkInsideLength()\n     */\n",
"org.jfree.chart.axis.Axis.getTickMarkOutsideLength": "/**\n     * Returns the outside length of the tick marks.\n     *\n     * @return The length.\n     *\n     * @see #getTickMarkInsideLength()\n     * @see #setTickMarkOutsideLength(float)\n     */\n",
"org.jfree.chart.axis.Axis.setTickMarkOutsideLength": "/**\n     * Sets the outside length of the tick marks and sends\n     * an {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param length  the new length.\n     *\n     * @see #getTickMarkInsideLength()\n     */\n",
"org.jfree.chart.axis.Axis.getTickMarkStroke": "/**\n     * Returns the stroke used to draw tick marks.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setTickMarkStroke(Stroke)\n     */\n",
"org.jfree.chart.axis.Axis.setTickMarkStroke": "/**\n     * Sets the stroke used to draw tick marks and sends\n     * an {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getTickMarkStroke()\n     */\n",
"org.jfree.chart.axis.Axis.getTickMarkPaint": "/**\n     * Returns the paint used to draw tick marks (if they are showing).\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setTickMarkPaint(Paint)\n     */\n",
"org.jfree.chart.axis.Axis.setTickMarkPaint": "/**\n     * Sets the paint used to draw tick marks and sends an\n     * {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getTickMarkPaint()\n     */\n",
"org.jfree.chart.axis.Axis.getMinorTickMarkInsideLength": "/**\n     * Returns the inside length of the minor tick marks.\n     *\n     * @return The length.\n     *\n     * @see #getMinorTickMarkOutsideLength()\n     * @see #setMinorTickMarkInsideLength(float)\n     *\n     * @since 1.0.12\n     */\n",
"org.jfree.chart.axis.Axis.setMinorTickMarkInsideLength": "/**\n     * Sets the inside length of the minor tick marks and sends\n     * an {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param length  the new length.\n     *\n     * @see #getMinorTickMarkInsideLength()\n     *\n     * @since 1.0.12\n     */\n",
"org.jfree.chart.axis.Axis.getMinorTickMarkOutsideLength": "/**\n     * Returns the outside length of the minor tick marks.\n     *\n     * @return The length.\n     *\n     * @see #getMinorTickMarkInsideLength()\n     * @see #setMinorTickMarkOutsideLength(float)\n     *\n     * @since 1.0.12\n     */\n",
"org.jfree.chart.axis.Axis.setMinorTickMarkOutsideLength": "/**\n     * Sets the outside length of the minor tick marks and sends\n     * an {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param length  the new length.\n     *\n     * @see #getMinorTickMarkInsideLength()\n     *\n     * @since 1.0.12\n     */\n",
"org.jfree.chart.axis.Axis.getPlot": "/**\n     * Returns the plot that the axis is assigned to.  This method will return\n     * {@code null} if the axis is not currently assigned to a plot.\n     *\n     * @return The plot that the axis is assigned to (possibly {@code null}).\n     *\n     * @see #setPlot(Plot)\n     */\n",
"org.jfree.chart.axis.Axis.setPlot": "/**\n     * Sets a reference to the plot that the axis is assigned to.\n     * <P>\n     * This method is used internally, you shouldn't need to call it yourself.\n     *\n     * @param plot  the plot.\n     *\n     * @see #getPlot()\n     */\n",
"org.jfree.chart.axis.Axis.getFixedDimension": "/**\n     * Returns the fixed dimension for the axis.\n     *\n     * @return The fixed dimension.\n     *\n     * @see #setFixedDimension(double)\n     */\n",
"org.jfree.chart.axis.Axis.setFixedDimension": "/**\n     * Sets the fixed dimension for the axis.\n     * <P>\n     * This is used when combining more than one plot on a chart.  In this case,\n     * there may be several axes that need to have the same height or width so\n     * that they are aligned.  This method is used to fix a dimension for the\n     * axis (the context determines whether the dimension is horizontal or\n     * vertical).\n     *\n     * @param dimension  the fixed dimension.\n     *\n     * @see #getFixedDimension()\n     */\n",
"org.jfree.chart.axis.Axis.configure": "/**\n     * Configures the axis to work with the current plot.  Override this method\n     * to perform any special processing (such as auto-rescaling).\n     */\n",
"org.jfree.chart.axis.Axis.reserveSpace": "/**\n     * Estimates the space (height or width) required to draw the axis.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot that the axis belongs to.\n     * @param plotArea  the area within which the plot (including axes) should\n     *                  be drawn.\n     * @param edge  the axis location.\n     * @param space  space already reserved.\n     *\n     * @return The space required to draw the axis (including pre-reserved\n     *         space).\n     */\n",
"org.jfree.chart.axis.Axis.draw": "/**\n     * Draws the axis on a Java 2D graphics device (such as the screen or a\n     * printer).\n     *\n     * @param g2  the graphics device ({@code null} not permitted).\n     * @param cursor  the cursor location (determines where to draw the axis).\n     * @param plotArea  the area within which the axes and plot should be drawn.\n     * @param dataArea  the area within which the data should be drawn.\n     * @param edge  the axis location ({@code null} not permitted).\n     * @param plotState  collects information about the plot\n     *                   ({@code null} permitted).\n     *\n     * @return The axis state (never {@code null}).\n     */\n",
"org.jfree.chart.axis.Axis.refreshTicks": "/**\n     * Calculates the positions of the ticks for the axis, storing the results\n     * in the tick list (ready for drawing).\n     *\n     * @param g2  the graphics device.\n     * @param state  the axis state.\n     * @param dataArea  the area inside the axes.\n     * @param edge  the edge on which the axis is located.\n     *\n     * @return The list of ticks.\n     */\n",
"org.jfree.chart.axis.Axis.createAndAddEntity": "/**\n     * Creates an entity for the axis and adds it to the rendering info.\n     * If {@code plotState} is {@code null}, this means that rendering info\n     * is not being collected so this method simply returns without doing \n     * anything.\n     * \n     * @param cursor  the initial cursor value.\n     * @param state  the axis state after completion of the drawing with a\n     *     possibly updated cursor position.\n     * @param dataArea  the data area.\n     * @param edge  the edge ({@code null} not permitted).\n     * @param plotState  the PlotRenderingInfo from which a reference to the\n     *     entity collection can be obtained ({@code null} permitted).\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.axis.Axis.addChangeListener": "/**\n     * Registers an object for notification of changes to the axis.\n     *\n     * @param listener  the object that is being registered.\n     *\n     * @see #removeChangeListener(AxisChangeListener)\n     */\n",
"org.jfree.chart.axis.Axis.removeChangeListener": "/**\n     * Deregisters an object for notification of changes to the axis.\n     *\n     * @param listener  the object to deregister.\n     *\n     * @see #addChangeListener(AxisChangeListener)\n     */\n",
"org.jfree.chart.axis.Axis.hasListener": "/**\n     * Returns {@code true} if the specified object is registered with\n     * the dataset as a listener.  Most applications won't need to call this\n     * method, it exists mainly for use by unit testing code.\n     *\n     * @param listener  the listener.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.Axis.notifyListeners": "/**\n     * Notifies all registered listeners that the axis has changed.\n     * The AxisChangeEvent provides information about the change.\n     *\n     * @param event  information about the change to the axis.\n     */\n",
"org.jfree.chart.axis.Axis.fireChangeEvent": "/**\n     * Sends an {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @since 1.0.12\n     */\n",
"org.jfree.chart.axis.Axis.getLabelEnclosure": "/**\n     * Returns a rectangle that encloses the axis label.  This is typically\n     * used for layout purposes (it gives the maximum dimensions of the label).\n     *\n     * @param g2  the graphics device.\n     * @param edge  the edge of the plot area along which the axis is measuring.\n     *\n     * @return The enclosing rectangle.\n     */\n",
"org.jfree.chart.axis.Axis.labelLocationX": "/**\n     * Returns the x-coordinate for the point to which the axis label should \n     * be aligned.\n     * \n     * @param location  the axis label location ({@code null} not permitted).\n     * @param dataArea  the display area in which the data will be rendered ({@code null} not permitted).\n     * \n     * @return The x-coordinate. \n     */\n",
"org.jfree.chart.axis.Axis.labelLocationY": "/**\n     * Returns the y-coordinate for the point to which the axis label should\n     * be aligned.\n     * \n     * @param location  the location ({@code null} not permitted).\n     * @param dataArea  the data area ({@code null} not permitted).\n     * \n     * @return The y-coordinate. \n     */\n",
"org.jfree.chart.axis.Axis.labelAnchorH": "/**\n     * Returns the appropriate horizontal text anchor for the specified axis \n     * location.\n     * \n     * @param location  the location ({@code null} not permitted).\n     * \n     * @return The text anchor (never {@code null}). \n     */\n",
"org.jfree.chart.axis.Axis.labelAnchorV": "/**\n     * Returns the appropriate vertical text anchor for the specified axis \n     * location.\n     * \n     * @param location  the location ({@code null} not permitted).\n     * \n     * @return The text anchor (never {@code null}). \n     */\n",
"org.jfree.chart.axis.Axis.drawLabel": "/**\n     * Draws the axis label.\n     *\n     * @param label  the label text.\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param dataArea  the area inside the axes.\n     * @param edge  the location of the axis.\n     * @param state  the axis state ({@code null} not permitted).\n     *\n     * @return Information about the axis.\n     */\n",
"org.jfree.chart.axis.Axis.drawAttributedLabel": "/**\n     * Draws the axis label.\n     *\n     * @param label  the label text.\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param dataArea  the area inside the axes.\n     * @param edge  the location of the axis.\n     * @param state  the axis state ({@code null} not permitted).\n     *\n     * @return Information about the axis.\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.axis.Axis.drawAxisLine": "/**\n     * Draws an axis line at the current cursor position and edge.\n     *\n     * @param g2  the graphics device.\n     * @param cursor  the cursor position.\n     * @param dataArea  the data area.\n     * @param edge  the edge.\n     */\n",
"org.jfree.chart.axis.Axis.clone": "/**\n     * Returns a clone of the axis.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if some component of the axis does\n     *         not support cloning.\n     */\n",
"org.jfree.chart.axis.Axis.equals": "/**\n     * Tests this axis for equality with another object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.axis.Axis.hashCode": "/**\n     * Returns a hash code for this instance.\n     * \n     * @return A hash code. \n     */\n",
"org.jfree.chart.axis.Axis.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.axis.Axis.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.isAdvanceLineVisible": "/**\n     * The advance line is the line drawn at the limit of the current cycle,\n     * when erasing the previous cycle.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.setAdvanceLineVisible": "/**\n     * The advance line is the line drawn at the limit of the current cycle,\n     * when erasing the previous cycle.\n     *\n     * @param visible  the flag.\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.getAdvanceLinePaint": "/**\n     * The advance line is the line drawn at the limit of the current cycle,\n     * when erasing the previous cycle.\n     *\n     * @return The paint (never {@code null}).\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.setAdvanceLinePaint": "/**\n     * The advance line is the line drawn at the limit of the current cycle,\n     * when erasing the previous cycle.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.getAdvanceLineStroke": "/**\n     * The advance line is the line drawn at the limit of the current cycle,\n     * when erasing the previous cycle.\n     *\n     * @return The stroke (never {@code null}).\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.setAdvanceLineStroke": "/**\n     * The advance line is the line drawn at the limit of the current cycle,\n     * when erasing the previous cycle.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.isBoundMappedToLastCycle": "/**\n     * The cycle bound can be associated either with the current or with the\n     * last cycle.  It's up to the user's choice to decide which, as this is\n     * just a convention.  By default, the cycle bound is mapped to the current\n     * cycle.\n     * <br>\n     * Note that this has no effect on visual appearance, as the cycle bound is\n     * mapped successively for both axis ends. Use this function for correct\n     * results in translateValueToJava2D.\n     *\n     * @return {@code true} if the cycle bound is mapped to the last\n     *         cycle, {@code false} if it is bound to the current cycle\n     *         (default)\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.setBoundMappedToLastCycle": "/**\n     * The cycle bound can be associated either with the current or with the\n     * last cycle.  It's up to the user's choice to decide which, as this is\n     * just a convention. By default, the cycle bound is mapped to the current\n     * cycle.\n     * <br>\n     * Note that this has no effect on visual appearance, as the cycle bound is\n     * mapped successively for both axis ends. Use this function for correct\n     * results in valueToJava2D.\n     *\n     * @param boundMappedToLastCycle Set it to true to map the cycle bound to\n     *        the last cycle.\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.selectHorizontalAutoTickUnit": "/**\n     * Selects a tick unit when the axis is displayed horizontally.\n     *\n     * @param g2  the graphics device.\n     * @param drawArea  the drawing area.\n     * @param dataArea  the data area.\n     * @param edge  the side of the rectangle on which the axis is displayed.\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.selectVerticalAutoTickUnit": "/**\n     * Selects a tick unit when the axis is displayed vertically.\n     *\n     * @param g2  the graphics device.\n     * @param drawArea  the drawing area.\n     * @param dataArea  the data area.\n     * @param edge  the side of the rectangle on which the axis is displayed.\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.calculateAnchorPoint": "/**\n     * Calculates the anchor point for a tick.\n     *\n     * @param tick  the tick.\n     * @param cursor  the cursor.\n     * @param dataArea  the data area.\n     * @param edge  the side on which the axis is displayed.\n     *\n     * @return The anchor point.\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.refreshTicksHorizontal": "/**\n     * Builds a list of ticks for the axis.  This method is called when the\n     * axis is at the top or bottom of the chart (so the axis is \"horizontal\").\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param edge  the edge.\n     *\n     * @return A list of ticks.\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.refreshVerticalTicks": "/**\n     * Builds a list of ticks for the axis.  This method is called when the\n     * axis is at the left or right of the chart (so the axis is \"vertical\").\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param edge  the edge.\n     *\n     * @return A list of ticks.\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.java2DToValue": "/**\n     * Converts a coordinate from Java 2D space to data space.\n     *\n     * @param java2DValue  the coordinate in Java2D space.\n     * @param dataArea  the data area.\n     * @param edge  the edge.\n     *\n     * @return The data value.\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.valueToJava2D": "/**\n     * Translates a value from data space to Java 2D space.\n     *\n     * @param value  the data value.\n     * @param dataArea  the data area.\n     * @param edge  the edge.\n     *\n     * @return The Java 2D value.\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.centerRange": "/**\n     * Centers the range about the given value.\n     *\n     * @param value  the data value.\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.setAutoRangeMinimumSize": "/**\n     * This function is nearly useless since the auto range is fixed for this\n     * class to the period.  The period is extended if necessary to fit the\n     * minimum size.\n     *\n     * @param size  the size.\n     * @param notify  notify?\n     *\n     * @see org.jfree.chart.axis.ValueAxis#setAutoRangeMinimumSize(double,\n     *      boolean)\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.setFixedAutoRange": "/**\n     * The auto range is fixed for this class to the period by default.\n     * This function will thus set a new period.\n     *\n     * @param length  the length.\n     *\n     * @see org.jfree.chart.axis.ValueAxis#setFixedAutoRange(double)\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.setRange": "/**\n     * Sets a new axis range. The period is extended to fit the range size, if\n     * necessary.\n     *\n     * @param range  the range.\n     * @param turnOffAutoRange  switch off the auto range.\n     * @param notify notify?\n     *\n     * @see org.jfree.chart.axis.ValueAxis#setRange(Range, boolean, boolean)\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.getCycleBound": "/**\n     * The cycle bound is defined as the higest value x such that\n     * \"offset + period * i = x\", with i and integer and x &lt;\n     * range.getUpperBound() This is the value which is at both ends of the\n     * axis :  x...up|low...x\n     * The values from x to up are the valued in the current cycle.\n     * The values from low to x are the valued in the previous cycle.\n     *\n     * @return The cycle bound.\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.getOffset": "/**\n     * The cycle bound is a multiple of the period, plus optionally a start\n     * offset.\n     * <pre>cb = n * period + offset</pre>\n     *\n     * @return The current offset.\n     *\n     * @see #getCycleBound()\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.setOffset": "/**\n     * The cycle bound is a multiple of the period, plus optionally a start\n     * offset.\n     * <pre>cb = n * period + offset</pre>\n     *\n     * @param offset The offset to set.\n     *\n     * @see #getCycleBound()\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.getPeriod": "/**\n     * The cycle bound is a multiple of the period, plus optionally a start\n     * offset.\n     * <pre>cb = n * period + offset</pre>\n     *\n     * @return The current period.\n     *\n     * @see #getCycleBound()\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.setPeriod": "/**\n     * The cycle bound is a multiple of the period, plus optionally a start\n     * offset.\n     * <pre>cb = n * period + offset</pre>\n     *\n     * @param period The period to set.\n     *\n     * @see #getCycleBound()\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.drawTickMarksAndLabels": "/**\n     * Draws the tick marks and labels.\n     *\n     * @param g2  the graphics device.\n     * @param cursor  the cursor.\n     * @param plotArea  the plot area.\n     * @param dataArea  the area inside the axes.\n     * @param edge  the side on which the axis is displayed.\n     *\n     * @return The axis state.\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.draw": "/**\n     * Draws the axis.\n     *\n     * @param g2  the graphics device ({@code null} not permitted).\n     * @param cursor  the cursor position.\n     * @param plotArea  the plot area ({@code null} not permitted).\n     * @param dataArea  the data area ({@code null} not permitted).\n     * @param edge  the edge ({@code null} not permitted).\n     * @param plotState  collects information about the plot\n     *                   ({@code null} permitted).\n     *\n     * @return The axis state (never {@code null}).\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.reserveSpace": "/**\n     * Reserve some space on each axis side because we draw a centered label at\n     * each extremity.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param plotArea  the plot area.\n     * @param edge  the edge.\n     * @param space  the space already reserved.\n     *\n     * @return The reserved space.\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.axis.CyclicNumberAxis.equals": "/**\n     * Tests the axis for equality with another object.\n     *\n     * @param obj  the object to test against.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.DateTick.getDate": "/**\n     * Returns the date.\n     *\n     * @return The date.\n     */\n",
"org.jfree.chart.axis.DateTick.equals": "/**\n     * Tests this tick for equality with an arbitrary object.\n     *\n     * @param obj  the object to test ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.DateTick.hashCode": "/**\n     * Returns a hash code for this object.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.axis.NumberTickUnit.valueToString": "/**\n     * Converts a value to a string.\n     *\n     * @param value  the value.\n     *\n     * @return The formatted string.\n     */\n",
"org.jfree.chart.axis.NumberTickUnit.equals": "/**\n     * Tests this formatter for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.NumberTickUnit.toString": "/**\n     * Returns a string representing this unit.\n     *\n     * @return A string.\n     */\n",
"org.jfree.chart.axis.NumberTickUnit.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.axis.NumberAxis.getRangeType": "/**\n     * Returns the axis range type.\n     *\n     * @return The axis range type (never {@code null}).\n     *\n     * @see #setRangeType(RangeType)\n     */\n",
"org.jfree.chart.axis.NumberAxis.setRangeType": "/**\n     * Sets the axis range type.\n     *\n     * @param rangeType  the range type ({@code null} not permitted).\n     *\n     * @see #getRangeType()\n     */\n",
"org.jfree.chart.axis.NumberAxis.getAutoRangeIncludesZero": "/**\n     * Returns the flag that indicates whether or not the automatic axis range\n     * (if indeed it is determined automatically) is forced to include zero.\n     *\n     * @return The flag.\n     */\n",
"org.jfree.chart.axis.NumberAxis.setAutoRangeIncludesZero": "/**\n     * Sets the flag that indicates whether or not the axis range, if\n     * automatically calculated, is forced to include zero.\n     * <p>\n     * If the flag is changed to {@code true}, the axis range is\n     * recalculated.\n     * <p>\n     * Any change to the flag will trigger an {@link AxisChangeEvent}.\n     *\n     * @param flag  the new value of the flag.\n     *\n     * @see #getAutoRangeIncludesZero()\n     */\n",
"org.jfree.chart.axis.NumberAxis.getAutoRangeStickyZero": "/**\n     * Returns a flag that affects the auto-range when zero falls outside the\n     * data range but inside the margins defined for the axis.\n     *\n     * @return The flag.\n     *\n     * @see #setAutoRangeStickyZero(boolean)\n     */\n",
"org.jfree.chart.axis.NumberAxis.setAutoRangeStickyZero": "/**\n     * Sets a flag that affects the auto-range when zero falls outside the data\n     * range but inside the margins defined for the axis.\n     *\n     * @param flag  the new flag.\n     *\n     * @see #getAutoRangeStickyZero()\n     */\n",
"org.jfree.chart.axis.NumberAxis.getTickUnit": "/**\n     * Returns the tick unit for the axis.\n     * <p>\n     * Note: if the {@code autoTickUnitSelection} flag is\n     * {@code true} the tick unit may be changed while the axis is being\n     * drawn, so in that case the return value from this method may be\n     * irrelevant if the method is called before the axis has been drawn.\n     *\n     * @return The tick unit for the axis.\n     *\n     * @see #setTickUnit(NumberTickUnit)\n     * @see ValueAxis#isAutoTickUnitSelection()\n     */\n",
"org.jfree.chart.axis.NumberAxis.setTickUnit": "/**\n     * Sets the tick unit for the axis and sends an {@link AxisChangeEvent} to\n     * all registered listeners.  A side effect of calling this method is that\n     * the \"auto-select\" feature for tick units is switched off (you can\n     * restore it using the {@link ValueAxis#setAutoTickUnitSelection(boolean)}\n     * method).\n     *\n     * @param unit  the new tick unit ({@code null} not permitted).\n     *\n     * @see #getTickUnit()\n     * @see #setTickUnit(NumberTickUnit, boolean, boolean)\n     */\n",
"org.jfree.chart.axis.NumberAxis.setTickUnit": "/**\n     * Sets the tick unit for the axis and, if requested, sends an\n     * {@link AxisChangeEvent} to all registered listeners.  In addition, an\n     * option is provided to turn off the \"auto-select\" feature for tick units\n     * (you can restore it using the\n     * {@link ValueAxis#setAutoTickUnitSelection(boolean)} method).\n     *\n     * @param unit  the new tick unit ({@code null} not permitted).\n     * @param notify  notify listeners?\n     * @param turnOffAutoSelect  turn off the auto-tick selection?\n     */\n",
"org.jfree.chart.axis.NumberAxis.getNumberFormatOverride": "/**\n     * Returns the number format override.  If this is non-null, then it will\n     * be used to format the numbers on the axis.\n     *\n     * @return The number formatter (possibly {@code null}).\n     *\n     * @see #setNumberFormatOverride(NumberFormat)\n     */\n",
"org.jfree.chart.axis.NumberAxis.setNumberFormatOverride": "/**\n     * Sets the number format override.  If this is non-null, then it will be\n     * used to format the numbers on the axis.\n     *\n     * @param formatter  the number formatter ({@code null} permitted).\n     *\n     * @see #getNumberFormatOverride()\n     */\n",
"org.jfree.chart.axis.NumberAxis.getMarkerBand": "/**\n     * Returns the (optional) marker band for the axis.\n     *\n     * @return The marker band (possibly {@code null}).\n     *\n     * @see #setMarkerBand(MarkerAxisBand)\n     */\n",
"org.jfree.chart.axis.NumberAxis.setMarkerBand": "/**\n     * Sets the marker band for the axis.\n     * <P>\n     * The marker band is optional, leave it set to {@code null} if you\n     * don't require it.\n     *\n     * @param band the new band ({@code null} permitted).\n     *\n     * @see #getMarkerBand()\n     */\n",
"org.jfree.chart.axis.NumberAxis.configure": "/**\n     * Configures the axis to work with the specified plot.  If the axis has\n     * auto-scaling, then sets the maximum and minimum values.\n     */\n",
"org.jfree.chart.axis.NumberAxis.autoAdjustRange": "/**\n     * Rescales the axis to ensure that all data is visible.\n     */\n",
"org.jfree.chart.axis.NumberAxis.valueToJava2D": "/**\n     * Converts a data value to a coordinate in Java2D space, assuming that the\n     * axis runs along one edge of the specified dataArea.\n     * <p>\n     * Note that it is possible for the coordinate to fall outside the plotArea.\n     *\n     * @param value  the data value.\n     * @param area  the area for plotting the data.\n     * @param edge  the axis location.\n     *\n     * @return The Java2D coordinate.\n     *\n     * @see #java2DToValue(double, Rectangle2D, RectangleEdge)\n     */\n",
"org.jfree.chart.axis.NumberAxis.java2DToValue": "/**\n     * Converts a coordinate in Java2D space to the corresponding data value,\n     * assuming that the axis runs along one edge of the specified dataArea.\n     *\n     * @param java2DValue  the coordinate in Java2D space.\n     * @param area  the area in which the data is plotted.\n     * @param edge  the location.\n     *\n     * @return The data value.\n     *\n     * @see #valueToJava2D(double, Rectangle2D, RectangleEdge)\n     */\n",
"org.jfree.chart.axis.NumberAxis.calculateLowestVisibleTickValue": "/**\n     * Calculates the value of the lowest visible tick on the axis.\n     *\n     * @return The value of the lowest visible tick on the axis.\n     *\n     * @see #calculateHighestVisibleTickValue()\n     */\n",
"org.jfree.chart.axis.NumberAxis.calculateHighestVisibleTickValue": "/**\n     * Calculates the value of the highest visible tick on the axis.\n     *\n     * @return The value of the highest visible tick on the axis.\n     *\n     * @see #calculateLowestVisibleTickValue()\n     */\n",
"org.jfree.chart.axis.NumberAxis.calculateVisibleTickCount": "/**\n     * Calculates the number of visible ticks.\n     *\n     * @return The number of visible ticks on the axis.\n     */\n",
"org.jfree.chart.axis.NumberAxis.draw": "/**\n     * Draws the axis on a Java 2D graphics device (such as the screen or a\n     * printer).\n     *\n     * @param g2  the graphics device ({@code null} not permitted).\n     * @param cursor  the cursor location.\n     * @param plotArea  the area within which the axes and data should be drawn\n     *                  ({@code null} not permitted).\n     * @param dataArea  the area within which the data should be drawn\n     *                  ({@code null} not permitted).\n     * @param edge  the location of the axis ({@code null} not permitted).\n     * @param plotState  collects information about the plot\n     *                   ({@code null} permitted).\n     *\n     * @return The axis state (never {@code null}).\n     */\n",
"org.jfree.chart.axis.NumberAxis.createStandardTickUnits": "/**\n     * Creates the standard tick units.\n     * <P>\n     * If you don't like these defaults, create your own instance of TickUnits\n     * and then pass it to the setStandardTickUnits() method in the\n     * NumberAxis class.\n     *\n     * @return The standard tick units.\n     *\n     * @see #setStandardTickUnits(TickUnitSource)\n     * @see #createIntegerTickUnits()\n     */\n",
"org.jfree.chart.axis.NumberAxis.createIntegerTickUnits": "/**\n     * Returns a collection of tick units for integer values.\n     *\n     * @return A collection of tick units for integer values.\n     *\n     * @see #setStandardTickUnits(TickUnitSource)\n     * @see #createStandardTickUnits()\n     */\n",
"org.jfree.chart.axis.NumberAxis.createStandardTickUnits": "/**\n     * Creates a collection of standard tick units.  The supplied locale is\n     * used to create the number formatter (a localised instance of\n     * {@code NumberFormat}).\n     * <P>\n     * If you don't like these defaults, create your own instance of\n     * {@link TickUnits} and then pass it to the\n     * {@code setStandardTickUnits()} method.\n     *\n     * @param locale  the locale.\n     *\n     * @return A tick unit collection.\n     *\n     * @see #setStandardTickUnits(TickUnitSource)\n     */\n",
"org.jfree.chart.axis.NumberAxis.createIntegerTickUnits": "/**\n     * Returns a collection of tick units for integer values.\n     * Uses a given Locale to create the DecimalFormats.\n     *\n     * @param locale the locale to use to represent Numbers.\n     *\n     * @return A collection of tick units for integer values.\n     *\n     * @see #setStandardTickUnits(TickUnitSource)\n     */\n",
"org.jfree.chart.axis.NumberAxis.estimateMaximumTickLabelHeight": "/**\n     * Estimates the maximum tick label height.\n     *\n     * @param g2  the graphics device.\n     *\n     * @return The maximum height.\n     */\n",
"org.jfree.chart.axis.NumberAxis.estimateMaximumTickLabelWidth": "/**\n     * Estimates the maximum width of the tick labels, assuming the specified\n     * tick unit is used.\n     * <P>\n     * Rather than computing the string bounds of every tick on the axis, we\n     * just look at two values: the lower bound and the upper bound for the\n     * axis.  These two values will usually be representative.\n     *\n     * @param g2  the graphics device.\n     * @param unit  the tick unit to use for calculation.\n     *\n     * @return The estimated maximum width of the tick labels.\n     */\n",
"org.jfree.chart.axis.NumberAxis.selectAutoTickUnit": "/**\n     * Selects an appropriate tick value for the axis.  The strategy is to\n     * display as many ticks as possible (selected from an array of 'standard'\n     * tick units) without the labels overlapping.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area defined by the axes.\n     * @param edge  the axis location.\n     */\n",
"org.jfree.chart.axis.NumberAxis.selectHorizontalAutoTickUnit": "/**\n     * Selects an appropriate tick value for the axis.  The strategy is to\n     * display as many ticks as possible (selected from an array of 'standard'\n     * tick units) without the labels overlapping.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area defined by the axes.\n     * @param edge  the axis location.\n     */\n",
"org.jfree.chart.axis.NumberAxis.selectVerticalAutoTickUnit": "/**\n     * Selects an appropriate tick value for the axis.  The strategy is to\n     * display as many ticks as possible (selected from an array of 'standard'\n     * tick units) without the labels overlapping.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area in which the plot should be drawn.\n     * @param edge  the axis location.\n     */\n",
"org.jfree.chart.axis.NumberAxis.refreshTicks": "/**\n     * Calculates the positions of the tick labels for the axis, storing the\n     * results in the tick label list (ready for drawing).\n     *\n     * @param g2  the graphics device.\n     * @param state  the axis state.\n     * @param dataArea  the area in which the plot should be drawn.\n     * @param edge  the location of the axis.\n     *\n     * @return A list of ticks.\n     */\n",
"org.jfree.chart.axis.NumberAxis.refreshTicksHorizontal": "/**\n     * Calculates the positions of the tick labels for the axis, storing the\n     * results in the tick label list (ready for drawing).\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area in which the data should be drawn.\n     * @param edge  the location of the axis.\n     *\n     * @return A list of ticks.\n     */\n",
"org.jfree.chart.axis.NumberAxis.refreshTicksVertical": "/**\n     * Calculates the positions of the tick labels for the axis, storing the\n     * results in the tick label list (ready for drawing).\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area in which the plot should be drawn.\n     * @param edge  the location of the axis.\n     *\n     * @return A list of ticks.\n     */\n",
"org.jfree.chart.axis.NumberAxis.clone": "/**\n     * Returns a clone of the axis.\n     *\n     * @return A clone\n     *\n     * @throws CloneNotSupportedException if some component of the axis does\n     *         not support cloning.\n     */\n",
"org.jfree.chart.axis.NumberAxis.equals": "/**\n     * Tests the axis for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.NumberAxis.hashCode": "/**\n     * Returns a hash code for this object.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.axis.CategoryTick.getCategory": "/**\n     * Returns the category.\n     *\n     * @return The category.\n     */\n",
"org.jfree.chart.axis.CategoryTick.getLabel": "/**\n     * Returns the label.\n     *\n     * @return The label.\n     */\n",
"org.jfree.chart.axis.CategoryTick.getLabelAnchor": "/**\n     * Returns the label anchor.\n     *\n     * @return The label anchor.\n     */\n",
"org.jfree.chart.axis.CategoryTick.equals": "/**\n     * Tests this category tick for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.CategoryTick.hashCode": "/**\n     * Returns a hash code for this object.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.axis.TickUnitSource.getLargerTickUnit": "/**\n     * Returns the smallest tick unit available in the source that is larger\n     * than {@code unit} or, if there is no larger unit, returns {@code unit}.\n     *\n     * @param unit  the unit ({@code null} not permitted).\n     *\n     * @return A tick unit that is larger than the supplied unit.\n     */\n",
"org.jfree.chart.axis.TickUnitSource.getCeilingTickUnit": "/**\n     * Returns the tick unit in the collection that is greater than or equal\n     * to (in size) the specified unit.\n     *\n     * @param unit  the unit.\n     *\n     * @return A unit from the collection.\n     */\n",
"org.jfree.chart.axis.TickUnitSource.getCeilingTickUnit": "/**\n     * Returns the smallest tick unit available in the source that is greater \n     * than or equal to the specified size.  If there is no such tick unit,\n     * the method should return the largest available tick in the source.\n     *\n     * @param size  the size.\n     *\n     * @return A unit from the collection (never {@code null}).\n     */\n",
"org.jfree.chart.axis.CompassFormat.getDirectionCode": "/**\n     * Returns a string representing the direction.\n     *\n     * @param direction  the direction.\n     *\n     * @return A string.\n     */\n",
"org.jfree.chart.axis.CompassFormat.format": "/**\n     * Formats a number into the specified string buffer.\n     *\n     * @param number  the number to format.\n     * @param toAppendTo  the string buffer.\n     * @param pos  the field position (ignored here).\n     *\n     * @return The string buffer.\n     */\n",
"org.jfree.chart.axis.CompassFormat.format": "/**\n     * Formats a number into the specified string buffer.\n     *\n     * @param number  the number to format.\n     * @param toAppendTo  the string buffer.\n     * @param pos  the field position (ignored here).\n     *\n     * @return The string buffer.\n     */\n",
"org.jfree.chart.axis.CompassFormat.parse": "/**\n     * This method returns {@code null} for all inputs.  This class cannot\n     * be used for parsing.\n     *\n     * @param source  the source string.\n     * @param parsePosition  the parse position.\n     *\n     * @return {@code null}.\n     */\n",
"org.jfree.chart.axis.SymbolAxis.getSymbols": "/**\n     * Returns an array of the symbols for the axis.\n     *\n     * @return The symbols.\n     */\n",
"org.jfree.chart.axis.SymbolAxis.isGridBandsVisible": "/**\n     * Returns the flag that controls whether or not grid bands are drawn for \n     * the axis.  The default value is {@code true}. \n     *\n     * @return A boolean.\n     *\n     * @see #setGridBandsVisible(boolean)\n     */\n",
"org.jfree.chart.axis.SymbolAxis.setGridBandsVisible": "/**\n     * Sets the flag that controls whether or not grid bands are drawn for this\n     * axis and notifies registered listeners that the axis has been modified.\n     * Each band is the area between two adjacent gridlines \n     * running perpendicular to the axis.  When the bands are drawn they are \n     * filled with the colors {@link #getGridBandPaint()} and \n     * {@link #getGridBandAlternatePaint()} in an alternating sequence.\n     *\n     * @param flag  the new setting.\n     *\n     * @see #isGridBandsVisible()\n     */\n",
"org.jfree.chart.axis.SymbolAxis.getGridBandPaint": "/**\n     * Returns the paint used to color grid bands (two colors are used\n     * alternately, the other is returned by \n     * {@link #getGridBandAlternatePaint()}).  The default value is\n     * {@link #DEFAULT_GRID_BAND_PAINT}.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setGridBandPaint(Paint)\n     * @see #isGridBandsVisible()\n     */\n",
"org.jfree.chart.axis.SymbolAxis.setGridBandPaint": "/**\n     * Sets the grid band paint and notifies registered listeners that the\n     * axis has been changed.  See the {@link #setGridBandsVisible(boolean)}\n     * method for more information about grid bands.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getGridBandPaint()\n     */\n",
"org.jfree.chart.axis.SymbolAxis.getGridBandAlternatePaint": "/**\n     * Returns the second paint used to color grid bands (two colors are used\n     * alternately, the other is returned by {@link #getGridBandPaint()}).  \n     * The default value is {@link #DEFAULT_GRID_BAND_ALTERNATE_PAINT} \n     * (transparent).\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setGridBandAlternatePaint(Paint)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.axis.SymbolAxis.setGridBandAlternatePaint": "/**\n     * Sets the grid band paint and notifies registered listeners that the\n     * axis has been changed.  See the {@link #setGridBandsVisible(boolean)}\n     * method for more information about grid bands.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getGridBandAlternatePaint()\n     * @see #setGridBandPaint(Paint)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.axis.SymbolAxis.selectAutoTickUnit": "/**\n     * This operation is not supported by this axis.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area in which the plot and axes should be drawn.\n     * @param edge  the edge along which the axis is drawn.\n     */\n",
"org.jfree.chart.axis.SymbolAxis.draw": "/**\n     * Draws the axis on a Java 2D graphics device (such as the screen or a\n     * printer).\n     *\n     * @param g2  the graphics device ({@code null} not permitted).\n     * @param cursor  the cursor location.\n     * @param plotArea  the area within which the plot and axes should be drawn\n     *                  ({@code null} not permitted).\n     * @param dataArea  the area within which the data should be drawn\n     *                  ({@code null} not permitted).\n     * @param edge  the axis location ({@code null} not permitted).\n     * @param plotState  collects information about the plot\n     *                   ({@code null} permitted).\n     *\n     * @return The axis state (never {@code null}).\n     */\n",
"org.jfree.chart.axis.SymbolAxis.drawGridBands": "/**\n     * Draws the grid bands (alternate bands are colored using\n     * {@link #getGridBandPaint()} and {@link #getGridBandAlternatePaint()}.\n     *\n     * @param g2  the graphics target ({@code null} not permitted).\n     * @param plotArea  the area within which the plot is drawn \n     *     ({@code null} not permitted).\n     * @param dataArea  the data area to which the axes are aligned \n     *     ({@code null} not permitted).\n     * @param edge  the edge to which the axis is aligned ({@code null} not\n     *     permitted).\n     * @param ticks  the ticks ({@code null} not permitted).\n     */\n",
"org.jfree.chart.axis.SymbolAxis.drawGridBandsHorizontal": "/**\n     * Draws the grid bands for the axis when it is at the top or bottom of\n     * the plot.\n     *\n     * @param g2  the graphics target ({@code null} not permitted).\n     * @param plotArea  the area within which the plot is drawn (not used here).\n     * @param dataArea  the area for the data (to which the axes are aligned,\n     *         {@code null} not permitted).\n     * @param firstGridBandIsDark  True: the first grid band takes the\n     *                             color of {@code gridBandPaint}.\n     *                             False: the second grid band takes the\n     *                             color of {@code gridBandPaint}.\n     * @param ticks  a list of ticks ({@code null} not permitted).\n     */\n",
"org.jfree.chart.axis.SymbolAxis.drawGridBandsVertical": "/**\n     * Draws the grid bands for an axis that is aligned to the left or\n     * right of the data area (that is, a vertical axis).\n     *\n     * @param g2  the graphics target ({@code null} not permitted).\n     * @param plotArea  the area within which the plot is drawn (not used here).\n     * @param dataArea  the area for the data (to which the axes are aligned,\n     *         {@code null} not permitted).\n     * @param firstGridBandIsDark  True: the first grid band takes the\n     *                             color of {@code gridBandPaint}.\n     *                             False: the second grid band takes the\n     *                             color of {@code gridBandPaint}.\n     * @param ticks  a list of ticks ({@code null} not permitted).\n     */\n",
"org.jfree.chart.axis.SymbolAxis.autoAdjustRange": "/**\n     * Rescales the axis to ensure that all data is visible.\n     */\n",
"org.jfree.chart.axis.SymbolAxis.refreshTicks": "/**\n     * Calculates the positions of the tick labels for the axis, storing the\n     * results in the tick label list (ready for drawing).\n     *\n     * @param g2  the graphics device.\n     * @param state  the axis state.\n     * @param dataArea  the area in which the data should be drawn.\n     * @param edge  the location of the axis.\n     *\n     * @return A list of ticks.\n     */\n",
"org.jfree.chart.axis.SymbolAxis.refreshTicksHorizontal": "/**\n     * Calculates the positions of the tick labels for the axis, storing the\n     * results in the tick label list (ready for drawing).\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area in which the data should be drawn.\n     * @param edge  the location of the axis.\n     *\n     * @return The ticks.\n     */\n",
"org.jfree.chart.axis.SymbolAxis.refreshTicksVertical": "/**\n     * Calculates the positions of the tick labels for the axis, storing the\n     * results in the tick label list (ready for drawing).\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area in which the plot should be drawn.\n     * @param edge  the location of the axis.\n     *\n     * @return The ticks.\n     */\n",
"org.jfree.chart.axis.SymbolAxis.valueToString": "/**\n     * Converts a value to a string, using the list of symbols.\n     *\n     * @param value  value to convert.\n     *\n     * @return The symbol.\n     */\n",
"org.jfree.chart.axis.SymbolAxis.equals": "/**\n     * Tests this axis for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.SymbolAxis.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.axis.SymbolAxis.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.axis.TickUnit.getSize": "/**\n     * Returns the size of the tick unit.\n     *\n     * @return The size of the tick unit.\n     */\n",
"org.jfree.chart.axis.TickUnit.getMinorTickCount": "/**\n     * Returns the minor tick count.\n     *\n     * @return The minor tick count.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.axis.TickUnit.valueToString": "/**\n     * Converts the supplied value to a string.\n     * <P>\n     * Subclasses may implement special formatting by overriding this method.\n     *\n     * @param value  the data value.\n     *\n     * @return Value as string.\n     */\n",
"org.jfree.chart.axis.TickUnit.compareTo": "/**\n     * Compares this tick unit to an arbitrary object.\n     *\n     * @param object  the object to compare against.\n     *\n     * @return {@code 1} if the size of the other object is less than this,\n     *      {@code 0} if both have the same size and {@code -1} this\n     *      size is less than the others.\n     */\n",
"org.jfree.chart.axis.TickUnit.equals": "/**\n     * Tests this unit for equality with another object.\n     *\n     * @param obj  the object.\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.axis.TickUnit.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.axis.LogTick.getAttributedLabel": "/**\n     * Returns the attributed string for the tick label, or {@code null} \n     * if there is no label.\n     * \n     * @return The attributed string or {@code null}. \n     */\n",
"org.jfree.chart.axis.DateTickUnitType.getCalendarField": "/**\n     * Returns the calendar field.\n     *\n     * @return The calendar field.\n     */\n",
"org.jfree.chart.axis.DateTickUnitType.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.chart.axis.DateTickUnitType.equals": "/**\n     * Returns {@code true} if this object is equal to the specified\n     * object, and {@code false} otherwise.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.DateTickUnitType.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     *\n     * @return The object.\n     *\n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.chart.axis.TickType.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.chart.axis.TickType.equals": "/**\n     * Returns {@code true} if this object is equal to the specified\n     * object, and {@code false} otherwise.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.TickType.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     *\n     * @return The object.\n     *\n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.chart.axis.NumberTick.getNumber": "/**\n     * Returns the number.\n     *\n     * @return The number.\n     */\n",
"org.jfree.chart.axis.LogAxis.getBase": "/**\n     * Returns the base for the logarithm calculation.  The default value is\n     * {@code 10.0}.\n     *\n     * @return The base for the logarithm calculation.\n     *\n     * @see #setBase(double)\n     */\n",
"org.jfree.chart.axis.LogAxis.setBase": "/**\n     * Sets the base for the logarithm calculation and sends a change event to\n     * all registered listeners.\n     *\n     * @param base  the base value (must be &gt; 1.0).\n     *\n     * @see #getBase()\n     */\n",
"org.jfree.chart.axis.LogAxis.getBaseSymbol": "/**\n     * Returns the symbol used to represent the base of the logarithmic scale\n     * for the axis.  If this is {@code null} (the default) then the \n     * numerical value of the base is displayed.\n     * \n     * @return The base symbol (possibly {@code null}).\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.chart.axis.LogAxis.setBaseSymbol": "/**\n     * Sets the symbol used to represent the base value of the logarithmic \n     * scale and sends a change event to all registered listeners.\n     * \n     * @param symbol  the symbol ({@code null} permitted).\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.chart.axis.LogAxis.getBaseFormatter": "/**\n     * Returns the formatter used to format the base value of the logarithmic\n     * scale when it is displayed numerically.  The default value is\n     * {@code new DecimalFormat(\"0\")}.\n     * \n     * @return The base formatter (never {@code null}).\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.chart.axis.LogAxis.setBaseFormatter": "/**\n     * Sets the formatter used to format the base value of the logarithmic \n     * scale when it is displayed numerically and sends a change event to all\n     * registered listeners.\n     * \n     * @param formatter  the formatter ({@code null} not permitted).\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.chart.axis.LogAxis.getSmallestValue": "/**\n     * Returns the smallest value represented by the axis.\n     *\n     * @return The smallest value represented by the axis.\n     *\n     * @see #setSmallestValue(double)\n     */\n",
"org.jfree.chart.axis.LogAxis.setSmallestValue": "/**\n     * Sets the smallest value represented by the axis and sends a change event\n     * to all registered listeners.\n     *\n     * @param value  the value.\n     *\n     * @see #getSmallestValue()\n     */\n",
"org.jfree.chart.axis.LogAxis.getTickUnit": "/**\n     * Returns the current tick unit.\n     *\n     * @return The current tick unit.\n     *\n     * @see #setTickUnit(NumberTickUnit)\n     */\n",
"org.jfree.chart.axis.LogAxis.setTickUnit": "/**\n     * Sets the tick unit for the axis and sends an {@link AxisChangeEvent} to\n     * all registered listeners.  A side effect of calling this method is that\n     * the \"auto-select\" feature for tick units is switched off (you can\n     * restore it using the {@link ValueAxis#setAutoTickUnitSelection(boolean)}\n     * method).\n     *\n     * @param unit  the new tick unit ({@code null} not permitted).\n     *\n     * @see #getTickUnit()\n     */\n",
"org.jfree.chart.axis.LogAxis.setTickUnit": "/**\n     * Sets the tick unit for the axis and, if requested, sends an\n     * {@link AxisChangeEvent} to all registered listeners.  In addition, an\n     * option is provided to turn off the \"auto-select\" feature for tick units\n     * (you can restore it using the\n     * {@link ValueAxis#setAutoTickUnitSelection(boolean)} method).\n     *\n     * @param unit  the new tick unit ({@code null} not permitted).\n     * @param notify  notify listeners?\n     * @param turnOffAutoSelect  turn off the auto-tick selection?\n     *\n     * @see #getTickUnit()\n     */\n",
"org.jfree.chart.axis.LogAxis.getNumberFormatOverride": "/**\n     * Returns the number format override.  If this is non-{@code null}, \n     * then it will be used to format the numbers on the axis.\n     *\n     * @return The number formatter (possibly {@code null}).\n     *\n     * @see #setNumberFormatOverride(NumberFormat)\n     */\n",
"org.jfree.chart.axis.LogAxis.setNumberFormatOverride": "/**\n     * Sets the number format override and sends a change event to all \n     * registered listeners.  If this is non-{@code null}, then it will be\n     * used to format the numbers on the axis.\n     *\n     * @param formatter  the number formatter ({@code null} permitted).\n     *\n     * @see #getNumberFormatOverride()\n     */\n",
"org.jfree.chart.axis.LogAxis.calculateLog": "/**\n     * Calculates the log of the given value, using the current base.\n     *\n     * @param value  the value.\n     *\n     * @return The log of the given value.\n     *\n     * @see #calculateValue(double)\n     * @see #getBase()\n     */\n",
"org.jfree.chart.axis.LogAxis.calculateValue": "/**\n     * Calculates the value from a given log.\n     *\n     * @param log  the log value.\n     *\n     * @return The value with the given log.\n     *\n     * @see #calculateLog(double)\n     * @see #getBase()\n     */\n",
"org.jfree.chart.axis.LogAxis.java2DToValue": "/**\n     * Converts a Java2D coordinate to an axis value, assuming that the\n     * axis is aligned to the specified {@code edge} of the {@code area}.\n     *\n     * @param java2DValue  the Java2D coordinate.\n     * @param area  the area for plotting data ({@code null} not \n     *     permitted).\n     * @param edge  the edge that the axis is aligned to ({@code null} not\n     *     permitted).\n     *\n     * @return A value along the axis scale.\n     */\n",
"org.jfree.chart.axis.LogAxis.valueToJava2D": "/**\n     * Converts a value on the axis scale to a Java2D coordinate relative to\n     * the given {@code area}, based on the axis running along the\n     * specified {@code edge}.\n     *\n     * @param value  the data value.\n     * @param area  the area ({@code null} not permitted).\n     * @param edge  the edge ({@code null} not permitted).\n     *\n     * @return The Java2D coordinate corresponding to {@code value}.\n     */\n",
"org.jfree.chart.axis.LogAxis.configure": "/**\n     * Configures the axis.  This method is typically called when an axis\n     * is assigned to a new plot.\n     */\n",
"org.jfree.chart.axis.LogAxis.autoAdjustRange": "/**\n     * Adjusts the axis range to match the data range that the axis is\n     * required to display.\n     */\n",
"org.jfree.chart.axis.LogAxis.draw": "/**\n     * Draws the axis on a Java 2D graphics device (such as the screen or a\n     * printer).\n     *\n     * @param g2  the graphics device ({@code null} not permitted).\n     * @param cursor  the cursor location (determines where to draw the axis).\n     * @param plotArea  the area within which the axes and plot should be drawn.\n     * @param dataArea  the area within which the data should be drawn.\n     * @param edge  the axis location ({@code null} not permitted).\n     * @param plotState  collects information about the plot ({@code null} \n     *         permitted).\n     *\n     * @return The axis state (never {@code null}).\n     */\n",
"org.jfree.chart.axis.LogAxis.refreshTicks": "/**\n     * Calculates the positions of the tick labels for the axis, storing the\n     * results in the tick label list (ready for drawing).\n     *\n     * @param g2  the graphics device.\n     * @param state  the axis state.\n     * @param dataArea  the area in which the plot should be drawn.\n     * @param edge  the location of the axis.\n     *\n     * @return A list of ticks.\n     */\n",
"org.jfree.chart.axis.LogAxis.refreshTicksHorizontal": "/**\n     * Returns a list of ticks for an axis at the top or bottom of the chart.\n     *\n     * @param g2  the graphics device ({@code null} not permitted).\n     * @param dataArea  the data area ({@code null} not permitted).\n     * @param edge  the edge ({@code null} not permitted).\n     *\n     * @return A list of ticks.\n     */\n",
"org.jfree.chart.axis.LogAxis.refreshTicksVertical": "/**\n     * Returns a list of ticks for an axis at the left or right of the chart.\n     *\n     * @param g2  the graphics device ({@code null} not permitted).\n     * @param dataArea  the data area ({@code null} not permitted).\n     * @param edge  the edge that the axis is aligned to ({@code null} \n     *     not permitted).\n     *\n     * @return A list of ticks.\n     */\n",
"org.jfree.chart.axis.LogAxis.selectAutoTickUnit": "/**\n     * Selects an appropriate tick value for the axis.  The strategy is to\n     * display as many ticks as possible (selected from an array of 'standard'\n     * tick units) without the labels overlapping.\n     *\n     * @param g2  the graphics device ({@code null} not permitted).\n     * @param dataArea  the area defined by the axes ({@code null} not \n     *     permitted).\n     * @param edge  the axis location ({@code null} not permitted).\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.axis.LogAxis.selectHorizontalAutoTickUnit": "/**\n     * Selects an appropriate tick value for the axis.  The strategy is to\n     * display as many ticks as possible (selected from an array of 'standard'\n     * tick units) without the labels overlapping.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area defined by the axes.\n     * @param edge  the axis location.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.axis.LogAxis.exponentLengthToJava2D": "/**\n     * Converts a length in data coordinates into the corresponding length in\n     * Java2D coordinates.\n     *\n     * @param length  the length.\n     * @param area  the plot area.\n     * @param edge  the edge along which the axis lies.\n     *\n     * @return The length in Java2D coordinates.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.axis.LogAxis.selectVerticalAutoTickUnit": "/**\n     * Selects an appropriate tick value for the axis.  The strategy is to\n     * display as many ticks as possible (selected from an array of 'standard'\n     * tick units) without the labels overlapping.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area in which the plot should be drawn.\n     * @param edge  the axis location.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.axis.LogAxis.createTickLabel": "/**\n     * Creates a tick label for the specified value based on the current\n     * tick unit (used for formatting the exponent).\n     *\n     * @param value  the value.\n     *\n     * @return The label.\n     *\n     * @since 1.0.18\n     */\n",
"org.jfree.chart.axis.LogAxis.estimateMaximumTickLabelHeight": "/**\n     * Estimates the maximum tick label height.\n     *\n     * @param g2  the graphics device.\n     *\n     * @return The maximum height.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.axis.LogAxis.estimateMaximumTickLabelWidth": "/**\n     * Estimates the maximum width of the tick labels, assuming the specified\n     * tick unit is used.\n     * <P>\n     * Rather than computing the string bounds of every tick on the axis, we\n     * just look at two values: the lower bound and the upper bound for the\n     * axis.  These two values will usually be representative.\n     *\n     * @param g2  the graphics device.\n     * @param unit  the tick unit to use for calculation.\n     *\n     * @return The estimated maximum width of the tick labels.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.axis.LogAxis.zoomRange": "/**\n     * Zooms in on the current range.\n     *\n     * @param lowerPercent  the new lower bound.\n     * @param upperPercent  the new upper bound.\n     */\n",
"org.jfree.chart.axis.LogAxis.pan": "/**\n     * Slides the axis range by the specified percentage.\n     *\n     * @param percent  the percentage.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.axis.LogAxis.resizeRange": "/**\n     * Increases or decreases the axis range by the specified percentage about\n     * the central value and sends an {@link AxisChangeEvent} to all registered\n     * listeners.\n     * <P>\n     * To double the length of the axis range, use 200% (2.0).\n     * To halve the length of the axis range, use 50% (0.5).\n     *\n     * @param percent  the resize factor.\n     *\n     * @see #resizeRange(double, double)\n     */\n",
"org.jfree.chart.axis.LogAxis.resizeRange2": "/**\n     * Resizes the axis length to the specified percentage of the current\n     * range and sends a change event to all registered listeners.  If \n     * {@code percent} is greater than 1.0 (100 percent) then the axis\n     * range is increased (which has the effect of zooming out), while if the\n     * {@code percent} is less than 1.0 the axis range is decreased \n     * (which has the effect of zooming in).  The resize occurs around an \n     * anchor value (which may not be in the center of the axis).  This is used\n     * to support mouse wheel zooming around an arbitrary point on the plot.\n     * <br><br>\n     * This method is overridden to perform the percentage calculations on the\n     * log values (which are linear for this axis).\n     * \n     * @param percent  the percentage (must be greater than zero).\n     * @param anchorValue  the anchor value.\n     */\n",
"org.jfree.chart.axis.LogAxis.equals": "/**\n     * Tests this axis for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.LogAxis.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.axis.AxisCollection.getAxesAtTop": "/**\n     * Returns a list of the axes (if any) that need to be drawn at the top of\n     * the plot area.\n     *\n     * @return A list of axes.\n     */\n",
"org.jfree.chart.axis.AxisCollection.getAxesAtBottom": "/**\n    * Returns a list of the axes (if any) that need to be drawn at the bottom\n    * of the plot area.\n    *\n    * @return A list of axes.\n    */\n",
"org.jfree.chart.axis.AxisCollection.getAxesAtLeft": "/**\n     * Returns a list of the axes (if any) that need to be drawn at the left\n     * of the plot area.\n     *\n     * @return A list of axes.\n     */\n",
"org.jfree.chart.axis.AxisCollection.getAxesAtRight": "/**\n    * Returns a list of the axes (if any) that need to be drawn at the right\n    * of the plot area.\n    *\n    * @return A list of axes.\n    */\n",
"org.jfree.chart.axis.AxisCollection.add": "/**\n     * Adds an axis to the collection.\n     *\n     * @param axis  the axis ({@code null} not permitted).\n     * @param edge  the edge of the plot that the axis should be drawn on\n     *              ({@code null} not permitted).\n     */\n",
"org.jfree.chart.axis.CategoryLabelPositions.createUpRotationLabelPositions": "/**\n     * Creates a new instance where the category labels angled upwards by the\n     * specified amount.\n     *\n     * @param angle  the rotation angle (should be &lt; Math.PI / 2.0).\n     *\n     * @return A category label position specification.\n     */\n",
"org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions": "/**\n     * Creates a new instance where the category labels angled downwards by the\n     * specified amount.\n     *\n     * @param angle  the rotation angle (should be &lt; Math.PI / 2.0).\n     *\n     * @return A category label position specification.\n     */\n",
"org.jfree.chart.axis.CategoryLabelPositions.getLabelPosition": "/**\n     * Returns the category label position specification for an axis at the\n     * given location.\n     *\n     * @param edge  the axis location.\n     *\n     * @return The category label position specification.\n     */\n",
"org.jfree.chart.axis.CategoryLabelPositions.replaceTopPosition": "/**\n     * Returns a new instance based on an existing instance but with the top\n     * position changed.\n     *\n     * @param base  the base ({@code null} not permitted).\n     * @param top  the top position ({@code null} not permitted).\n     *\n     * @return A new instance (never {@code null}).\n     */\n",
"org.jfree.chart.axis.CategoryLabelPositions.replaceBottomPosition": "/**\n     * Returns a new instance based on an existing instance but with the bottom\n     * position changed.\n     *\n     * @param base  the base ({@code null} not permitted).\n     * @param bottom  the bottom position ({@code null} not permitted).\n     *\n     * @return A new instance (never {@code null}).\n     */\n",
"org.jfree.chart.axis.CategoryLabelPositions.replaceLeftPosition": "/**\n     * Returns a new instance based on an existing instance but with the left\n     * position changed.\n     *\n     * @param base  the base ({@code null} not permitted).\n     * @param left  the left position ({@code null} not permitted).\n     *\n     * @return A new instance (never {@code null}).\n     */\n",
"org.jfree.chart.axis.CategoryLabelPositions.replaceRightPosition": "/**\n     * Returns a new instance based on an existing instance but with the right\n     * position changed.\n     *\n     * @param base  the base ({@code null} not permitted).\n     * @param right  the right position ({@code null} not permitted).\n     *\n     * @return A new instance (never {@code null}).\n     */\n",
"org.jfree.chart.axis.CategoryLabelPositions.equals": "/**\n     * Returns {@code true} if this object is equal to the specified\n     * object, and {@code false} otherwise.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.CategoryLabelPositions.hashCode": "/**\n     * Returns a hash code for this object.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.axis.QuarterDateFormat.format": "/**\n     * Formats the given date.\n     *\n     * @param date  the date.\n     * @param toAppendTo  the string buffer.\n     * @param fieldPosition  the field position.\n     *\n     * @return The formatted date.\n     */\n",
"org.jfree.chart.axis.QuarterDateFormat.parse": "/**\n     * Parses the given string (not implemented).\n     *\n     * @param source  the date string.\n     * @param pos  the parse position.\n     *\n     * @return {@code null}, as this method has not been implemented.\n     */\n",
"org.jfree.chart.axis.QuarterDateFormat.equals": "/**\n     * Tests this formatter for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.AxisLocation.getOpposite": "/**\n     * Returns the location that is opposite to this location.\n     *\n     * @return The opposite location.\n     *\n     * @since 1.0.5\n     */\n",
"org.jfree.chart.axis.AxisLocation.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.chart.axis.AxisLocation.equals": "/**\n     * Returns {@code true} if this object is equal to the specified\n     * object, and {@code false} otherwise.\n     *\n     * @param obj  the other object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.AxisLocation.hashCode": "/**\n     * Returns a hash code for this instance.\n     * \n     * @return A hash code.\n     */\n",
"org.jfree.chart.axis.AxisLocation.getOpposite": "/**\n     * Returns the location that is opposite to the supplied location.\n     *\n     * @param location  the location ({@code null} not permitted).\n     *\n     * @return The opposite location.\n     */\n",
"org.jfree.chart.axis.AxisLocation.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     *\n     * @return The object.\n     *\n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.chart.axis.PeriodAxisLabelInfo.getPeriodClass": "/**\n     * Returns the subclass of {@link RegularTimePeriod} that should be used\n     * to generate the date labels.\n     *\n     * @return The class.\n     */\n",
"org.jfree.chart.axis.PeriodAxisLabelInfo.getDateFormat": "/**\n     * Returns a copy of the date formatter.\n     *\n     * @return A copy of the date formatter (never {@code null}).\n     */\n",
"org.jfree.chart.axis.PeriodAxisLabelInfo.getPadding": "/**\n     * Returns the padding for the band.\n     *\n     * @return The padding.\n     */\n",
"org.jfree.chart.axis.PeriodAxisLabelInfo.getLabelFont": "/**\n     * Returns the label font.\n     *\n     * @return The label font (never {@code null}).\n     */\n",
"org.jfree.chart.axis.PeriodAxisLabelInfo.getLabelPaint": "/**\n     * Returns the label paint.\n     *\n     * @return The label paint.\n     */\n",
"org.jfree.chart.axis.PeriodAxisLabelInfo.getDrawDividers": "/**\n     * Returns a flag that controls whether or not dividers are drawn.\n     *\n     * @return A flag.\n     */\n",
"org.jfree.chart.axis.PeriodAxisLabelInfo.getDividerStroke": "/**\n     * Returns the stroke used to draw the dividers.\n     *\n     * @return The stroke.\n     */\n",
"org.jfree.chart.axis.PeriodAxisLabelInfo.getDividerPaint": "/**\n     * Returns the paint used to draw the dividers.\n     *\n     * @return The paint.\n     */\n",
"org.jfree.chart.axis.PeriodAxisLabelInfo.createInstance": "/**\n     * Creates a time period that includes the specified millisecond, assuming\n     * the given time zone.\n     *\n     * @param millisecond  the time.\n     * @param zone  the time zone.\n     * @param locale  the locale.\n     *\n     * @return The time period.\n     *\n     * @since 1.0.13.\n     */\n",
"org.jfree.chart.axis.PeriodAxisLabelInfo.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the object to test against ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.PeriodAxisLabelInfo.hashCode": "/**\n     * Returns a hash code for this object.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.axis.PeriodAxisLabelInfo.clone": "/**\n     * Returns a clone of the object.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if cloning is not supported.\n     */\n",
"org.jfree.chart.axis.PeriodAxisLabelInfo.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.axis.PeriodAxisLabelInfo.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.axis.TickUnits.add": "/**\n     * Adds a tick unit to the collection.  The tick units are maintained in\n     * ascending order.\n     *\n     * @param unit  the tick unit to add ({@code null} not permitted).\n     */\n",
"org.jfree.chart.axis.TickUnits.size": "/**\n     * Returns the number of tick units in this collection.\n     * <P>\n     * This method is required for the XML writer.\n     *\n     * @return The number of units in this collection.\n     */\n",
"org.jfree.chart.axis.TickUnits.get": "/**\n     * Returns the tickunit on the given position.\n     * <P>\n     * This method is required for the XML writer.\n     *\n     * @param pos the position in the list.\n     *\n     * @return The tickunit.\n     */\n",
"org.jfree.chart.axis.TickUnits.getLargerTickUnit": "/**\n     * Returns a tick unit that is larger than the supplied unit.\n     *\n     * @param unit   the unit.\n     *\n     * @return A tick unit that is larger than the supplied unit.\n     */\n",
"org.jfree.chart.axis.TickUnits.getCeilingTickUnit": "/**\n     * Returns the tick unit in the collection that is greater than or equal\n     * to (in size) the specified unit.\n     *\n     * @param unit  the unit.\n     *\n     * @return A unit from the collection.\n     */\n",
"org.jfree.chart.axis.TickUnits.getCeilingTickUnit": "/**\n     * Returns the tick unit in the collection that is greater than or equal\n     * to the specified size.\n     *\n     * @param size  the size.\n     *\n     * @return A unit from the collection.\n     */\n",
"org.jfree.chart.axis.TickUnits.clone": "/**\n     * Returns a clone of the collection.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if an item in the collection does not\n     *         support cloning.\n     */\n",
"org.jfree.chart.axis.TickUnits.equals": "/**\n     * Tests an object for equality with this instance.\n     *\n     * @param obj  the object to test ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.DateTickMarkPosition.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.chart.axis.DateTickMarkPosition.equals": "/**\n     * Returns {@code true} if this object is equal to the specified\n     * object, and {@code false} otherwise.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.DateTickMarkPosition.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     *\n     * @return The object.\n     *\n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.chart.axis.ValueAxis.isVerticalTickLabels": "/**\n     * Returns {@code true} if the tick labels should be rotated (to\n     * vertical), and {@code false} otherwise.\n     *\n     * @return {@code true} or {@code false}.\n     *\n     * @see #setVerticalTickLabels(boolean)\n     */\n",
"org.jfree.chart.axis.ValueAxis.setVerticalTickLabels": "/**\n     * Sets the flag that controls whether the tick labels are displayed\n     * vertically (that is, rotated 90 degrees from horizontal).  If the flag\n     * is changed, an {@link AxisChangeEvent} is sent to all registered\n     * listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #isVerticalTickLabels()\n     */\n",
"org.jfree.chart.axis.ValueAxis.isPositiveArrowVisible": "/**\n     * Returns a flag that controls whether or not the axis line has an arrow\n     * drawn that points in the positive direction for the axis.\n     *\n     * @return A boolean.\n     *\n     * @see #setPositiveArrowVisible(boolean)\n     */\n",
"org.jfree.chart.axis.ValueAxis.setPositiveArrowVisible": "/**\n     * Sets a flag that controls whether or not the axis lines has an arrow\n     * drawn that points in the positive direction for the axis, and sends an\n     * {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param visible  the flag.\n     *\n     * @see #isPositiveArrowVisible()\n     */\n",
"org.jfree.chart.axis.ValueAxis.isNegativeArrowVisible": "/**\n     * Returns a flag that controls whether or not the axis line has an arrow\n     * drawn that points in the negative direction for the axis.\n     *\n     * @return A boolean.\n     *\n     * @see #setNegativeArrowVisible(boolean)\n     */\n",
"org.jfree.chart.axis.ValueAxis.setNegativeArrowVisible": "/**\n     * Sets a flag that controls whether or not the axis lines has an arrow\n     * drawn that points in the negative direction for the axis, and sends an\n     * {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param visible  the flag.\n     *\n     * @see #setNegativeArrowVisible(boolean)\n     */\n",
"org.jfree.chart.axis.ValueAxis.getUpArrow": "/**\n     * Returns a shape that can be displayed as an arrow pointing upwards at\n     * the end of an axis line.\n     *\n     * @return A shape (never {@code null}).\n     *\n     * @see #setUpArrow(Shape)\n     */\n",
"org.jfree.chart.axis.ValueAxis.setUpArrow": "/**\n     * Sets the shape that can be displayed as an arrow pointing upwards at\n     * the end of an axis line and sends an {@link AxisChangeEvent} to all\n     * registered listeners.\n     *\n     * @param arrow  the arrow shape ({@code null} not permitted).\n     *\n     * @see #getUpArrow()\n     */\n",
"org.jfree.chart.axis.ValueAxis.getDownArrow": "/**\n     * Returns a shape that can be displayed as an arrow pointing downwards at\n     * the end of an axis line.\n     *\n     * @return A shape (never {@code null}).\n     *\n     * @see #setDownArrow(Shape)\n     */\n",
"org.jfree.chart.axis.ValueAxis.setDownArrow": "/**\n     * Sets the shape that can be displayed as an arrow pointing downwards at\n     * the end of an axis line and sends an {@link AxisChangeEvent} to all\n     * registered listeners.\n     *\n     * @param arrow  the arrow shape ({@code null} not permitted).\n     *\n     * @see #getDownArrow()\n     */\n",
"org.jfree.chart.axis.ValueAxis.getLeftArrow": "/**\n     * Returns a shape that can be displayed as an arrow pointing left at the\n     * end of an axis line.\n     *\n     * @return A shape (never {@code null}).\n     *\n     * @see #setLeftArrow(Shape)\n     */\n",
"org.jfree.chart.axis.ValueAxis.setLeftArrow": "/**\n     * Sets the shape that can be displayed as an arrow pointing left at the\n     * end of an axis line and sends an {@link AxisChangeEvent} to all\n     * registered listeners.\n     *\n     * @param arrow  the arrow shape ({@code null} not permitted).\n     *\n     * @see #getLeftArrow()\n     */\n",
"org.jfree.chart.axis.ValueAxis.getRightArrow": "/**\n     * Returns a shape that can be displayed as an arrow pointing right at the\n     * end of an axis line.\n     *\n     * @return A shape (never {@code null}).\n     *\n     * @see #setRightArrow(Shape)\n     */\n",
"org.jfree.chart.axis.ValueAxis.setRightArrow": "/**\n     * Sets the shape that can be displayed as an arrow pointing rightwards at\n     * the end of an axis line and sends an {@link AxisChangeEvent} to all\n     * registered listeners.\n     *\n     * @param arrow  the arrow shape ({@code null} not permitted).\n     *\n     * @see #getRightArrow()\n     */\n",
"org.jfree.chart.axis.ValueAxis.drawAxisLine": "/**\n     * Draws an axis line at the current cursor position and edge.\n     *\n     * @param g2  the graphics device ({@code null} not permitted).\n     * @param cursor  the cursor position.\n     * @param dataArea  the data area.\n     * @param edge  the edge.\n     */\n",
"org.jfree.chart.axis.ValueAxis.calculateAnchorPoint": "/**\n     * Calculates the anchor point for a tick label.\n     *\n     * @param tick  the tick.\n     * @param cursor  the cursor.\n     * @param dataArea  the data area.\n     * @param edge  the edge on which the axis is drawn.\n     *\n     * @return The x and y coordinates of the anchor point.\n     */\n",
"org.jfree.chart.axis.ValueAxis.drawTickMarksAndLabels": "/**\n     * Draws the axis line, tick marks and tick mark labels.\n     *\n     * @param g2  the graphics device ({@code null} not permitted).\n     * @param cursor  the cursor.\n     * @param plotArea  the plot area ({@code null} not permitted).\n     * @param dataArea  the data area ({@code null} not permitted).\n     * @param edge  the edge that the axis is aligned with ({@code null} \n     *     not permitted).\n     *\n     * @return The width or height used to draw the axis.\n     */\n",
"org.jfree.chart.axis.ValueAxis.reserveSpace": "/**\n     * Returns the space required to draw the axis.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot that the axis belongs to.\n     * @param plotArea  the area within which the plot should be drawn.\n     * @param edge  the axis location.\n     * @param space  the space already reserved (for other axes).\n     *\n     * @return The space required to draw the axis (including pre-reserved\n     *         space).\n     */\n",
"org.jfree.chart.axis.ValueAxis.findMaximumTickLabelHeight": "/**\n     * A utility method for determining the height of the tallest tick label.\n     *\n     * @param ticks  the ticks.\n     * @param g2  the graphics device.\n     * @param drawArea  the area within which the plot and axes should be drawn.\n     * @param vertical  a flag that indicates whether or not the tick labels\n     *                  are 'vertical'.\n     *\n     * @return The height of the tallest tick label.\n     */\n",
"org.jfree.chart.axis.ValueAxis.findMaximumTickLabelWidth": "/**\n     * A utility method for determining the width of the widest tick label.\n     *\n     * @param ticks  the ticks.\n     * @param g2  the graphics device.\n     * @param drawArea  the area within which the plot and axes should be drawn.\n     * @param vertical  a flag that indicates whether or not the tick labels\n     *                  are 'vertical'.\n     *\n     * @return The width of the tallest tick label.\n     */\n",
"org.jfree.chart.axis.ValueAxis.isInverted": "/**\n     * Returns a flag that controls the direction of values on the axis.\n     * <P>\n     * For a regular axis, values increase from left to right (for a horizontal\n     * axis) and bottom to top (for a vertical axis).  When the axis is\n     * 'inverted', the values increase in the opposite direction.\n     *\n     * @return The flag.\n     *\n     * @see #setInverted(boolean)\n     */\n",
"org.jfree.chart.axis.ValueAxis.setInverted": "/**\n     * Sets a flag that controls the direction of values on the axis, and\n     * notifies registered listeners that the axis has changed.\n     *\n     * @param flag  the flag.\n     *\n     * @see #isInverted()\n     */\n",
"org.jfree.chart.axis.ValueAxis.isAutoRange": "/**\n     * Returns the flag that controls whether or not the axis range is\n     * automatically adjusted to fit the data values.\n     *\n     * @return The flag.\n     *\n     * @see #setAutoRange(boolean)\n     */\n",
"org.jfree.chart.axis.ValueAxis.setAutoRange": "/**\n     * Sets a flag that determines whether or not the axis range is\n     * automatically adjusted to fit the data, and notifies registered\n     * listeners that the axis has been modified.\n     *\n     * @param auto  the new value of the flag.\n     *\n     * @see #isAutoRange()\n     */\n",
"org.jfree.chart.axis.ValueAxis.setAutoRange": "/**\n     * Sets the auto range attribute.  If the {@code notify} flag is set,\n     * an {@link AxisChangeEvent} is sent to registered listeners.\n     *\n     * @param auto  the flag.\n     * @param notify  notify listeners?\n     *\n     * @see #isAutoRange()\n     */\n",
"org.jfree.chart.axis.ValueAxis.getAutoRangeMinimumSize": "/**\n     * Returns the minimum size allowed for the axis range when it is\n     * automatically calculated.\n     *\n     * @return The minimum range.\n     *\n     * @see #setAutoRangeMinimumSize(double)\n     */\n",
"org.jfree.chart.axis.ValueAxis.setAutoRangeMinimumSize": "/**\n     * Sets the auto range minimum size and sends an {@link AxisChangeEvent}\n     * to all registered listeners.\n     *\n     * @param size  the size.\n     *\n     * @see #getAutoRangeMinimumSize()\n     */\n",
"org.jfree.chart.axis.ValueAxis.setAutoRangeMinimumSize": "/**\n     * Sets the minimum size allowed for the axis range when it is\n     * automatically calculated.\n     * <p>\n     * If requested, an {@link AxisChangeEvent} is forwarded to all registered\n     * listeners.\n     *\n     * @param size  the new minimum.\n     * @param notify  notify listeners?\n     */\n",
"org.jfree.chart.axis.ValueAxis.getDefaultAutoRange": "/**\n     * Returns the default auto range.\n     *\n     * @return The default auto range (never {@code null}).\n     *\n     * @see #setDefaultAutoRange(Range)\n     *\n     * @since 1.0.5\n     */\n",
"org.jfree.chart.axis.ValueAxis.setDefaultAutoRange": "/**\n     * Sets the default auto range and sends an {@link AxisChangeEvent} to all\n     * registered listeners.\n     *\n     * @param range  the range ({@code null} not permitted).\n     *\n     * @see #getDefaultAutoRange()\n     *\n     * @since 1.0.5\n     */\n",
"org.jfree.chart.axis.ValueAxis.getLowerMargin": "/**\n     * Returns the lower margin for the axis, expressed as a percentage of the\n     * axis range.  This controls the space added to the lower end of the axis\n     * when the axis range is automatically calculated (it is ignored when the\n     * axis range is set explicitly). The default value is 0.05 (five percent).\n     *\n     * @return The lower margin.\n     *\n     * @see #setLowerMargin(double)\n     */\n",
"org.jfree.chart.axis.ValueAxis.setLowerMargin": "/**\n     * Sets the lower margin for the axis (as a percentage of the axis range)\n     * and sends an {@link AxisChangeEvent} to all registered listeners.  This\n     * margin is added only when the axis range is auto-calculated - if you set\n     * the axis range manually, the margin is ignored.\n     *\n     * @param margin  the margin percentage (for example, 0.05 is five percent).\n     *\n     * @see #getLowerMargin()\n     * @see #setUpperMargin(double)\n     */\n",
"org.jfree.chart.axis.ValueAxis.getUpperMargin": "/**\n     * Returns the upper margin for the axis, expressed as a percentage of the\n     * axis range.  This controls the space added to the lower end of the axis\n     * when the axis range is automatically calculated (it is ignored when the\n     * axis range is set explicitly). The default value is 0.05 (five percent).\n     *\n     * @return The upper margin.\n     *\n     * @see #setUpperMargin(double)\n     */\n",
"org.jfree.chart.axis.ValueAxis.setUpperMargin": "/**\n     * Sets the upper margin for the axis (as a percentage of the axis range)\n     * and sends an {@link AxisChangeEvent} to all registered listeners.  This\n     * margin is added only when the axis range is auto-calculated - if you set\n     * the axis range manually, the margin is ignored.\n     *\n     * @param margin  the margin percentage (for example, 0.05 is five percent).\n     *\n     * @see #getLowerMargin()\n     * @see #setLowerMargin(double)\n     */\n",
"org.jfree.chart.axis.ValueAxis.getFixedAutoRange": "/**\n     * Returns the fixed auto range.\n     *\n     * @return The length.\n     *\n     * @see #setFixedAutoRange(double)\n     */\n",
"org.jfree.chart.axis.ValueAxis.setFixedAutoRange": "/**\n     * Sets the fixed auto range for the axis.\n     *\n     * @param length  the range length.\n     *\n     * @see #getFixedAutoRange()\n     */\n",
"org.jfree.chart.axis.ValueAxis.getLowerBound": "/**\n     * Returns the lower bound of the axis range.\n     *\n     * @return The lower bound.\n     *\n     * @see #setLowerBound(double)\n     */\n",
"org.jfree.chart.axis.ValueAxis.setLowerBound": "/**\n     * Sets the lower bound for the axis range.  An {@link AxisChangeEvent} is\n     * sent to all registered listeners.\n     *\n     * @param min  the new minimum.\n     *\n     * @see #getLowerBound()\n     */\n",
"org.jfree.chart.axis.ValueAxis.getUpperBound": "/**\n     * Returns the upper bound for the axis range.\n     *\n     * @return The upper bound.\n     *\n     * @see #setUpperBound(double)\n     */\n",
"org.jfree.chart.axis.ValueAxis.setUpperBound": "/**\n     * Sets the upper bound for the axis range, and sends an\n     * {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param max  the new maximum.\n     *\n     * @see #getUpperBound()\n     */\n",
"org.jfree.chart.axis.ValueAxis.getRange": "/**\n     * Returns the range for the axis.\n     *\n     * @return The axis range (never {@code null}).\n     *\n     * @see #setRange(Range)\n     */\n",
"org.jfree.chart.axis.ValueAxis.setRange": "/**\n     * Sets the range for the axis and sends a change event to all registered \n     * listeners.  As a side-effect, the auto-range flag is set to\n     * {@code false}.\n     *\n     * @param range  the range ({@code null} not permitted).\n     *\n     * @see #getRange()\n     */\n",
"org.jfree.chart.axis.ValueAxis.setRange": "/**\n     * Sets the range for the axis and, if requested, sends a change event to \n     * all registered listeners.  Furthermore, if {@code turnOffAutoRange}\n     * is {@code true}, the auto-range flag is set to {@code false} \n     * (normally when setting the axis range manually the caller expects that\n     * range to remain in force).\n     *\n     * @param range  the range ({@code null} not permitted).\n     * @param turnOffAutoRange  a flag that controls whether or not the auto\n     *                          range is turned off.\n     * @param notify  a flag that controls whether or not listeners are\n     *                notified.\n     *\n     * @see #getRange()\n     */\n",
"org.jfree.chart.axis.ValueAxis.setRange": "/**\n     * Sets the range for the axis and sends a change event to all registered \n     * listeners.  As a side-effect, the auto-range flag is set to\n     * {@code false}.\n     *\n     * @param lower  the lower axis limit.\n     * @param upper  the upper axis limit.\n     *\n     * @see #getRange()\n     * @see #setRange(Range)\n     */\n",
"org.jfree.chart.axis.ValueAxis.setRangeWithMargins": "/**\n     * Sets the range for the axis (after first adding the current margins to\n     * the specified range) and sends an {@link AxisChangeEvent} to all\n     * registered listeners.\n     *\n     * @param range  the range ({@code null} not permitted).\n     */\n",
"org.jfree.chart.axis.ValueAxis.setRangeWithMargins": "/**\n     * Sets the range for the axis after first adding the current margins to\n     * the range and, if requested, sends an {@link AxisChangeEvent} to all\n     * registered listeners.  As a side-effect, the auto-range flag is set to\n     * {@code false} (optional).\n     *\n     * @param range  the range (excluding margins, {@code null} not\n     *               permitted).\n     * @param turnOffAutoRange  a flag that controls whether or not the auto\n     *                          range is turned off.\n     * @param notify  a flag that controls whether or not listeners are\n     *                notified.\n     */\n",
"org.jfree.chart.axis.ValueAxis.setRangeWithMargins": "/**\n     * Sets the axis range (after first adding the current margins to the\n     * range) and sends an {@link AxisChangeEvent} to all registered listeners.\n     * As a side-effect, the auto-range flag is set to {@code false}.\n     *\n     * @param lower  the lower axis limit.\n     * @param upper  the upper axis limit.\n     */\n",
"org.jfree.chart.axis.ValueAxis.setRangeAboutValue": "/**\n     * Sets the axis range, where the new range is 'size' in length, and\n     * centered on 'value'.\n     *\n     * @param value  the central value.\n     * @param length  the range length.\n     */\n",
"org.jfree.chart.axis.ValueAxis.isAutoTickUnitSelection": "/**\n     * Returns a flag indicating whether or not the tick unit is automatically\n     * selected from a range of standard tick units.\n     *\n     * @return A flag indicating whether or not the tick unit is automatically\n     *         selected.\n     *\n     * @see #setAutoTickUnitSelection(boolean)\n     */\n",
"org.jfree.chart.axis.ValueAxis.setAutoTickUnitSelection": "/**\n     * Sets a flag indicating whether or not the tick unit is automatically\n     * selected from a range of standard tick units.  If the flag is changed,\n     * registered listeners are notified that the chart has changed.\n     *\n     * @param flag  the new value of the flag.\n     *\n     * @see #isAutoTickUnitSelection()\n     */\n",
"org.jfree.chart.axis.ValueAxis.setAutoTickUnitSelection": "/**\n     * Sets a flag indicating whether or not the tick unit is automatically\n     * selected from a range of standard tick units.\n     *\n     * @param flag  the new value of the flag.\n     * @param notify  notify listeners?\n     *\n     * @see #isAutoTickUnitSelection()\n     */\n",
"org.jfree.chart.axis.ValueAxis.getStandardTickUnits": "/**\n     * Returns the source for obtaining standard tick units for the axis.\n     *\n     * @return The source (possibly {@code null}).\n     *\n     * @see #setStandardTickUnits(TickUnitSource)\n     */\n",
"org.jfree.chart.axis.ValueAxis.setStandardTickUnits": "/**\n     * Sets the source for obtaining standard tick units for the axis and sends\n     * an {@link AxisChangeEvent} to all registered listeners.  The axis will\n     * try to select the smallest tick unit from the source that does not cause\n     * the tick labels to overlap (see also the\n     * {@link #setAutoTickUnitSelection(boolean)} method.\n     *\n     * @param source  the source for standard tick units ({@code null}\n     *                permitted).\n     *\n     * @see #getStandardTickUnits()\n     */\n",
"org.jfree.chart.axis.ValueAxis.getMinorTickCount": "/**\n     * Returns the number of minor tick marks to display.\n     *\n     * @return The number of minor tick marks to display.\n     *\n     * @see #setMinorTickCount(int)\n     *\n     * @since 1.0.12\n     */\n",
"org.jfree.chart.axis.ValueAxis.setMinorTickCount": "/**\n     * Sets the number of minor tick marks to display, and sends an\n     * {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param count  the count.\n     *\n     * @see #getMinorTickCount()\n     *\n     * @since 1.0.12\n     */\n",
"org.jfree.chart.axis.ValueAxis.valueToJava2D": "/**\n     * Converts a data value to a coordinate in Java2D space, assuming that the\n     * axis runs along one edge of the specified dataArea.\n     * <p>\n     * Note that it is possible for the coordinate to fall outside the area.\n     *\n     * @param value  the data value.\n     * @param area  the area for plotting the data.\n     * @param edge  the edge along which the axis lies.\n     *\n     * @return The Java2D coordinate.\n     *\n     * @see #java2DToValue(double, Rectangle2D, RectangleEdge)\n     */\n",
"org.jfree.chart.axis.ValueAxis.lengthToJava2D": "/**\n     * Converts a length in data coordinates into the corresponding length in\n     * Java2D coordinates.\n     *\n     * @param length  the length.\n     * @param area  the plot area.\n     * @param edge  the edge along which the axis lies.\n     *\n     * @return The length in Java2D coordinates.\n     */\n",
"org.jfree.chart.axis.ValueAxis.java2DToValue": "/**\n     * Converts a coordinate in Java2D space to the corresponding data value,\n     * assuming that the axis runs along one edge of the specified dataArea.\n     *\n     * @param java2DValue  the coordinate in Java2D space.\n     * @param area  the area in which the data is plotted.\n     * @param edge  the edge along which the axis lies.\n     *\n     * @return The data value.\n     *\n     * @see #valueToJava2D(double, Rectangle2D, RectangleEdge)\n     */\n",
"org.jfree.chart.axis.ValueAxis.autoAdjustRange": "/**\n     * Automatically sets the axis range to fit the range of values in the\n     * dataset.  Sometimes this can depend on the renderer used as well (for\n     * example, the renderer may \"stack\" values, requiring an axis range\n     * greater than otherwise necessary).\n     */\n",
"org.jfree.chart.axis.ValueAxis.centerRange": "/**\n     * Centers the axis range about the specified value and sends an\n     * {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param value  the center value.\n     */\n",
"org.jfree.chart.axis.ValueAxis.resizeRange": "/**\n     * Increases or decreases the axis range by the specified percentage about\n     * the central value and sends an {@link AxisChangeEvent} to all registered\n     * listeners.\n     * <P>\n     * To double the length of the axis range, use 200% (2.0).\n     * To halve the length of the axis range, use 50% (0.5).\n     *\n     * @param percent  the resize factor.\n     *\n     * @see #resizeRange(double, double)\n     */\n",
"org.jfree.chart.axis.ValueAxis.resizeRange": "/**\n     * Increases or decreases the axis range by the specified percentage about\n     * the specified anchor value and sends an {@link AxisChangeEvent} to all\n     * registered listeners.\n     * <P>\n     * To double the length of the axis range, use 200% (2.0).\n     * To halve the length of the axis range, use 50% (0.5).\n     *\n     * @param percent  the resize factor.\n     * @param anchorValue  the new central value after the resize.\n     *\n     * @see #resizeRange(double)\n     */\n",
"org.jfree.chart.axis.ValueAxis.resizeRange2": "/**\n     * Increases or decreases the axis range by the specified percentage about\n     * the specified anchor value and sends an {@link AxisChangeEvent} to all\n     * registered listeners.\n     * <P>\n     * To double the length of the axis range, use 200% (2.0).\n     * To halve the length of the axis range, use 50% (0.5).\n     *\n     * @param percent  the resize factor.\n     * @param anchorValue  the new central value after the resize.\n     *\n     * @see #resizeRange(double)\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.axis.ValueAxis.zoomRange": "/**\n     * Zooms in on the current range.\n     *\n     * @param lowerPercent  the new lower bound.\n     * @param upperPercent  the new upper bound.\n     */\n",
"org.jfree.chart.axis.ValueAxis.pan": "/**\n     * Slides the axis range by the specified percentage.\n     *\n     * @param percent  the percentage.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.axis.ValueAxis.getAutoTickIndex": "/**\n     * Returns the auto tick index.\n     *\n     * @return The auto tick index.\n     *\n     * @see #setAutoTickIndex(int)\n     */\n",
"org.jfree.chart.axis.ValueAxis.setAutoTickIndex": "/**\n     * Sets the auto tick index.\n     *\n     * @param index  the new value.\n     *\n     * @see #getAutoTickIndex()\n     */\n",
"org.jfree.chart.axis.ValueAxis.equals": "/**\n     * Tests the axis for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.axis.ValueAxis.clone": "/**\n     * Returns a clone of the object.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if some component of the axis does\n     *         not support cloning.\n     */\n",
"org.jfree.chart.axis.ValueAxis.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.axis.ValueAxis.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.axis.SubCategoryAxis.addSubCategory": "/**\n     * Adds a sub-category to the axis and sends an {@link AxisChangeEvent} to\n     * all registered listeners.\n     *\n     * @param subCategory  the sub-category ({@code null} not permitted).\n     */\n",
"org.jfree.chart.axis.SubCategoryAxis.getSubLabelFont": "/**\n     * Returns the font used to display the sub-category labels.\n     *\n     * @return The font (never {@code null}).\n     *\n     * @see #setSubLabelFont(Font)\n     */\n",
"org.jfree.chart.axis.SubCategoryAxis.setSubLabelFont": "/**\n     * Sets the font used to display the sub-category labels and sends an\n     * {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param font  the font ({@code null} not permitted).\n     *\n     * @see #getSubLabelFont()\n     */\n",
"org.jfree.chart.axis.SubCategoryAxis.getSubLabelPaint": "/**\n     * Returns the paint used to display the sub-category labels.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setSubLabelPaint(Paint)\n     */\n",
"org.jfree.chart.axis.SubCategoryAxis.setSubLabelPaint": "/**\n     * Sets the paint used to display the sub-category labels and sends an\n     * {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getSubLabelPaint()\n     */\n",
"org.jfree.chart.axis.SubCategoryAxis.reserveSpace": "/**\n     * Estimates the space required for the axis, given a specific drawing area.\n     *\n     * @param g2  the graphics device (used to obtain font information).\n     * @param plot  the plot that the axis belongs to.\n     * @param plotArea  the area within which the axis should be drawn.\n     * @param edge  the axis location (top or bottom).\n     * @param space  the space already reserved.\n     *\n     * @return The space required to draw the axis.\n     */\n",
"org.jfree.chart.axis.SubCategoryAxis.getMaxDim": "/**\n     * Returns the maximum of the relevant dimension (height or width) of the\n     * subcategory labels.\n     *\n     * @param g2  the graphics device.\n     * @param edge  the edge.\n     *\n     * @return The maximum dimension.\n     */\n",
"org.jfree.chart.axis.SubCategoryAxis.draw": "/**\n     * Draws the axis on a Java 2D graphics device (such as the screen or a\n     * printer).\n     *\n     * @param g2  the graphics device ({@code null} not permitted).\n     * @param cursor  the cursor location.\n     * @param plotArea  the area within which the axis should be drawn\n     *                  ({@code null} not permitted).\n     * @param dataArea  the area within which the plot is being drawn\n     *                  ({@code null} not permitted).\n     * @param edge  the location of the axis ({@code null} not permitted).\n     * @param plotState  collects information about the plot\n     *                   ({@code null} permitted).\n     *\n     * @return The axis state (never {@code null}).\n     */\n",
"org.jfree.chart.axis.SubCategoryAxis.drawSubCategoryLabels": "/**\n     * Draws the category labels and returns the updated axis state.\n     *\n     * @param g2  the graphics device ({@code null} not permitted).\n     * @param plotArea  the plot area ({@code null} not permitted).\n     * @param dataArea  the area inside the axes ({@code null} not\n     *                  permitted).\n     * @param edge  the axis location ({@code null} not permitted).\n     * @param state  the axis state ({@code null} not permitted).\n     * @param plotState  collects information about the plot ({@code null}\n     *                   permitted).\n     *\n     * @return The updated axis state (never {@code null}).\n     */\n",
"org.jfree.chart.axis.SubCategoryAxis.equals": "/**\n     * Tests the axis for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.SubCategoryAxis.hashCode": "/**\n     * Returns a hashcode for this instance.\n     * \n     * @return A hashcode for this instance. \n     */\n",
"org.jfree.chart.axis.SubCategoryAxis.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.axis.SubCategoryAxis.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.axis.Timeline.toTimelineValue": "/**\n     * Translates a millisecond (as defined by java.util.Date) into an index\n     * along this timeline.\n     *\n     * @param millisecond  the millisecond.\n     *\n     * @return A timeline value.\n     */\n",
"org.jfree.chart.axis.Timeline.toTimelineValue": "/**\n     * Translates a date into a value on this timeline.\n     *\n     * @param date  the date.\n     *\n     * @return A timeline value\n     */\n",
"org.jfree.chart.axis.Timeline.toMillisecond": "/**\n     * Translates a value relative to this timeline into a domain value. The\n     * domain value obtained by this method is not always the same domain value\n     * that could have been supplied to\n     * translateDomainValueToTimelineValue(domainValue).\n     * This is because the original transformation may not be complete\n     * reversable.\n     *\n     * @param timelineValue  a timeline value.\n     *\n     * @return A domain value.\n     */\n",
"org.jfree.chart.axis.Timeline.containsDomainValue": "/**\n     * Returns {@code true} if a value is contained in the timeline values.\n     *\n     * @param millisecond  the millisecond.\n     *\n     * @return {@code true} if value is contained in the timeline and\n     *         {@code false} otherwise.\n     */\n",
"org.jfree.chart.axis.Timeline.containsDomainValue": "/**\n     * Returns {@code true} if a date is contained in the timeline values.\n     *\n     * @param date  the date to verify.\n     *\n     * @return {@code true} if value is contained in the timeline and\n     *         {@code false}  otherwise.\n     */\n",
"org.jfree.chart.axis.Timeline.containsDomainRange": "/**\n     * Returns {@code true} if a range of values are contained in the\n     * timeline.\n     *\n     * @param fromMillisecond  the start of the range to verify.\n     * @param toMillisecond  the end of the range to verify.\n     *\n     * @return {@code true} if the range is contained in the timeline or\n     *         {@code false} otherwise\n     */\n",
"org.jfree.chart.axis.Timeline.containsDomainRange": "/**\n     * Returns {@code true} if a range of dates are contained in the\n     * timeline.\n     *\n     * @param fromDate  the start of the range to verify.\n     * @param toDate  the end of the range to verify.\n     *\n     * @return {@code true} if the range is contained in the timeline or\n     *         {@code false} otherwise\n     */\n",
"org.jfree.chart.axis.ValueTick.getValue": "/**\n     * Returns the value.\n     *\n     * @return The value.\n     */\n",
"org.jfree.chart.axis.ValueTick.getTickType": "/**\n     * Returns the tick type (major or minor).\n     *\n     * @return The tick type.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.axis.ValueTick.equals": "/**\n     * Tests this tick for equality with an arbitrary object.\n     *\n     * @param obj  the object to test ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.CategoryLabelPosition.getCategoryAnchor": "/**\n     * Returns the item label anchor.\n     *\n     * @return The item label anchor (never {@code null}).\n     */\n",
"org.jfree.chart.axis.CategoryLabelPosition.getLabelAnchor": "/**\n     * Returns the text block anchor.\n     *\n     * @return The text block anchor (never {@code null}).\n     */\n",
"org.jfree.chart.axis.CategoryLabelPosition.getRotationAnchor": "/**\n     * Returns the rotation anchor point.\n     *\n     * @return The rotation anchor point (never {@code null}).\n     */\n",
"org.jfree.chart.axis.CategoryLabelPosition.getAngle": "/**\n     * Returns the angle of rotation for the label.\n     *\n     * @return The angle (in radians).\n     */\n",
"org.jfree.chart.axis.CategoryLabelPosition.getWidthType": "/**\n     * Returns the width calculation type.\n     *\n     * @return The width calculation type (never {@code null}).\n     */\n",
"org.jfree.chart.axis.CategoryLabelPosition.getWidthRatio": "/**\n     * Returns the ratio used to calculate the maximum category label width.\n     *\n     * @return The ratio.\n     */\n",
"org.jfree.chart.axis.CategoryLabelPosition.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.CategoryLabelPosition.hashCode": "/**\n     * Returns a hash code for this object.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.axis.DateTickUnit.getUnitType": "/**\n     * Returns the unit type.\n     *\n     * @return The unit type (never {@code null}).\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.axis.DateTickUnit.getMultiple": "/**\n     * Returns the unit multiple.\n     *\n     * @return The unit multiple (always &gt; 0).\n     */\n",
"org.jfree.chart.axis.DateTickUnit.getRollUnitType": "/**\n     * Returns the roll unit type.\n     *\n     * @return The roll unit type (never {@code null}).\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.axis.DateTickUnit.getRollMultiple": "/**\n     * Returns the roll unit multiple.\n     *\n     * @return The roll unit multiple.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.axis.DateTickUnit.valueToString": "/**\n     * Formats a value.\n     *\n     * @param milliseconds  date in milliseconds since 01-01-1970.\n     *\n     * @return The formatted date.\n     */\n",
"org.jfree.chart.axis.DateTickUnit.dateToString": "/**\n     * Formats a date using the tick unit's formatter.\n     *\n     * @param date  the date.\n     *\n     * @return The formatted date.\n     */\n",
"org.jfree.chart.axis.DateTickUnit.addToDate": "/**\n     * Calculates a new date by adding this unit to the base date.\n     *\n     * @param base  the base date.\n     * @param zone  the time zone for the date calculation.\n     *\n     * @return A new date one unit after the base date.\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.chart.axis.DateTickUnit.rollDate": "/**\n     * Rolls the date forward by the amount specified by the roll unit and\n     * count.\n     *\n     * @param base  the base date.\n\n     * @return The rolled date.\n     *\n     * @see #rollDate(Date, TimeZone)\n     */\n",
"org.jfree.chart.axis.DateTickUnit.rollDate": "/**\n     * Rolls the date forward by the amount specified by the roll unit and\n     * count.\n     *\n     * @param base  the base date.\n     * @param zone  the time zone.\n     *\n     * @return The rolled date.\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.chart.axis.DateTickUnit.getCalendarField": "/**\n     * Returns a field code that can be used with the {@code Calendar}\n     * class.\n     *\n     * @return The field code.\n     */\n",
"org.jfree.chart.axis.DateTickUnit.getMillisecondCount": "/**\n     * Returns the (approximate) number of milliseconds for the given unit and\n     * unit count.\n     * <P>\n     * This value is an approximation some of the time (e.g. months are\n     * assumed to have 31 days) but this shouldn't matter.\n     *\n     * @param unit  the unit.\n     * @param count  the unit count.\n     *\n     * @return The number of milliseconds.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.axis.DateTickUnit.equals": "/**\n     * Tests this unit for equality with another object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.axis.DateTickUnit.hashCode": "/**\n     * Returns a hash code for this object.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.axis.DateTickUnit.toString": "/**\n     * Returns a string representation of this instance, primarily used for\n     * debugging purposes.\n     *\n     * @return A string representation of this instance.\n     */\n",
"org.jfree.chart.axis.AxisSpace.getTop": "/**\n     * Returns the space reserved for axes at the top of the plot area.\n     *\n     * @return The space (in Java2D units).\n     */\n",
"org.jfree.chart.axis.AxisSpace.setTop": "/**\n     * Sets the space reserved for axes at the top of the plot area.\n     *\n     * @param space  the space (in Java2D units).\n     */\n",
"org.jfree.chart.axis.AxisSpace.getBottom": "/**\n     * Returns the space reserved for axes at the bottom of the plot area.\n     *\n     * @return The space (in Java2D units).\n     */\n",
"org.jfree.chart.axis.AxisSpace.setBottom": "/**\n     * Sets the space reserved for axes at the bottom of the plot area.\n     *\n     * @param space  the space (in Java2D units).\n     */\n",
"org.jfree.chart.axis.AxisSpace.getLeft": "/**\n     * Returns the space reserved for axes at the left of the plot area.\n     *\n     * @return The space (in Java2D units).\n     */\n",
"org.jfree.chart.axis.AxisSpace.setLeft": "/**\n     * Sets the space reserved for axes at the left of the plot area.\n     *\n     * @param space  the space (in Java2D units).\n     */\n",
"org.jfree.chart.axis.AxisSpace.getRight": "/**\n     * Returns the space reserved for axes at the right of the plot area.\n     *\n     * @return The space (in Java2D units).\n     */\n",
"org.jfree.chart.axis.AxisSpace.setRight": "/**\n     * Sets the space reserved for axes at the right of the plot area.\n     *\n     * @param space  the space (in Java2D units).\n     */\n",
"org.jfree.chart.axis.AxisSpace.add": "/**\n     * Adds space to the top, bottom, left or right edge of the plot area.\n     *\n     * @param space  the space (in Java2D units).\n     * @param edge  the edge ({@code null} not permitted).\n     */\n",
"org.jfree.chart.axis.AxisSpace.ensureAtLeast": "/**\n     * Ensures that this object reserves at least as much space as another.\n     *\n     * @param space  the other space.\n     */\n",
"org.jfree.chart.axis.AxisSpace.ensureAtLeast": "/**\n     * Ensures there is a minimum amount of space at the edge corresponding to\n     * the specified axis location.\n     *\n     * @param space  the space.\n     * @param edge  the location.\n     */\n",
"org.jfree.chart.axis.AxisSpace.shrink": "/**\n     * Shrinks an area by the space attributes.\n     *\n     * @param area  the area to shrink.\n     * @param result  an optional carrier for the result.\n     *\n     * @return The result.\n     */\n",
"org.jfree.chart.axis.AxisSpace.expand": "/**\n     * Expands an area by the amount of space represented by this object.\n     *\n     * @param area  the area to expand.\n     * @param result  an optional carrier for the result.\n     *\n     * @return The result.\n     */\n",
"org.jfree.chart.axis.AxisSpace.reserved": "/**\n     * Calculates the reserved area.\n     *\n     * @param area  the area.\n     * @param edge  the edge.\n     *\n     * @return The reserved area.\n     */\n",
"org.jfree.chart.axis.AxisSpace.clone": "/**\n     * Returns a clone of the object.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException This class won't throw this exception,\n     *         but subclasses (if any) might.\n     */\n",
"org.jfree.chart.axis.AxisSpace.equals": "/**\n     * Tests this object for equality with another object.\n     *\n     * @param obj  the object to compare against.\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.axis.AxisSpace.hashCode": "/**\n     * Returns a hash code for this object.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.axis.AxisSpace.toString": "/**\n     * Returns a string representing the object (for debugging purposes).\n     *\n     * @return A string.\n     */\n",
"org.jfree.chart.axis.ModuloAxis.getDisplayStart": "/**\n     * Returns the display start value.\n     *\n     * @return The display start value.\n     */\n",
"org.jfree.chart.axis.ModuloAxis.getDisplayEnd": "/**\n     * Returns the display end value.\n     *\n     * @return The display end value.\n     */\n",
"org.jfree.chart.axis.ModuloAxis.setDisplayRange": "/**\n     * Sets the display range.  The values will be mapped to the fixed range if\n     * necessary.\n     *\n     * @param start  the start value.\n     * @param end  the end value.\n     */\n",
"org.jfree.chart.axis.ModuloAxis.autoAdjustRange": "/**\n     * This method should calculate a range that will show all the data values.\n     * For now, it just sets the axis range to the fixedRange.\n     */\n",
"org.jfree.chart.axis.ModuloAxis.valueToJava2D": "/**\n     * Translates a data value to a Java2D coordinate.\n     *\n     * @param value  the value.\n     * @param area  the area.\n     * @param edge  the edge.\n     *\n     * @return A Java2D coordinate.\n     */\n",
"org.jfree.chart.axis.ModuloAxis.trans": "/**\n     * A regular translation from a data value to a Java2D value.\n     *\n     * @param value  the value.\n     * @param area  the data area.\n     * @param edge  the edge along which the axis lies.\n     *\n     * @return The Java2D coordinate.\n     */\n",
"org.jfree.chart.axis.ModuloAxis.transStart": "/**\n     * Translates a data value to a Java2D value for the first section of the\n     * axis.\n     *\n     * @param value  the value.\n     * @param area  the data area.\n     * @param edge  the edge along which the axis lies.\n     * @param length1  the length of the first section.\n     * @param length2  the length of the second section.\n     *\n     * @return The Java2D coordinate.\n     */\n",
"org.jfree.chart.axis.ModuloAxis.transEnd": "/**\n     * Translates a data value to a Java2D value for the second section of the\n     * axis.\n     *\n     * @param value  the value.\n     * @param area  the data area.\n     * @param edge  the edge along which the axis lies.\n     * @param length1  the length of the first section.\n     * @param length2  the length of the second section.\n     *\n     * @return The Java2D coordinate.\n     */\n",
"org.jfree.chart.axis.ModuloAxis.mapValueToFixedRange": "/**\n     * Maps a data value into the fixed range.\n     *\n     * @param value  the value.\n     *\n     * @return The mapped value.\n     */\n",
"org.jfree.chart.axis.ModuloAxis.java2DToValue": "/**\n     * Translates a Java2D coordinate into a data value.\n     *\n     * @param java2DValue  the Java2D coordinate.\n     * @param area  the area.\n     * @param edge  the edge.\n     *\n     * @return The Java2D coordinate.\n     */\n",
"org.jfree.chart.axis.ModuloAxis.getDisplayLength": "/**\n     * Returns the display length for the axis.\n     *\n     * @return The display length.\n     */\n",
"org.jfree.chart.axis.ModuloAxis.getDisplayCentralValue": "/**\n     * Returns the central value of the current display range.\n     *\n     * @return The central value.\n     */\n",
"org.jfree.chart.axis.ModuloAxis.resizeRange": "/**\n     * Increases or decreases the axis range by the specified percentage about\n     * the central value and sends an {@link AxisChangeEvent} to all registered\n     * listeners.\n     * <P>\n     * To double the length of the axis range, use 200% (2.0).\n     * To halve the length of the axis range, use 50% (0.5).\n     *\n     * @param percent  the resize factor.\n     */\n",
"org.jfree.chart.axis.ModuloAxis.resizeRange": "/**\n     * Increases or decreases the axis range by the specified percentage about\n     * the specified anchor value and sends an {@link AxisChangeEvent} to all\n     * registered listeners.\n     * <P>\n     * To double the length of the axis range, use 200% (2.0).\n     * To halve the length of the axis range, use 50% (0.5).\n     *\n     * @param percent  the resize factor.\n     * @param anchorValue  the new central value after the resize.\n     */\n",
"org.jfree.chart.axis.ModuloAxis.lengthToJava2D": "/**\n     * Converts a length in data coordinates into the corresponding length in\n     * Java2D coordinates.\n     *\n     * @param length  the length.\n     * @param area  the plot area.\n     * @param edge  the edge along which the axis lies.\n     *\n     * @return The length in Java2D coordinates.\n     */\n",
"org.jfree.chart.axis.ModuloAxis.equals": "/**\n     * Tests this axis for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.AxisState.getCursor": "/**\n     * Returns the cursor position.\n     *\n     * @return The cursor position.\n     */\n",
"org.jfree.chart.axis.AxisState.setCursor": "/**\n     * Sets the cursor position.\n     *\n     * @param cursor  the cursor position.\n     */\n",
"org.jfree.chart.axis.AxisState.moveCursor": "/**\n     * Moves the cursor outwards by the specified number of units.\n     *\n     * @param units  the units.\n     * @param edge  the edge.\n     */\n",
"org.jfree.chart.axis.AxisState.cursorUp": "/**\n     * Moves the cursor up by the specified number of Java 2D units.\n     *\n     * @param units  the units.\n     */\n",
"org.jfree.chart.axis.AxisState.cursorDown": "/**\n     * Moves the cursor down by the specified number of Java 2D units.\n     *\n     * @param units  the units.\n     */\n",
"org.jfree.chart.axis.AxisState.cursorLeft": "/**\n     * Moves the cursor left by the specified number of Java 2D units.\n     *\n     * @param units  the units.\n     */\n",
"org.jfree.chart.axis.AxisState.cursorRight": "/**\n     * Moves the cursor right by the specified number of Java 2D units.\n     *\n     * @param units  the units.\n     */\n",
"org.jfree.chart.axis.AxisState.getTicks": "/**\n     * Returns the list of ticks.\n     *\n     * @return The list of ticks.\n     */\n",
"org.jfree.chart.axis.AxisState.setTicks": "/**\n     * Sets the list of ticks.\n     *\n     * @param ticks  the ticks.\n     */\n",
"org.jfree.chart.axis.AxisState.getMax": "/**\n     * Returns the maximum width/height.\n     *\n     * @return The maximum width/height.\n     */\n",
"org.jfree.chart.axis.AxisState.setMax": "/**\n     * Sets the maximum width/height.\n     *\n     * @param max the maximum width/height.\n     */\n",
"org.jfree.chart.axis.DateAxis.toTimelineValue": "/**\n         * Converts a millisecond into a timeline value.\n         *\n         * @param millisecond  the millisecond.\n         *\n         * @return The timeline value.\n         */\n",
"org.jfree.chart.axis.DateAxis.toTimelineValue": "/**\n         * Converts a date into a timeline value.\n         *\n         * @param date  the domain value.\n         *\n         * @return The timeline value.\n         */\n",
"org.jfree.chart.axis.DateAxis.toMillisecond": "/**\n         * Converts a timeline value into a millisecond (as encoded by\n         * {@code java.util.Date}).\n         *\n         * @param value  the value.\n         *\n         * @return The millisecond.\n         */\n",
"org.jfree.chart.axis.DateAxis.containsDomainValue": "/**\n         * Returns {@code true} if the timeline includes the specified\n         * domain value.\n         *\n         * @param millisecond  the millisecond.\n         *\n         * @return {@code true}.\n         */\n",
"org.jfree.chart.axis.DateAxis.containsDomainValue": "/**\n         * Returns {@code true} if the timeline includes the specified\n         * domain value.\n         *\n         * @param date  the date.\n         *\n         * @return {@code true}.\n         */\n",
"org.jfree.chart.axis.DateAxis.containsDomainRange": "/**\n         * Returns {@code true} if the timeline includes the specified\n         * domain value range.\n         *\n         * @param from  the start value.\n         * @param to  the end value.\n         *\n         * @return {@code true}.\n         */\n",
"org.jfree.chart.axis.DateAxis.containsDomainRange": "/**\n         * Returns {@code true} if the timeline includes the specified\n         * domain value range.\n         *\n         * @param from  the start date.\n         * @param to  the end date.\n         *\n         * @return {@code true}.\n         */\n",
"org.jfree.chart.axis.DateAxis.equals": "/**\n         * Tests an object for equality with this instance.\n         *\n         * @param object  the object.\n         *\n         * @return A boolean.\n         */\n",
"org.jfree.chart.axis.DateAxis.getTimeZone": "/**\n     * Returns the time zone for the axis.\n     *\n     * @return The time zone (never {@code null}).\n     *\n     * @since 1.0.4\n     *\n     * @see #setTimeZone(TimeZone)\n     */\n",
"org.jfree.chart.axis.DateAxis.setTimeZone": "/**\n     * Sets the time zone for the axis and sends an {@link AxisChangeEvent} to\n     * all registered listeners.\n     *\n     * @param zone  the time zone ({@code null} not permitted).\n     *\n     * @since 1.0.4\n     *\n     * @see #getTimeZone()\n     */\n",
"org.jfree.chart.axis.DateAxis.getLocale": "/**\n     * Returns the locale for this axis.\n     * \n     * @return The locale (never {@code null}).\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.chart.axis.DateAxis.setLocale": "/**\n     * Sets the locale for the axis and sends a change event to all registered \n     * listeners.\n     * \n     * @param locale  the new locale ({@code null} not permitted).\n     */\n",
"org.jfree.chart.axis.DateAxis.getTimeline": "/**\n     * Returns the underlying timeline used by this axis.\n     *\n     * @return The timeline.\n     */\n",
"org.jfree.chart.axis.DateAxis.setTimeline": "/**\n     * Sets the underlying timeline to use for this axis.  If the timeline is \n     * changed, an {@link AxisChangeEvent} is sent to all registered listeners.\n     *\n     * @param timeline  the timeline.\n     */\n",
"org.jfree.chart.axis.DateAxis.getTickUnit": "/**\n     * Returns the tick unit for the axis.\n     * <p>\n     * Note: if the {@code autoTickUnitSelection} flag is\n     * {@code true} the tick unit may be changed while the axis is being\n     * drawn, so in that case the return value from this method may be\n     * irrelevant if the method is called before the axis has been drawn.\n     *\n     * @return The tick unit (possibly {@code null}).\n     *\n     * @see #setTickUnit(DateTickUnit)\n     * @see ValueAxis#isAutoTickUnitSelection()\n     */\n",
"org.jfree.chart.axis.DateAxis.setTickUnit": "/**\n     * Sets the tick unit for the axis.  The auto-tick-unit-selection flag is\n     * set to {@code false}, and registered listeners are notified that\n     * the axis has been changed.\n     *\n     * @param unit  the tick unit.\n     *\n     * @see #getTickUnit()\n     * @see #setTickUnit(DateTickUnit, boolean, boolean)\n     */\n",
"org.jfree.chart.axis.DateAxis.setTickUnit": "/**\n     * Sets the tick unit attribute and, if requested, sends an \n     * {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param unit  the new tick unit.\n     * @param notify  notify registered listeners?\n     * @param turnOffAutoSelection  turn off auto selection?\n     *\n     * @see #getTickUnit()\n     */\n",
"org.jfree.chart.axis.DateAxis.getDateFormatOverride": "/**\n     * Returns the date format override.  If this is non-null, then it will be\n     * used to format the dates on the axis.\n     *\n     * @return The formatter (possibly {@code null}).\n     */\n",
"org.jfree.chart.axis.DateAxis.setDateFormatOverride": "/**\n     * Sets the date format override and sends an {@link AxisChangeEvent} to \n     * all registered listeners.  If this is non-null, then it will be\n     * used to format the dates on the axis.\n     *\n     * @param formatter  the date formatter ({@code null} permitted).\n     */\n",
"org.jfree.chart.axis.DateAxis.setRange": "/**\n     * Sets the upper and lower bounds for the axis and sends an\n     * {@link AxisChangeEvent} to all registered listeners.  As a side-effect,\n     * the auto-range flag is set to false.\n     *\n     * @param range  the new range ({@code null} not permitted).\n     */\n",
"org.jfree.chart.axis.DateAxis.setRange": "/**\n     * Sets the range for the axis, if requested, sends an\n     * {@link AxisChangeEvent} to all registered listeners.  As a side-effect,\n     * the auto-range flag is set to {@code false} (optional).\n     *\n     * @param range  the range ({@code null} not permitted).\n     * @param turnOffAutoRange  a flag that controls whether or not the auto\n     *                          range is turned off.\n     * @param notify  a flag that controls whether or not listeners are\n     *                notified.\n     */\n",
"org.jfree.chart.axis.DateAxis.setRange": "/**\n     * Sets the axis range and sends an {@link AxisChangeEvent} to all\n     * registered listeners.\n     *\n     * @param lower  the lower bound for the axis.\n     * @param upper  the upper bound for the axis.\n     */\n",
"org.jfree.chart.axis.DateAxis.setRange": "/**\n     * Sets the axis range and sends an {@link AxisChangeEvent} to all\n     * registered listeners.\n     *\n     * @param lower  the lower bound for the axis.\n     * @param upper  the upper bound for the axis.\n     */\n",
"org.jfree.chart.axis.DateAxis.getMinimumDate": "/**\n     * Returns the earliest date visible on the axis.\n     *\n     * @return The date.\n     *\n     * @see #setMinimumDate(Date)\n     * @see #getMaximumDate()\n     */\n",
"org.jfree.chart.axis.DateAxis.setMinimumDate": "/**\n     * Sets the minimum date visible on the axis and sends an\n     * {@link AxisChangeEvent} to all registered listeners.  If\n     * {@code date} is on or after the current maximum date for\n     * the axis, the maximum date will be shifted to preserve the current\n     * length of the axis.\n     *\n     * @param date  the date ({@code null} not permitted).\n     *\n     * @see #getMinimumDate()\n     * @see #setMaximumDate(Date)\n     */\n",
"org.jfree.chart.axis.DateAxis.getMaximumDate": "/**\n     * Returns the latest date visible on the axis.\n     *\n     * @return The date.\n     *\n     * @see #setMaximumDate(Date)\n     * @see #getMinimumDate()\n     */\n",
"org.jfree.chart.axis.DateAxis.setMaximumDate": "/**\n     * Sets the maximum date visible on the axis and sends an\n     * {@link AxisChangeEvent} to all registered listeners.  If\n     * {@code maximumDate} is on or before the current minimum date for\n     * the axis, the minimum date will be shifted to preserve the current\n     * length of the axis.\n     *\n     * @param maximumDate  the date ({@code null} not permitted).\n     *\n     * @see #getMinimumDate()\n     * @see #setMinimumDate(Date)\n     */\n",
"org.jfree.chart.axis.DateAxis.getTickMarkPosition": "/**\n     * Returns the tick mark position (start, middle or end of the time period).\n     *\n     * @return The position (never {@code null}).\n     */\n",
"org.jfree.chart.axis.DateAxis.setTickMarkPosition": "/**\n     * Sets the tick mark position (start, middle or end of the time period)\n     * and sends an {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param position  the position ({@code null} not permitted).\n     */\n",
"org.jfree.chart.axis.DateAxis.configure": "/**\n     * Configures the axis to work with the specified plot.  If the axis has\n     * auto-scaling, then sets the maximum and minimum values.\n     */\n",
"org.jfree.chart.axis.DateAxis.isHiddenValue": "/**\n     * Returns {@code true} if the axis hides this value, and\n     * {@code false} otherwise.\n     *\n     * @param millis  the data value.\n     *\n     * @return A value.\n     */\n",
"org.jfree.chart.axis.DateAxis.valueToJava2D": "/**\n     * Translates the data value to the display coordinates (Java 2D User Space)\n     * of the chart.\n     *\n     * @param value  the date to be plotted.\n     * @param area  the rectangle (in Java2D space) where the data is to be\n     *              plotted.\n     * @param edge  the axis location.\n     *\n     * @return The coordinate corresponding to the supplied data value.\n     */\n",
"org.jfree.chart.axis.DateAxis.dateToJava2D": "/**\n     * Translates a date to Java2D coordinates, based on the range displayed by\n     * this axis for the specified data area.\n     *\n     * @param date  the date.\n     * @param area  the rectangle (in Java2D space) where the data is to be\n     *              plotted.\n     * @param edge  the axis location.\n     *\n     * @return The coordinate corresponding to the supplied date.\n     */\n",
"org.jfree.chart.axis.DateAxis.java2DToValue": "/**\n     * Translates a Java2D coordinate into the corresponding data value.  To\n     * perform this translation, you need to know the area used for plotting\n     * data, and which edge the axis is located on.\n     *\n     * @param java2DValue  the coordinate in Java2D space.\n     * @param area  the rectangle (in Java2D space) where the data is to be\n     *              plotted.\n     * @param edge  the axis location.\n     *\n     * @return A data value.\n     */\n",
"org.jfree.chart.axis.DateAxis.calculateLowestVisibleTickValue": "/**\n     * Calculates the value of the lowest visible tick on the axis.\n     *\n     * @param unit  date unit to use.\n     *\n     * @return The value of the lowest visible tick on the axis.\n     */\n",
"org.jfree.chart.axis.DateAxis.calculateHighestVisibleTickValue": "/**\n     * Calculates the value of the highest visible tick on the axis.\n     *\n     * @param unit  date unit to use.\n     *\n     * @return The value of the highest visible tick on the axis.\n     */\n",
"org.jfree.chart.axis.DateAxis.previousStandardDate": "/**\n     * Returns the previous \"standard\" date, for a given date and tick unit.\n     *\n     * @param date  the reference date.\n     * @param unit  the tick unit.\n     *\n     * @return The previous \"standard\" date.\n     */\n",
"org.jfree.chart.axis.DateAxis.calculateDateForPosition": "/**\n     * Returns a {@link java.util.Date} corresponding to the specified position\n     * within a {@link RegularTimePeriod}.\n     *\n     * @param period  the period.\n     * @param position  the position ({@code null} not permitted).\n     *\n     * @return A date.\n     */\n",
"org.jfree.chart.axis.DateAxis.nextStandardDate": "/**\n     * Returns the first \"standard\" date (based on the specified field and\n     * units).\n     *\n     * @param date  the reference date.\n     * @param unit  the date tick unit.\n     *\n     * @return The next \"standard\" date.\n     */\n",
"org.jfree.chart.axis.DateAxis.createStandardDateTickUnits": "/**\n     * Returns a collection of standard date tick units that uses the default\n     * time zone.  This collection will be used by default, but you are free\n     * to create your own collection if you want to (see the\n     * {@link ValueAxis#setStandardTickUnits(TickUnitSource)} method inherited\n     * from the {@link ValueAxis} class).\n     *\n     * @return A collection of standard date tick units.\n     */\n",
"org.jfree.chart.axis.DateAxis.createStandardDateTickUnits": "/**\n     * Returns a collection of standard date tick units.  This collection will\n     * be used by default, but you are free to create your own collection if\n     * you want to (see the\n     * {@link ValueAxis#setStandardTickUnits(TickUnitSource)} method inherited\n     * from the {@link ValueAxis} class).\n     *\n     * @param zone  the time zone ({@code null} not permitted).\n     * @param locale  the locale ({@code null} not permitted).\n     *\n     * @return A collection of standard date tick units.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.axis.DateAxis.autoAdjustRange": "/**\n     * Rescales the axis to ensure that all data is visible.\n     */\n",
"org.jfree.chart.axis.DateAxis.selectAutoTickUnit": "/**\n     * Selects an appropriate tick value for the axis.  The strategy is to\n     * display as many ticks as possible (selected from an array of 'standard'\n     * tick units) without the labels overlapping.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area defined by the axes.\n     * @param edge  the axis location.\n     */\n",
"org.jfree.chart.axis.DateAxis.selectHorizontalAutoTickUnit": "/**\n     * Selects an appropriate tick size for the axis.  The strategy is to\n     * display as many ticks as possible (selected from a collection of\n     * 'standard' tick units) without the labels overlapping.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area defined by the axes.\n     * @param edge  the axis location.\n     */\n",
"org.jfree.chart.axis.DateAxis.selectVerticalAutoTickUnit": "/**\n     * Selects an appropriate tick size for the axis.  The strategy is to\n     * display as many ticks as possible (selected from a collection of\n     * 'standard' tick units) without the labels overlapping.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area in which the plot should be drawn.\n     * @param edge  the axis location.\n     */\n",
"org.jfree.chart.axis.DateAxis.estimateMaximumTickLabelWidth": "/**\n     * Estimates the maximum width of the tick labels, assuming the specified\n     * tick unit is used.\n     * <P>\n     * Rather than computing the string bounds of every tick on the axis, we\n     * just look at two values: the lower bound and the upper bound for the\n     * axis.  These two values will usually be representative.\n     *\n     * @param g2  the graphics device.\n     * @param unit  the tick unit to use for calculation.\n     *\n     * @return The estimated maximum width of the tick labels.\n     */\n",
"org.jfree.chart.axis.DateAxis.estimateMaximumTickLabelHeight": "/**\n     * Estimates the maximum width of the tick labels, assuming the specified\n     * tick unit is used.\n     * <P>\n     * Rather than computing the string bounds of every tick on the axis, we\n     * just look at two values: the lower bound and the upper bound for the\n     * axis.  These two values will usually be representative.\n     *\n     * @param g2  the graphics device.\n     * @param unit  the tick unit to use for calculation.\n     *\n     * @return The estimated maximum width of the tick labels.\n     */\n",
"org.jfree.chart.axis.DateAxis.refreshTicks": "/**\n     * Calculates the positions of the tick labels for the axis, storing the\n     * results in the tick label list (ready for drawing).\n     *\n     * @param g2  the graphics device.\n     * @param state  the axis state.\n     * @param dataArea  the area in which the plot should be drawn.\n     * @param edge  the location of the axis.\n     *\n     * @return A list of ticks.\n     */\n",
"org.jfree.chart.axis.DateAxis.correctTickDateForPosition": "/**\n     * Corrects the given tick date for the position setting.\n     *\n     * @param time  the tick date/time.\n     * @param unit  the tick unit.\n     * @param position  the tick position.\n     *\n     * @return The adjusted time.\n     */\n",
"org.jfree.chart.axis.DateAxis.refreshTicksHorizontal": "/**\n     * Recalculates the ticks for the date axis.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area in which the data is to be drawn.\n     * @param edge  the location of the axis.\n     *\n     * @return A list of ticks.\n     */\n",
"org.jfree.chart.axis.DateAxis.refreshTicksVertical": "/**\n     * Recalculates the ticks for the date axis.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area in which the plot should be drawn.\n     * @param edge  the location of the axis.\n     *\n     * @return A list of ticks.\n     */\n",
"org.jfree.chart.axis.DateAxis.draw": "/**\n     * Draws the axis on a Java 2D graphics device (such as the screen or a\n     * printer).\n     *\n     * @param g2  the graphics device ({@code null} not permitted).\n     * @param cursor  the cursor location.\n     * @param plotArea  the area within which the axes and data should be\n     *                  drawn ({@code null} not permitted).\n     * @param dataArea  the area within which the data should be drawn\n     *                  ({@code null} not permitted).\n     * @param edge  the location of the axis ({@code null} not permitted).\n     * @param plotState  collects information about the plot\n     *                   ({@code null} permitted).\n     *\n     * @return The axis state (never {@code null}).\n     */\n",
"org.jfree.chart.axis.DateAxis.zoomRange": "/**\n     * Zooms in on the current range (zoom-in stops once the axis length \n     * reaches the equivalent of one millisecond).  \n     *\n     * @param lowerPercent  the new lower bound.\n     * @param upperPercent  the new upper bound.\n     */\n",
"org.jfree.chart.axis.DateAxis.equals": "/**\n     * Tests this axis for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.DateAxis.hashCode": "/**\n     * Returns a hash code for this object.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.axis.DateAxis.clone": "/**\n     * Returns a clone of the object.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if some component of the axis does\n     *         not support cloning.\n     */\n",
"org.jfree.chart.axis.Tick.getText": "/**\n     * Returns the text version of the tick value.\n     *\n     * @return A string (possibly {@code null});\n     */\n",
"org.jfree.chart.axis.Tick.getTextAnchor": "/**\n     * Returns the text anchor.\n     *\n     * @return The text anchor (never {@code null}).\n     */\n",
"org.jfree.chart.axis.Tick.getRotationAnchor": "/**\n     * Returns the text anchor that defines the point around which the label is\n     * rotated.\n     *\n     * @return A text anchor (never {@code null}).\n     */\n",
"org.jfree.chart.axis.Tick.getAngle": "/**\n     * Returns the angle.\n     *\n     * @return The angle.\n     */\n",
"org.jfree.chart.axis.Tick.equals": "/**\n     * Tests this tick for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.Tick.clone": "/**\n     * Returns a clone of the tick.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning.\n     */\n",
"org.jfree.chart.axis.Tick.toString": "/**\n     * Returns a string representation of the tick.\n     *\n     * @return A string.\n     */\n",
"org.jfree.chart.axis.CategoryAnchor.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.chart.axis.CategoryAnchor.equals": "/**\n     * Returns {@code true} if this object is equal to the specified\n     * object, and {@code false} otherwise.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.CategoryAnchor.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     *\n     * @return The object.\n     *\n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.chart.axis.AxisLabelLocation.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.chart.axis.AxisLabelLocation.equals": "/**\n     * Returns {@code true} if this object is equal to the specified\n     * object, and {@code false} otherwise.\n     *\n     * @param obj  the other object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.AxisLabelLocation.hashCode": "/**\n     * Returns a hash code for this instance.\n     * \n     * @return A hash code. \n     */\n",
"org.jfree.chart.axis.AxisLabelLocation.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     *\n     * @return The object.\n     *\n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.chart.axis.MarkerAxisBand.addMarker": "/**\n     * Adds a marker to the band.\n     *\n     * @param marker  the marker.\n     */\n",
"org.jfree.chart.axis.MarkerAxisBand.getHeight": "/**\n     * Returns the height of the band.\n     *\n     * @param g2  the graphics device.\n     *\n     * @return The height of the band.\n     */\n",
"org.jfree.chart.axis.MarkerAxisBand.drawStringInRect": "/**\n     * A utility method that draws a string inside a rectangle.\n     *\n     * @param g2  the graphics device.\n     * @param bounds  the rectangle.\n     * @param font  the font.\n     * @param text  the text.\n     */\n",
"org.jfree.chart.axis.MarkerAxisBand.draw": "/**\n     * Draws the band.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param dataArea  the data area.\n     * @param x  the x-coordinate.\n     * @param y  the y-coordinate.\n     */\n",
"org.jfree.chart.axis.MarkerAxisBand.equals": "/**\n     * Tests this axis for equality with another object.  Note that the axis\n     * that the band belongs to is ignored in the test.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.axis.MarkerAxisBand.hashCode": "/**\n     * Returns a hash code for the object.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.axis.CategoryLabelWidthType.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string (never {@code null}).\n     */\n",
"org.jfree.chart.axis.CategoryLabelWidthType.equals": "/**\n     * Returns {@code true} if this object is equal to the specified\n     * object, and {@code false} otherwise.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.CategoryLabelWidthType.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     *\n     * @return The object.\n     *\n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.chart.axis.ExtendedCategoryAxis.getSubLabelFont": "/**\n     * Returns the font for the sublabels.\n     *\n     * @return The font (never {@code null}).\n     *\n     * @see #setSubLabelFont(Font)\n     */\n",
"org.jfree.chart.axis.ExtendedCategoryAxis.setSubLabelFont": "/**\n     * Sets the font for the sublabels and sends an {@link AxisChangeEvent} to\n     * all registered listeners.\n     *\n     * @param font  the font ({@code null} not permitted).\n     *\n     * @see #getSubLabelFont()\n     */\n",
"org.jfree.chart.axis.ExtendedCategoryAxis.getSubLabelPaint": "/**\n     * Returns the paint for the sublabels.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setSubLabelPaint(Paint)\n     */\n",
"org.jfree.chart.axis.ExtendedCategoryAxis.setSubLabelPaint": "/**\n     * Sets the paint for the sublabels and sends an {@link AxisChangeEvent}\n     * to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getSubLabelPaint()\n     */\n",
"org.jfree.chart.axis.ExtendedCategoryAxis.addSubLabel": "/**\n     * Adds a sublabel for a category.\n     *\n     * @param category  the category.\n     * @param label  the label.\n     */\n",
"org.jfree.chart.axis.ExtendedCategoryAxis.createLabel": "/**\n     * Overrides the default behaviour by adding the sublabel to the text\n     * block that is used for the category label.\n     *\n     * @param category  the category.\n     * @param width  the width (not used yet).\n     * @param edge  the location of the axis.\n     * @param g2  the graphics device.\n     *\n     * @return A label.\n     */\n",
"org.jfree.chart.axis.ExtendedCategoryAxis.equals": "/**\n     * Tests this axis for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.ExtendedCategoryAxis.clone": "/**\n     * Returns a clone of this axis.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning.\n     */\n",
"org.jfree.chart.axis.ExtendedCategoryAxis.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.axis.ExtendedCategoryAxis.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.axis.MonthDateFormat.format": "/**\n     * Formats the given date.\n     *\n     * @param date  the date.\n     * @param toAppendTo  the string buffer.\n     * @param fieldPosition  the field position.\n     *\n     * @return The formatted date.\n     */\n",
"org.jfree.chart.axis.MonthDateFormat.parse": "/**\n     * Parses the given string (not implemented).\n     *\n     * @param source  the date string.\n     * @param pos  the parse position.\n     *\n     * @return {@code null}, as this method has not been implemented.\n     */\n",
"org.jfree.chart.axis.MonthDateFormat.equals": "/**\n     * Tests this formatter for equality with an arbitrary object.\n     *\n     * @param obj  the object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.LogarithmicAxis.setAllowNegativesFlag": "/**\n     * Sets the 'allowNegativesFlag' flag; true to allow negative values\n     * in data, false to be able to plot positive values arbitrarily close to\n     * zero.\n     *\n     * @param flgVal  the new value of the flag.\n     */\n",
"org.jfree.chart.axis.LogarithmicAxis.getAllowNegativesFlag": "/**\n     * Returns the 'allowNegativesFlag' flag; true to allow negative values\n     * in data, false to be able to plot positive values arbitrarily close\n     * to zero.\n     *\n     * @return The flag.\n     */\n",
"org.jfree.chart.axis.LogarithmicAxis.setStrictValuesFlag": "/**\n     * Sets the 'strictValuesFlag' flag; if true and 'allowNegativesFlag'\n     * is false then this axis will throw a runtime exception if any of its\n     * values are less than or equal to zero; if false then the axis will\n     * adjust for values less than or equal to zero as needed.\n     *\n     * @param flgVal true for strict enforcement.\n     */\n",
"org.jfree.chart.axis.LogarithmicAxis.getStrictValuesFlag": "/**\n     * Returns the 'strictValuesFlag' flag; if true and 'allowNegativesFlag'\n     * is false then this axis will throw a runtime exception if any of its\n     * values are less than or equal to zero; if false then the axis will\n     * adjust for values less than or equal to zero as needed.\n     *\n     * @return {@code true} if strict enforcement is enabled.\n     */\n",
"org.jfree.chart.axis.LogarithmicAxis.setExpTickLabelsFlag": "/**\n     * Sets the 'expTickLabelsFlag' flag.  If the 'log10TickLabelsFlag'\n     * is false then this will set whether or not \"1e#\"-style tick labels\n     * are used.  The default is to use regular numeric tick labels.\n     *\n     * @param flgVal true for \"1e#\"-style tick labels, false for\n     * log10 or regular numeric tick labels.\n     */\n",
"org.jfree.chart.axis.LogarithmicAxis.getExpTickLabelsFlag": "/**\n     * Returns the 'expTickLabelsFlag' flag.\n     *\n     * @return {@code true} for \"1e#\"-style tick labels,\n     *         {@code false} for log10 or regular numeric tick labels.\n     */\n",
"org.jfree.chart.axis.LogarithmicAxis.setLog10TickLabelsFlag": "/**\n     * Sets the 'log10TickLabelsFlag' flag.  The default value is false.\n     *\n     * @param flag true for \"10^n\"-style tick labels, false for \"1e#\"-style\n     * or regular numeric tick labels.\n     */\n",
"org.jfree.chart.axis.LogarithmicAxis.getLog10TickLabelsFlag": "/**\n     * Returns the 'log10TickLabelsFlag' flag.\n     *\n     * @return {@code true} for \"10^n\"-style tick labels,\n     *         {@code false} for \"1e#\"-style or regular numeric tick\n     *         labels.\n     */\n",
"org.jfree.chart.axis.LogarithmicAxis.setAutoRangeNextLogFlag": "/**\n     * Sets the 'autoRangeNextLogFlag' flag.  This determines whether or\n     * not the 'autoAdjustRange()' method will select the next \"10^n\"\n     * values when determining the upper and lower bounds.  The default\n     * value is false.\n     *\n     * @param flag {@code true} to make the 'autoAdjustRange()'\n     * method select the next \"10^n\" values, {@code false} to not.\n     */\n",
"org.jfree.chart.axis.LogarithmicAxis.getAutoRangeNextLogFlag": "/**\n     * Returns the 'autoRangeNextLogFlag' flag.\n     *\n     * @return {@code true} if the 'autoAdjustRange()' method will\n     * select the next \"10^n\" values, {@code false} if not.\n     */\n",
"org.jfree.chart.axis.LogarithmicAxis.setRange": "/**\n     * Overridden version that calls original and then sets up flag for\n     * log axis processing.\n     *\n     * @param range  the new range.\n     */\n",
"org.jfree.chart.axis.LogarithmicAxis.setupSmallLogFlag": "/**\n     * Sets up flag for log axis processing.  Set true if negative values\n     * not allowed and the lower bound is between 0 and 10.\n     */\n",
"org.jfree.chart.axis.LogarithmicAxis.setupNumberFmtObj": "/**\n     * Sets up the number formatter object according to the\n     * 'expTickLabelsFlag' flag.\n     */\n",
"org.jfree.chart.axis.LogarithmicAxis.switchedLog10": "/**\n     * Returns the log10 value, depending on if values between 0 and\n     * 1 are being plotted.  If negative values are not allowed and\n     * the lower bound is between 0 and 10 then a normal log is\n     * returned; otherwise the returned value is adjusted if the\n     * given value is less than 10.\n     *\n     * @param val the value.\n     *\n     * @return log<sub>10</sub>(val).\n     *\n     * @see #switchedPow10(double)\n     */\n",
"org.jfree.chart.axis.LogarithmicAxis.switchedPow10": "/**\n     * Returns a power of 10, depending on if values between 0 and\n     * 1 are being plotted.  If negative values are not allowed and\n     * the lower bound is between 0 and 10 then a normal power is\n     * returned; otherwise the returned value is adjusted if the\n     * given value is less than 1.\n     *\n     * @param val the value.\n     *\n     * @return 10<sup>val</sup>.\n     *\n     * @since 1.0.5\n     * @see #switchedLog10(double)\n     */\n",
"org.jfree.chart.axis.LogarithmicAxis.adjustedLog10": "/**\n     * Returns an adjusted log10 value for graphing purposes.  The first\n     * adjustment is that negative values are changed to positive during\n     * the calculations, and then the answer is negated at the end.  The\n     * second is that, for values less than 10, an increasingly large\n     * (0 to 1) scaling factor is added such that at 0 the value is\n     * adjusted to 1, resulting in a returned result of 0.\n     *\n     * @param val  value for which log10 should be calculated.\n     *\n     * @return An adjusted log<sub>10</sub>(val).\n     *\n     * @see #adjustedPow10(double)\n     */\n",
"org.jfree.chart.axis.LogarithmicAxis.adjustedPow10": "/**\n     * Returns an adjusted power of 10 value for graphing purposes.  The first\n     * adjustment is that negative values are changed to positive during\n     * the calculations, and then the answer is negated at the end.  The\n     * second is that, for values less than 1, a progressive logarithmic\n     * offset is subtracted such that at 0 the returned result is also 0.\n     *\n     * @param val  value for which power of 10 should be calculated.\n     *\n     * @return An adjusted 10<sup>val</sup>.\n     *\n     * @since 1.0.5\n     * @see #adjustedLog10(double)\n     */\n",
"org.jfree.chart.axis.LogarithmicAxis.computeLogFloor": "/**\n     * Returns the largest (closest to positive infinity) double value that is\n     * not greater than the argument, is equal to a mathematical integer and\n     * satisfying the condition that log base 10 of the value is an integer\n     * (i.e., the value returned will be a power of 10: 1, 10, 100, 1000, etc.).\n     *\n     * @param lower a double value below which a floor will be calcualted.\n     *\n     * @return 10<sup>N</sup> with N .. { 1 ... }\n     */\n",
"org.jfree.chart.axis.LogarithmicAxis.computeLogCeil": "/**\n     * Returns the smallest (closest to negative infinity) double value that is\n     * not less than the argument, is equal to a mathematical integer and\n     * satisfying the condition that log base 10 of the value is an integer\n     * (i.e., the value returned will be a power of 10: 1, 10, 100, 1000, etc.).\n     *\n     * @param upper a double value above which a ceiling will be calcualted.\n     *\n     * @return 10<sup>N</sup> with N .. { 1 ... }\n     */\n",
"org.jfree.chart.axis.LogarithmicAxis.autoAdjustRange": "/**\n     * Rescales the axis to ensure that all data is visible.\n     */\n",
"org.jfree.chart.axis.LogarithmicAxis.valueToJava2D": "/**\n     * Converts a data value to a coordinate in Java2D space, assuming that\n     * the axis runs along one edge of the specified plotArea.\n     * Note that it is possible for the coordinate to fall outside the\n     * plotArea.\n     *\n     * @param value  the data value.\n     * @param plotArea  the area for plotting the data.\n     * @param edge  the axis location.\n     *\n     * @return The Java2D coordinate.\n     */\n",
"org.jfree.chart.axis.LogarithmicAxis.java2DToValue": "/**\n     * Converts a coordinate in Java2D space to the corresponding data\n     * value, assuming that the axis runs along one edge of the specified\n     * plotArea.\n     *\n     * @param java2DValue  the coordinate in Java2D space.\n     * @param plotArea  the area in which the data is plotted.\n     * @param edge  the axis location.\n     *\n     * @return The data value.\n     */\n",
"org.jfree.chart.axis.LogarithmicAxis.zoomRange": "/**\n     * Zooms in on the current range.\n     *\n     * @param lowerPercent  the new lower bound.\n     * @param upperPercent  the new upper bound.\n     */\n",
"org.jfree.chart.axis.LogarithmicAxis.refreshTicksHorizontal": "/**\n     * Calculates the positions of the tick labels for the axis, storing the\n     * results in the tick label list (ready for drawing).\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area in which the plot should be drawn.\n     * @param edge  the location of the axis.\n     *\n     * @return A list of ticks.\n     */\n",
"org.jfree.chart.axis.LogarithmicAxis.refreshTicksVertical": "/**\n     * Calculates the positions of the tick labels for the axis, storing the\n     * results in the tick label list (ready for drawing).\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area in which the plot should be drawn.\n     * @param edge  the location of the axis.\n     *\n     * @return A list of ticks.\n     */\n",
"org.jfree.chart.axis.LogarithmicAxis.makeTickLabel": "/**\n     * Converts the given value to a tick label string.\n     *\n     * @param val the value to convert.\n     * @param forceFmtFlag true to force the number-formatter object\n     * to be used.\n     *\n     * @return The tick label string.\n     */\n",
"org.jfree.chart.axis.LogarithmicAxis.makeTickLabel": "/**\n     * Converts the given value to a tick label string.\n     * @param val the value to convert.\n     *\n     * @return The tick label string.\n     */\n",
"org.jfree.chart.axis.CategoryAxis.getLowerMargin": "/**\n     * Returns the lower margin for the axis.\n     *\n     * @return The margin.\n     *\n     * @see #getUpperMargin()\n     * @see #setLowerMargin(double)\n     */\n",
"org.jfree.chart.axis.CategoryAxis.setLowerMargin": "/**\n     * Sets the lower margin for the axis and sends an {@link AxisChangeEvent}\n     * to all registered listeners.\n     *\n     * @param margin  the margin as a percentage of the axis length (for\n     *                example, 0.05 is five percent).\n     *\n     * @see #getLowerMargin()\n     */\n",
"org.jfree.chart.axis.CategoryAxis.getUpperMargin": "/**\n     * Returns the upper margin for the axis.\n     *\n     * @return The margin.\n     *\n     * @see #getLowerMargin()\n     * @see #setUpperMargin(double)\n     */\n",
"org.jfree.chart.axis.CategoryAxis.setUpperMargin": "/**\n     * Sets the upper margin for the axis and sends an {@link AxisChangeEvent}\n     * to all registered listeners.\n     *\n     * @param margin  the margin as a percentage of the axis length (for\n     *                example, 0.05 is five percent).\n     *\n     * @see #getUpperMargin()\n     */\n",
"org.jfree.chart.axis.CategoryAxis.getCategoryMargin": "/**\n     * Returns the category margin.\n     *\n     * @return The margin.\n     *\n     * @see #setCategoryMargin(double)\n     */\n",
"org.jfree.chart.axis.CategoryAxis.setCategoryMargin": "/**\n     * Sets the category margin and sends an {@link AxisChangeEvent} to all\n     * registered listeners.  The overall category margin is distributed over\n     * N-1 gaps, where N is the number of categories on the axis.\n     *\n     * @param margin  the margin as a percentage of the axis length (for\n     *                example, 0.05 is five percent).\n     *\n     * @see #getCategoryMargin()\n     */\n",
"org.jfree.chart.axis.CategoryAxis.getMaximumCategoryLabelLines": "/**\n     * Returns the maximum number of lines to use for each category label.\n     *\n     * @return The maximum number of lines.\n     *\n     * @see #setMaximumCategoryLabelLines(int)\n     */\n",
"org.jfree.chart.axis.CategoryAxis.setMaximumCategoryLabelLines": "/**\n     * Sets the maximum number of lines to use for each category label and\n     * sends an {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param lines  the maximum number of lines.\n     *\n     * @see #getMaximumCategoryLabelLines()\n     */\n",
"org.jfree.chart.axis.CategoryAxis.getMaximumCategoryLabelWidthRatio": "/**\n     * Returns the category label width ratio.\n     *\n     * @return The ratio.\n     *\n     * @see #setMaximumCategoryLabelWidthRatio(float)\n     */\n",
"org.jfree.chart.axis.CategoryAxis.setMaximumCategoryLabelWidthRatio": "/**\n     * Sets the maximum category label width ratio and sends an\n     * {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param ratio  the ratio.\n     *\n     * @see #getMaximumCategoryLabelWidthRatio()\n     */\n",
"org.jfree.chart.axis.CategoryAxis.getCategoryLabelPositionOffset": "/**\n     * Returns the offset between the axis and the category labels (before\n     * label positioning is taken into account).\n     *\n     * @return The offset (in Java2D units).\n     *\n     * @see #setCategoryLabelPositionOffset(int)\n     */\n",
"org.jfree.chart.axis.CategoryAxis.setCategoryLabelPositionOffset": "/**\n     * Sets the offset between the axis and the category labels (before label\n     * positioning is taken into account) and sends a change event to all \n     * registered listeners.\n     *\n     * @param offset  the offset (in Java2D units).\n     *\n     * @see #getCategoryLabelPositionOffset()\n     */\n",
"org.jfree.chart.axis.CategoryAxis.getCategoryLabelPositions": "/**\n     * Returns the category label position specification (this contains label\n     * positioning info for all four possible axis locations).\n     *\n     * @return The positions (never {@code null}).\n     *\n     * @see #setCategoryLabelPositions(CategoryLabelPositions)\n     */\n",
"org.jfree.chart.axis.CategoryAxis.setCategoryLabelPositions": "/**\n     * Sets the category label position specification for the axis and sends an\n     * {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param positions  the positions ({@code null} not permitted).\n     *\n     * @see #getCategoryLabelPositions()\n     */\n",
"org.jfree.chart.axis.CategoryAxis.getTickLabelFont": "/**\n     * Returns the font for the tick label for the given category.\n     *\n     * @param category  the category ({@code null} not permitted).\n     *\n     * @return The font (never {@code null}).\n     *\n     * @see #setTickLabelFont(Comparable, Font)\n     */\n",
"org.jfree.chart.axis.CategoryAxis.setTickLabelFont": "/**\n     * Sets the font for the tick label for the specified category and sends\n     * an {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param category  the category ({@code null} not permitted).\n     * @param font  the font ({@code null} permitted).\n     *\n     * @see #getTickLabelFont(Comparable)\n     */\n",
"org.jfree.chart.axis.CategoryAxis.getTickLabelPaint": "/**\n     * Returns the paint for the tick label for the given category.\n     *\n     * @param category  the category ({@code null} not permitted).\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setTickLabelPaint(Paint)\n     */\n",
"org.jfree.chart.axis.CategoryAxis.setTickLabelPaint": "/**\n     * Sets the paint for the tick label for the specified category and sends\n     * an {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param category  the category ({@code null} not permitted).\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getTickLabelPaint(Comparable)\n     */\n",
"org.jfree.chart.axis.CategoryAxis.addCategoryLabelToolTip": "/**\n     * Adds a tooltip to the specified category and sends an\n     * {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param category  the category ({@code null} not permitted).\n     * @param tooltip  the tooltip text ({@code null} permitted).\n     *\n     * @see #removeCategoryLabelToolTip(Comparable)\n     */\n",
"org.jfree.chart.axis.CategoryAxis.getCategoryLabelToolTip": "/**\n     * Returns the tool tip text for the label belonging to the specified\n     * category.\n     *\n     * @param category  the category ({@code null} not permitted).\n     *\n     * @return The tool tip text (possibly {@code null}).\n     *\n     * @see #addCategoryLabelToolTip(Comparable, String)\n     * @see #removeCategoryLabelToolTip(Comparable)\n     */\n",
"org.jfree.chart.axis.CategoryAxis.removeCategoryLabelToolTip": "/**\n     * Removes the tooltip for the specified category and, if there was a value\n     * associated with that category, sends an {@link AxisChangeEvent} to all \n     * registered listeners.\n     *\n     * @param category  the category ({@code null} not permitted).\n     *\n     * @see #addCategoryLabelToolTip(Comparable, String)\n     * @see #clearCategoryLabelToolTips()\n     */\n",
"org.jfree.chart.axis.CategoryAxis.clearCategoryLabelToolTips": "/**\n     * Clears the category label tooltips and sends an {@link AxisChangeEvent}\n     * to all registered listeners.\n     *\n     * @see #addCategoryLabelToolTip(Comparable, String)\n     * @see #removeCategoryLabelToolTip(Comparable)\n     */\n",
"org.jfree.chart.axis.CategoryAxis.addCategoryLabelURL": "/**\n     * Adds a URL (to be used in image maps) to the specified category and \n     * sends an {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param category  the category ({@code null} not permitted).\n     * @param url  the URL text ({@code null} permitted).\n     *\n     * @see #removeCategoryLabelURL(Comparable)\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.axis.CategoryAxis.getCategoryLabelURL": "/**\n     * Returns the URL for the label belonging to the specified category.\n     *\n     * @param category  the category ({@code null} not permitted).\n     *\n     * @return The URL text (possibly {@code null}).\n     * \n     * @see #addCategoryLabelURL(Comparable, String)\n     * @see #removeCategoryLabelURL(Comparable)\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.axis.CategoryAxis.removeCategoryLabelURL": "/**\n     * Removes the URL for the specified category and, if there was a URL \n     * associated with that category, sends an {@link AxisChangeEvent} to all \n     * registered listeners.\n     *\n     * @param category  the category ({@code null} not permitted).\n     *\n     * @see #addCategoryLabelURL(Comparable, String)\n     * @see #clearCategoryLabelURLs()\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.axis.CategoryAxis.clearCategoryLabelURLs": "/**\n     * Clears the category label URLs and sends an {@link AxisChangeEvent}\n     * to all registered listeners.\n     *\n     * @see #addCategoryLabelURL(Comparable, String)\n     * @see #removeCategoryLabelURL(Comparable)\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.axis.CategoryAxis.getCategoryJava2DCoordinate": "/**\n     * Returns the Java 2D coordinate for a category.\n     *\n     * @param anchor  the anchor point.\n     * @param category  the category index.\n     * @param categoryCount  the category count.\n     * @param area  the data area.\n     * @param edge  the location of the axis.\n     *\n     * @return The coordinate.\n     */\n",
"org.jfree.chart.axis.CategoryAxis.getCategoryStart": "/**\n     * Returns the starting coordinate for the specified category.\n     *\n     * @param category  the category.\n     * @param categoryCount  the number of categories.\n     * @param area  the data area.\n     * @param edge  the axis location.\n     *\n     * @return The coordinate.\n     *\n     * @see #getCategoryMiddle(int, int, Rectangle2D, RectangleEdge)\n     * @see #getCategoryEnd(int, int, Rectangle2D, RectangleEdge)\n     */\n",
"org.jfree.chart.axis.CategoryAxis.getCategoryMiddle": "/**\n     * Returns the middle coordinate for the specified category.\n     *\n     * @param category  the category.\n     * @param categoryCount  the number of categories.\n     * @param area  the data area.\n     * @param edge  the axis location.\n     *\n     * @return The coordinate.\n     *\n     * @see #getCategoryStart(int, int, Rectangle2D, RectangleEdge)\n     * @see #getCategoryEnd(int, int, Rectangle2D, RectangleEdge)\n     */\n",
"org.jfree.chart.axis.CategoryAxis.getCategoryEnd": "/**\n     * Returns the end coordinate for the specified category.\n     *\n     * @param category  the category.\n     * @param categoryCount  the number of categories.\n     * @param area  the data area.\n     * @param edge  the axis location.\n     *\n     * @return The coordinate.\n     *\n     * @see #getCategoryStart(int, int, Rectangle2D, RectangleEdge)\n     * @see #getCategoryMiddle(int, int, Rectangle2D, RectangleEdge)\n     */\n",
"org.jfree.chart.axis.CategoryAxis.getCategoryMiddle": "/**\n     * A convenience method that returns the axis coordinate for the centre of\n     * a category.\n     *\n     * @param category  the category key ({@code null} not permitted).\n     * @param categories  the categories ({@code null} not permitted).\n     * @param area  the data area ({@code null} not permitted).\n     * @param edge  the edge along which the axis lies ({@code null} not\n     *     permitted).\n     *\n     * @return The centre coordinate.\n     *\n     * @since 1.0.11\n     *\n     * @see #getCategorySeriesMiddle(Comparable, Comparable, CategoryDataset,\n     *     double, Rectangle2D, RectangleEdge)\n     */\n",
"org.jfree.chart.axis.CategoryAxis.getCategorySeriesMiddle": "/**\n     * Returns the middle coordinate (in Java2D space) for a series within a\n     * category.\n     *\n     * @param category  the category ({@code null} not permitted).\n     * @param seriesKey  the series key ({@code null} not permitted).\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param itemMargin  the item margin (0.0 &lt;= itemMargin &lt; 1.0);\n     * @param area  the area ({@code null} not permitted).\n     * @param edge  the edge ({@code null} not permitted).\n     *\n     * @return The coordinate in Java2D space.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.axis.CategoryAxis.getCategorySeriesMiddle": "/**\n     * Returns the middle coordinate (in Java2D space) for a series within a\n     * category.\n     *\n     * @param categoryIndex  the category index.\n     * @param categoryCount  the category count.\n     * @param seriesIndex the series index.\n     * @param seriesCount the series count.\n     * @param itemMargin  the item margin (0.0 &lt;= itemMargin &lt; 1.0);\n     * @param area  the area ({@code null} not permitted).\n     * @param edge  the edge ({@code null} not permitted).\n     *\n     * @return The coordinate in Java2D space.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.axis.CategoryAxis.calculateCategorySize": "/**\n     * Calculates the size (width or height, depending on the location of the\n     * axis) of a category.\n     *\n     * @param categoryCount  the number of categories.\n     * @param area  the area within which the categories will be drawn.\n     * @param edge  the axis location.\n     *\n     * @return The category size.\n     */\n",
"org.jfree.chart.axis.CategoryAxis.calculateCategoryGapSize": "/**\n     * Calculates the size (width or height, depending on the location of the\n     * axis) of a category gap.\n     *\n     * @param categoryCount  the number of categories.\n     * @param area  the area within which the categories will be drawn.\n     * @param edge  the axis location.\n     *\n     * @return The category gap width.\n     */\n",
"org.jfree.chart.axis.CategoryAxis.reserveSpace": "/**\n     * Estimates the space required for the axis, given a specific drawing area.\n     *\n     * @param g2  the graphics device (used to obtain font information).\n     * @param plot  the plot that the axis belongs to.\n     * @param plotArea  the area within which the axis should be drawn.\n     * @param edge  the axis location (top or bottom).\n     * @param space  the space already reserved.\n     *\n     * @return The space required to draw the axis.\n     */\n",
"org.jfree.chart.axis.CategoryAxis.configure": "/**\n     * Configures the axis against the current plot.\n     */\n",
"org.jfree.chart.axis.CategoryAxis.draw": "/**\n     * Draws the axis on a Java 2D graphics device (such as the screen or a\n     * printer).\n     *\n     * @param g2  the graphics device ({@code null} not permitted).\n     * @param cursor  the cursor location.\n     * @param plotArea  the area within which the axis should be drawn\n     *                  ({@code null} not permitted).\n     * @param dataArea  the area within which the plot is being drawn\n     *                  ({@code null} not permitted).\n     * @param edge  the location of the axis ({@code null} not permitted).\n     * @param plotState  collects information about the plot\n     *                   ({@code null} permitted).\n     *\n     * @return The axis state (never {@code null}).\n     */\n",
"org.jfree.chart.axis.CategoryAxis.drawCategoryLabels": "/**\n     * Draws the category labels and returns the updated axis state.\n     *\n     * @param g2  the graphics device ({@code null} not permitted).\n     * @param plotArea  the plot area ({@code null} not permitted).\n     * @param dataArea  the area inside the axes ({@code null} not\n     *                  permitted).\n     * @param edge  the axis location ({@code null} not permitted).\n     * @param state  the axis state ({@code null} not permitted).\n     * @param plotState  collects information about the plot ({@code null}\n     *                   permitted).\n     *\n     * @return The updated axis state (never {@code null}).\n     */\n",
"org.jfree.chart.axis.CategoryAxis.refreshTicks": "/**\n     * Creates a temporary list of ticks that can be used when drawing the axis.\n     *\n     * @param g2  the graphics device (used to get font measurements).\n     * @param state  the axis state.\n     * @param dataArea  the area inside the axes.\n     * @param edge  the location of the axis.\n     *\n     * @return A list of ticks.\n     */\n",
"org.jfree.chart.axis.CategoryAxis.drawTickMarks": "/**\n     * Draws the tick marks.\n     * \n     * @param g2  the graphics target.\n     * @param cursor  the cursor position (an offset when drawing multiple axes)\n     * @param dataArea  the area for plotting the data.\n     * @param edge  the location of the axis.\n     * @param state  the axis state.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.axis.CategoryAxis.createLabel": "/**\n     * Creates a label.\n     *\n     * @param category  the category.\n     * @param width  the available width.\n     * @param edge  the edge on which the axis appears.\n     * @param g2  the graphics device.\n     *\n     * @return A label.\n     */\n",
"org.jfree.chart.axis.CategoryAxis.calculateTextBlockWidth": "/**\n     * A utility method for determining the width of a text block.\n     *\n     * @param block  the text block.\n     * @param position  the position.\n     * @param g2  the graphics device.\n     *\n     * @return The width.\n     */\n",
"org.jfree.chart.axis.CategoryAxis.calculateTextBlockHeight": "/**\n     * A utility method for determining the height of a text block.\n     *\n     * @param block  the text block.\n     * @param position  the label position.\n     * @param g2  the graphics device.\n     *\n     * @return The height.\n     */\n",
"org.jfree.chart.axis.CategoryAxis.clone": "/**\n     * Creates a clone of the axis.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if some component of the axis does\n     *         not support cloning.\n     */\n",
"org.jfree.chart.axis.CategoryAxis.equals": "/**\n     * Tests this axis for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.CategoryAxis.hashCode": "/**\n     * Returns a hash code for this object.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.axis.CategoryAxis.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.axis.CategoryAxis.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.axis.CategoryAxis.readPaintMap": "/**\n     * Reads a {@code Map} of ({@code Comparable}, {@code Paint})\n     * elements from a stream.\n     *\n     * @param in  the input stream.\n     *\n     * @return The map.\n     *\n     * @throws IOException\n     * @throws ClassNotFoundException\n     *\n     * @see #writePaintMap(Map, ObjectOutputStream)\n     */\n",
"org.jfree.chart.axis.CategoryAxis.writePaintMap": "/**\n     * Writes a map of ({@code Comparable}, {@code Paint})\n     * elements to a stream.\n     *\n     * @param map  the map ({@code null} permitted).\n     *\n     * @param out\n     * @throws IOException\n     *\n     * @see #readPaintMap(ObjectInputStream)\n     */\n",
"org.jfree.chart.axis.CategoryAxis.equalPaintMaps": "/**\n     * Tests two maps containing ({@code Comparable}, {@code Paint})\n     * elements for equality.\n     *\n     * @param map1  the first map ({@code null} not permitted).\n     * @param map2  the second map ({@code null} not permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.PeriodAxis.getFirst": "/**\n     * Returns the first time period in the axis range.\n     *\n     * @return The first time period (never {@code null}).\n     */\n",
"org.jfree.chart.axis.PeriodAxis.setFirst": "/**\n     * Sets the first time period in the axis range and sends an\n     * {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param first  the time period ({@code null} not permitted).\n     */\n",
"org.jfree.chart.axis.PeriodAxis.getLast": "/**\n     * Returns the last time period in the axis range.\n     *\n     * @return The last time period (never {@code null}).\n     */\n",
"org.jfree.chart.axis.PeriodAxis.setLast": "/**\n     * Sets the last time period in the axis range and sends an\n     * {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param last  the time period ({@code null} not permitted).\n     */\n",
"org.jfree.chart.axis.PeriodAxis.getTimeZone": "/**\n     * Returns the time zone used to convert the periods defining the axis\n     * range into absolute milliseconds.\n     *\n     * @return The time zone (never {@code null}).\n     */\n",
"org.jfree.chart.axis.PeriodAxis.setTimeZone": "/**\n     * Sets the time zone that is used to convert the time periods into\n     * absolute milliseconds.\n     *\n     * @param zone  the time zone ({@code null} not permitted).\n     */\n",
"org.jfree.chart.axis.PeriodAxis.getLocale": "/**\n     * Returns the locale for this axis.\n     *\n     * @return The locale (never ({@code null}).\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.axis.PeriodAxis.getAutoRangeTimePeriodClass": "/**\n     * Returns the class used to create the first and last time periods for\n     * the axis range when the auto-range flag is set to {@code true}.\n     *\n     * @return The class (never {@code null}).\n     */\n",
"org.jfree.chart.axis.PeriodAxis.setAutoRangeTimePeriodClass": "/**\n     * Sets the class used to create the first and last time periods for the\n     * axis range when the auto-range flag is set to {@code true} and\n     * sends an {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param c  the class ({@code null} not permitted).\n     */\n",
"org.jfree.chart.axis.PeriodAxis.getMajorTickTimePeriodClass": "/**\n     * Returns the class that controls the spacing of the major tick marks.\n     *\n     * @return The class (never {@code null}).\n     */\n",
"org.jfree.chart.axis.PeriodAxis.setMajorTickTimePeriodClass": "/**\n     * Sets the class that controls the spacing of the major tick marks, and\n     * sends an {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param c  the class (a subclass of {@link RegularTimePeriod} is\n     *           expected).\n     */\n",
"org.jfree.chart.axis.PeriodAxis.isMinorTickMarksVisible": "/**\n     * Returns the flag that controls whether or not minor tick marks\n     * are displayed for the axis.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.PeriodAxis.setMinorTickMarksVisible": "/**\n     * Sets the flag that controls whether or not minor tick marks\n     * are displayed for the axis, and sends a {@link AxisChangeEvent}\n     * to all registered listeners.\n     *\n     * @param visible  the flag.\n     */\n",
"org.jfree.chart.axis.PeriodAxis.getMinorTickTimePeriodClass": "/**\n     * Returns the class that controls the spacing of the minor tick marks.\n     *\n     * @return The class (never {@code null}).\n     */\n",
"org.jfree.chart.axis.PeriodAxis.setMinorTickTimePeriodClass": "/**\n     * Sets the class that controls the spacing of the minor tick marks, and\n     * sends an {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param c  the class (a subclass of {@link RegularTimePeriod} is\n     *           expected).\n     */\n",
"org.jfree.chart.axis.PeriodAxis.getMinorTickMarkStroke": "/**\n     * Returns the stroke used to display minor tick marks, if they are\n     * visible.\n     *\n     * @return A stroke (never {@code null}).\n     */\n",
"org.jfree.chart.axis.PeriodAxis.setMinorTickMarkStroke": "/**\n     * Sets the stroke used to display minor tick marks, if they are\n     * visible, and sends a {@link AxisChangeEvent} to all registered\n     * listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     */\n",
"org.jfree.chart.axis.PeriodAxis.getMinorTickMarkPaint": "/**\n     * Returns the paint used to display minor tick marks, if they are\n     * visible.\n     *\n     * @return A paint (never {@code null}).\n     */\n",
"org.jfree.chart.axis.PeriodAxis.setMinorTickMarkPaint": "/**\n     * Sets the paint used to display minor tick marks, if they are\n     * visible, and sends a {@link AxisChangeEvent} to all registered\n     * listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     */\n",
"org.jfree.chart.axis.PeriodAxis.getMinorTickMarkInsideLength": "/**\n     * Returns the inside length for the minor tick marks.\n     *\n     * @return The length.\n     */\n",
"org.jfree.chart.axis.PeriodAxis.setMinorTickMarkInsideLength": "/**\n     * Sets the inside length of the minor tick marks and sends an\n     * {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param length  the length.\n     */\n",
"org.jfree.chart.axis.PeriodAxis.getMinorTickMarkOutsideLength": "/**\n     * Returns the outside length for the minor tick marks.\n     *\n     * @return The length.\n     */\n",
"org.jfree.chart.axis.PeriodAxis.setMinorTickMarkOutsideLength": "/**\n     * Sets the outside length of the minor tick marks and sends an\n     * {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param length  the length.\n     */\n",
"org.jfree.chart.axis.PeriodAxis.getLabelInfo": "/**\n     * Returns an array of label info records.\n     *\n     * @return An array.\n     */\n",
"org.jfree.chart.axis.PeriodAxis.setLabelInfo": "/**\n     * Sets the array of label info records and sends an\n     * {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param info  the info.\n     */\n",
"org.jfree.chart.axis.PeriodAxis.setRange": "/**\n     * Sets the range for the axis, if requested, sends an\n     * {@link AxisChangeEvent} to all registered listeners.  As a side-effect,\n     * the auto-range flag is set to {@code false} (optional).\n     *\n     * @param range  the range ({@code null} not permitted).\n     * @param turnOffAutoRange  a flag that controls whether or not the auto\n     *                          range is turned off.\n     * @param notify  a flag that controls whether or not listeners are\n     *                notified.\n     */\n",
"org.jfree.chart.axis.PeriodAxis.configure": "/**\n     * Configures the axis to work with the current plot.  Override this method\n     * to perform any special processing (such as auto-rescaling).\n     */\n",
"org.jfree.chart.axis.PeriodAxis.reserveSpace": "/**\n     * Estimates the space (height or width) required to draw the axis.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot that the axis belongs to.\n     * @param plotArea  the area within which the plot (including axes) should\n     *                  be drawn.\n     * @param edge  the axis location.\n     * @param space  space already reserved.\n     *\n     * @return The space required to draw the axis (including pre-reserved\n     *         space).\n     */\n",
"org.jfree.chart.axis.PeriodAxis.draw": "/**\n     * Draws the axis on a Java 2D graphics device (such as the screen or a\n     * printer).\n     *\n     * @param g2  the graphics device ({@code null} not permitted).\n     * @param cursor  the cursor location (determines where to draw the axis).\n     * @param plotArea  the area within which the axes and plot should be drawn.\n     * @param dataArea  the area within which the data should be drawn.\n     * @param edge  the axis location ({@code null} not permitted).\n     * @param plotState  collects information about the plot\n     *                   ({@code null} permitted).\n     *\n     * @return The axis state (never {@code null}).\n     */\n",
"org.jfree.chart.axis.PeriodAxis.drawTickMarks": "/**\n     * Draws the tick marks for the axis.\n     *\n     * @param g2  the graphics device.\n     * @param state  the axis state.\n     * @param dataArea  the data area.\n     * @param edge  the edge.\n     */\n",
"org.jfree.chart.axis.PeriodAxis.drawTickMarksHorizontal": "/**\n     * Draws the major and minor tick marks for an axis that lies at the top or\n     * bottom of the plot.\n     *\n     * @param g2  the graphics device.\n     * @param state  the axis state.\n     * @param dataArea  the data area.\n     * @param edge  the edge.\n     */\n",
"org.jfree.chart.axis.PeriodAxis.drawTickMarksVertical": "/**\n     * Draws the tick marks for a vertical axis.\n     *\n     * @param g2  the graphics device.\n     * @param state  the axis state.\n     * @param dataArea  the data area.\n     * @param edge  the edge.\n     */\n",
"org.jfree.chart.axis.PeriodAxis.drawTickLabels": "/**\n     * Draws the tick labels for one \"band\" of time periods.\n     *\n     * @param band  the band index (zero-based).\n     * @param g2  the graphics device.\n     * @param state  the axis state.\n     * @param dataArea  the data area.\n     * @param edge  the edge where the axis is located.\n     *\n     * @return The updated axis state.\n     */\n",
"org.jfree.chart.axis.PeriodAxis.refreshTicks": "/**\n     * Calculates the positions of the ticks for the axis, storing the results\n     * in the tick list (ready for drawing).\n     *\n     * @param g2  the graphics device.\n     * @param state  the axis state.\n     * @param dataArea  the area inside the axes.\n     * @param edge  the edge on which the axis is located.\n     *\n     * @return The list of ticks.\n     */\n",
"org.jfree.chart.axis.PeriodAxis.valueToJava2D": "/**\n     * Converts a data value to a coordinate in Java2D space, assuming that the\n     * axis runs along one edge of the specified dataArea.\n     * <p>\n     * Note that it is possible for the coordinate to fall outside the area.\n     *\n     * @param value  the data value.\n     * @param area  the area for plotting the data.\n     * @param edge  the edge along which the axis lies.\n     *\n     * @return The Java2D coordinate.\n     */\n",
"org.jfree.chart.axis.PeriodAxis.java2DToValue": "/**\n     * Converts a coordinate in Java2D space to the corresponding data value,\n     * assuming that the axis runs along one edge of the specified dataArea.\n     *\n     * @param java2DValue  the coordinate in Java2D space.\n     * @param area  the area in which the data is plotted.\n     * @param edge  the edge along which the axis lies.\n     *\n     * @return The data value.\n     */\n",
"org.jfree.chart.axis.PeriodAxis.autoAdjustRange": "/**\n     * Rescales the axis to ensure that all data is visible.\n     */\n",
"org.jfree.chart.axis.PeriodAxis.equals": "/**\n     * Tests the axis for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.PeriodAxis.hashCode": "/**\n     * Returns a hash code for this object.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.axis.PeriodAxis.clone": "/**\n     * Returns a clone of the axis.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  this class is cloneable, but\n     *         subclasses may not be.\n     */\n",
"org.jfree.chart.axis.PeriodAxis.createInstance": "/**\n     * A utility method used to create a particular subclass of the\n     * {@link RegularTimePeriod} class that includes the specified millisecond,\n     * assuming the specified time zone.\n     *\n     * @param periodClass  the class.\n     * @param millisecond  the time.\n     * @param zone  the time zone.\n     * @param locale  the locale.\n     *\n     * @return The time period.\n     */\n",
"org.jfree.chart.axis.PeriodAxis.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.axis.PeriodAxis.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.axis.StandardTickUnitSource.getLargerTickUnit": "/**\n     * Returns a tick unit that is larger than the supplied unit.\n     *\n     * @param unit  the unit ({@code null} not permitted).\n     *\n     * @return A tick unit that is larger than the supplied unit.\n     */\n",
"org.jfree.chart.axis.StandardTickUnitSource.getCeilingTickUnit": "/**\n     * Returns the tick unit in the collection that is greater than or equal\n     * to (in size) the specified unit.\n     *\n     * @param unit  the unit ({@code null} not permitted).\n     *\n     * @return A unit from the collection.\n     */\n",
"org.jfree.chart.axis.StandardTickUnitSource.getCeilingTickUnit": "/**\n     * Returns the tick unit in the collection that is greater than or equal\n     * to the specified size.\n     *\n     * @param size  the size.\n     *\n     * @return A unit from the collection.\n     */\n",
"org.jfree.chart.axis.StandardTickUnitSource.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.axis.StandardTickUnitSource.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.title.TextTitle.getText": "/**\n     * Returns the title text.\n     *\n     * @return The text (never {@code null}).\n     *\n     * @see #setText(String)\n     */\n",
"org.jfree.chart.title.TextTitle.setText": "/**\n     * Sets the title to the specified text and sends a\n     * {@link TitleChangeEvent} to all registered listeners.\n     *\n     * @param text  the text ({@code null} not permitted).\n     */\n",
"org.jfree.chart.title.TextTitle.getTextAlignment": "/**\n     * Returns the text alignment.  This controls how the text is aligned\n     * within the title's bounds, whereas the title's horizontal alignment\n     * controls how the title's bounding rectangle is aligned within the\n     * drawing space.\n     *\n     * @return The text alignment.\n     */\n",
"org.jfree.chart.title.TextTitle.setTextAlignment": "/**\n     * Sets the text alignment and sends a {@link TitleChangeEvent} to\n     * all registered listeners.\n     *\n     * @param alignment  the alignment ({@code null} not permitted).\n     */\n",
"org.jfree.chart.title.TextTitle.getFont": "/**\n     * Returns the font used to display the title string.\n     *\n     * @return The font (never {@code null}).\n     *\n     * @see #setFont(Font)\n     */\n",
"org.jfree.chart.title.TextTitle.setFont": "/**\n     * Sets the font used to display the title string.  Registered listeners\n     * are notified that the title has been modified.\n     *\n     * @param font  the new font ({@code null} not permitted).\n     *\n     * @see #getFont()\n     */\n",
"org.jfree.chart.title.TextTitle.getPaint": "/**\n     * Returns the paint used to display the title string.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setPaint(Paint)\n     */\n",
"org.jfree.chart.title.TextTitle.setPaint": "/**\n     * Sets the paint used to display the title string.  Registered listeners\n     * are notified that the title has been modified.\n     *\n     * @param paint  the new paint ({@code null} not permitted).\n     *\n     * @see #getPaint()\n     */\n",
"org.jfree.chart.title.TextTitle.getBackgroundPaint": "/**\n     * Returns the background paint.\n     *\n     * @return The paint (possibly {@code null}).\n     */\n",
"org.jfree.chart.title.TextTitle.setBackgroundPaint": "/**\n     * Sets the background paint and sends a {@link TitleChangeEvent} to all\n     * registered listeners.  If you set this attribute to {@code null},\n     * no background is painted (which makes the title background transparent).\n     *\n     * @param paint  the background paint ({@code null} permitted).\n     */\n",
"org.jfree.chart.title.TextTitle.getToolTipText": "/**\n     * Returns the tool tip text.\n     *\n     * @return The tool tip text (possibly {@code null}).\n     */\n",
"org.jfree.chart.title.TextTitle.setToolTipText": "/**\n     * Sets the tool tip text to the specified text and sends a\n     * {@link TitleChangeEvent} to all registered listeners.\n     *\n     * @param text  the text ({@code null} permitted).\n     */\n",
"org.jfree.chart.title.TextTitle.getURLText": "/**\n     * Returns the URL text.\n     *\n     * @return The URL text (possibly {@code null}).\n     */\n",
"org.jfree.chart.title.TextTitle.setURLText": "/**\n     * Sets the URL text to the specified text and sends a\n     * {@link TitleChangeEvent} to all registered listeners.\n     *\n     * @param text  the text ({@code null} permitted).\n     */\n",
"org.jfree.chart.title.TextTitle.getExpandToFitSpace": "/**\n     * Returns the flag that controls whether or not the title expands to fit\n     * the available space.\n     *\n     * @return The flag.\n     */\n",
"org.jfree.chart.title.TextTitle.setExpandToFitSpace": "/**\n     * Sets the flag that controls whether the title expands to fit the\n     * available space, and sends a {@link TitleChangeEvent} to all registered\n     * listeners.\n     *\n     * @param expand  the flag.\n     */\n",
"org.jfree.chart.title.TextTitle.getMaximumLinesToDisplay": "/**\n     * Returns the maximum number of lines to display.\n     *\n     * @return The maximum.\n     *\n     * @since 1.0.10\n     *\n     * @see #setMaximumLinesToDisplay(int)\n     */\n",
"org.jfree.chart.title.TextTitle.setMaximumLinesToDisplay": "/**\n     * Sets the maximum number of lines to display and sends a\n     * {@link TitleChangeEvent} to all registered listeners.\n     *\n     * @param max  the maximum.\n     *\n     * @since 1.0.10.\n     *\n     * @see #getMaximumLinesToDisplay()\n     */\n",
"org.jfree.chart.title.TextTitle.arrange": "/**\n     * Arranges the contents of the block, within the given constraints, and\n     * returns the block size.\n     *\n     * @param g2  the graphics device.\n     * @param constraint  the constraint ({@code null} not permitted).\n     *\n     * @return The block size (in Java2D units, never {@code null}).\n     */\n",
"org.jfree.chart.title.TextTitle.arrangeNN": "/**\n     * Arranges the content for this title assuming no bounds on the width\n     * or the height, and returns the required size.  This will reflect the\n     * fact that a text title positioned on the left or right of a chart will\n     * be rotated by 90 degrees.\n     *\n     * @param g2  the graphics target.\n     *\n     * @return The content size.\n     *\n     * @since 1.0.9\n     */\n",
"org.jfree.chart.title.TextTitle.arrangeFN": "/**\n     * Arranges the content for this title assuming a fixed width and no bounds\n     * on the height, and returns the required size.  This will reflect the\n     * fact that a text title positioned on the left or right of a chart will\n     * be rotated by 90 degrees.\n     *\n     * @param g2  the graphics target.\n     * @param w  the width.\n     *\n     * @return The content size.\n     *\n     * @since 1.0.9\n     */\n",
"org.jfree.chart.title.TextTitle.arrangeRN": "/**\n     * Arranges the content for this title assuming a range constraint for the\n     * width and no bounds on the height, and returns the required size.  This\n     * will reflect the fact that a text title positioned on the left or right\n     * of a chart will be rotated by 90 degrees.\n     *\n     * @param g2  the graphics target.\n     * @param widthRange  the range for the width.\n     *\n     * @return The content size.\n     *\n     * @since 1.0.9\n     */\n",
"org.jfree.chart.title.TextTitle.arrangeRR": "/**\n     * Returns the content size for the title.  This will reflect the fact that\n     * a text title positioned on the left or right of a chart will be rotated\n     * 90 degrees.\n     *\n     * @param g2  the graphics device.\n     * @param widthRange  the width range.\n     * @param heightRange  the height range.\n     *\n     * @return The content size.\n     */\n",
"org.jfree.chart.title.TextTitle.draw": "/**\n     * Draws the title on a Java 2D graphics device (such as the screen or a\n     * printer).\n     *\n     * @param g2  the graphics device.\n     * @param area  the area allocated for the title.\n     */\n",
"org.jfree.chart.title.TextTitle.draw": "/**\n     * Draws the block within the specified area.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     * @param params  if this is an instance of {@link EntityBlockParams} it\n     *                is used to determine whether or not an\n     *                {@link EntityCollection} is returned by this method.\n     *\n     * @return An {@link EntityCollection} containing a chart entity for the\n     *         title, or {@code null}.\n     */\n",
"org.jfree.chart.title.TextTitle.drawHorizontal": "/**\n     * Draws a the title horizontally within the specified area.  This method\n     * will be called from the {@link #draw(Graphics2D, Rectangle2D) draw}\n     * method.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area for the title.\n     */\n",
"org.jfree.chart.title.TextTitle.drawVertical": "/**\n     * Draws a the title vertically within the specified area.  This method\n     * will be called from the {@link #draw(Graphics2D, Rectangle2D) draw}\n     * method.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area for the title.\n     */\n",
"org.jfree.chart.title.TextTitle.equals": "/**\n     * Tests this title for equality with another object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.title.TextTitle.hashCode": "/**\n     * Returns a hash code.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.title.TextTitle.clone": "/**\n     * Returns a clone of this object.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException never.\n     */\n",
"org.jfree.chart.title.TextTitle.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.title.TextTitle.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.title.DateTitle.setDateFormat": "/**\n     * Set the format of the date.\n     * <P>\n     * The date style should be one of:  {@code SHORT},\n     * {@code MEDIUM}, {@code LONG} or {@code FULL} (defined\n     * in {@code java.util.DateFormat}).\n     * <P>\n     * For the locale, you can use {@code Locale.getDefault()} for the\n     * default locale.\n     *\n     * @param style  the date style.\n     * @param locale  the locale.\n     */\n",
"org.jfree.chart.title.LegendGraphic.isShapeVisible": "/**\n     * Returns a flag that controls whether or not the shape\n     * is visible.\n     *\n     * @return A boolean.\n     *\n     * @see #setShapeVisible(boolean)\n     */\n",
"org.jfree.chart.title.LegendGraphic.setShapeVisible": "/**\n     * Sets a flag that controls whether or not the shape is\n     * visible.\n     *\n     * @param visible  the flag.\n     *\n     * @see #isShapeVisible()\n     */\n",
"org.jfree.chart.title.LegendGraphic.getShape": "/**\n     * Returns the shape.\n     *\n     * @return The shape.\n     *\n     * @see #setShape(Shape)\n     */\n",
"org.jfree.chart.title.LegendGraphic.setShape": "/**\n     * Sets the shape.\n     *\n     * @param shape  the shape.\n     *\n     * @see #getShape()\n     */\n",
"org.jfree.chart.title.LegendGraphic.isShapeFilled": "/**\n     * Returns a flag that controls whether or not the shapes\n     * are filled.\n     *\n     * @return A boolean.\n     *\n     * @see #setShapeFilled(boolean)\n     */\n",
"org.jfree.chart.title.LegendGraphic.setShapeFilled": "/**\n     * Sets a flag that controls whether or not the shape is\n     * filled.\n     *\n     * @param filled  the flag.\n     *\n     * @see #isShapeFilled()\n     */\n",
"org.jfree.chart.title.LegendGraphic.getFillPaint": "/**\n     * Returns the paint used to fill the shape.\n     *\n     * @return The fill paint.\n     *\n     * @see #setFillPaint(Paint)\n     */\n",
"org.jfree.chart.title.LegendGraphic.setFillPaint": "/**\n     * Sets the paint used to fill the shape.\n     *\n     * @param paint  the paint.\n     *\n     * @see #getFillPaint()\n     */\n",
"org.jfree.chart.title.LegendGraphic.getFillPaintTransformer": "/**\n     * Returns the transformer used when the fill paint is an instance of\n     * {@code GradientPaint}.\n     *\n     * @return The transformer (never {@code null}).\n     *\n     * @since 1.0.4.\n     *\n     * @see #setFillPaintTransformer(GradientPaintTransformer)\n     */\n",
"org.jfree.chart.title.LegendGraphic.setFillPaintTransformer": "/**\n     * Sets the transformer used when the fill paint is an instance of\n     * {@code GradientPaint}.\n     *\n     * @param transformer  the transformer ({@code null} not permitted).\n     *\n     * @since 1.0.4\n     *\n     * @see #getFillPaintTransformer()\n     */\n",
"org.jfree.chart.title.LegendGraphic.isShapeOutlineVisible": "/**\n     * Returns a flag that controls whether the shape outline is visible.\n     *\n     * @return A boolean.\n     *\n     * @see #setShapeOutlineVisible(boolean)\n     */\n",
"org.jfree.chart.title.LegendGraphic.setShapeOutlineVisible": "/**\n     * Sets a flag that controls whether or not the shape outline\n     * is visible.\n     *\n     * @param visible  the flag.\n     *\n     * @see #isShapeOutlineVisible()\n     */\n",
"org.jfree.chart.title.LegendGraphic.getOutlinePaint": "/**\n     * Returns the outline paint.\n     *\n     * @return The paint.\n     *\n     * @see #setOutlinePaint(Paint)\n     */\n",
"org.jfree.chart.title.LegendGraphic.setOutlinePaint": "/**\n     * Sets the outline paint.\n     *\n     * @param paint  the paint.\n     *\n     * @see #getOutlinePaint()\n     */\n",
"org.jfree.chart.title.LegendGraphic.getOutlineStroke": "/**\n     * Returns the outline stroke.\n     *\n     * @return The stroke.\n     *\n     * @see #setOutlineStroke(Stroke)\n     */\n",
"org.jfree.chart.title.LegendGraphic.setOutlineStroke": "/**\n     * Sets the outline stroke.\n     *\n     * @param stroke  the stroke.\n     *\n     * @see #getOutlineStroke()\n     */\n",
"org.jfree.chart.title.LegendGraphic.getShapeAnchor": "/**\n     * Returns the shape anchor.\n     *\n     * @return The shape anchor.\n     *\n     * @see #getShapeAnchor()\n     */\n",
"org.jfree.chart.title.LegendGraphic.setShapeAnchor": "/**\n     * Sets the shape anchor.  This defines a point on the shapes bounding\n     * rectangle that will be used to align the shape to a location.\n     *\n     * @param anchor  the anchor ({@code null} not permitted).\n     *\n     * @see #setShapeAnchor(RectangleAnchor)\n     */\n",
"org.jfree.chart.title.LegendGraphic.getShapeLocation": "/**\n     * Returns the shape location.\n     *\n     * @return The shape location.\n     *\n     * @see #setShapeLocation(RectangleAnchor)\n     */\n",
"org.jfree.chart.title.LegendGraphic.setShapeLocation": "/**\n     * Sets the shape location.  This defines a point within the drawing\n     * area that will be used to align the shape to.\n     *\n     * @param location  the location ({@code null} not permitted).\n     *\n     * @see #getShapeLocation()\n     */\n",
"org.jfree.chart.title.LegendGraphic.isLineVisible": "/**\n     * Returns the flag that controls whether or not the line is visible.\n     *\n     * @return A boolean.\n     *\n     * @see #setLineVisible(boolean)\n     */\n",
"org.jfree.chart.title.LegendGraphic.setLineVisible": "/**\n     * Sets the flag that controls whether or not the line is visible.\n     *\n     * @param visible  the flag.\n     *\n     * @see #isLineVisible()\n     */\n",
"org.jfree.chart.title.LegendGraphic.getLine": "/**\n     * Returns the line centered about (0, 0).\n     *\n     * @return The line.\n     *\n     * @see #setLine(Shape)\n     */\n",
"org.jfree.chart.title.LegendGraphic.setLine": "/**\n     * Sets the line.  A Shape is used here, because then you can use Line2D,\n     * GeneralPath or any other Shape to represent the line.\n     *\n     * @param line  the line.\n     *\n     * @see #getLine()\n     */\n",
"org.jfree.chart.title.LegendGraphic.getLinePaint": "/**\n     * Returns the line paint.\n     *\n     * @return The paint.\n     *\n     * @see #setLinePaint(Paint)\n     */\n",
"org.jfree.chart.title.LegendGraphic.setLinePaint": "/**\n     * Sets the line paint.\n     *\n     * @param paint  the paint.\n     *\n     * @see #getLinePaint()\n     */\n",
"org.jfree.chart.title.LegendGraphic.getLineStroke": "/**\n     * Returns the line stroke.\n     *\n     * @return The stroke.\n     *\n     * @see #setLineStroke(Stroke)\n     */\n",
"org.jfree.chart.title.LegendGraphic.setLineStroke": "/**\n     * Sets the line stroke.\n     *\n     * @param stroke  the stroke.\n     *\n     * @see #getLineStroke()\n     */\n",
"org.jfree.chart.title.LegendGraphic.arrange": "/**\n     * Arranges the contents of the block, within the given constraints, and\n     * returns the block size.\n     *\n     * @param g2  the graphics device.\n     * @param constraint  the constraint ({@code null} not permitted).\n     *\n     * @return The block size (in Java2D units, never {@code null}).\n     */\n",
"org.jfree.chart.title.LegendGraphic.arrangeNN": "/**\n     * Performs the layout with no constraint, so the content size is\n     * determined by the bounds of the shape and/or line drawn to represent\n     * the series.\n     *\n     * @param g2  the graphics device.\n     *\n     * @return  The content size.\n     */\n",
"org.jfree.chart.title.LegendGraphic.draw": "/**\n     * Draws the graphic item within the specified area.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     */\n",
"org.jfree.chart.title.LegendGraphic.draw": "/**\n     * Draws the block within the specified area.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     * @param params  ignored ({@code null} permitted).\n     *\n     * @return Always {@code null}.\n     */\n",
"org.jfree.chart.title.LegendGraphic.equals": "/**\n     * Tests this {@code LegendGraphic} instance for equality with an\n     * arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.title.LegendGraphic.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.title.LegendGraphic.clone": "/**\n     * Returns a clone of this {@code LegendGraphic} instance.\n     *\n     * @return A clone of this {@code LegendGraphic} instance.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning.\n     */\n",
"org.jfree.chart.title.LegendGraphic.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.title.LegendGraphic.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.title.LegendItemBlockContainer.getDataset": "/**\n     * Returns a reference to the dataset for the associated legend item.\n     *\n     * @return A dataset reference.\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.chart.title.LegendItemBlockContainer.getSeriesKey": "/**\n     * Returns the series key.\n     *\n     * @return The series key.\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.chart.title.LegendItemBlockContainer.getSeriesIndex": "/**\n     * Returns the series index.\n     *\n     * @return The series index.\n     */\n",
"org.jfree.chart.title.LegendItemBlockContainer.getToolTipText": "/**\n     * Returns the tool tip text.\n     *\n     * @return The tool tip text (possibly {@code null}).\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.title.LegendItemBlockContainer.setToolTipText": "/**\n     * Sets the tool tip text.\n     *\n     * @param text  the text ({@code null} permitted).\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.title.LegendItemBlockContainer.getURLText": "/**\n     * Returns the URL text.\n     *\n     * @return The URL text (possibly {@code null}).\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.title.LegendItemBlockContainer.setURLText": "/**\n     * Sets the URL text.\n     *\n     * @param text  the text ({@code null} permitted).\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.title.LegendItemBlockContainer.draw": "/**\n     * Draws the block within the specified area.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     * @param params  passed on to blocks within the container\n     *                ({@code null} permitted).\n     *\n     * @return An instance of {@link EntityBlockResult}, or {@code null}.\n     */\n",
"org.jfree.chart.title.ImageTitle.getImage": "/**\n     * Returns the image for the title.\n     *\n     * @return The image for the title (never {@code null}).\n     */\n",
"org.jfree.chart.title.ImageTitle.setImage": "/**\n     * Sets the image for the title and notifies registered listeners that the\n     * title has been modified.\n     *\n     * @param image  the new image ({@code null} not permitted).\n     */\n",
"org.jfree.chart.title.ImageTitle.arrange": "/**\n     * Arranges the contents of the block, within the given constraints, and\n     * returns the block size.\n     *\n     * @param g2  the graphics device.\n     * @param constraint  the constraint ({@code null} not permitted).\n     *\n     * @return The block size (in Java2D units, never {@code null}).\n     */\n",
"org.jfree.chart.title.ImageTitle.draw": "/**\n     * Draws the title on a Java 2D graphics device (such as the screen or a\n     * printer).\n     *\n     * @param g2  the graphics device.\n     * @param area  the area allocated for the title.\n     */\n",
"org.jfree.chart.title.ImageTitle.drawHorizontal": "/**\n     * Draws the title on a Java 2D graphics device (such as the screen or a\n     * printer).\n     *\n     * @param g2  the graphics device.\n     * @param chartArea  the area within which the title (and plot) should be\n     *                   drawn.\n     *\n     * @return The size of the area used by the title.\n     */\n",
"org.jfree.chart.title.ImageTitle.drawVertical": "/**\n     * Draws the title on a Java 2D graphics device (such as the screen or a\n     * printer).\n     *\n     * @param g2  the graphics device.\n     * @param chartArea  the area within which the title (and plot) should be\n     *                   drawn.\n     *\n     * @return The size of the area used by the title.\n     */\n",
"org.jfree.chart.title.ImageTitle.draw": "/**\n     * Draws the block within the specified area.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     * @param params  ignored ({@code null} permitted).\n     *\n     * @return Always {@code null}.\n     */\n",
"org.jfree.chart.title.ImageTitle.equals": "/**\n     * Tests this {@code ImageTitle} for equality with an arbitrary\n     * object.  Returns {@code true} if:\n     * <ul>\n     * <li>{@code obj} is an instance of {@code ImageTitle};\n     * <li>{@code obj} references the same image as this\n     *     {@code ImageTitle};\n     * <li>{@code super.equals(obj)} returns {@code true};\n     * </ul>\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.title.CompositeTitle.getBackgroundPaint": "/**\n     * Returns the background paint.\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.title.CompositeTitle.setBackgroundPaint": "/**\n     * Sets the background paint and sends a {@link TitleChangeEvent} to all\n     * registered listeners.  If you set this attribute to {@code null},\n     * no background is painted (which makes the title background transparent).\n     *\n     * @param paint  the background paint ({@code null} permitted).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.title.CompositeTitle.getContainer": "/**\n     * Returns the container holding the titles.\n     *\n     * @return The title container (never {@code null}).\n     */\n",
"org.jfree.chart.title.CompositeTitle.setTitleContainer": "/**\n     * Sets the title container.\n     *\n     * @param container  the container ({@code null} not permitted).\n     */\n",
"org.jfree.chart.title.CompositeTitle.arrange": "/**\n     * Arranges the contents of the block, within the given constraints, and\n     * returns the block size.\n     *\n     * @param g2  the graphics device.\n     * @param constraint  the constraint ({@code null} not permitted).\n     *\n     * @return The block size (in Java2D units, never {@code null}).\n     */\n",
"org.jfree.chart.title.CompositeTitle.draw": "/**\n     * Draws the title on a Java 2D graphics device (such as the screen or a\n     * printer).\n     *\n     * @param g2  the graphics device.\n     * @param area  the area allocated for the title.\n     */\n",
"org.jfree.chart.title.CompositeTitle.draw": "/**\n     * Draws the block within the specified area.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     * @param params  ignored ({@code null} permitted).\n     *\n     * @return Always {@code null}.\n     */\n",
"org.jfree.chart.title.CompositeTitle.equals": "/**\n     * Tests this title for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.title.CompositeTitle.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.title.CompositeTitle.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.getScale": "/**\n     * Returns the scale used to convert values to colors.\n     *\n     * @return The scale (never {@code null}).\n     *\n     * @see #setScale(PaintScale)\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.setScale": "/**\n     * Sets the scale and sends a {@link TitleChangeEvent} to all registered\n     * listeners.\n     *\n     * @param scale  the scale ({@code null} not permitted).\n     *\n     * @see #getScale()\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.getAxis": "/**\n     * Returns the axis for the paint scale.\n     *\n     * @return The axis (never {@code null}).\n     *\n     * @see #setAxis(ValueAxis)\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.setAxis": "/**\n     * Sets the axis for the paint scale and sends a {@link TitleChangeEvent}\n     * to all registered listeners.\n     *\n     * @param axis  the axis ({@code null} not permitted).\n     *\n     * @see #getAxis()\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.getAxisLocation": "/**\n     * Returns the axis location.\n     *\n     * @return The axis location (never {@code null}).\n     *\n     * @see #setAxisLocation(AxisLocation)\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.setAxisLocation": "/**\n     * Sets the axis location and sends a {@link TitleChangeEvent} to all\n     * registered listeners.\n     *\n     * @param location  the location ({@code null} not permitted).\n     *\n     * @see #getAxisLocation()\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.getAxisOffset": "/**\n     * Returns the offset between the axis and the paint strip.\n     *\n     * @return The offset between the axis and the paint strip.\n     *\n     * @see #setAxisOffset(double)\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.setAxisOffset": "/**\n     * Sets the offset between the axis and the paint strip and sends a\n     * {@link TitleChangeEvent} to all registered listeners.\n     *\n     * @param offset  the offset.\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.getStripWidth": "/**\n     * Returns the width of the paint strip, in Java2D units.\n     *\n     * @return The width of the paint strip.\n     *\n     * @see #setStripWidth(double)\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.setStripWidth": "/**\n     * Sets the width of the paint strip and sends a {@link TitleChangeEvent}\n     * to all registered listeners.\n     *\n     * @param width  the width.\n     *\n     * @see #getStripWidth()\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.isStripOutlineVisible": "/**\n     * Returns the flag that controls whether or not an outline is drawn\n     * around the paint strip.\n     *\n     * @return A boolean.\n     *\n     * @see #setStripOutlineVisible(boolean)\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.setStripOutlineVisible": "/**\n     * Sets the flag that controls whether or not an outline is drawn around\n     * the paint strip, and sends a {@link TitleChangeEvent} to all registered\n     * listeners.\n     *\n     * @param visible  the flag.\n     *\n     * @see #isStripOutlineVisible()\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.getStripOutlinePaint": "/**\n     * Returns the paint used to draw the outline of the paint strip.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setStripOutlinePaint(Paint)\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.setStripOutlinePaint": "/**\n     * Sets the paint used to draw the outline of the paint strip, and sends\n     * a {@link TitleChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getStripOutlinePaint()\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.getStripOutlineStroke": "/**\n     * Returns the stroke used to draw the outline around the paint strip.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setStripOutlineStroke(Stroke)\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.setStripOutlineStroke": "/**\n     * Sets the stroke used to draw the outline around the paint strip and\n     * sends a {@link TitleChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getStripOutlineStroke()\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.getBackgroundPaint": "/**\n     * Returns the background paint.\n     *\n     * @return The background paint.\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.setBackgroundPaint": "/**\n     * Sets the background paint and sends a {@link TitleChangeEvent} to all\n     * registered listeners.\n     *\n     * @param paint  the paint ({@code null} permitted).\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.getSubdivisionCount": "/**\n     * Returns the number of subdivisions used to draw the scale.\n     *\n     * @return The subdivision count.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.setSubdivisionCount": "/**\n     * Sets the subdivision count and sends a {@link TitleChangeEvent} to\n     * all registered listeners.\n     *\n     * @param count  the count.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.axisChanged": "/**\n     * Receives notification of an axis change event and responds by firing\n     * a title change event.\n     *\n     * @param event  the event.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.arrange": "/**\n     * Arranges the contents of the block, within the given constraints, and\n     * returns the block size.\n     *\n     * @param g2  the graphics device.\n     * @param constraint  the constraint ({@code null} not permitted).\n     *\n     * @return The block size (in Java2D units, never {@code null}).\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.arrangeRR": "/**\n     * Returns the content size for the title.  This will reflect the fact that\n     * a text title positioned on the left or right of a chart will be rotated\n     * 90 degrees.\n     *\n     * @param g2  the graphics device.\n     * @param widthRange  the width range.\n     * @param heightRange  the height range.\n     *\n     * @return The content size.\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.draw": "/**\n     * Draws the legend within the specified area.\n     *\n     * @param g2  the graphics target ({@code null} not permitted).\n     * @param area  the drawing area ({@code null} not permitted).\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.draw": "/**\n     * Draws the legend within the specified area.\n     *\n     * @param g2  the graphics target ({@code null} not permitted).\n     * @param area  the drawing area ({@code null} not permitted).\n     * @param params  drawing parameters (ignored here).\n     *\n     * @return {@code null}.\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.equals": "/**\n     * Tests this legend for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.title.PaintScaleLegend.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.title.Title.isVisible": "/**\n     * Returns a flag that controls whether or not the title should be\n     * drawn.  The default value is {@code true}.\n     *\n     * @return A boolean.\n     *\n     * @see #setVisible(boolean)\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.title.Title.setVisible": "/**\n     * Sets a flag that controls whether or not the title should be drawn, and\n     * sends a {@link TitleChangeEvent} to all registered listeners.\n     *\n     * @param visible  the new flag value.\n     *\n     * @see #isVisible()\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.title.Title.getPosition": "/**\n     * Returns the position of the title.\n     *\n     * @return The title position (never {@code null}).\n     */\n",
"org.jfree.chart.title.Title.setPosition": "/**\n     * Sets the position for the title and sends a {@link TitleChangeEvent} to\n     * all registered listeners.\n     *\n     * @param position  the position ({@code null} not permitted).\n     */\n",
"org.jfree.chart.title.Title.getHorizontalAlignment": "/**\n     * Returns the horizontal alignment of the title.\n     *\n     * @return The horizontal alignment (never {@code null}).\n     */\n",
"org.jfree.chart.title.Title.setHorizontalAlignment": "/**\n     * Sets the horizontal alignment for the title and sends a\n     * {@link TitleChangeEvent} to all registered listeners.\n     *\n     * @param alignment  the horizontal alignment ({@code null} not\n     *                   permitted).\n     */\n",
"org.jfree.chart.title.Title.getVerticalAlignment": "/**\n     * Returns the vertical alignment of the title.\n     *\n     * @return The vertical alignment (never {@code null}).\n     */\n",
"org.jfree.chart.title.Title.setVerticalAlignment": "/**\n     * Sets the vertical alignment for the title, and notifies any registered\n     * listeners of the change.\n     *\n     * @param alignment  the new vertical alignment (TOP, MIDDLE or BOTTOM,\n     *                   {@code null} not permitted).\n     */\n",
"org.jfree.chart.title.Title.getNotify": "/**\n     * Returns the flag that indicates whether or not the notification\n     * mechanism is enabled.\n     *\n     * @return The flag.\n     */\n",
"org.jfree.chart.title.Title.setNotify": "/**\n     * Sets the flag that indicates whether or not the notification mechanism\n     * is enabled.  There are certain situations (such as cloning) where you\n     * want to turn notification off temporarily.\n     *\n     * @param flag  the new value of the flag.\n     */\n",
"org.jfree.chart.title.Title.draw": "/**\n     * Draws the title on a Java 2D graphics device (such as the screen or a\n     * printer).\n     *\n     * @param g2  the graphics device.\n     * @param area  the area allocated for the title (subclasses should not\n     *              draw outside this area).\n     */\n",
"org.jfree.chart.title.Title.clone": "/**\n     * Returns a clone of the title.\n     * <P>\n     * One situation when this is useful is when editing the title properties -\n     * you can edit a clone, and then it is easier to cancel the changes if\n     * necessary.\n     *\n     * @return A clone of the title.\n     *\n     * @throws CloneNotSupportedException not thrown by this class, but it may\n     *         be thrown by subclasses.\n     */\n",
"org.jfree.chart.title.Title.addChangeListener": "/**\n     * Registers an object for notification of changes to the title.\n     *\n     * @param listener  the object that is being registered.\n     */\n",
"org.jfree.chart.title.Title.removeChangeListener": "/**\n     * Unregisters an object for notification of changes to the chart title.\n     *\n     * @param listener  the object that is being unregistered.\n     */\n",
"org.jfree.chart.title.Title.notifyListeners": "/**\n     * Notifies all registered listeners that the chart title has changed in\n     * some way.\n     *\n     * @param event  an object that contains information about the change to\n     *               the title.\n     */\n",
"org.jfree.chart.title.Title.equals": "/**\n     * Tests an object for equality with this title.\n     *\n     * @param obj  the object ({@code null} not permitted).\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.title.Title.hashCode": "/**\n     * Returns a hashcode for the title.\n     *\n     * @return The hashcode.\n     */\n",
"org.jfree.chart.title.Title.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.title.Title.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.title.LegendTitle.getSources": "/**\n     * Returns the legend item sources.\n     *\n     * @return The sources.\n     */\n",
"org.jfree.chart.title.LegendTitle.setSources": "/**\n     * Sets the legend item sources and sends a {@link TitleChangeEvent} to\n     * all registered listeners.\n     *\n     * @param sources  the sources ({@code null} not permitted).\n     */\n",
"org.jfree.chart.title.LegendTitle.getBackgroundPaint": "/**\n     * Returns the background paint.\n     *\n     * @return The background paint (possibly {@code null}).\n     */\n",
"org.jfree.chart.title.LegendTitle.setBackgroundPaint": "/**\n     * Sets the background paint for the legend and sends a\n     * {@link TitleChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} permitted).\n     */\n",
"org.jfree.chart.title.LegendTitle.getLegendItemGraphicEdge": "/**\n     * Returns the location of the shape within each legend item.\n     *\n     * @return The location (never {@code null}).\n     */\n",
"org.jfree.chart.title.LegendTitle.setLegendItemGraphicEdge": "/**\n     * Sets the location of the shape within each legend item.\n     *\n     * @param edge  the edge ({@code null} not permitted).\n     */\n",
"org.jfree.chart.title.LegendTitle.getLegendItemGraphicAnchor": "/**\n     * Returns the legend item graphic anchor.\n     *\n     * @return The graphic anchor (never {@code null}).\n     */\n",
"org.jfree.chart.title.LegendTitle.setLegendItemGraphicAnchor": "/**\n     * Sets the anchor point used for the graphic in each legend item.\n     *\n     * @param anchor  the anchor point ({@code null} not permitted).\n     */\n",
"org.jfree.chart.title.LegendTitle.getLegendItemGraphicLocation": "/**\n     * Returns the legend item graphic location.\n     *\n     * @return The location (never {@code null}).\n     */\n",
"org.jfree.chart.title.LegendTitle.setLegendItemGraphicLocation": "/**\n     * Sets the legend item graphic location.\n     *\n     * @param anchor  the anchor ({@code null} not permitted).\n     */\n",
"org.jfree.chart.title.LegendTitle.getLegendItemGraphicPadding": "/**\n     * Returns the padding that will be applied to each item graphic.\n     *\n     * @return The padding (never {@code null}).\n     */\n",
"org.jfree.chart.title.LegendTitle.setLegendItemGraphicPadding": "/**\n     * Sets the padding that will be applied to each item graphic in the\n     * legend and sends a {@link TitleChangeEvent} to all registered listeners.\n     *\n     * @param padding  the padding ({@code null} not permitted).\n     */\n",
"org.jfree.chart.title.LegendTitle.getItemFont": "/**\n     * Returns the item font.\n     *\n     * @return The font (never {@code null}).\n     */\n",
"org.jfree.chart.title.LegendTitle.setItemFont": "/**\n     * Sets the item font and sends a {@link TitleChangeEvent} to\n     * all registered listeners.\n     *\n     * @param font  the font ({@code null} not permitted).\n     */\n",
"org.jfree.chart.title.LegendTitle.getItemPaint": "/**\n     * Returns the item paint.\n     *\n     * @return The paint (never {@code null}).\n     */\n",
"org.jfree.chart.title.LegendTitle.setItemPaint": "/**\n     * Sets the item paint.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     */\n",
"org.jfree.chart.title.LegendTitle.getItemLabelPadding": "/**\n     * Returns the padding used for the items labels.\n     *\n     * @return The padding (never {@code null}).\n     */\n",
"org.jfree.chart.title.LegendTitle.setItemLabelPadding": "/**\n     * Sets the padding used for the item labels in the legend.\n     *\n     * @param padding  the padding ({@code null} not permitted).\n     */\n",
"org.jfree.chart.title.LegendTitle.getSortOrder": "/**\n     * Gets the order used to display legend items.\n     * \n     * @return The order (never {@code null}).\n     * @since 1.0.15\n     */\n",
"org.jfree.chart.title.LegendTitle.setSortOrder": "/**\n     * Sets the order used to display legend items.\n     * \n     * @param order Specifies ascending or descending order ({@code null}\n     *              not permitted).\n     * @since 1.0.15\n     */\n",
"org.jfree.chart.title.LegendTitle.fetchLegendItems": "/**\n     * Fetches the latest legend items.\n     */\n",
"org.jfree.chart.title.LegendTitle.createLegendItemBlock": "/**\n     * Creates a legend item block.\n     *\n     * @param item  the legend item.\n     *\n     * @return The block.\n     */\n",
"org.jfree.chart.title.LegendTitle.getItemContainer": "/**\n     * Returns the container that holds the legend items.\n     *\n     * @return The container for the legend items.\n     */\n",
"org.jfree.chart.title.LegendTitle.arrange": "/**\n     * Arranges the contents of the block, within the given constraints, and\n     * returns the block size.\n     *\n     * @param g2  the graphics device.\n     * @param constraint  the constraint ({@code null} not permitted).\n     *\n     * @return The block size (in Java2D units, never {@code null}).\n     */\n",
"org.jfree.chart.title.LegendTitle.draw": "/**\n     * Draws the title on a Java 2D graphics device (such as the screen or a\n     * printer).\n     *\n     * @param g2  the graphics device.\n     * @param area  the available area for the title.\n     */\n",
"org.jfree.chart.title.LegendTitle.draw": "/**\n     * Draws the block within the specified area.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     * @param params  ignored ({@code null} permitted).\n     *\n     * @return An {@link org.jfree.chart.block.EntityBlockResult} or\n     *         {@code null}.\n     */\n",
"org.jfree.chart.title.LegendTitle.getWrapper": "/**\n     * Returns the wrapper container, if any.\n     *\n     * @return The wrapper container (possibly {@code null}).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.title.LegendTitle.setWrapper": "/**\n     * Sets the wrapper container for the legend.\n     *\n     * @param wrapper  the wrapper container.\n     */\n",
"org.jfree.chart.title.LegendTitle.equals": "/**\n     * Tests this title for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.title.LegendTitle.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.title.LegendTitle.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.title.ShortTextTitle.arrange": "/**\n     * Performs a layout for this title, subject to the supplied constraint,\n     * and returns the dimensions required for the title (if the title\n     * cannot be displayed in the available space, this method will return\n     * zero width and height for the dimensions).\n     *\n     * @param g2  the graphics target.\n     * @param constraint  the layout constraints.\n     *\n     * @return The dimensions for the title.\n     */\n",
"org.jfree.chart.title.ShortTextTitle.arrangeNN": "/**\n     * Arranges the content for this title assuming no bounds on the width\n     * or the height, and returns the required size.\n     *\n     * @param g2  the graphics target.\n     *\n     * @return The content size.\n     */\n",
"org.jfree.chart.title.ShortTextTitle.arrangeRN": "/**\n     * Arranges the content for this title assuming a range constraint for the\n     * width and no bounds on the height, and returns the required size.\n     *\n     * @param g2  the graphics target.\n     * @param widthRange  the range for the width.\n     *\n     * @return The content size.\n     */\n",
"org.jfree.chart.title.ShortTextTitle.arrangeFN": "/**\n     * Arranges the content for this title assuming a fixed width and no bounds\n     * on the height, and returns the required size.  This will reflect the\n     * fact that a text title positioned on the left or right of a chart will\n     * be rotated by 90 degrees.\n     *\n     * @param g2  the graphics target.\n     * @param w  the width.\n     *\n     * @return The content size.\n     */\n",
"org.jfree.chart.title.ShortTextTitle.arrangeRR": "/**\n     * Returns the content size for the title.\n     *\n     * @param g2  the graphics device.\n     * @param widthRange  the width range.\n     * @param heightRange  the height range.\n     *\n     * @return The content size.\n     */\n",
"org.jfree.chart.title.ShortTextTitle.draw": "/**\n     * Draws the title using the current font and paint.\n     *\n     * @param g2  the graphics target.\n     * @param area  the title area.\n     * @param params  optional parameters (ignored here).\n     *\n     * @return {@code null}.\n     */\n",
"org.jfree.chart.imagemap.ImageMapUtils.writeImageMap": "/**\n     * Writes an image map to an output stream.\n     *\n     * @param writer  the writer ({@code null} not permitted).\n     * @param name  the map name ({@code null} not permitted).\n     * @param info  the chart rendering info ({@code null} not permitted).\n     *\n     * @throws java.io.IOException if there are any I/O errors.\n     */\n",
"org.jfree.chart.imagemap.ImageMapUtils.writeImageMap": "/**\n     * Writes an image map to an output stream.\n     *\n     * @param writer  the writer ({@code null} not permitted).\n     * @param name  the map name ({@code null} not permitted).\n     * @param info  the chart rendering info ({@code null} not permitted).\n     * @param useOverLibForToolTips  whether to use OverLIB for tooltips\n     *                               (http://www.bosrup.com/web/overlib/).\n     *\n     * @throws java.io.IOException if there are any I/O errors.\n     */\n",
"org.jfree.chart.imagemap.ImageMapUtils.writeImageMap": "/**\n     * Writes an image map to an output stream.\n     *\n     * @param writer  the writer ({@code null} not permitted).\n     * @param name  the map name ({@code null} not permitted).\n     * @param info  the chart rendering info ({@code null} not permitted).\n     * @param toolTipTagFragmentGenerator  a generator for the HTML fragment\n     *     that will contain the tooltip text ({@code null} not permitted\n     *     if {@code info} contains tooltip information).\n     * @param urlTagFragmentGenerator  a generator for the HTML fragment that\n     *     will contain the URL reference ({@code null} not permitted if\n     *     {@code info} contains URLs).\n     *\n     * @throws java.io.IOException if there are any I/O errors.\n     */\n",
"org.jfree.chart.imagemap.ImageMapUtils.getImageMap": "/**\n     * Creates an image map element that complies with the XHTML 1.0\n     * specification.\n     *\n     * @param name  the map name ({@code null} not permitted).\n     * @param info  the chart rendering info ({@code null} not permitted).\n     *\n     * @return The map element.\n     */\n",
"org.jfree.chart.imagemap.ImageMapUtils.getImageMap": "/**\n     * Creates an image map element that complies with the XHTML 1.0\n     * specification.\n     *\n     * @param name  the map name ({@code null} not permitted).\n     * @param info  the chart rendering info ({@code null} not permitted).\n     * @param toolTipTagFragmentGenerator  a generator for the HTML fragment\n     *     that will contain the tooltip text ({@code null} not permitted\n     *     if {@code info} contains tooltip information).\n     * @param urlTagFragmentGenerator  a generator for the HTML fragment that\n     *     will contain the URL reference ({@code null} not permitted if\n     *     {@code info} contains URLs).\n     *\n     * @return The map tag.\n     */\n",
"org.jfree.chart.imagemap.ImageMapUtils.htmlEscape": "/**\n     * Returns a string that is equivalent to the input string, but with\n     * special characters converted to HTML escape sequences.\n     *\n     * @param input  the string to escape ({@code null} not permitted).\n     *\n     * @return A string with characters escaped.\n     *\n     * @since 1.0.9\n     */\n",
"org.jfree.chart.imagemap.ImageMapUtils.javascriptEscape": "/**\n     * Returns a string that is equivalent to the input string, but with\n     * special characters converted to JavaScript escape sequences.\n     *\n     * @param input  the string to escape ({@code null} not permitted).\n     *\n     * @return A string with characters escaped.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator.generateToolTipFragment": "/**\n     * Generates a tooltip string to go in an HTML image map.\n     *\n     * @param toolTipText  the tooltip.\n     *\n     * @return The formatted HTML area tag attribute(s).\n     */\n",
"org.jfree.chart.imagemap.URLTagFragmentGenerator.generateURLFragment": "/**\n     * Generates a URL string to go in an HTML image map.\n     * <br><br>\n     * Note that the {@code urlText} will be created by a URL generator\n     * (such as {@link CategoryURLGenerator}, {@link PieURLGenerator},\n     * {@link XYURLGenerator} or {@link XYZURLGenerator}) and that generator is\n     * responsible for ensuring that the URL text is correctly escaped.\n     *\n     * @param urlText  the URL text (fully escaped).\n     *\n     * @return The formatted HTML area tag attribute(s).\n     */\n",
"org.jfree.chart.imagemap.ToolTipTagFragmentGenerator.generateToolTipFragment": "/**\n     * Generates a tooltip string to go in an HTML image map.  To allow for\n     * varying standards compliance among browsers, this method is expected\n     * to return an 'alt' attribute IN ADDITION TO whatever it does to create\n     * the tooltip (often a 'title' attribute).\n     * <br><br>\n     * Note that the {@code toolTipText} may have been generated from\n     * user-defined data, so care should be taken to filter/escape any\n     * characters that may corrupt the HTML tag.\n     *\n     * @param toolTipText  the tooltip.\n     *\n     * @return The formatted HTML area tag attribute(s).\n     */\n",
"org.jfree.chart.imagemap.StandardURLTagFragmentGenerator.generateURLFragment": "/**\n     * Generates a URL string to go in an HTML image map.\n     *\n     * @param urlText  the URL text (fully escaped).\n     *\n     * @return The formatted text\n     */\n",
"org.jfree.chart.imagemap.DynamicDriveToolTipTagFragmentGenerator.generateToolTipFragment": "/**\n     * Generates a tooltip string to go in an HTML image map.\n     *\n     * @param toolTipText  the tooltip.\n     *\n     * @return The formatted HTML area tag attribute(s).\n     */\n",
"org.jfree.chart.imagemap.OverLIBToolTipTagFragmentGenerator.generateToolTipFragment": "/**\n     * Generates a tooltip string to go in an HTML image map.\n     *\n     * @param toolTipText  the tooltip text.\n     *\n     * @return The formatted HTML area tag attribute(s).\n     */\n",
"org.jfree.chart.plot.CategoryMarker.getKey": "/**\n     * Returns the key.\n     *\n     * @return The key.\n     */\n",
"org.jfree.chart.plot.CategoryMarker.setKey": "/**\n     * Sets the key and sends a {@link MarkerChangeEvent} to all registered\n     * listeners.\n     *\n     * @param key  the key ({@code null} not permitted).\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.CategoryMarker.getDrawAsLine": "/**\n     * Returns the flag that controls whether the marker is drawn as a region\n     * or a line.\n     *\n     * @return A line.\n     */\n",
"org.jfree.chart.plot.CategoryMarker.setDrawAsLine": "/**\n     * Sets the flag that controls whether the marker is drawn as a region or\n     * as a line, and sends a {@link MarkerChangeEvent} to all registered\n     * listeners.\n     *\n     * @param drawAsLine  the flag.\n     */\n",
"org.jfree.chart.plot.CategoryMarker.equals": "/**\n     * Tests the marker for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.CompassPlot.getLabelType": "/**\n     * Returns the label type.  Defined by the constants: {@link #NO_LABELS}\n     * and {@link #VALUE_LABELS}.\n     *\n     * @return The label type.\n     *\n     * @see #setLabelType(int)\n     */\n",
"org.jfree.chart.plot.CompassPlot.setLabelType": "/**\n     * Sets the label type (either {@link #NO_LABELS} or {@link #VALUE_LABELS}.\n     *\n     * @param type  the type.\n     *\n     * @see #getLabelType()\n     */\n",
"org.jfree.chart.plot.CompassPlot.getLabelFont": "/**\n     * Returns the label font.\n     *\n     * @return The label font.\n     *\n     * @see #setLabelFont(Font)\n     */\n",
"org.jfree.chart.plot.CompassPlot.setLabelFont": "/**\n     * Sets the label font and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param font  the new label font.\n     *\n     * @see #getLabelFont()\n     */\n",
"org.jfree.chart.plot.CompassPlot.getRosePaint": "/**\n     * Returns the paint used to fill the outer circle of the compass.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setRosePaint(Paint)\n     */\n",
"org.jfree.chart.plot.CompassPlot.setRosePaint": "/**\n     * Sets the paint used to fill the outer circle of the compass,\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getRosePaint()\n     */\n",
"org.jfree.chart.plot.CompassPlot.getRoseCenterPaint": "/**\n     * Returns the paint used to fill the inner background area of the\n     * compass.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setRoseCenterPaint(Paint)\n     */\n",
"org.jfree.chart.plot.CompassPlot.setRoseCenterPaint": "/**\n     * Sets the paint used to fill the inner background area of the compass,\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getRoseCenterPaint()\n     */\n",
"org.jfree.chart.plot.CompassPlot.getRoseHighlightPaint": "/**\n     * Returns the paint used to draw the circles, symbols and labels on the\n     * compass.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setRoseHighlightPaint(Paint)\n     */\n",
"org.jfree.chart.plot.CompassPlot.setRoseHighlightPaint": "/**\n     * Sets the paint used to draw the circles, symbols and labels of the\n     * compass, and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getRoseHighlightPaint()\n     */\n",
"org.jfree.chart.plot.CompassPlot.getDrawBorder": "/**\n     * Returns a flag that controls whether or not a border is drawn.\n     *\n     * @return The flag.\n     *\n     * @see #setDrawBorder(boolean)\n     */\n",
"org.jfree.chart.plot.CompassPlot.setDrawBorder": "/**\n     * Sets a flag that controls whether or not a border is drawn.\n     *\n     * @param status  the flag status.\n     *\n     * @see #getDrawBorder()\n     */\n",
"org.jfree.chart.plot.CompassPlot.setSeriesPaint": "/**\n     * Sets the series paint.\n     *\n     * @param series  the series index.\n     * @param paint  the paint.\n     *\n     * @see #setSeriesOutlinePaint(int, Paint)\n     */\n",
"org.jfree.chart.plot.CompassPlot.setSeriesOutlinePaint": "/**\n     * Sets the series outline paint.\n     *\n     * @param series  the series index.\n     * @param p  the paint.\n     *\n     * @see #setSeriesPaint(int, Paint)\n     */\n",
"org.jfree.chart.plot.CompassPlot.setSeriesOutlineStroke": "/**\n     * Sets the series outline stroke.\n     *\n     * @param series  the series index.\n     * @param stroke  the stroke.\n     *\n     * @see #setSeriesOutlinePaint(int, Paint)\n     */\n",
"org.jfree.chart.plot.CompassPlot.setSeriesNeedle": "/**\n     * Sets the needle type.\n     *\n     * @param type  the type.\n     *\n     * @see #setSeriesNeedle(int, int)\n     */\n",
"org.jfree.chart.plot.CompassPlot.setSeriesNeedle": "/**\n     * Sets the needle for a series.  The needle type is one of the following:\n     * <ul>\n     * <li>0 = {@link ArrowNeedle};</li>\n     * <li>1 = {@link LineNeedle};</li>\n     * <li>2 = {@link LongNeedle};</li>\n     * <li>3 = {@link PinNeedle};</li>\n     * <li>4 = {@link PlumNeedle};</li>\n     * <li>5 = {@link PointerNeedle};</li>\n     * <li>6 = {@link ShipNeedle};</li>\n     * <li>7 = {@link WindNeedle};</li>\n     * <li>8 = {@link ArrowNeedle};</li>\n     * <li>9 = {@link MiddlePinNeedle};</li>\n     * </ul>\n     * @param index  the series index.\n     * @param type  the needle type.\n     *\n     * @see #setSeriesNeedle(int)\n     */\n",
"org.jfree.chart.plot.CompassPlot.setSeriesNeedle": "/**\n     * Sets the needle for a series and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param index  the series index.\n     * @param needle  the needle.\n     */\n",
"org.jfree.chart.plot.CompassPlot.getDatasets": "/**\n     * Returns an array of dataset references for the plot.\n     *\n     * @return The dataset for the plot, cast as a ValueDataset.\n     *\n     * @see #addDataset(ValueDataset)\n     */\n",
"org.jfree.chart.plot.CompassPlot.addDataset": "/**\n     * Adds a dataset to the compass.\n     *\n     * @param dataset  the new dataset ({@code null} ignored).\n     *\n     * @see #addDataset(ValueDataset, MeterNeedle)\n     */\n",
"org.jfree.chart.plot.CompassPlot.addDataset": "/**\n     * Adds a dataset to the compass.\n     *\n     * @param dataset  the new dataset ({@code null} ignored).\n     * @param needle  the needle ({@code null} permitted).\n     */\n",
"org.jfree.chart.plot.CompassPlot.draw": "/**\n     * Draws the plot on a Java 2D graphics device (such as the screen or a\n     * printer).\n     *\n     * @param g2  the graphics device.\n     * @param area  the area within which the plot should be drawn.\n     * @param anchor  the anchor point ({@code null} permitted).\n     * @param parentState  the state from the parent plot, if there is one.\n     * @param info  collects info about the drawing.\n     */\n",
"org.jfree.chart.plot.CompassPlot.getPlotType": "/**\n     * Returns a short string describing the type of plot.\n     *\n     * @return A string describing the plot.\n     */\n",
"org.jfree.chart.plot.CompassPlot.getLegendItems": "/**\n     * Returns the legend items for the plot.  For now, no legend is available\n     * - this method returns null.\n     *\n     * @return The legend items.\n     */\n",
"org.jfree.chart.plot.CompassPlot.zoom": "/**\n     * No zooming is implemented for compass plot, so this method is empty.\n     *\n     * @param percent  the zoom amount.\n     */\n",
"org.jfree.chart.plot.CompassPlot.getCompassFont": "/**\n     * Returns the font for the compass, adjusted for the size of the plot.\n     *\n     * @param radius the radius.\n     *\n     * @return The font.\n     */\n",
"org.jfree.chart.plot.CompassPlot.equals": "/**\n     * Tests an object for equality with this plot.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.CompassPlot.clone": "/**\n     * Returns a clone of the plot.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  this class will not throw this\n     *         exception, but subclasses (if any) might.\n     */\n",
"org.jfree.chart.plot.CompassPlot.setRevolutionDistance": "/**\n     * Sets the count to complete one revolution.  Can be arbitrarily set\n     * For degrees (the default) it is 360, for radians this is 2*Pi, etc\n     *\n     * @param size the count to complete one revolution.\n     *\n     * @see #getRevolutionDistance()\n     */\n",
"org.jfree.chart.plot.CompassPlot.getRevolutionDistance": "/**\n     * Gets the count to complete one revolution.\n     *\n     * @return The count to complete one revolution.\n     *\n     * @see #setRevolutionDistance(double)\n     */\n",
"org.jfree.chart.plot.CompassPlot.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.plot.CompassPlot.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.plot.Plot.getChart": "/**\n     * Returns the chart that this plot is assigned to.  This method can\n     * return {@code null} if the plot is not yet assigned to a plot, or if the\n     * plot is a subplot of another plot.\n     * \n     * @return The chart (possibly {@code null}).\n     * \n     * @since 1.0.20\n     */\n",
"org.jfree.chart.plot.Plot.setChart": "/**\n     * Sets the chart that the plot is assigned to.  This method is not \n     * intended for external use.\n     * \n     * @param chart  the chart ({@code null} permitted).\n     * \n     * @since 1.0.20\n     */\n",
"org.jfree.chart.plot.Plot.fetchElementHintingFlag": "/**\n     * Fetches the element hinting flag from the chart that this plot is \n     * assigned to.  If the plot is not assigned (directly or indirectly) to\n     * a chart instance, this method will return {@code false}.\n     * \n     * @return A boolean.\n     * \n     * @since 1.0.20\n     */\n",
"org.jfree.chart.plot.Plot.getDatasetGroup": "/**\n     * Returns the dataset group for the plot (not currently used).\n     *\n     * @return The dataset group.\n     *\n     * @see #setDatasetGroup(DatasetGroup)\n     */\n",
"org.jfree.chart.plot.Plot.setDatasetGroup": "/**\n     * Sets the dataset group (not currently used).\n     *\n     * @param group  the dataset group ({@code null} permitted).\n     *\n     * @see #getDatasetGroup()\n     */\n",
"org.jfree.chart.plot.Plot.getNoDataMessage": "/**\n     * Returns the string that is displayed when the dataset is empty or\n     * {@code null}.\n     *\n     * @return The 'no data' message ({@code null} possible).\n     *\n     * @see #setNoDataMessage(String)\n     * @see #getNoDataMessageFont()\n     * @see #getNoDataMessagePaint()\n     */\n",
"org.jfree.chart.plot.Plot.setNoDataMessage": "/**\n     * Sets the message that is displayed when the dataset is empty or\n     * {@code null}, and sends a {@link PlotChangeEvent} to all registered\n     * listeners.\n     *\n     * @param message  the message ({@code null} permitted).\n     *\n     * @see #getNoDataMessage()\n     */\n",
"org.jfree.chart.plot.Plot.getNoDataMessageFont": "/**\n     * Returns the font used to display the 'no data' message.\n     *\n     * @return The font (never {@code null}).\n     *\n     * @see #setNoDataMessageFont(Font)\n     * @see #getNoDataMessage()\n     */\n",
"org.jfree.chart.plot.Plot.setNoDataMessageFont": "/**\n     * Sets the font used to display the 'no data' message and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param font  the font ({@code null} not permitted).\n     *\n     * @see #getNoDataMessageFont()\n     */\n",
"org.jfree.chart.plot.Plot.getNoDataMessagePaint": "/**\n     * Returns the paint used to display the 'no data' message.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setNoDataMessagePaint(Paint)\n     * @see #getNoDataMessage()\n     */\n",
"org.jfree.chart.plot.Plot.setNoDataMessagePaint": "/**\n     * Sets the paint used to display the 'no data' message and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getNoDataMessagePaint()\n     */\n",
"org.jfree.chart.plot.Plot.getPlotType": "/**\n     * Returns a short string describing the plot type.\n     * <P>\n     * Note: this gets used in the chart property editing user interface,\n     * but there needs to be a better mechanism for identifying the plot type.\n     *\n     * @return A short string describing the plot type (never\n     *     {@code null}).\n     */\n",
"org.jfree.chart.plot.Plot.getParent": "/**\n     * Returns the parent plot (or {@code null} if this plot is not part\n     * of a combined plot).\n     *\n     * @return The parent plot.\n     *\n     * @see #setParent(Plot)\n     * @see #getRootPlot()\n     */\n",
"org.jfree.chart.plot.Plot.setParent": "/**\n     * Sets the parent plot.  This method is intended for internal use, you\n     * shouldn't need to call it directly.\n     *\n     * @param parent  the parent plot ({@code null} permitted).\n     *\n     * @see #getParent()\n     */\n",
"org.jfree.chart.plot.Plot.getRootPlot": "/**\n     * Returns the root plot.\n     *\n     * @return The root plot.\n     *\n     * @see #getParent()\n     */\n",
"org.jfree.chart.plot.Plot.isSubplot": "/**\n     * Returns {@code true} if this plot is part of a combined plot\n     * structure (that is, {@link #getParent()} returns a non-{@code null}\n     * value), and {@code false} otherwise.\n     *\n     * @return {@code true} if this plot is part of a combined plot\n     *         structure.\n     *\n     * @see #getParent()\n     */\n",
"org.jfree.chart.plot.Plot.getInsets": "/**\n     * Returns the insets for the plot area.\n     *\n     * @return The insets (never {@code null}).\n     *\n     * @see #setInsets(RectangleInsets)\n     */\n",
"org.jfree.chart.plot.Plot.setInsets": "/**\n     * Sets the insets for the plot and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param insets  the new insets ({@code null} not permitted).\n     *\n     * @see #getInsets()\n     * @see #setInsets(RectangleInsets, boolean)\n     */\n",
"org.jfree.chart.plot.Plot.setInsets": "/**\n     * Sets the insets for the plot and, if requested,  and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param insets  the new insets ({@code null} not permitted).\n     * @param notify  a flag that controls whether the registered listeners are\n     *                notified.\n     *\n     * @see #getInsets()\n     * @see #setInsets(RectangleInsets)\n     */\n",
"org.jfree.chart.plot.Plot.getBackgroundPaint": "/**\n     * Returns the background color of the plot area.\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setBackgroundPaint(Paint)\n     */\n",
"org.jfree.chart.plot.Plot.setBackgroundPaint": "/**\n     * Sets the background color of the plot area and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getBackgroundPaint()\n     */\n",
"org.jfree.chart.plot.Plot.getBackgroundAlpha": "/**\n     * Returns the alpha transparency of the plot area background.\n     *\n     * @return The alpha transparency.\n     *\n     * @see #setBackgroundAlpha(float)\n     */\n",
"org.jfree.chart.plot.Plot.setBackgroundAlpha": "/**\n     * Sets the alpha transparency of the plot area background, and notifies\n     * registered listeners that the plot has been modified.\n     *\n     * @param alpha the new alpha value (in the range 0.0f to 1.0f).\n     *\n     * @see #getBackgroundAlpha()\n     */\n",
"org.jfree.chart.plot.Plot.getDrawingSupplier": "/**\n     * Returns the drawing supplier for the plot.\n     *\n     * @return The drawing supplier (possibly {@code null}).\n     *\n     * @see #setDrawingSupplier(DrawingSupplier)\n     */\n",
"org.jfree.chart.plot.Plot.setDrawingSupplier": "/**\n     * Sets the drawing supplier for the plot and sends a\n     * {@link PlotChangeEvent} to all registered listeners.  The drawing\n     * supplier is responsible for supplying a limitless (possibly repeating)\n     * sequence of {@code Paint}, {@code Stroke} and\n     * {@code Shape} objects that the plot's renderer(s) can use to\n     * populate its (their) tables.\n     *\n     * @param supplier  the new supplier.\n     *\n     * @see #getDrawingSupplier()\n     */\n",
"org.jfree.chart.plot.Plot.setDrawingSupplier": "/**\n     * Sets the drawing supplier for the plot and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.  The drawing\n     * supplier is responsible for supplying a limitless (possibly repeating)\n     * sequence of {@code Paint}, {@code Stroke} and\n     * {@code Shape} objects that the plot's renderer(s) can use to\n     * populate its (their) tables.\n     *\n     * @param supplier  the new supplier.\n     * @param notify  notify listeners?\n     *\n     * @see #getDrawingSupplier()\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.plot.Plot.getBackgroundImage": "/**\n     * Returns the background image that is used to fill the plot's background\n     * area.\n     *\n     * @return The image (possibly {@code null}).\n     *\n     * @see #setBackgroundImage(Image)\n     */\n",
"org.jfree.chart.plot.Plot.setBackgroundImage": "/**\n     * Sets the background image for the plot and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param image  the image ({@code null} permitted).\n     *\n     * @see #getBackgroundImage()\n     */\n",
"org.jfree.chart.plot.Plot.getBackgroundImageAlignment": "/**\n     * Returns the background image alignment. Alignment constants are defined\n     * in the {@code Align} class.\n     *\n     * @return The alignment.\n     *\n     * @see #setBackgroundImageAlignment(int)\n     */\n",
"org.jfree.chart.plot.Plot.setBackgroundImageAlignment": "/**\n     * Sets the alignment for the background image and sends a\n     * {@link PlotChangeEvent} to all registered listeners.  Alignment options\n     * are defined by the {@link org.jfree.chart.ui.Align} class.\n     *\n     * @param alignment  the alignment.\n     *\n     * @see #getBackgroundImageAlignment()\n     */\n",
"org.jfree.chart.plot.Plot.getBackgroundImageAlpha": "/**\n     * Returns the alpha transparency used to draw the background image.  This\n     * is a value in the range 0.0f to 1.0f, where 0.0f is fully transparent\n     * and 1.0f is fully opaque.\n     *\n     * @return The alpha transparency.\n     *\n     * @see #setBackgroundImageAlpha(float)\n     */\n",
"org.jfree.chart.plot.Plot.setBackgroundImageAlpha": "/**\n     * Sets the alpha transparency used when drawing the background image.\n     *\n     * @param alpha  the alpha transparency (in the range 0.0f to 1.0f, where\n     *     0.0f is fully transparent, and 1.0f is fully opaque).\n     *\n     * @throws IllegalArgumentException if {@code alpha} is not within\n     *     the specified range.\n     *\n     * @see #getBackgroundImageAlpha()\n     */\n",
"org.jfree.chart.plot.Plot.isOutlineVisible": "/**\n     * Returns the flag that controls whether or not the plot outline is\n     * drawn.  The default value is {@code true}.  Note that for\n     * historical reasons, the plot's outline paint and stroke can take on\n     * {@code null} values, in which case the outline will not be drawn\n     * even if this flag is set to {@code true}.\n     *\n     * @return The outline visibility flag.\n     *\n     * @since 1.0.6\n     *\n     * @see #setOutlineVisible(boolean)\n     */\n",
"org.jfree.chart.plot.Plot.setOutlineVisible": "/**\n     * Sets the flag that controls whether or not the plot's outline is\n     * drawn, and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param visible  the new flag value.\n     *\n     * @since 1.0.6\n     *\n     * @see #isOutlineVisible()\n     */\n",
"org.jfree.chart.plot.Plot.getOutlineStroke": "/**\n     * Returns the stroke used to outline the plot area.\n     *\n     * @return The stroke (possibly {@code null}).\n     *\n     * @see #setOutlineStroke(Stroke)\n     */\n",
"org.jfree.chart.plot.Plot.setOutlineStroke": "/**\n     * Sets the stroke used to outline the plot area and sends a\n     * {@link PlotChangeEvent} to all registered listeners. If you set this\n     * attribute to {@code null}, no outline will be drawn.\n     *\n     * @param stroke  the stroke ({@code null} permitted).\n     *\n     * @see #getOutlineStroke()\n     */\n",
"org.jfree.chart.plot.Plot.getOutlinePaint": "/**\n     * Returns the color used to draw the outline of the plot area.\n     *\n     * @return The color (possibly {@code null}).\n     *\n     * @see #setOutlinePaint(Paint)\n     */\n",
"org.jfree.chart.plot.Plot.setOutlinePaint": "/**\n     * Sets the paint used to draw the outline of the plot area and sends a\n     * {@link PlotChangeEvent} to all registered listeners.  If you set this\n     * attribute to {@code null}, no outline will be drawn.\n     *\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getOutlinePaint()\n     */\n",
"org.jfree.chart.plot.Plot.getForegroundAlpha": "/**\n     * Returns the alpha-transparency for the plot foreground.\n     *\n     * @return The alpha-transparency.\n     *\n     * @see #setForegroundAlpha(float)\n     */\n",
"org.jfree.chart.plot.Plot.setForegroundAlpha": "/**\n     * Sets the alpha-transparency for the plot and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param alpha  the new alpha transparency.\n     *\n     * @see #getForegroundAlpha()\n     */\n",
"org.jfree.chart.plot.Plot.getLegendItems": "/**\n     * Returns the legend items for the plot.  By default, this method returns\n     * {@code null}.  Subclasses should override to return a\n     * {@link LegendItemCollection}.\n     *\n     * @return The legend items for the plot (possibly {@code null}).\n     */\n",
"org.jfree.chart.plot.Plot.isNotify": "/**\n     * Returns a flag that controls whether or not change events are sent to\n     * registered listeners.\n     *\n     * @return A boolean.\n     *\n     * @see #setNotify(boolean)\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.Plot.setNotify": "/**\n     * Sets a flag that controls whether or not listeners receive\n     * {@link PlotChangeEvent} notifications.\n     *\n     * @param notify  a boolean.\n     *\n     * @see #isNotify()\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.Plot.addChangeListener": "/**\n     * Registers an object for notification of changes to the plot.\n     *\n     * @param listener  the object to be registered.\n     *\n     * @see #removeChangeListener(PlotChangeListener)\n     */\n",
"org.jfree.chart.plot.Plot.removeChangeListener": "/**\n     * Unregisters an object for notification of changes to the plot.\n     *\n     * @param listener  the object to be unregistered.\n     *\n     * @see #addChangeListener(PlotChangeListener)\n     */\n",
"org.jfree.chart.plot.Plot.notifyListeners": "/**\n     * Notifies all registered listeners that the plot has been modified.\n     *\n     * @param event  information about the change event.\n     */\n",
"org.jfree.chart.plot.Plot.fireChangeEvent": "/**\n     * Sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.plot.Plot.draw": "/**\n     * Draws the plot within the specified area.  The anchor is a point on the\n     * chart that is specified externally (for instance, it may be the last\n     * point of the last mouse click performed by the user) - plots can use or\n     * ignore this value as they see fit.\n     * <br><br>\n     * Subclasses need to provide an implementation of this method, obviously.\n     *\n     * @param g2  the graphics device.\n     * @param area  the plot area.\n     * @param anchor  the anchor point ({@code null} permitted).\n     * @param parentState  the parent state (if any, {@code null} permitted).\n     * @param info  carries back plot rendering info.\n     */\n",
"org.jfree.chart.plot.Plot.drawBackground": "/**\n     * Draws the plot background (the background color and/or image).\n     * <P>\n     * This method will be called during the chart drawing process and is\n     * declared public so that it can be accessed by the renderers used by\n     * certain subclasses.  You shouldn't need to call this method directly.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area within which the plot should be drawn.\n     */\n",
"org.jfree.chart.plot.Plot.fillBackground": "/**\n     * Fills the specified area with the background paint.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     *\n     * @see #getBackgroundPaint()\n     * @see #getBackgroundAlpha()\n     * @see #fillBackground(Graphics2D, Rectangle2D, PlotOrientation)\n     */\n",
"org.jfree.chart.plot.Plot.fillBackground": "/**\n     * Fills the specified area with the background paint.  If the background\n     * paint is an instance of {@code GradientPaint}, the gradient will\n     * run in the direction suggested by the plot's orientation.\n     *\n     * @param g2  the graphics target.\n     * @param area  the plot area.\n     * @param orientation  the plot orientation ({@code null} not\n     *         permitted).\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.chart.plot.Plot.drawBackgroundImage": "/**\n     * Draws the background image (if there is one) aligned within the\n     * specified area.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     *\n     * @see #getBackgroundImage()\n     * @see #getBackgroundImageAlignment()\n     * @see #getBackgroundImageAlpha()\n     */\n",
"org.jfree.chart.plot.Plot.drawOutline": "/**\n     * Draws the plot outline.  This method will be called during the chart\n     * drawing process and is declared public so that it can be accessed by the\n     * renderers used by certain subclasses. You shouldn't need to call this\n     * method directly.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area within which the plot should be drawn.\n     */\n",
"org.jfree.chart.plot.Plot.drawNoDataMessage": "/**\n     * Draws a message to state that there is no data to plot.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area within which the plot should be drawn.\n     */\n",
"org.jfree.chart.plot.Plot.createAndAddEntity": "/**\n     * Creates a plot entity that contains a reference to the plot and the\n     * data area as shape.\n     *\n     * @param dataArea  the data area used as hot spot for the entity.\n     * @param plotState  the plot rendering info containing a reference to the\n     *     EntityCollection.\n     * @param toolTip  the tool tip (defined in the respective Plot\n     *     subclass) ({@code null} permitted).\n     * @param urlText  the url (defined in the respective Plot subclass)\n     *     ({@code null} permitted).\n     *\n     *  @since 1.0.13\n     */\n",
"org.jfree.chart.plot.Plot.handleClick": "/**\n     * Handles a 'click' on the plot.  Since the plot does not maintain any\n     * information about where it has been drawn, the plot rendering info is\n     * supplied as an argument so that the plot dimensions can be determined.\n     *\n     * @param x  the x coordinate (in Java2D space).\n     * @param y  the y coordinate (in Java2D space).\n     * @param info  an object containing information about the dimensions of\n     *              the plot.\n     */\n",
"org.jfree.chart.plot.Plot.zoom": "/**\n     * Performs a zoom on the plot.  Subclasses should override if zooming is\n     * appropriate for the type of plot.\n     *\n     * @param percent  the zoom percentage.\n     */\n",
"org.jfree.chart.plot.Plot.annotationChanged": "/**\n     * Receives notification of a change to an {@link Annotation} added to\n     * this plot.\n     *\n     * @param event  information about the event (not used here).\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.Plot.axisChanged": "/**\n     * Receives notification of a change to one of the plot's axes.\n     *\n     * @param event  information about the event (not used here).\n     */\n",
"org.jfree.chart.plot.Plot.datasetChanged": "/**\n     * Receives notification of a change to the plot's dataset.\n     * <P>\n     * The plot reacts by passing on a plot change event to all registered\n     * listeners.\n     *\n     * @param event  information about the event (not used here).\n     */\n",
"org.jfree.chart.plot.Plot.markerChanged": "/**\n     * Receives notification of a change to a marker that is assigned to the\n     * plot.\n     *\n     * @param event  the event.\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.Plot.getRectX": "/**\n     * Adjusts the supplied x-value.\n     *\n     * @param x  the x-value.\n     * @param w1  width 1.\n     * @param w2  width 2.\n     * @param edge  the edge (left or right).\n     *\n     * @return The adjusted x-value.\n     */\n",
"org.jfree.chart.plot.Plot.getRectY": "/**\n     * Adjusts the supplied y-value.\n     *\n     * @param y  the x-value.\n     * @param h1  height 1.\n     * @param h2  height 2.\n     * @param edge  the edge (top or bottom).\n     *\n     * @return The adjusted y-value.\n     */\n",
"org.jfree.chart.plot.Plot.equals": "/**\n     * Tests this plot for equality with another object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.plot.Plot.clone": "/**\n     * Creates a clone of the plot.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if some component of the plot does not\n     *         support cloning.\n     */\n",
"org.jfree.chart.plot.Plot.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.plot.Plot.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.plot.Plot.resolveDomainAxisLocation": "/**\n     * Resolves a domain axis location for a given plot orientation.\n     *\n     * @param location  the location ({@code null} not permitted).\n     * @param orientation  the orientation ({@code null} not permitted).\n     *\n     * @return The edge (never {@code null}).\n     */\n",
"org.jfree.chart.plot.Plot.resolveRangeAxisLocation": "/**\n     * Resolves a range axis location for a given plot orientation.\n     *\n     * @param location  the location ({@code null} not permitted).\n     * @param orientation  the orientation ({@code null} not permitted).\n     *\n     * @return The edge (never {@code null}).\n     */\n",
"org.jfree.chart.plot.CombinedRangeCategoryPlot.getGap": "/**\n     * Returns the space between subplots.\n     *\n     * @return The gap (in Java2D units).\n     */\n",
"org.jfree.chart.plot.CombinedRangeCategoryPlot.setGap": "/**\n     * Sets the amount of space between subplots and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param gap  the gap between subplots (in Java2D units).\n     */\n",
"org.jfree.chart.plot.CombinedRangeCategoryPlot.add": "/**\n     * Adds a subplot (with a default 'weight' of 1) and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     * <br><br>\n     * You must ensure that the subplot has a non-null domain axis.  The range\n     * axis for the subplot will be set to {@code null}.\n     *\n     * @param subplot  the subplot ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.CombinedRangeCategoryPlot.add": "/**\n     * Adds a subplot and sends a {@link PlotChangeEvent} to all registered\n     * listeners.\n     * <br><br>\n     * You must ensure that the subplot has a non-null domain axis.  The range\n     * axis for the subplot will be set to {@code null}.\n     *\n     * @param subplot  the subplot ({@code null} not permitted).\n     * @param weight  the weight (must be &gt;= 1).\n     */\n",
"org.jfree.chart.plot.CombinedRangeCategoryPlot.remove": "/**\n     * Removes a subplot from the combined chart.\n     *\n     * @param subplot  the subplot ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.CombinedRangeCategoryPlot.getSubplots": "/**\n     * Returns the list of subplots.  The returned list may be empty, but is\n     * never {@code null}.\n     *\n     * @return An unmodifiable list of subplots.\n     */\n",
"org.jfree.chart.plot.CombinedRangeCategoryPlot.calculateAxisSpace": "/**\n     * Calculates the space required for the axes.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     *\n     * @return The space required for the axes.\n     */\n",
"org.jfree.chart.plot.CombinedRangeCategoryPlot.draw": "/**\n     * Draws the plot on a Java 2D graphics device (such as the screen or a\n     * printer).  Will perform all the placement calculations for each\n     * sub-plots and then tell these to draw themselves.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area within which the plot (including axis labels)\n     *              should be drawn.\n     * @param anchor  the anchor point ({@code null} permitted).\n     * @param parentState  the parent state.\n     * @param info  collects information about the drawing ({@code null}\n     *              permitted).\n     */\n",
"org.jfree.chart.plot.CombinedRangeCategoryPlot.setOrientation": "/**\n     * Sets the orientation for the plot (and all the subplots).\n     *\n     * @param orientation  the orientation.\n     */\n",
"org.jfree.chart.plot.CombinedRangeCategoryPlot.setShadowGenerator": "/**\n     * Sets the shadow generator for the plot (and all subplots) and sends\n     * a {@link PlotChangeEvent} to all registered listeners.\n     * \n     * @param generator  the new generator ({@code null} permitted).\n     */\n",
"org.jfree.chart.plot.CombinedRangeCategoryPlot.getDataRange": "/**\n     * Returns a range representing the extent of the data values in this plot\n     * (obtained from the subplots) that will be rendered against the specified\n     * axis.  NOTE: This method is intended for internal JFreeChart use, and\n     * is public only so that code in the axis classes can call it.  Since\n     * only the range axis is shared between subplots, the JFreeChart code\n     * will only call this method for the range values (although this is not\n     * checked/enforced).\n      *\n      * @param axis  the axis.\n      *\n      * @return The range.\n      */\n",
"org.jfree.chart.plot.CombinedRangeCategoryPlot.getLegendItems": "/**\n     * Returns a collection of legend items for the plot.\n     *\n     * @return The legend items.\n     */\n",
"org.jfree.chart.plot.CombinedRangeCategoryPlot.setFixedDomainAxisSpaceForSubplots": "/**\n     * Sets the size (width or height, depending on the orientation of the\n     * plot) for the domain axis of each subplot.\n     *\n     * @param space  the space.\n     */\n",
"org.jfree.chart.plot.CombinedRangeCategoryPlot.handleClick": "/**\n     * Handles a 'click' on the plot by updating the anchor value.\n     *\n     * @param x  x-coordinate of the click.\n     * @param y  y-coordinate of the click.\n     * @param info  information about the plot's dimensions.\n     *\n     */\n",
"org.jfree.chart.plot.CombinedRangeCategoryPlot.plotChanged": "/**\n     * Receives a {@link PlotChangeEvent} and responds by notifying all\n     * listeners.\n     *\n     * @param event  the event.\n     */\n",
"org.jfree.chart.plot.CombinedRangeCategoryPlot.equals": "/**\n     * Tests the plot for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.plot.CombinedRangeCategoryPlot.clone": "/**\n     * Returns a clone of the plot.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  this class will not throw this\n     *         exception, but subclasses (if any) might.\n     */\n",
"org.jfree.chart.plot.CombinedRangeCategoryPlot.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.plot.IntervalMarker.getStartValue": "/**\n     * Returns the start value for the interval.\n     *\n     * @return The start value.\n     */\n",
"org.jfree.chart.plot.IntervalMarker.setStartValue": "/**\n     * Sets the start value for the marker and sends a\n     * {@link MarkerChangeEvent} to all registered listeners.\n     *\n     * @param value  the value.\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.IntervalMarker.getEndValue": "/**\n     * Returns the end value for the interval.\n     *\n     * @return The end value.\n     */\n",
"org.jfree.chart.plot.IntervalMarker.setEndValue": "/**\n     * Sets the end value for the marker and sends a\n     * {@link MarkerChangeEvent} to all registered listeners.\n     *\n     * @param value  the value.\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.IntervalMarker.getGradientPaintTransformer": "/**\n     * Returns the gradient paint transformer.\n     *\n     * @return The gradient paint transformer (possibly {@code null}).\n     */\n",
"org.jfree.chart.plot.IntervalMarker.setGradientPaintTransformer": "/**\n     * Sets the gradient paint transformer and sends a\n     * {@link MarkerChangeEvent} to all registered listeners.\n     *\n     * @param transformer  the transformer ({@code null} permitted).\n     */\n",
"org.jfree.chart.plot.IntervalMarker.equals": "/**\n     * Tests the marker for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.IntervalMarker.clone": "/**\n     * Returns a clone of the marker.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException Not thrown by this class, but the\n     *         exception is declared for the use of subclasses.\n     */\n",
"org.jfree.chart.plot.WaferMapPlot.getPlotType": "/**\n     * Returns the plot type as a string.\n     *\n     * @return A short string describing the type of plot.\n     */\n",
"org.jfree.chart.plot.WaferMapPlot.getDataset": "/**\n     * Returns the dataset\n     *\n     * @return The dataset (possibly {@code null}).\n     */\n",
"org.jfree.chart.plot.WaferMapPlot.setDataset": "/**\n     * Sets the dataset used by the plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     */\n",
"org.jfree.chart.plot.WaferMapPlot.setRenderer": "/**\n     * Sets the item renderer, and notifies all listeners of a change to the\n     * plot.  If the renderer is set to {@code null}, no chart will be\n     * drawn.\n     *\n     * @param renderer  the new renderer ({@code null} permitted).\n     */\n",
"org.jfree.chart.plot.WaferMapPlot.draw": "/**\n     * Draws the wafermap view.\n     *\n     * @param g2  the graphics device.\n     * @param area  the plot area.\n     * @param anchor  the anchor point ({@code null} permitted).\n     * @param state  the plot state.\n     * @param info  the plot rendering info.\n     */\n",
"org.jfree.chart.plot.WaferMapPlot.drawChipGrid": "/**\n     * Calculates and draws the chip locations on the wafer.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     */\n",
"org.jfree.chart.plot.WaferMapPlot.getWaferEdge": "/**\n     * Calculates the location of the waferedge.\n     *\n     * @param plotArea  the plot area.\n     *\n     * @return The wafer edge.\n     */\n",
"org.jfree.chart.plot.WaferMapPlot.drawWaferEdge": "/**\n     * Draws the waferedge, including the notch.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     */\n",
"org.jfree.chart.plot.WaferMapPlot.getLegendItems": "/**\n     * Return the legend items from the renderer.\n     *\n     * @return The legend items.\n     */\n",
"org.jfree.chart.plot.WaferMapPlot.rendererChanged": "/**\n     * Notifies all registered listeners of a renderer change.\n     *\n     * @param event  the event.\n     */\n",
"org.jfree.chart.plot.PiePlotState.getPassesRequired": "/**\n     * Returns the number of passes required by the renderer.\n     *\n     * @return The number of passes.\n     */\n",
"org.jfree.chart.plot.PiePlotState.setPassesRequired": "/**\n     * Sets the number of passes required by the renderer.\n     *\n     * @param passes  the passes.\n     */\n",
"org.jfree.chart.plot.PiePlotState.getTotal": "/**\n     * Returns the total of the values in the dataset.\n     *\n     * @return The total.\n     */\n",
"org.jfree.chart.plot.PiePlotState.setTotal": "/**\n     * Sets the total.\n     *\n     * @param total  the total.\n     */\n",
"org.jfree.chart.plot.PiePlotState.getLatestAngle": "/**\n     * Returns the latest angle.\n     *\n     * @return The latest angle.\n     */\n",
"org.jfree.chart.plot.PiePlotState.setLatestAngle": "/**\n     * Sets the latest angle.\n     *\n     * @param angle  the angle.\n     */\n",
"org.jfree.chart.plot.PiePlotState.getPieArea": "/**\n     * Returns the pie area.\n     *\n     * @return The pie area.\n     */\n",
"org.jfree.chart.plot.PiePlotState.setPieArea": "/**\n     * Sets the pie area.\n     *\n     * @param area  the area.\n     */\n",
"org.jfree.chart.plot.PiePlotState.getExplodedPieArea": "/**\n     * Returns the exploded pie area.\n     *\n     * @return The exploded pie area.\n     */\n",
"org.jfree.chart.plot.PiePlotState.setExplodedPieArea": "/**\n     * Sets the exploded pie area.\n     *\n     * @param area  the area.\n     */\n",
"org.jfree.chart.plot.PiePlotState.getPieCenterX": "/**\n     * Returns the x-coordinate of the center of the pie chart.\n     *\n     * @return The x-coordinate (in Java2D space).\n     */\n",
"org.jfree.chart.plot.PiePlotState.setPieCenterX": "/**\n     * Sets the x-coordinate of the center of the pie chart.\n     *\n     * @param x  the x-coordinate (in Java2D space).\n     */\n",
"org.jfree.chart.plot.PiePlotState.getPieCenterY": "/**\n     * Returns the y-coordinate (in Java2D space) of the center of the pie\n     * chart.\n     *\n     * @return The y-coordinate (in Java2D space).\n     */\n",
"org.jfree.chart.plot.PiePlotState.setPieCenterY": "/**\n     * Sets the y-coordinate of the center of the pie chart.  This method is\n     * used by the plot and typically is not called directly by applications.\n     *\n     * @param y  the y-coordinate (in Java2D space).\n     */\n",
"org.jfree.chart.plot.PiePlotState.getLinkArea": "/**\n     * Returns the link area.  This defines the \"dog-leg\" point for the label\n     * linking lines.\n     *\n     * @return The link area.\n     */\n",
"org.jfree.chart.plot.PiePlotState.setLinkArea": "/**\n     * Sets the label link area.  This defines the \"dog-leg\" point for the\n     * label linking lines.\n     *\n     * @param area  the area.\n     */\n",
"org.jfree.chart.plot.PiePlotState.getPieHRadius": "/**\n     * Returns the vertical pie radius.\n     *\n     * @return The radius.\n     */\n",
"org.jfree.chart.plot.PiePlotState.setPieHRadius": "/**\n     * Sets the vertical pie radius.\n     *\n     * @param radius  the radius.\n     */\n",
"org.jfree.chart.plot.PiePlotState.getPieWRadius": "/**\n     * Returns the horizontal pie radius.\n     *\n     * @return The radius.\n     */\n",
"org.jfree.chart.plot.PiePlotState.setPieWRadius": "/**\n     * Sets the horizontal pie radius.\n     *\n     * @param radius  the radius.\n     */\n",
"org.jfree.chart.plot.CrosshairState.getCrosshairDistance": "/**\n     * Returns the distance between the anchor point and the current crosshair\n     * point.\n     *\n     * @return The distance.\n     *\n     * @see #setCrosshairDistance(double)\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.CrosshairState.setCrosshairDistance": "/**\n     * Sets the distance between the anchor point and the current crosshair\n     * point.  As each data point is processed, its distance to the anchor\n     * point is compared with this value and, if it is closer, the data point\n     * becomes the new crosshair point.\n     *\n     * @param distance  the distance.\n     *\n     * @see #getCrosshairDistance()\n     */\n",
"org.jfree.chart.plot.CrosshairState.updateCrosshairPoint": "/**\n     * Updates the crosshair point.\n     * \n     * @param x  the x-value.\n     * @param y  the y-value.\n     * @param datasetIndex  the dataset index.\n     * @param transX  the x-value in Java2D space.\n     * @param transY  the y-value in Java2D space.\n     * @param orientation  the plot orientation ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.CrosshairState.updateCrosshairX": "/**\n     * Checks to see if the specified data point is the closest to the\n     * anchor point and, if yes, updates the current state.\n     * \n     * @param x  the x-value.\n     * @param transX  the x-value in Java2D space.\n     * @param datasetIndex  the dataset index.\n     * \n     * @since 1.0.20\n     */\n",
"org.jfree.chart.plot.CrosshairState.updateCrosshairY": "/**\n     * Evaluates a y-value and if it is the closest to the anchor y-value it\n     * becomes the new crosshair value.\n     * <P>\n     * Used in cases where only the y-axis is numerical.\n     *\n     * @param candidateY  y position of the candidate for the new crosshair\n     *                    point.\n     * @param transY  the y-value in Java2D space.\n     * @param datasetIndex  the index of the range axis for this y-value.\n     *\n     * @since 1.0.20\n     */\n",
"org.jfree.chart.plot.CrosshairState.getAnchor": "/**\n     * Returns the anchor point.\n     *\n     * @return The anchor point.\n     *\n     * @see #setAnchor(Point2D)\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.CrosshairState.setAnchor": "/**\n     * Sets the anchor point.  This is usually the mouse click point in a chart\n     * panel, and the crosshair point will often be the data item that is\n     * closest to the anchor point.\n     * <br><br>\n     * Note that the x and y coordinates (in data space) are not updated by\n     * this method - the caller is responsible for ensuring that this happens\n     * in sync.\n     *\n     * @param anchor  the anchor point ({@code null} permitted).\n     *\n     * @see #getAnchor()\n     */\n",
"org.jfree.chart.plot.CrosshairState.getAnchorX": "/**\n     * Returns the x-coordinate (in data space) for the anchor point.\n     *\n     * @return The x-coordinate of the anchor point.\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.CrosshairState.setAnchorX": "/**\n     * Sets the x-coordinate (in data space) for the anchor point.  Note that\n     * this does NOT update the anchor itself - the caller is responsible for\n     * ensuring this is done in sync.\n     *\n     * @param x  the x-coordinate.\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.CrosshairState.getAnchorY": "/**\n     * Returns the y-coordinate (in data space) for the anchor point.\n     *\n     * @return The y-coordinate of teh anchor point.\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.CrosshairState.setAnchorY": "/**\n     * Sets the y-coordinate (in data space) for the anchor point.  Note that\n     * this does NOT update the anchor itself - the caller is responsible for\n     * ensuring this is done in sync.\n     *\n     * @param y  the y-coordinate.\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.CrosshairState.getCrosshairX": "/**\n     * Get the x-value for the crosshair point.\n     *\n     * @return The x position of the crosshair point.\n     *\n     * @see #setCrosshairX(double)\n     */\n",
"org.jfree.chart.plot.CrosshairState.setCrosshairX": "/**\n     * Sets the x coordinate for the crosshair.  This is the coordinate in data\n     * space measured against the domain axis.\n     *\n     * @param x the coordinate.\n     *\n     * @see #getCrosshairX()\n     * @see #setCrosshairY(double)\n     * @see #updateCrosshairPoint(double, double, int, double, double,\n     * PlotOrientation)\n     */\n",
"org.jfree.chart.plot.CrosshairState.getCrosshairY": "/**\n     * Get the y-value for the crosshair point.  This is the coordinate in data\n     * space measured against the range axis.\n     *\n     * @return The y position of the crosshair point.\n     *\n     * @see #setCrosshairY(double)\n     */\n",
"org.jfree.chart.plot.CrosshairState.setCrosshairY": "/**\n     * Sets the y coordinate for the crosshair.\n     *\n     * @param y  the y coordinate.\n     *\n     * @see #getCrosshairY()\n     * @see #setCrosshairX(double)\n     * @see #updateCrosshairPoint(double, double, int, double, double,\n     * PlotOrientation)\n     */\n",
"org.jfree.chart.plot.CrosshairState.getDatasetIndex": "/**\n     * Returns the dataset index that the crosshair values relate to.  The\n     * dataset is mapped to specific axes, and this is how the crosshairs are\n     * mapped also.\n     *\n     * @return The dataset index.\n     *\n     * @see #setDatasetIndex(int)\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.plot.CrosshairState.setDatasetIndex": "/**\n     * Sets the dataset index that the current crosshair values relate to.\n     *\n     * @param index  the dataset index.\n     *\n     * @see #getDatasetIndex()\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.plot.CombinedDomainCategoryPlot.getGap": "/**\n     * Returns the space between subplots.  The default value is 5.0.\n     *\n     * @return The gap (in Java2D units).\n     *\n     * @see #setGap(double)\n     */\n",
"org.jfree.chart.plot.CombinedDomainCategoryPlot.setGap": "/**\n     * Sets the amount of space between subplots and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param gap  the gap between subplots (in Java2D units).\n     *\n     * @see #getGap()\n     */\n",
"org.jfree.chart.plot.CombinedDomainCategoryPlot.add": "/**\n     * Adds a subplot to the combined chart and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     * <br><br>\n     * The domain axis for the subplot will be set to {@code null}.  You\n     * must ensure that the subplot has a non-null range axis.\n     *\n     * @param subplot  the subplot ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.CombinedDomainCategoryPlot.add": "/**\n     * Adds a subplot to the combined chart and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     * <br><br>\n     * The domain axis for the subplot will be set to {@code null}.  You\n     * must ensure that the subplot has a non-null range axis.\n     *\n     * @param subplot  the subplot ({@code null} not permitted).\n     * @param weight  the weight (must be &gt;= 1).\n     */\n",
"org.jfree.chart.plot.CombinedDomainCategoryPlot.remove": "/**\n     * Removes a subplot from the combined chart.  Potentially, this removes\n     * some unique categories from the overall union of the datasets...so the\n     * domain axis is reconfigured, then a {@link PlotChangeEvent} is sent to\n     * all registered listeners.\n     *\n     * @param subplot  the subplot ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.CombinedDomainCategoryPlot.getSubplots": "/**\n     * Returns the list of subplots.  The returned list may be empty, but is\n     * never {@code null}.\n     *\n     * @return An unmodifiable list of subplots.\n     */\n",
"org.jfree.chart.plot.CombinedDomainCategoryPlot.findSubplot": "/**\n     * Returns the subplot (if any) that contains the (x, y) point (specified\n     * in Java2D space).\n     *\n     * @param info  the chart rendering info ({@code null} not permitted).\n     * @param source  the source point ({@code null} not permitted).\n     *\n     * @return A subplot (possibly {@code null}).\n     */\n",
"org.jfree.chart.plot.CombinedDomainCategoryPlot.zoomRangeAxes": "/**\n     * Multiplies the range on the range axis/axes by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param info  the plot rendering info ({@code null} not permitted).\n     * @param source  the source point ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.CombinedDomainCategoryPlot.zoomRangeAxes": "/**\n     * Multiplies the range on the range axis/axes by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param info  the plot rendering info ({@code null} not permitted).\n     * @param source  the source point ({@code null} not permitted).\n     * @param useAnchor  zoom about the anchor point?\n     */\n",
"org.jfree.chart.plot.CombinedDomainCategoryPlot.zoomRangeAxes": "/**\n     * Zooms in on the range axes.\n     *\n     * @param lowerPercent  the lower bound.\n     * @param upperPercent  the upper bound.\n     * @param info  the plot rendering info ({@code null} not permitted).\n     * @param source  the source point ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.CombinedDomainCategoryPlot.calculateAxisSpace": "/**\n     * Calculates the space required for the axes.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     *\n     * @return The space required for the axes.\n     */\n",
"org.jfree.chart.plot.CombinedDomainCategoryPlot.draw": "/**\n     * Draws the plot on a Java 2D graphics device (such as the screen or a\n     * printer).  Will perform all the placement calculations for each of the\n     * sub-plots and then tell these to draw themselves.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area within which the plot (including axis labels)\n     *              should be drawn.\n     * @param anchor  the anchor point ({@code null} permitted).\n     * @param parentState  the state from the parent plot, if there is one.\n     * @param info  collects information about the drawing ({@code null}\n     *              permitted).\n     */\n",
"org.jfree.chart.plot.CombinedDomainCategoryPlot.setFixedRangeAxisSpaceForSubplots": "/**\n     * Sets the size (width or height, depending on the orientation of the\n     * plot) for the range axis of each subplot.\n     *\n     * @param space  the space ({@code null} permitted).\n     */\n",
"org.jfree.chart.plot.CombinedDomainCategoryPlot.setOrientation": "/**\n     * Sets the orientation of the plot (and all subplots).\n     *\n     * @param orientation  the orientation ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.CombinedDomainCategoryPlot.setShadowGenerator": "/**\n     * Sets the shadow generator for the plot (and all subplots) and sends\n     * a {@link PlotChangeEvent} to all registered listeners.\n     * \n     * @param generator  the new generator ({@code null} permitted).\n     */\n",
"org.jfree.chart.plot.CombinedDomainCategoryPlot.getDataRange": "/**\n     * Returns a range representing the extent of the data values in this plot\n     * (obtained from the subplots) that will be rendered against the specified\n     * axis.  NOTE: This method is intended for internal JFreeChart use, and\n     * is public only so that code in the axis classes can call it.  Since,\n     * for this class, the domain axis is a {@link CategoryAxis}\n     * (not a {@code ValueAxis}) and subplots have independent range axes,\n     * the JFreeChart code will never call this method (although this is not\n     * checked/enforced).\n      *\n      * @param axis  the axis.\n      *\n      * @return The range.\n      */\n",
"org.jfree.chart.plot.CombinedDomainCategoryPlot.getLegendItems": "/**\n     * Returns a collection of legend items for the plot.\n     *\n     * @return The legend items.\n     */\n",
"org.jfree.chart.plot.CombinedDomainCategoryPlot.getCategories": "/**\n     * Returns an unmodifiable list of the categories contained in all the\n     * subplots.\n     *\n     * @return The list.\n     */\n",
"org.jfree.chart.plot.CombinedDomainCategoryPlot.getCategoriesForAxis": "/**\n     * Overridden to return the categories in the subplots.\n     *\n     * @param axis  ignored.\n     *\n     * @return A list of the categories in the subplots.\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.CombinedDomainCategoryPlot.handleClick": "/**\n     * Handles a 'click' on the plot.\n     *\n     * @param x  x-coordinate of the click.\n     * @param y  y-coordinate of the click.\n     * @param info  information about the plot's dimensions.\n     *\n     */\n",
"org.jfree.chart.plot.CombinedDomainCategoryPlot.plotChanged": "/**\n     * Receives a {@link PlotChangeEvent} and responds by notifying all\n     * listeners.\n     *\n     * @param event  the event.\n     */\n",
"org.jfree.chart.plot.CombinedDomainCategoryPlot.equals": "/**\n     * Tests the plot for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.CombinedDomainCategoryPlot.clone": "/**\n     * Returns a clone of the plot.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  this class will not throw this\n     *         exception, but subclasses (if any) might.\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.getDataset": "/**\n     * Returns the dataset for the plot.\n     *\n     * @return The dataset (possibly {@code null}).\n     *\n     * @see #setDataset(ValueDataset)\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.setDataset": "/**\n     * Sets the dataset for the plot, replacing the existing dataset if there\n     * is one, and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @see #getDataset()\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.getRangeAxis": "/**\n     * Returns the range axis.\n     *\n     * @return The range axis (never {@code null}).\n     *\n     * @see #setRangeAxis(ValueAxis)\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.setRangeAxis": "/**\n     * Sets the range axis for the plot and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param axis  the new axis ({@code null} not permitted).\n     *\n     * @see #getRangeAxis()\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.getLowerBound": "/**\n     * Returns the lower bound for the thermometer.  The data value can be set\n     * lower than this, but it will not be shown in the thermometer.\n     *\n     * @return The lower bound.\n     *\n     * @see #setLowerBound(double)\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.setLowerBound": "/**\n     * Sets the lower bound for the thermometer.\n     *\n     * @param lower the lower bound.\n     *\n     * @see #getLowerBound()\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.getUpperBound": "/**\n     * Returns the upper bound for the thermometer.  The data value can be set\n     * higher than this, but it will not be shown in the thermometer.\n     *\n     * @return The upper bound.\n     *\n     * @see #setUpperBound(double)\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.setUpperBound": "/**\n     * Sets the upper bound for the thermometer.\n     *\n     * @param upper the upper bound.\n     *\n     * @see #getUpperBound()\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.setRange": "/**\n     * Sets the lower and upper bounds for the thermometer.\n     *\n     * @param lower  the lower bound.\n     * @param upper  the upper bound.\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.getPadding": "/**\n     * Returns the padding for the thermometer.  This is the space inside the\n     * plot area.\n     *\n     * @return The padding (never {@code null}).\n     *\n     * @see #setPadding(RectangleInsets)\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.setPadding": "/**\n     * Sets the padding for the thermometer and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param padding  the padding ({@code null} not permitted).\n     *\n     * @see #getPadding()\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.getThermometerStroke": "/**\n     * Returns the stroke used to draw the thermometer outline.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setThermometerStroke(Stroke)\n     * @see #getThermometerPaint()\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.setThermometerStroke": "/**\n     * Sets the stroke used to draw the thermometer outline and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param s  the new stroke ({@code null} ignored).\n     *\n     * @see #getThermometerStroke()\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.getThermometerPaint": "/**\n     * Returns the paint used to draw the thermometer outline.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setThermometerPaint(Paint)\n     * @see #getThermometerStroke()\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.setThermometerPaint": "/**\n     * Sets the paint used to draw the thermometer outline and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the new paint ({@code null} ignored).\n     *\n     * @see #getThermometerPaint()\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.getUnits": "/**\n     * Returns a code indicating the unit display type.  This is one of\n     * {@link #UNITS_NONE}, {@link #UNITS_FAHRENHEIT}, {@link #UNITS_CELCIUS}\n     * and {@link #UNITS_KELVIN}.\n     *\n     * @return The units type.\n     *\n     * @see #setUnits(int)\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.setUnits": "/**\n     * Sets the units to be displayed in the thermometer. Use one of the\n     * following constants:\n     *\n     * <ul>\n     * <li>UNITS_NONE : no units displayed.</li>\n     * <li>UNITS_FAHRENHEIT : units displayed in Fahrenheit.</li>\n     * <li>UNITS_CELCIUS : units displayed in Celcius.</li>\n     * <li>UNITS_KELVIN : units displayed in Kelvin.</li>\n     * </ul>\n     *\n     * @param u  the new unit type.\n     *\n     * @see #getUnits()\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.getValueLocation": "/**\n     * Returns a code indicating the location at which the value label is\n     * displayed.\n     *\n     * @return The location (one of {@link #NONE}, {@link #RIGHT},\n     *         {@link #LEFT} and {@link #BULB}.).\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.setValueLocation": "/**\n     * Sets the location at which the current value is displayed and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     * <P>\n     * The location can be one of the constants: {@code NONE}, {@code RIGHT},\n     * {@code LEFT} and {@code BULB}.\n     *\n     * @param location  the location.\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.getAxisLocation": "/**\n     * Returns the axis location.\n     *\n     * @return The location (one of {@link #NONE}, {@link #LEFT} and\n     *         {@link #RIGHT}).\n     *\n     * @see #setAxisLocation(int)\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.setAxisLocation": "/**\n     * Sets the location at which the axis is displayed relative to the\n     * thermometer, and sends a {@link PlotChangeEvent} to all registered\n     * listeners.\n     *\n     * @param location  the location (one of {@link #NONE}, {@link #LEFT} and\n     *         {@link #RIGHT}).\n     *\n     * @see #getAxisLocation()\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.getValueFont": "/**\n     * Gets the font used to display the current value.\n     *\n     * @return The font.\n     *\n     * @see #setValueFont(Font)\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.setValueFont": "/**\n     * Sets the font used to display the current value.\n     *\n     * @param f  the new font ({@code null} not permitted).\n     *\n     * @see #getValueFont()\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.getValuePaint": "/**\n     * Gets the paint used to display the current value.\n    *\n     * @return The paint.\n     *\n     * @see #setValuePaint(Paint)\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.setValuePaint": "/**\n     * Sets the paint used to display the current value and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the new paint ({@code null} not permitted).\n     *\n     * @see #getValuePaint()\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.setValueFormat": "/**\n     * Sets the formatter for the value label and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param formatter  the new formatter ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.getMercuryPaint": "/**\n     * Returns the default mercury paint.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setMercuryPaint(Paint)\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.setMercuryPaint": "/**\n     * Sets the default mercury paint and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param paint  the new paint ({@code null} not permitted).\n     *\n     * @see #getMercuryPaint()\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.setSubrangeInfo": "/**\n     * Sets information for a particular range.\n     *\n     * @param range  the range to specify information about.\n     * @param low  the low value for the range\n     * @param hi  the high value for the range\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.setSubrangeInfo": "/**\n     * Sets the subrangeInfo attribute of the ThermometerPlot object\n     *\n     * @param range  the new rangeInfo value.\n     * @param rangeLow  the new rangeInfo value\n     * @param rangeHigh  the new rangeInfo value\n     * @param displayLow  the new rangeInfo value\n     * @param displayHigh  the new rangeInfo value\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.setSubrange": "/**\n     * Sets the bounds for a subrange.\n     *\n     * @param range  the range type.\n     * @param low  the low value.\n     * @param high  the high value.\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.setDisplayRange": "/**\n     * Sets the displayed bounds for a sub range.\n     *\n     * @param range  the range type.\n     * @param low  the low value.\n     * @param high  the high value.\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.getSubrangePaint": "/**\n     * Gets the paint used for a particular subrange.\n     *\n     * @param range  the range (.\n     *\n     * @return The paint.\n     *\n     * @see #setSubrangePaint(int, Paint)\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.setSubrangePaint": "/**\n     * Sets the paint to be used for a subrange and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param range  the range (0, 1 or 2).\n     * @param paint  the paint to be applied ({@code null} not permitted).\n     *\n     * @see #getSubrangePaint(int)\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.getFollowDataInSubranges": "/**\n     * Returns a flag that controls whether or not the thermometer axis zooms\n     * to display the subrange within which the data value falls.\n     *\n     * @return The flag.\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.setFollowDataInSubranges": "/**\n     * Sets the flag that controls whether or not the thermometer axis zooms\n     * to display the subrange within which the data value falls.\n     *\n     * @param flag  the flag.\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.getUseSubrangePaint": "/**\n     * Returns a flag that controls whether or not the mercury color changes\n     * for each subrange.\n     *\n     * @return The flag.\n     *\n     * @see #setUseSubrangePaint(boolean)\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.setUseSubrangePaint": "/**\n     * Sets the range colour change option.\n     *\n     * @param flag the new range colour change option\n     *\n     * @see #getUseSubrangePaint()\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.getBulbRadius": "/**\n     * Returns the bulb radius, in Java2D units.\n\n     * @return The bulb radius.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.setBulbRadius": "/**\n     * Sets the bulb radius (in Java2D units) and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param r  the new radius (in Java2D units).\n     *\n     * @see #getBulbRadius()\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.getBulbDiameter": "/**\n     * Returns the bulb diameter, which is always twice the value returned\n     * by {@link #getBulbRadius()}.\n     *\n     * @return The bulb diameter.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.getColumnRadius": "/**\n     * Returns the column radius, in Java2D units.\n     *\n     * @return The column radius.\n     *\n     * @see #setColumnRadius(int)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.setColumnRadius": "/**\n     * Sets the column radius (in Java2D units) and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param r  the new radius.\n     *\n     * @see #getColumnRadius()\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.getColumnDiameter": "/**\n     * Returns the column diameter, which is always twice the value returned\n     * by {@link #getColumnRadius()}.\n     *\n     * @return The column diameter.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.getGap": "/**\n     * Returns the gap, in Java2D units, between the two outlines that\n     * represent the thermometer.\n     *\n     * @return The gap.\n     *\n     * @see #setGap(int)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.setGap": "/**\n     * Sets the gap (in Java2D units) between the two outlines that represent\n     * the thermometer, and sends a {@link PlotChangeEvent} to all registered\n     * listeners.\n     *\n     * @param gap  the new gap.\n     *\n     * @see #getGap()\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.draw": "/**\n     * Draws the plot on a Java 2D graphics device (such as the screen or a\n     * printer).\n     *\n     * @param g2  the graphics device.\n     * @param area  the area within which the plot should be drawn.\n     * @param anchor  the anchor point ({@code null} permitted).\n     * @param parentState  the state from the parent plot, if there is one.\n     * @param info  collects info about the drawing.\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.zoom": "/**\n     * A zoom method that does nothing.  Plots are required to support the\n     * zoom operation.  In the case of a thermometer chart, it doesn't make\n     * sense to zoom in or out, so the method is empty.\n     *\n     * @param percent  the zoom percentage.\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.getPlotType": "/**\n     * Returns a short string describing the type of plot.\n     *\n     * @return A short string describing the type of plot.\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.datasetChanged": "/**\n     * Checks to see if a new value means the axis range needs adjusting.\n     *\n     * @param event  the dataset change event.\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.getDataRange": "/**\n     * Returns the data range.\n     *\n     * @param axis  the axis.\n     *\n     * @return The range of data displayed.\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.setAxisRange": "/**\n     * Sets the axis range to the current values in the rangeInfo array.\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.getLegendItems": "/**\n     * Returns the legend items for the plot.\n     *\n     * @return {@code null}.\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.getOrientation": "/**\n     * Returns the orientation of the plot.\n     *\n     * @return The orientation (always {@link PlotOrientation#VERTICAL}).\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.isValidNumber": "/**\n     * Determine whether a number is valid and finite.\n     *\n     * @param d  the number to be tested.\n     *\n     * @return {@code true} if the number is valid and finite, and\n     *         {@code false} otherwise.\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.inSubrange": "/**\n     * Returns true if the value is in the specified range, and false otherwise.\n     *\n     * @param subrange  the subrange.\n     * @param value  the value to check.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.getCurrentPaint": "/**\n     * Returns the mercury paint corresponding to the current data value.\n     * Called from the {@link #draw(Graphics2D, Rectangle2D, Point2D,\n     * PlotState, PlotRenderingInfo)} method.\n     *\n     * @return The paint (never {@code null}).\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.equals": "/**\n     * Tests this plot for equality with another object.  The plot's dataset\n     * is not considered in the test.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.equal": "/**\n     * Tests two double[][] arrays for equality.\n     *\n     * @param array1  the first array ({@code null} permitted).\n     * @param array2  the second arrray ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.clone": "/**\n     * Returns a clone of the plot.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the plot cannot be cloned.\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.zoomDomainAxes": "/**\n     * Multiplies the range on the domain axis/axes by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param state  the plot state.\n     * @param source  the source point.\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.zoomDomainAxes": "/**\n     * Multiplies the range on the domain axis/axes by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param state  the plot state.\n     * @param source  the source point.\n     * @param useAnchor  a flag that controls whether or not the source point\n     *         is used for the zoom anchor.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.zoomRangeAxes": "/**\n     * Multiplies the range on the range axis/axes by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param state  the plot state.\n     * @param source  the source point.\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.zoomRangeAxes": "/**\n     * Multiplies the range on the range axis/axes by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param state  the plot state.\n     * @param source  the source point.\n     * @param useAnchor  a flag that controls whether or not the source point\n     *         is used for the zoom anchor.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.zoomDomainAxes": "/**\n     * This method does nothing.\n     *\n     * @param lowerPercent  the lower percent.\n     * @param upperPercent  the upper percent.\n     * @param state  the plot state.\n     * @param source  the source point.\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.zoomRangeAxes": "/**\n     * Zooms the range axes.\n     *\n     * @param lowerPercent  the lower percent.\n     * @param upperPercent  the upper percent.\n     * @param state  the plot state.\n     * @param source  the source point.\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.isDomainZoomable": "/**\n     * Returns {@code false}.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.ThermometerPlot.isRangeZoomable": "/**\n     * Returns {@code true}.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.DatasetRenderingOrder.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string (never {@code null}).\n     */\n",
"org.jfree.chart.plot.DatasetRenderingOrder.equals": "/**\n     * Returns {@code true} if this object is equal to the specified\n     * object, and {@code false} otherwise.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.DatasetRenderingOrder.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.plot.DatasetRenderingOrder.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     *\n     * @return The object.\n     *\n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.chart.plot.ValueAxisPlot.getDataRange": "/**\n     * Returns the data range that should apply for the specified axis.\n     *\n     * @param axis  the axis.\n     *\n     * @return The data range.\n     */\n",
"org.jfree.chart.plot.PieLabelDistributor.distributeLabels": "/**\n     * Distributes the labels.\n     *\n     * @param minY  the minimum y-coordinate in Java2D-space.\n     * @param height  the available height (in Java2D units).\n     */\n",
"org.jfree.chart.plot.PieLabelDistributor.isOverlap": "/**\n     * Returns {@code true} if there are overlapping labels in the list,\n     * and {@code false} otherwise.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.PieLabelDistributor.adjustInwards": "/**\n     * Adjusts the y-coordinate for the labels in towards the center in an\n     * attempt to fix overlapping.\n     */\n",
"org.jfree.chart.plot.PieLabelDistributor.adjustDownwards": "/**\n     * Any labels that are overlapping are moved down in an attempt to\n     * eliminate the overlaps.\n     *\n     * @param minY  the minimum y value (in Java2D coordinate space).\n     * @param height  the height available for all labels.\n     */\n",
"org.jfree.chart.plot.PieLabelDistributor.adjustUpwards": "/**\n     * Any labels that are overlapping are moved up in an attempt to eliminate\n     * the overlaps.\n     *\n     * @param minY  the minimum y value (in Java2D coordinate space).\n     * @param height  the height available for all labels.\n     */\n",
"org.jfree.chart.plot.PieLabelDistributor.spreadEvenly": "/**\n     * Labels are spaced evenly in the available space in an attempt to\n     * eliminate the overlaps.\n     *\n     * @param minY  the minimum y value (in Java2D coordinate space).\n     * @param height  the height available for all labels.\n     */\n",
"org.jfree.chart.plot.PieLabelDistributor.sort": "/**\n     * Sorts the label records into ascending order by y-value.\n     */\n",
"org.jfree.chart.plot.PieLabelDistributor.toString": "/**\n     * Returns a string containing a description of the object for\n     * debugging purposes.\n     *\n     * @return A string.\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getPlotType": "/**\n     * Returns a short string describing the type of plot.\n     *\n     * @return The plot type.\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getDataset": "/**\n     * Returns the dataset.\n     *\n     * @return The dataset (possibly {@code null}).\n     *\n     * @see #setDataset(CategoryDataset)\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.setDataset": "/**\n     * Sets the dataset used by the plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @see #getDataset()\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.isWebFilled": "/**\n     * Method to determine if the web chart is to be filled.\n     *\n     * @return A boolean.\n     *\n     * @see #setWebFilled(boolean)\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.setWebFilled": "/**\n     * Sets the webFilled flag and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #isWebFilled()\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getDataExtractOrder": "/**\n     * Returns the data extract order (by row or by column).\n     *\n     * @return The data extract order (never {@code null}).\n     *\n     * @see #setDataExtractOrder(TableOrder)\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.setDataExtractOrder": "/**\n     * Sets the data extract order (by row or by column) and sends a\n     * {@link PlotChangeEvent}to all registered listeners.\n     *\n     * @param order the order ({@code null} not permitted).\n     *\n     * @throws IllegalArgumentException if {@code order} is\n     *     {@code null}.\n     *\n     * @see #getDataExtractOrder()\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getHeadPercent": "/**\n     * Returns the head percent (the default value is 0.01).\n     *\n     * @return The head percent (always &gt; 0).\n     *\n     * @see #setHeadPercent(double)\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.setHeadPercent": "/**\n     * Sets the head percent and sends a {@link PlotChangeEvent} to all\n     * registered listeners.  Note that 0.10 is 10 percent.\n     *\n     * @param percent  the percent (must be greater than zero).\n     *\n     * @see #getHeadPercent()\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getStartAngle": "/**\n     * Returns the start angle for the first radar axis.\n     * <BR>\n     * This is measured in degrees starting from 3 o'clock (Java Arc2D default)\n     * and measuring anti-clockwise.\n     *\n     * @return The start angle.\n     *\n     * @see #setStartAngle(double)\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.setStartAngle": "/**\n     * Sets the starting angle and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     * <P>\n     * The initial default value is 90 degrees, which corresponds to 12 o'clock.\n     * A value of zero corresponds to 3 o'clock... this is the encoding used by\n     * Java's Arc2D class.\n     *\n     * @param angle  the angle (in degrees).\n     *\n     * @see #getStartAngle()\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getMaxValue": "/**\n     * Returns the maximum value any category axis can take.\n     *\n     * @return The maximum value.\n     *\n     * @see #setMaxValue(double)\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.setMaxValue": "/**\n     * Sets the maximum value any category axis can take and sends\n     * a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param value  the maximum value.\n     *\n     * @see #getMaxValue()\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getDirection": "/**\n     * Returns the direction in which the radar axes are drawn\n     * (clockwise or anti-clockwise).\n     *\n     * @return The direction (never {@code null}).\n     *\n     * @see #setDirection(Rotation)\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.setDirection": "/**\n     * Sets the direction in which the radar axes are drawn and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param direction  the direction ({@code null} not permitted).\n     *\n     * @see #getDirection()\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getInteriorGap": "/**\n     * Returns the interior gap, measured as a percentage of the available\n     * drawing space.\n     *\n     * @return The gap (as a percentage of the available drawing space).\n     *\n     * @see #setInteriorGap(double)\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.setInteriorGap": "/**\n     * Sets the interior gap and sends a {@link PlotChangeEvent} to all\n     * registered listeners. This controls the space between the edges of the\n     * plot and the plot area itself (the region where the axis labels appear).\n     *\n     * @param percent  the gap (as a percentage of the available drawing space).\n     *\n     * @see #getInteriorGap()\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getAxisLabelGap": "/**\n     * Returns the axis label gap.\n     *\n     * @return The axis label gap.\n     *\n     * @see #setAxisLabelGap(double)\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.setAxisLabelGap": "/**\n     * Sets the axis label gap and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param gap  the gap.\n     *\n     * @see #getAxisLabelGap()\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getAxisLinePaint": "/**\n     * Returns the paint used to draw the axis lines.\n     *\n     * @return The paint used to draw the axis lines (never {@code null}).\n     *\n     * @see #setAxisLinePaint(Paint)\n     * @see #getAxisLineStroke()\n     * @since 1.0.4\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.setAxisLinePaint": "/**\n     * Sets the paint used to draw the axis lines and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getAxisLinePaint()\n     * @since 1.0.4\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getAxisLineStroke": "/**\n     * Returns the stroke used to draw the axis lines.\n     *\n     * @return The stroke used to draw the axis lines (never {@code null}).\n     *\n     * @see #setAxisLineStroke(Stroke)\n     * @see #getAxisLinePaint()\n     * @since 1.0.4\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.setAxisLineStroke": "/**\n     * Sets the stroke used to draw the axis lines and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getAxisLineStroke()\n     * @since 1.0.4\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getSeriesPaint": "/**\n     * Returns the paint for ALL series in the plot.\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setSeriesPaint(Paint)\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.setSeriesPaint": "/**\n     * Sets the paint for ALL series in the plot.  If this is set to \n     * {@code null}, then a list of paints is used instead (to allow different \n     * colors to be used for each series of the radar group).\n     *\n     * @param paint the paint ({@code null} permitted).\n     *\n     * @see #getSeriesPaint()\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getSeriesPaint": "/**\n     * Returns the paint for the specified series.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setSeriesPaint(int, Paint)\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.setSeriesPaint": "/**\n     * Sets the paint used to fill a series of the radar and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getSeriesPaint(int)\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getBaseSeriesPaint": "/**\n     * Returns the base series paint. This is used when no other paint is\n     * available.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setBaseSeriesPaint(Paint)\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.setBaseSeriesPaint": "/**\n     * Sets the base series paint.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getBaseSeriesPaint()\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getSeriesOutlinePaint": "/**\n     * Returns the outline paint for ALL series in the plot.\n     *\n     * @return The paint (possibly {@code null}).\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.setSeriesOutlinePaint": "/**\n     * Sets the outline paint for ALL series in the plot. If this is set to\n     * {@code null}, then a list of paints is used instead (to allow\n     * different colors to be used for each series).\n     *\n     * @param paint  the paint ({@code null} permitted).\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getSeriesOutlinePaint": "/**\n     * Returns the paint for the specified series.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The paint (never {@code null}).\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.setSeriesOutlinePaint": "/**\n     * Sets the paint used to fill a series of the radar and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param paint  the paint ({@code null} permitted).\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getBaseSeriesOutlinePaint": "/**\n     * Returns the base series paint. This is used when no other paint is\n     * available.\n     *\n     * @return The paint (never {@code null}).\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.setBaseSeriesOutlinePaint": "/**\n     * Sets the base series paint.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getSeriesOutlineStroke": "/**\n     * Returns the outline stroke for ALL series in the plot.\n     *\n     * @return The stroke (possibly {@code null}).\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.setSeriesOutlineStroke": "/**\n     * Sets the outline stroke for ALL series in the plot. If this is set to\n     * {@code null}, then a list of paints is used instead (to allow\n     * different colors to be used for each series).\n     *\n     * @param stroke  the stroke ({@code null} permitted).\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getSeriesOutlineStroke": "/**\n     * Returns the stroke for the specified series.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The stroke (never {@code null}).\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.setSeriesOutlineStroke": "/**\n     * Sets the stroke used to fill a series of the radar and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param stroke  the stroke ({@code null} permitted).\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getBaseSeriesOutlineStroke": "/**\n     * Returns the base series stroke. This is used when no other stroke is\n     * available.\n     *\n     * @return The stroke (never {@code null}).\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.setBaseSeriesOutlineStroke": "/**\n     * Sets the base series stroke.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getLegendItemShape": "/**\n     * Returns the shape used for legend items.\n     *\n     * @return The shape (never {@code null}).\n     *\n     * @see #setLegendItemShape(Shape)\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.setLegendItemShape": "/**\n     * Sets the shape used for legend items and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param shape  the shape ({@code null} not permitted).\n     *\n     * @see #getLegendItemShape()\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getLabelFont": "/**\n     * Returns the series label font.\n     *\n     * @return The font (never {@code null}).\n     *\n     * @see #setLabelFont(Font)\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.setLabelFont": "/**\n     * Sets the series label font and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param font  the font ({@code null} not permitted).\n     *\n     * @see #getLabelFont()\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getLabelPaint": "/**\n     * Returns the series label paint.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setLabelPaint(Paint)\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.setLabelPaint": "/**\n     * Sets the series label paint and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getLabelPaint()\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getLabelGenerator": "/**\n     * Returns the label generator.\n     *\n     * @return The label generator (never {@code null}).\n     *\n     * @see #setLabelGenerator(CategoryItemLabelGenerator)\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.setLabelGenerator": "/**\n     * Sets the label generator and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param generator  the generator ({@code null} not permitted).\n     *\n     * @see #getLabelGenerator()\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getToolTipGenerator": "/**\n     * Returns the tool tip generator for the plot.\n     *\n     * @return The tool tip generator (possibly {@code null}).\n     *\n     * @see #setToolTipGenerator(CategoryToolTipGenerator)\n     *\n     * @since 1.0.2\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.setToolTipGenerator": "/**\n     * Sets the tool tip generator for the plot and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getToolTipGenerator()\n     *\n     * @since 1.0.2\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getURLGenerator": "/**\n     * Returns the URL generator for the plot.\n     *\n     * @return The URL generator (possibly {@code null}).\n     *\n     * @see #setURLGenerator(CategoryURLGenerator)\n     *\n     * @since 1.0.2\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.setURLGenerator": "/**\n     * Sets the URL generator for the plot and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getURLGenerator()\n     *\n     * @since 1.0.2\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getLegendItems": "/**\n     * Returns a collection of legend items for the spider web chart.\n     *\n     * @return The legend items (never {@code null}).\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getWebPoint": "/**\n     * Returns a cartesian point from a polar angle, length and bounding box\n     *\n     * @param bounds  the area inside which the point needs to be.\n     * @param angle  the polar angle, in degrees.\n     * @param length  the relative length. Given in percent of maximum extend.\n     *\n     * @return The cartesian point.\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.draw": "/**\n     * Draws the plot on a Java 2D graphics device (such as the screen or a\n     * printer).\n     *\n     * @param g2  the graphics device.\n     * @param area  the area within which the plot should be drawn.\n     * @param anchor  the anchor point ({@code null} permitted).\n     * @param parentState  the state from the parent plot, if there is one.\n     * @param info  collects info about the drawing.\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.calculateMaxValue": "/**\n     * loop through each of the series to get the maximum value\n     * on each category axis\n     *\n     * @param seriesCount  the number of series\n     * @param catCount  the number of categories\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.drawRadarPoly": "/**\n     * Draws a radar plot polygon.\n     *\n     * @param g2 the graphics device.\n     * @param plotArea the area we are plotting in (already adjusted).\n     * @param centre the centre point of the radar axes\n     * @param info chart rendering info.\n     * @param series the series within the dataset we are plotting\n     * @param catCount the number of categories per radar plot\n     * @param headH the data point height\n     * @param headW the data point width\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.getPlotValue": "/**\n     * Returns the value to be plotted at the intersection of the\n     * series and the category.  This allows us to plot\n     * {@code BY_ROW} or {@code BY_COLUMN} which basically is just\n     * reversing the definition of the categories and data series being\n     * plotted.\n     *\n     * @param series the series to be plotted.\n     * @param cat the category within the series to be plotted.\n     *\n     * @return The value to be plotted (possibly {@code null}).\n     *\n     * @see #getDataExtractOrder()\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.drawLabel": "/**\n     * Draws the label for one axis.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area\n     * @param value  the value of the label (ignored).\n     * @param cat  the category (zero-based index).\n     * @param startAngle  the starting angle.\n     * @param extent  the extent of the arc.\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.calculateLabelLocation": "/**\n     * Returns the location for a label\n     *\n     * @param labelBounds the label bounds.\n     * @param ascent the ascent (height of font).\n     * @param plotArea the plot area\n     * @param startAngle the start angle for the pie series.\n     *\n     * @return The location for a label.\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.equals": "/**\n     * Tests this plot for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.clone": "/**\n     * Returns a clone of this plot.\n     *\n     * @return A clone of this plot.\n     *\n     * @throws CloneNotSupportedException if the plot cannot be cloned for\n     *         any reason.\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.plot.SpiderWebPlot.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.plot.Zoomable.isDomainZoomable": "/**\n     * Returns {@code true} if the plot's domain is zoomable, and {@code false}\n     * otherwise.\n     *\n     * @return A boolean.\n     *\n     * @see #isRangeZoomable()\n     */\n",
"org.jfree.chart.plot.Zoomable.isRangeZoomable": "/**\n     * Returns {@code true} if the plot's range is zoomable, and {@code false} \n     * otherwise.\n     *\n     * @return A boolean.\n     *\n     * @see #isDomainZoomable()\n     */\n",
"org.jfree.chart.plot.Zoomable.getOrientation": "/**\n     * Returns the orientation of the plot.\n     *\n     * @return The orientation (never {@code null}).\n     */\n",
"org.jfree.chart.plot.Zoomable.zoomDomainAxes": "/**\n     * Multiplies the range on the domain axis/axes by the specified factor.\n     * The {@code source} point can be used in some cases to identify a\n     * subplot, or to determine the center of zooming (refer to the\n     * documentation of the implementing class for details).\n     *\n     * @param factor  the zoom factor.\n     * @param state  the plot state.\n     * @param source  the source point (in Java2D coordinates).\n     *\n     * @see #zoomRangeAxes(double, PlotRenderingInfo, Point2D)\n     */\n",
"org.jfree.chart.plot.Zoomable.zoomDomainAxes": "/**\n     * Multiplies the range on the domain axis/axes by the specified factor.\n     * The {@code source} point can be used in some cases to identify a\n     * subplot, or to determine the center of zooming (refer to the\n     * documentation of the implementing class for details).\n     *\n     * @param factor  the zoom factor.\n     * @param state  the plot state.\n     * @param source  the source point (in Java2D coordinates).\n     * @param useAnchor  use source point as zoom anchor?\n     *\n     * @see #zoomRangeAxes(double, PlotRenderingInfo, Point2D, boolean)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.Zoomable.zoomDomainAxes": "/**\n     * Zooms in on the domain axes.  The {@code source} point can be used\n     * in some cases to identify a subplot for zooming.\n     *\n     * @param lowerPercent  the new lower bound.\n     * @param upperPercent  the new upper bound.\n     * @param state  the plot state.\n     * @param source  the source point (in Java2D coordinates).\n     *\n     * @see #zoomRangeAxes(double, double, PlotRenderingInfo, Point2D)\n     */\n",
"org.jfree.chart.plot.Zoomable.zoomRangeAxes": "/**\n     * Multiplies the range on the range axis/axes by the specified factor.\n     * The {@code source} point can be used in some cases to identify a\n     * subplot, or to determine the center of zooming (refer to the\n     * documentation of the implementing class for details).\n     *\n     * @param factor  the zoom factor.\n     * @param state  the plot state.\n     * @param source  the source point (in Java2D coordinates).\n     *\n     * @see #zoomDomainAxes(double, PlotRenderingInfo, Point2D)\n     */\n",
"org.jfree.chart.plot.Zoomable.zoomRangeAxes": "/**\n     * Multiplies the range on the range axis/axes by the specified factor.\n     * The {@code source} point can be used in some cases to identify a\n     * subplot, or to determine the center of zooming (refer to the\n     * documentation of the implementing class for details).\n     *\n     * @param factor  the zoom factor.\n     * @param state  the plot state.\n     * @param source  the source point (in Java2D coordinates).\n     * @param useAnchor  use source point as zoom anchor?\n     *\n     * @see #zoomDomainAxes(double, PlotRenderingInfo, Point2D)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.Zoomable.zoomRangeAxes": "/**\n     * Zooms in on the range axes.  The {@code source} point can be used\n     * in some cases to identify a subplot for zooming.\n     *\n     * @param lowerPercent  the new lower bound.\n     * @param upperPercent  the new upper bound.\n     * @param state  the plot state.\n     * @param source  the source point (in Java2D coordinates).\n     *\n     * @see #zoomDomainAxes(double, double, PlotRenderingInfo, Point2D)\n     */\n",
"org.jfree.chart.plot.PieLabelLinkStyle.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.chart.plot.PieLabelLinkStyle.equals": "/**\n     * Returns {@code true} if this object is equal to the specified\n     * object, and {@code false} otherwise.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.PieLabelLinkStyle.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.plot.PieLabelLinkStyle.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     *\n     * @return The object.\n     *\n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.chart.plot.MeterInterval.getLabel": "/**\n     * Returns the label.\n     *\n     * @return The label (never {@code null}).\n     */\n",
"org.jfree.chart.plot.MeterInterval.getRange": "/**\n     * Returns the range.\n     *\n     * @return The range (never {@code null}).\n     */\n",
"org.jfree.chart.plot.MeterInterval.getBackgroundPaint": "/**\n     * Returns the background paint.  If {@code null}, the background\n     * should remain unfilled.\n     *\n     * @return The background paint (possibly {@code null}).\n     */\n",
"org.jfree.chart.plot.MeterInterval.getOutlinePaint": "/**\n     * Returns the outline paint.\n     *\n     * @return The outline paint (possibly {@code null}).\n     */\n",
"org.jfree.chart.plot.MeterInterval.getOutlineStroke": "/**\n     * Returns the outline stroke.\n     *\n     * @return The outline stroke (possibly {@code null}).\n     */\n",
"org.jfree.chart.plot.MeterInterval.equals": "/**\n     * Checks this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.MeterInterval.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.plot.MeterInterval.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getPlotType": "/**\n     * Returns a string describing the type of plot.\n     *\n     * @return The type.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getOrientation": "/**\n     * Returns the orientation of the plot.\n     *\n     * @return The orientation of the plot (never {@code null}).\n     *\n     * @see #setOrientation(PlotOrientation)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setOrientation": "/**\n     * Sets the orientation for the plot and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param orientation  the orientation ({@code null} not permitted).\n     *\n     * @see #getOrientation()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getAxisOffset": "/**\n     * Returns the axis offset.\n     *\n     * @return The axis offset (never {@code null}).\n     *\n     * @see #setAxisOffset(RectangleInsets)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setAxisOffset": "/**\n     * Sets the axis offsets (gap between the data area and the axes) and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param offset  the offset ({@code null} not permitted).\n     *\n     * @see #getAxisOffset()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getDomainAxis": "/**\n     * Returns the domain axis for the plot.  If the domain axis for this plot\n     * is {@code null}, then the method will return the parent plot's\n     * domain axis (if there is a parent plot).\n     *\n     * @return The domain axis ({@code null} permitted).\n     *\n     * @see #setDomainAxis(CategoryAxis)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getDomainAxis": "/**\n     * Returns a domain axis.\n     *\n     * @param index  the axis index.\n     *\n     * @return The axis ({@code null} possible).\n     *\n     * @see #setDomainAxis(int, CategoryAxis)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setDomainAxis": "/**\n     * Sets the domain axis for the plot and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param axis  the axis ({@code null} permitted).\n     *\n     * @see #getDomainAxis()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setDomainAxis": "/**\n     * Sets a domain axis and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param index  the axis index.\n     * @param axis  the axis ({@code null} permitted).\n     *\n     * @see #getDomainAxis(int)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setDomainAxis": "/**\n     * Sets a domain axis and, if requested, sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param axis  the axis ({@code null} permitted).\n     * @param notify  notify listeners?\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setDomainAxes": "/**\n     * Sets the domain axes for this plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param axes  the axes ({@code null} not permitted).\n     *\n     * @see #setRangeAxes(ValueAxis[])\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getDomainAxisIndex": "/**\n     * Returns the index of the specified axis, or {@code -1} if the axis\n     * is not assigned to the plot.\n     *\n     * @param axis  the axis ({@code null} not permitted).\n     *\n     * @return The axis index.\n     *\n     * @see #getDomainAxis(int)\n     * @see #getRangeAxisIndex(ValueAxis)\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getDomainAxisLocation": "/**\n     * Returns the domain axis location for the primary domain axis.\n     *\n     * @return The location (never {@code null}).\n     *\n     * @see #getRangeAxisLocation()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getDomainAxisLocation": "/**\n     * Returns the location for a domain axis.\n     *\n     * @param index  the axis index.\n     *\n     * @return The location.\n     *\n     * @see #setDomainAxisLocation(int, AxisLocation)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation": "/**\n     * Sets the location of the domain axis and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param location  the axis location ({@code null} not permitted).\n     *\n     * @see #getDomainAxisLocation()\n     * @see #setDomainAxisLocation(int, AxisLocation)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation": "/**\n     * Sets the location of the domain axis and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param location  the axis location ({@code null} not permitted).\n     * @param notify  a flag that controls whether listeners are notified.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation": "/**\n     * Sets the location for a domain axis and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param location  the location.\n     *\n     * @see #getDomainAxisLocation(int)\n     * @see #setRangeAxisLocation(int, AxisLocation)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation": "/**\n     * Sets the location for a domain axis and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param location  the location.\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.5\n     *\n     * @see #getDomainAxisLocation(int)\n     * @see #setRangeAxisLocation(int, AxisLocation, boolean)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getDomainAxisEdge": "/**\n     * Returns the domain axis edge.  This is derived from the axis location\n     * and the plot orientation.\n     *\n     * @return The edge (never {@code null}).\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getDomainAxisEdge": "/**\n     * Returns the edge for a domain axis.\n     *\n     * @param index  the axis index.\n     *\n     * @return The edge (never {@code null}).\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getDomainAxisCount": "/**\n     * Returns the number of domain axes.\n     *\n     * @return The axis count.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.clearDomainAxes": "/**\n     * Clears the domain axes from the plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.configureDomainAxes": "/**\n     * Configures the domain axes.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getRangeAxis": "/**\n     * Returns the range axis for the plot.  If the range axis for this plot is\n     * null, then the method will return the parent plot's range axis (if there\n     * is a parent plot).\n     *\n     * @return The range axis (possibly {@code null}).\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getRangeAxis": "/**\n     * Returns a range axis.\n     *\n     * @param index  the axis index.\n     *\n     * @return The axis ({@code null} possible).\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRangeAxis": "/**\n     * Sets the range axis for the plot and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param axis  the axis ({@code null} permitted).\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRangeAxis": "/**\n     * Sets a range axis and sends a {@link PlotChangeEvent} to all registered\n     * listeners.\n     *\n     * @param index  the axis index.\n     * @param axis  the axis.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRangeAxis": "/**\n     * Sets a range axis and, if requested, sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param axis  the axis.\n     * @param notify  notify listeners?\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRangeAxes": "/**\n     * Sets the range axes for this plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param axes  the axes ({@code null} not permitted).\n     *\n     * @see #setDomainAxes(CategoryAxis[])\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getRangeAxisIndex": "/**\n     * Returns the index of the specified axis, or {@code -1} if the axis\n     * is not assigned to the plot.\n     *\n     * @param axis  the axis ({@code null} not permitted).\n     *\n     * @return The axis index.\n     *\n     * @see #getRangeAxis(int)\n     * @see #getDomainAxisIndex(CategoryAxis)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getRangeAxisLocation": "/**\n     * Returns the range axis location.\n     *\n     * @return The location (never {@code null}).\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getRangeAxisLocation": "/**\n     * Returns the location for a range axis.\n     *\n     * @param index  the axis index.\n     *\n     * @return The location.\n     *\n     * @see #setRangeAxisLocation(int, AxisLocation)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation": "/**\n     * Sets the location of the range axis and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param location  the location ({@code null} not permitted).\n     *\n     * @see #setRangeAxisLocation(AxisLocation, boolean)\n     * @see #setDomainAxisLocation(AxisLocation)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation": "/**\n     * Sets the location of the range axis and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param location  the location ({@code null} not permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #setDomainAxisLocation(AxisLocation, boolean)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation": "/**\n     * Sets the location for a range axis and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param location  the location.\n     *\n     * @see #getRangeAxisLocation(int)\n     * @see #setRangeAxisLocation(int, AxisLocation, boolean)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation": "/**\n     * Sets the location for a range axis and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param location  the location.\n     * @param notify  notify listeners?\n     *\n     * @see #getRangeAxisLocation(int)\n     * @see #setDomainAxisLocation(int, AxisLocation, boolean)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getRangeAxisEdge": "/**\n     * Returns the edge where the primary range axis is located.\n     *\n     * @return The edge (never {@code null}).\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getRangeAxisEdge": "/**\n     * Returns the edge for a range axis.\n     *\n     * @param index  the axis index.\n     *\n     * @return The edge.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getRangeAxisCount": "/**\n     * Returns the number of range axes.\n     *\n     * @return The axis count.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.clearRangeAxes": "/**\n     * Clears the range axes from the plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.configureRangeAxes": "/**\n     * Configures the range axes.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getDataset": "/**\n     * Returns the primary dataset for the plot.\n     *\n     * @return The primary dataset (possibly {@code null}).\n     *\n     * @see #setDataset(CategoryDataset)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getDataset": "/**\n     * Returns the dataset with the given index, or {@code null} if there is\n     * no dataset.\n     *\n     * @param index  the dataset index (must be &gt;= 0).\n     *\n     * @return The dataset (possibly {@code null}).\n     *\n     * @see #setDataset(int, CategoryDataset)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setDataset": "/**\n     * Sets the dataset for the plot, replacing the existing dataset, if there\n     * is one.  This method also calls the\n     * {@link #datasetChanged(DatasetChangeEvent)} method, which adjusts the\n     * axis ranges if necessary and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @see #getDataset()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setDataset": "/**\n     * Sets a dataset for the plot and sends a change notification to all\n     * registered listeners.\n     *\n     * @param index  the dataset index (must be &gt;= 0).\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @see #getDataset(int)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getDatasetCount": "/**\n     * Returns the number of datasets.\n     *\n     * @return The number of datasets.\n     *\n     * @since 1.0.2\n     */\n",
"org.jfree.chart.plot.CategoryPlot.indexOf": "/**\n     * Returns the index of the specified dataset, or {@code -1} if the\n     * dataset does not belong to the plot.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The index.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis": "/**\n     * Maps a dataset to a particular domain axis.\n     *\n     * @param index  the dataset index (zero-based).\n     * @param axisIndex  the axis index (zero-based).\n     *\n     * @see #getDomainAxisForDataset(int)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes": "/**\n     * Maps the specified dataset to the axes in the list.  Note that the\n     * conversion of data values into Java2D space is always performed using\n     * the first axis in the list.\n     *\n     * @param index  the dataset index (zero-based).\n     * @param axisIndices  the axis indices ({@code null} permitted).\n     *\n     * @since 1.0.12\n     */\n",
"org.jfree.chart.plot.CategoryPlot.checkAxisIndices": "/**\n     * This method is used to perform argument checking on the list of\n     * axis indices passed to mapDatasetToDomainAxes() and\n     * mapDatasetToRangeAxes().\n     *\n     * @param indices  the list of indices ({@code null} permitted).\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getDomainAxisForDataset": "/**\n     * Returns the domain axis for a dataset.  You can change the axis for a\n     * dataset using the {@link #mapDatasetToDomainAxis(int, int)} method.\n     *\n     * @param index  the dataset index (must be &gt;= 0).\n     *\n     * @return The domain axis.\n     *\n     * @see #mapDatasetToDomainAxis(int, int)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis": "/**\n     * Maps a dataset to a particular range axis.\n     *\n     * @param index  the dataset index (zero-based).\n     * @param axisIndex  the axis index (zero-based).\n     *\n     * @see #getRangeAxisForDataset(int)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes": "/**\n     * Maps the specified dataset to the axes in the list.  Note that the\n     * conversion of data values into Java2D space is always performed using\n     * the first axis in the list.\n     *\n     * @param index  the dataset index (zero-based).\n     * @param axisIndices  the axis indices ({@code null} permitted).\n     *\n     * @since 1.0.12\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getRangeAxisForDataset": "/**\n     * Returns the range axis for a dataset.  You can change the axis for a\n     * dataset using the {@link #mapDatasetToRangeAxis(int, int)} method.\n     *\n     * @param index  the dataset index (must be &gt;= 0).\n     *\n     * @return The range axis.\n     *\n     * @see #mapDatasetToRangeAxis(int, int)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getRendererCount": "/**\n     * Returns the number of renderer slots for this plot.\n     *\n     * @return The number of renderer slots.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getRenderer": "/**\n     * Returns a reference to the renderer for the plot.\n     *\n     * @return The renderer.\n     *\n     * @see #setRenderer(CategoryItemRenderer)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getRenderer": "/**\n     * Returns the renderer at the given index.\n     *\n     * @param index  the renderer index.\n     *\n     * @return The renderer (possibly {@code null}).\n     *\n     * @see #setRenderer(int, CategoryItemRenderer)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRenderer": "/**\n     * Sets the renderer at index 0 (sometimes referred to as the \"primary\"\n     * renderer) and sends a change event to all registered listeners.\n     *\n     * @param renderer  the renderer ({@code null} permitted.\n     *\n     * @see #getRenderer()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRenderer": "/**\n     * Sets the renderer at index 0 (sometimes referred to as the \"primary\"\n     * renderer) and, if requested, sends a change event to all registered \n     * listeners.\n     * <p>\n     * You can set the renderer to {@code null}, but this is not\n     * recommended because:\n     * <ul>\n     *   <li>no data will be displayed;</li>\n     *   <li>the plot background will not be painted;</li>\n     * </ul>\n     *\n     * @param renderer  the renderer ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getRenderer()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRenderer": "/**\n     * Sets the renderer to use for the dataset with the specified index and\n     * sends a change event to all registered listeners.  Note that each\n     * dataset should have its own renderer, you should not use one renderer\n     * for multiple datasets.\n     *\n     * @param index  the index.\n     * @param renderer  the renderer ({@code null} permitted).\n     *\n     * @see #getRenderer(int)\n     * @see #setRenderer(int, CategoryItemRenderer, boolean)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRenderer": "/**\n     * Sets the renderer to use for the dataset with the specified index and,\n     * if requested, sends a change event to all registered listeners.  Note \n     * that each dataset should have its own renderer, you should not use one \n     * renderer for multiple datasets.\n     *\n     * @param index  the index.\n     * @param renderer  the renderer ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getRenderer(int)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRenderers": "/**\n     * Sets the renderers for this plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param renderers  the renderers.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getRendererForDataset": "/**\n     * Returns the renderer for the specified dataset.  If the dataset doesn't\n     * belong to the plot, this method will return {@code null}.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The renderer (possibly {@code null}).\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getIndexOf": "/**\n     * Returns the index of the specified renderer, or {@code -1} if the\n     * renderer is not assigned to this plot.\n     *\n     * @param renderer  the renderer ({@code null} permitted).\n     *\n     * @return The renderer index.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getDatasetRenderingOrder": "/**\n     * Returns the dataset rendering order.\n     *\n     * @return The order (never {@code null}).\n     *\n     * @see #setDatasetRenderingOrder(DatasetRenderingOrder)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setDatasetRenderingOrder": "/**\n     * Sets the rendering order and sends a {@link PlotChangeEvent} to all\n     * registered listeners.  By default, the plot renders the primary dataset\n     * last (so that the primary dataset overlays the secondary datasets).  You\n     * can reverse this if you want to.\n     *\n     * @param order  the rendering order ({@code null} not permitted).\n     *\n     * @see #getDatasetRenderingOrder()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getColumnRenderingOrder": "/**\n     * Returns the order in which the columns are rendered.  The default value\n     * is {@code SortOrder.ASCENDING}.\n     *\n     * @return The column rendering order (never {@code null}).\n     *\n     * @see #setColumnRenderingOrder(SortOrder)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setColumnRenderingOrder": "/**\n     * Sets the column order in which the items in each dataset should be\n     * rendered and sends a {@link PlotChangeEvent} to all registered\n     * listeners.  Note that this affects the order in which items are drawn,\n     * NOT their position in the chart.\n     *\n     * @param order  the order ({@code null} not permitted).\n     *\n     * @see #getColumnRenderingOrder()\n     * @see #setRowRenderingOrder(SortOrder)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getRowRenderingOrder": "/**\n     * Returns the order in which the rows should be rendered.  The default\n     * value is {@code SortOrder.ASCENDING}.\n     *\n     * @return The order (never {@code null}).\n     *\n     * @see #setRowRenderingOrder(SortOrder)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRowRenderingOrder": "/**\n     * Sets the row order in which the items in each dataset should be\n     * rendered and sends a {@link PlotChangeEvent} to all registered\n     * listeners.  Note that this affects the order in which items are drawn,\n     * NOT their position in the chart.\n     *\n     * @param order  the order ({@code null} not permitted).\n     *\n     * @see #getRowRenderingOrder()\n     * @see #setColumnRenderingOrder(SortOrder)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.isDomainGridlinesVisible": "/**\n     * Returns the flag that controls whether the domain grid-lines are visible.\n     *\n     * @return The {@code true} or {@code false}.\n     *\n     * @see #setDomainGridlinesVisible(boolean)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setDomainGridlinesVisible": "/**\n     * Sets the flag that controls whether or not grid-lines are drawn against\n     * the domain axis.\n     * <p>\n     * If the flag value changes, a {@link PlotChangeEvent} is sent to all\n     * registered listeners.\n     *\n     * @param visible  the new value of the flag.\n     *\n     * @see #isDomainGridlinesVisible()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getDomainGridlinePosition": "/**\n     * Returns the position used for the domain gridlines.\n     *\n     * @return The gridline position (never {@code null}).\n     *\n     * @see #setDomainGridlinePosition(CategoryAnchor)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setDomainGridlinePosition": "/**\n     * Sets the position used for the domain gridlines and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param position  the position ({@code null} not permitted).\n     *\n     * @see #getDomainGridlinePosition()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getDomainGridlineStroke": "/**\n     * Returns the stroke used to draw grid-lines against the domain axis.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setDomainGridlineStroke(Stroke)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setDomainGridlineStroke": "/**\n     * Sets the stroke used to draw grid-lines against the domain axis and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getDomainGridlineStroke()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getDomainGridlinePaint": "/**\n     * Returns the paint used to draw grid-lines against the domain axis.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setDomainGridlinePaint(Paint)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setDomainGridlinePaint": "/**\n     * Sets the paint used to draw the grid-lines (if any) against the domain\n     * axis and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getDomainGridlinePaint()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.isRangeZeroBaselineVisible": "/**\n     * Returns a flag that controls whether or not a zero baseline is\n     * displayed for the range axis.\n     *\n     * @return A boolean.\n     *\n     * @see #setRangeZeroBaselineVisible(boolean)\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRangeZeroBaselineVisible": "/**\n     * Sets the flag that controls whether or not the zero baseline is\n     * displayed for the range axis, and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param visible  the flag.\n     *\n     * @see #isRangeZeroBaselineVisible()\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getRangeZeroBaselineStroke": "/**\n     * Returns the stroke used for the zero baseline against the range axis.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setRangeZeroBaselineStroke(Stroke)\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRangeZeroBaselineStroke": "/**\n     * Sets the stroke for the zero baseline for the range axis,\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getRangeZeroBaselineStroke()\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getRangeZeroBaselinePaint": "/**\n     * Returns the paint for the zero baseline (if any) plotted against the\n     * range axis.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setRangeZeroBaselinePaint(Paint)\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRangeZeroBaselinePaint": "/**\n     * Sets the paint for the zero baseline plotted against the range axis and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getRangeZeroBaselinePaint()\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.CategoryPlot.isRangeGridlinesVisible": "/**\n     * Returns the flag that controls whether the range grid-lines are visible.\n     *\n     * @return The flag.\n     *\n     * @see #setRangeGridlinesVisible(boolean)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRangeGridlinesVisible": "/**\n     * Sets the flag that controls whether or not grid-lines are drawn against\n     * the range axis.  If the flag changes value, a {@link PlotChangeEvent} is\n     * sent to all registered listeners.\n     *\n     * @param visible  the new value of the flag.\n     *\n     * @see #isRangeGridlinesVisible()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getRangeGridlineStroke": "/**\n     * Returns the stroke used to draw the grid-lines against the range axis.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setRangeGridlineStroke(Stroke)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRangeGridlineStroke": "/**\n     * Sets the stroke used to draw the grid-lines against the range axis and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getRangeGridlineStroke()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getRangeGridlinePaint": "/**\n     * Returns the paint used to draw the grid-lines against the range axis.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setRangeGridlinePaint(Paint)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRangeGridlinePaint": "/**\n     * Sets the paint used to draw the grid lines against the range axis and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getRangeGridlinePaint()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.isRangeMinorGridlinesVisible": "/**\n     * Returns {@code true} if the range axis minor grid is visible, and\n     * {@code false} otherwise.\n     *\n     * @return A boolean.\n     *\n     * @see #setRangeMinorGridlinesVisible(boolean)\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRangeMinorGridlinesVisible": "/**\n     * Sets the flag that controls whether or not the range axis minor grid\n     * lines are visible.\n     * <p>\n     * If the flag value is changed, a {@link PlotChangeEvent} is sent to all\n     * registered listeners.\n     *\n     * @param visible  the new value of the flag.\n     *\n     * @see #isRangeMinorGridlinesVisible()\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getRangeMinorGridlineStroke": "/**\n     * Returns the stroke for the minor grid lines (if any) plotted against the\n     * range axis.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setRangeMinorGridlineStroke(Stroke)\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRangeMinorGridlineStroke": "/**\n     * Sets the stroke for the minor grid lines plotted against the range axis,\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getRangeMinorGridlineStroke()\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getRangeMinorGridlinePaint": "/**\n     * Returns the paint for the minor grid lines (if any) plotted against the\n     * range axis.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setRangeMinorGridlinePaint(Paint)\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRangeMinorGridlinePaint": "/**\n     * Sets the paint for the minor grid lines plotted against the range axis\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getRangeMinorGridlinePaint()\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getFixedLegendItems": "/**\n     * Returns the fixed legend items, if any.\n     *\n     * @return The legend items (possibly {@code null}).\n     *\n     * @see #setFixedLegendItems(LegendItemCollection)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setFixedLegendItems": "/**\n     * Sets the fixed legend items for the plot.  Leave this set to\n     * {@code null} if you prefer the legend items to be created\n     * automatically.\n     *\n     * @param items  the legend items ({@code null} permitted).\n     *\n     * @see #getFixedLegendItems()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getLegendItems": "/**\n     * Returns the legend items for the plot.  By default, this method creates\n     * a legend item for each series in each of the datasets.  You can change\n     * this behaviour by overriding this method.\n     *\n     * @return The legend items.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.handleClick": "/**\n     * Handles a 'click' on the plot by updating the anchor value.\n     *\n     * @param x  x-coordinate of the click (in Java2D space).\n     * @param y  y-coordinate of the click (in Java2D space).\n     * @param info  information about the plot's dimensions.\n     *\n     */\n",
"org.jfree.chart.plot.CategoryPlot.zoom": "/**\n     * Zooms (in or out) on the plot's value axis.\n     * <p>\n     * If the value 0.0 is passed in as the zoom percent, the auto-range\n     * calculation for the axis is restored (which sets the range to include\n     * the minimum and maximum data values, thus displaying all the data).\n     *\n     * @param percent  the zoom amount.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.annotationChanged": "/**\n     * Receives notification of a change to an {@link Annotation} added to\n     * this plot.\n     *\n     * @param event  information about the event (not used here).\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.CategoryPlot.datasetChanged": "/**\n     * Receives notification of a change to the plot's dataset.\n     * <P>\n     * The range axis bounds will be recalculated if necessary.\n     *\n     * @param event  information about the event (not used here).\n     */\n",
"org.jfree.chart.plot.CategoryPlot.rendererChanged": "/**\n     * Receives notification of a renderer change event.\n     *\n     * @param event  the event.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.addDomainMarker": "/**\n     * Adds a marker for display (in the foreground) against the domain axis and\n     * sends a {@link PlotChangeEvent} to all registered listeners. Typically a\n     * marker will be drawn by the renderer as a line perpendicular to the\n     * domain axis, however this is entirely up to the renderer.\n     *\n     * @param marker  the marker ({@code null} not permitted).\n     *\n     * @see #removeDomainMarker(Marker)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.addDomainMarker": "/**\n     * Adds a marker for display against the domain axis and sends a\n     * {@link PlotChangeEvent} to all registered listeners.  Typically a marker\n     * will be drawn by the renderer as a line perpendicular to the domain\n     * axis, however this is entirely up to the renderer.\n     *\n     * @param marker  the marker ({@code null} not permitted).\n     * @param layer  the layer (foreground or background) ({@code null}\n     *               not permitted).\n     *\n     * @see #removeDomainMarker(Marker, Layer)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.addDomainMarker": "/**\n     * Adds a marker for display by a particular renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to a domain axis, however this is entirely up to the renderer.\n     *\n     * @param index  the renderer index.\n     * @param marker  the marker ({@code null} not permitted).\n     * @param layer  the layer ({@code null} not permitted).\n     *\n     * @see #removeDomainMarker(int, Marker, Layer)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.addDomainMarker": "/**\n     * Adds a marker for display by a particular renderer and, if requested,\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to a domain axis, however this is entirely up to the renderer.\n     *\n     * @param index  the renderer index.\n     * @param marker  the marker ({@code null} not permitted).\n     * @param layer  the layer ({@code null} not permitted).\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.10\n     *\n     * @see #removeDomainMarker(int, Marker, Layer, boolean)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.clearDomainMarkers": "/**\n     * Clears all the domain markers for the plot and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @see #clearRangeMarkers()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getDomainMarkers": "/**\n     * Returns the list of domain markers (read only) for the specified layer.\n     *\n     * @param layer  the layer (foreground or background).\n     *\n     * @return The list of domain markers.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getDomainMarkers": "/**\n     * Returns a collection of domain markers for a particular renderer and\n     * layer.\n     *\n     * @param index  the renderer index.\n     * @param layer  the layer.\n     *\n     * @return A collection of markers (possibly {@code null}).\n     */\n",
"org.jfree.chart.plot.CategoryPlot.clearDomainMarkers": "/**\n     * Clears all the domain markers for the specified renderer.\n     *\n     * @param index  the renderer index.\n     *\n     * @see #clearRangeMarkers(int)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.removeDomainMarker": "/**\n     * Removes a marker for the domain axis and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param marker  the marker.\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.CategoryPlot.removeDomainMarker": "/**\n     * Removes a marker for the domain axis in the specified layer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param marker the marker ({@code null} not permitted).\n     * @param layer the layer (foreground or background).\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.CategoryPlot.removeDomainMarker": "/**\n     * Removes a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index the dataset/renderer index.\n     * @param marker the marker.\n     * @param layer the layer (foreground or background).\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.CategoryPlot.removeDomainMarker": "/**\n     * Removes a marker for a specific dataset/renderer and, if requested,\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index the dataset/renderer index.\n     * @param marker the marker.\n     * @param layer the layer (foreground or background).\n     * @param notify  notify listeners?\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.plot.CategoryPlot.addRangeMarker": "/**\n     * Adds a marker for display (in the foreground) against the range axis and\n     * sends a {@link PlotChangeEvent} to all registered listeners. Typically a\n     * marker will be drawn by the renderer as a line perpendicular to the\n     * range axis, however this is entirely up to the renderer.\n     *\n     * @param marker  the marker ({@code null} not permitted).\n     *\n     * @see #removeRangeMarker(Marker)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.addRangeMarker": "/**\n     * Adds a marker for display against the range axis and sends a\n     * {@link PlotChangeEvent} to all registered listeners.  Typically a marker\n     * will be drawn by the renderer as a line perpendicular to the range axis,\n     * however this is entirely up to the renderer.\n     *\n     * @param marker  the marker ({@code null} not permitted).\n     * @param layer  the layer (foreground or background) ({@code null}\n     *               not permitted).\n     *\n     * @see #removeRangeMarker(Marker, Layer)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.addRangeMarker": "/**\n     * Adds a marker for display by a particular renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to a range axis, however this is entirely up to the renderer.\n     *\n     * @param index  the renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer.\n     *\n     * @see #removeRangeMarker(int, Marker, Layer)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.addRangeMarker": "/**\n     * Adds a marker for display by a particular renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to a range axis, however this is entirely up to the renderer.\n     *\n     * @param index  the renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer.\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.10\n     *\n     * @see #removeRangeMarker(int, Marker, Layer, boolean)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.clearRangeMarkers": "/**\n     * Clears all the range markers for the plot and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @see #clearDomainMarkers()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getRangeMarkers": "/**\n     * Returns the list of range markers (read only) for the specified layer.\n     *\n     * @param layer  the layer (foreground or background).\n     *\n     * @return The list of range markers.\n     *\n     * @see #getRangeMarkers(int, Layer)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getRangeMarkers": "/**\n     * Returns a collection of range markers for a particular renderer and\n     * layer.\n     *\n     * @param index  the renderer index.\n     * @param layer  the layer.\n     *\n     * @return A collection of markers (possibly {@code null}).\n     */\n",
"org.jfree.chart.plot.CategoryPlot.clearRangeMarkers": "/**\n     * Clears all the range markers for the specified renderer.\n     *\n     * @param index  the renderer index.\n     *\n     * @see #clearDomainMarkers(int)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.removeRangeMarker": "/**\n     * Removes a marker for the range axis and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param marker the marker.\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.7\n     *\n     * @see #addRangeMarker(Marker)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.removeRangeMarker": "/**\n     * Removes a marker for the range axis in the specified layer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param marker the marker ({@code null} not permitted).\n     * @param layer the layer (foreground or background).\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.7\n     *\n     * @see #addRangeMarker(Marker, Layer)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.removeRangeMarker": "/**\n     * Removes a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index the dataset/renderer index.\n     * @param marker the marker.\n     * @param layer the layer (foreground or background).\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.7\n     *\n     * @see #addRangeMarker(int, Marker, Layer)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.removeRangeMarker": "/**\n     * Removes a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer (foreground or background).\n     * @param notify  notify listeners.\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.10\n     *\n     * @see #addRangeMarker(int, Marker, Layer, boolean)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.isDomainCrosshairVisible": "/**\n     * Returns the flag that controls whether or not the domain crosshair is\n     * displayed by the plot.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.11\n     *\n     * @see #setDomainCrosshairVisible(boolean)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setDomainCrosshairVisible": "/**\n     * Sets the flag that controls whether or not the domain crosshair is\n     * displayed by the plot, and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param flag  the new flag value.\n     *\n     * @since 1.0.11\n     *\n     * @see #isDomainCrosshairVisible()\n     * @see #setRangeCrosshairVisible(boolean)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getDomainCrosshairRowKey": "/**\n     * Returns the row key for the domain crosshair.\n     *\n     * @return The row key.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setDomainCrosshairRowKey": "/**\n     * Sets the row key for the domain crosshair and sends a\n     * {PlotChangeEvent} to all registered listeners.\n     *\n     * @param key  the key.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setDomainCrosshairRowKey": "/**\n     * Sets the row key for the domain crosshair and, if requested, sends a\n     * {PlotChangeEvent} to all registered listeners.\n     *\n     * @param key  the key.\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getDomainCrosshairColumnKey": "/**\n     * Returns the column key for the domain crosshair.\n     *\n     * @return The column key.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setDomainCrosshairColumnKey": "/**\n     * Sets the column key for the domain crosshair and sends\n     * a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param key  the key.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setDomainCrosshairColumnKey": "/**\n     * Sets the column key for the domain crosshair and, if requested, sends\n     * a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param key  the key.\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getCrosshairDatasetIndex": "/**\n     * Returns the dataset index for the crosshair.\n     *\n     * @return The dataset index.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setCrosshairDatasetIndex": "/**\n     * Sets the dataset index for the crosshair and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the index.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setCrosshairDatasetIndex": "/**\n     * Sets the dataset index for the crosshair and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the index.\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getDomainCrosshairPaint": "/**\n     * Returns the paint used to draw the domain crosshair.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @since 1.0.11\n     *\n     * @see #setDomainCrosshairPaint(Paint)\n     * @see #getDomainCrosshairStroke()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setDomainCrosshairPaint": "/**\n     * Sets the paint used to draw the domain crosshair.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @since 1.0.11\n     *\n     * @see #getDomainCrosshairPaint()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getDomainCrosshairStroke": "/**\n     * Returns the stroke used to draw the domain crosshair.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @since 1.0.11\n     *\n     * @see #setDomainCrosshairStroke(Stroke)\n     * @see #getDomainCrosshairPaint()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setDomainCrosshairStroke": "/**\n     * Sets the stroke used to draw the domain crosshair, and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @since 1.0.11\n     *\n     * @see #getDomainCrosshairStroke()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.isRangeCrosshairVisible": "/**\n     * Returns a flag indicating whether or not the range crosshair is visible.\n     *\n     * @return The flag.\n     *\n     * @see #setRangeCrosshairVisible(boolean)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRangeCrosshairVisible": "/**\n     * Sets the flag indicating whether or not the range crosshair is visible.\n     *\n     * @param flag  the new value of the flag.\n     *\n     * @see #isRangeCrosshairVisible()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.isRangeCrosshairLockedOnData": "/**\n     * Returns a flag indicating whether or not the crosshair should \"lock-on\"\n     * to actual data values.\n     *\n     * @return The flag.\n     *\n     * @see #setRangeCrosshairLockedOnData(boolean)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRangeCrosshairLockedOnData": "/**\n     * Sets the flag indicating whether or not the range crosshair should\n     * \"lock-on\" to actual data values, and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #isRangeCrosshairLockedOnData()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getRangeCrosshairValue": "/**\n     * Returns the range crosshair value.\n     *\n     * @return The value.\n     *\n     * @see #setRangeCrosshairValue(double)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRangeCrosshairValue": "/**\n     * Sets the range crosshair value and, if the crosshair is visible, sends\n     * a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param value  the new value.\n     *\n     * @see #getRangeCrosshairValue()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRangeCrosshairValue": "/**\n     * Sets the range crosshair value and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners (but only if the\n     * crosshair is visible).\n     *\n     * @param value  the new value.\n     * @param notify  a flag that controls whether or not listeners are\n     *                notified.\n     *\n     * @see #getRangeCrosshairValue()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getRangeCrosshairStroke": "/**\n     * Returns the pen-style ({@code Stroke}) used to draw the crosshair\n     * (if visible).\n     *\n     * @return The crosshair stroke (never {@code null}).\n     *\n     * @see #setRangeCrosshairStroke(Stroke)\n     * @see #isRangeCrosshairVisible()\n     * @see #getRangeCrosshairPaint()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRangeCrosshairStroke": "/**\n     * Sets the pen-style ({@code Stroke}) used to draw the range\n     * crosshair (if visible), and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param stroke  the new crosshair stroke ({@code null} not\n     *         permitted).\n     *\n     * @see #getRangeCrosshairStroke()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getRangeCrosshairPaint": "/**\n     * Returns the paint used to draw the range crosshair.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setRangeCrosshairPaint(Paint)\n     * @see #isRangeCrosshairVisible()\n     * @see #getRangeCrosshairStroke()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRangeCrosshairPaint": "/**\n     * Sets the paint used to draw the range crosshair (if visible) and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getRangeCrosshairPaint()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getAnnotations": "/**\n     * Returns the list of annotations.\n     *\n     * @return The list of annotations (never {@code null}).\n     *\n     * @see #addAnnotation(CategoryAnnotation)\n     * @see #clearAnnotations()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.addAnnotation": "/**\n     * Adds an annotation to the plot and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param annotation  the annotation ({@code null} not permitted).\n     *\n     * @see #removeAnnotation(CategoryAnnotation)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.addAnnotation": "/**\n     * Adds an annotation to the plot and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param annotation  the annotation ({@code null} not permitted).\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.plot.CategoryPlot.removeAnnotation": "/**\n     * Removes an annotation from the plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param annotation  the annotation ({@code null} not permitted).\n     *\n     * @return A boolean (indicates whether or not the annotation was removed).\n     *\n     * @see #addAnnotation(CategoryAnnotation)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.removeAnnotation": "/**\n     * Removes an annotation from the plot and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param annotation  the annotation ({@code null} not permitted).\n     * @param notify  notify listeners?\n     *\n     * @return A boolean (indicates whether or not the annotation was removed).\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.plot.CategoryPlot.clearAnnotations": "/**\n     * Clears all the annotations and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getShadowGenerator": "/**\n     * Returns the shadow generator for the plot, if any.\n     *\n     * @return The shadow generator (possibly {@code null}).\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setShadowGenerator": "/**\n     * Sets the shadow generator for the plot and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.CategoryPlot.calculateDomainAxisSpace": "/**\n     * Calculates the space required for the domain axis/axes.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param space  a carrier for the result ({@code null} permitted).\n     *\n     * @return The required space.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.calculateRangeAxisSpace": "/**\n     * Calculates the space required for the range axis/axes.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param space  a carrier for the result ({@code null} permitted).\n     *\n     * @return The required space.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.integerise": "/**\n     * Trims a rectangle to integer coordinates.\n     *\n     * @param rect  the incoming rectangle.\n     *\n     * @return A rectangle with integer coordinates.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.calculateAxisSpace": "/**\n     * Calculates the space required for the axes.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     *\n     * @return The space required for the axes.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.draw": "/**\n     * Draws the plot on a Java 2D graphics device (such as the screen or a\n     * printer).\n     * <P>\n     * At your option, you may supply an instance of {@link PlotRenderingInfo}.\n     * If you do, it will be populated with information about the drawing,\n     * including various plot dimensions and tooltip info.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area within which the plot (including axes) should\n     *              be drawn.\n     * @param anchor  the anchor point ({@code null} permitted).\n     * @param parentState  the state from the parent plot, if there is one.\n     * @param state  collects info as the chart is drawn (possibly\n     *               {@code null}).\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getDatasetIndices": "/**\n     * Returns the indices of the non-null datasets in the specified order.\n     * \n     * @param order  the order ({@code null} not permitted).\n     * \n     * @return The list of indices. \n     */\n",
"org.jfree.chart.plot.CategoryPlot.getRendererIndices": "/**\n     * Returns the indices of the non-null renderers for the plot, in the \n     * specified order.\n     * \n     * @param order  the rendering order {@code null} not permitted).\n     * \n     * @return A list of indices.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.drawBackground": "/**\n     * Draws the plot background (the background color and/or image).\n     * <P>\n     * This method will be called during the chart drawing process and is\n     * declared public so that it can be accessed by the renderers used by\n     * certain subclasses.  You shouldn't need to call this method directly.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area within which the plot should be drawn.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.drawAxes": "/**\n     * A utility method for drawing the plot's axes.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param dataArea  the data area.\n     * @param plotState  collects information about the plot ({@code null}\n     *                   permitted).\n     *\n     * @return A map containing the axis states.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.render": "/**\n     * Draws a representation of a dataset within the dataArea region using the\n     * appropriate renderer.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the region in which the data is to be drawn.\n     * @param index  the dataset and renderer index.\n     * @param info  an optional object for collection dimension information.\n     * @param crosshairState  a state object for tracking crosshair info\n     *        ({@code null} permitted).\n     *\n     * @return A boolean that indicates whether or not real data was found.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.plot.CategoryPlot.drawDomainGridlines": "/**\n     * Draws the domain gridlines for the plot, if they are visible.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area inside the axes.\n     *\n     * @see #drawRangeGridlines(Graphics2D, Rectangle2D, List)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.drawRangeGridlines": "/**\n     * Draws the range gridlines for the plot, if they are visible.\n     *\n     * @param g2  the graphics device ({@code null} not permitted).\n     * @param dataArea  the area inside the axes ({@code null} not permitted).\n     * @param ticks  the ticks.\n     *\n     * @see #drawDomainGridlines(Graphics2D, Rectangle2D)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.drawZeroRangeBaseline": "/**\n     * Draws a base line across the chart at value zero on the range axis.\n     *\n     * @param g2  the graphics device.\n     * @param area  the data area.\n     *\n     * @see #setRangeZeroBaselineVisible(boolean)\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.CategoryPlot.drawAnnotations": "/**\n     * Draws the annotations.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.drawDomainMarkers": "/**\n     * Draws the domain markers (if any) for an axis and layer.  This method is\n     * typically called from within the draw() method.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param index  the renderer index.\n     * @param layer  the layer (foreground or background).\n     *\n     * @see #drawRangeMarkers(Graphics2D, Rectangle2D, int, Layer)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.drawRangeMarkers": "/**\n     * Draws the range markers (if any) for an axis and layer.  This method is\n     * typically called from within the draw() method.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param index  the renderer index.\n     * @param layer  the layer (foreground or background).\n     *\n     * @see #drawDomainMarkers(Graphics2D, Rectangle2D, int, Layer)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.drawRangeLine": "/**\n     * Utility method for drawing a line perpendicular to the range axis (used\n     * for crosshairs).\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area defined by the axes.\n     * @param value  the data value.\n     * @param stroke  the line stroke ({@code null} not permitted).\n     * @param paint  the line paint ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.CategoryPlot.drawDomainCrosshair": "/**\n     * Draws a domain crosshair.\n     *\n     * @param g2  the graphics target.\n     * @param dataArea  the data area.\n     * @param orientation  the plot orientation.\n     * @param datasetIndex  the dataset index.\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     * @param stroke  the stroke used to draw the crosshair line.\n     * @param paint  the paint used to draw the crosshair line.\n     *\n     * @see #drawRangeCrosshair(Graphics2D, Rectangle2D, PlotOrientation,\n     *     double, ValueAxis, Stroke, Paint)\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.plot.CategoryPlot.drawRangeCrosshair": "/**\n     * Draws a range crosshair.\n     *\n     * @param g2  the graphics target.\n     * @param dataArea  the data area.\n     * @param orientation  the plot orientation.\n     * @param value  the crosshair value.\n     * @param axis  the axis against which the value is measured.\n     * @param stroke  the stroke used to draw the crosshair line.\n     * @param paint  the paint used to draw the crosshair line.\n     *\n     * @see #drawDomainCrosshair(Graphics2D, Rectangle2D, PlotOrientation, int,\n     *      Comparable, Comparable, Stroke, Paint)\n     *\n     * @since 1.0.5\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getDataRange": "/**\n     * Returns the range of data values that will be plotted against the range\n     * axis.  If the dataset is {@code null}, this method returns\n     * {@code null}.\n     *\n     * @param axis  the axis.\n     *\n     * @return The data range.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.datasetsMappedToDomainAxis": "/**\n     * Returns a list of the datasets that are mapped to the axis with the\n     * specified index.\n     *\n     * @param axisIndex  the axis index.\n     *\n     * @return The list (possibly empty, but never {@code null}).\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.CategoryPlot.datasetsMappedToRangeAxis": "/**\n     * A utility method that returns a list of datasets that are mapped to a\n     * given range axis.\n     *\n     * @param axisIndex  the axis index.\n     *\n     * @return The list (possibly empty, but never {@code null}).\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getWeight": "/**\n     * Returns the weight for this plot when it is used as a subplot within a\n     * combined plot.\n     *\n     * @return The weight.\n     *\n     * @see #setWeight(int)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setWeight": "/**\n     * Sets the weight for the plot and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param weight  the weight.\n     *\n     * @see #getWeight()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getFixedDomainAxisSpace": "/**\n     * Returns the fixed domain axis space.\n     *\n     * @return The fixed domain axis space (possibly {@code null}).\n     *\n     * @see #setFixedDomainAxisSpace(AxisSpace)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setFixedDomainAxisSpace": "/**\n     * Sets the fixed domain axis space and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param space  the space ({@code null} permitted).\n     *\n     * @see #getFixedDomainAxisSpace()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setFixedDomainAxisSpace": "/**\n     * Sets the fixed domain axis space and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param space  the space ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getFixedDomainAxisSpace()\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getFixedRangeAxisSpace": "/**\n     * Returns the fixed range axis space.\n     *\n     * @return The fixed range axis space (possibly {@code null}).\n     *\n     * @see #setFixedRangeAxisSpace(AxisSpace)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setFixedRangeAxisSpace": "/**\n     * Sets the fixed range axis space and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param space  the space ({@code null} permitted).\n     *\n     * @see #getFixedRangeAxisSpace()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setFixedRangeAxisSpace": "/**\n     * Sets the fixed range axis space and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param space  the space ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getFixedRangeAxisSpace()\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getCategories": "/**\n     * Returns a list of the categories in the plot's primary dataset.\n     *\n     * @return A list of the categories in the plot's primary dataset.\n     *\n     * @see #getCategoriesForAxis(CategoryAxis)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getCategoriesForAxis": "/**\n     * Returns a list of the categories that should be displayed for the\n     * specified axis.\n     *\n     * @param axis  the axis ({@code null} not permitted)\n     *\n     * @return The categories.\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getDrawSharedDomainAxis": "/**\n     * Returns the flag that controls whether or not the shared domain axis is\n     * drawn for each subplot.\n     *\n     * @return A boolean.\n     *\n     * @see #setDrawSharedDomainAxis(boolean)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setDrawSharedDomainAxis": "/**\n     * Sets the flag that controls whether the shared domain axis is drawn when\n     * this plot is being used as a subplot.\n     *\n     * @param draw  a boolean.\n     *\n     * @see #getDrawSharedDomainAxis()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.isDomainPannable": "/**\n     * Returns {@code false} always, because the plot cannot be panned\n     * along the domain axis/axes.\n     *\n     * @return A boolean.\n     *\n     * @see #isRangePannable()\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.CategoryPlot.isRangePannable": "/**\n     * Returns {@code true} if panning is enabled for the range axes,\n     * and {@code false} otherwise.\n     *\n     * @return A boolean.\n     *\n     * @see #setRangePannable(boolean)\n     * @see #isDomainPannable()\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setRangePannable": "/**\n     * Sets the flag that enables or disables panning of the plot along\n     * the range axes.\n     *\n     * @param pannable  the new flag value.\n     *\n     * @see #isRangePannable()\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.CategoryPlot.panDomainAxes": "/**\n     * Pans the domain axes by the specified percentage.\n     *\n     * @param percent  the distance to pan (as a percentage of the axis length).\n     * @param info the plot info\n     * @param source the source point where the pan action started.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.CategoryPlot.panRangeAxes": "/**\n     * Pans the range axes by the specified percentage.\n     *\n     * @param percent  the distance to pan (as a percentage of the axis length).\n     * @param info the plot info\n     * @param source the source point where the pan action started.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.CategoryPlot.isDomainZoomable": "/**\n     * Returns {@code false} to indicate that the domain axes are not\n     * zoomable.\n     *\n     * @return A boolean.\n     *\n     * @see #isRangeZoomable()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.isRangeZoomable": "/**\n     * Returns {@code true} to indicate that the range axes are zoomable.\n     *\n     * @return A boolean.\n     *\n     * @see #isDomainZoomable()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.zoomDomainAxes": "/**\n     * This method does nothing, because {@code CategoryPlot} doesn't\n     * support zooming on the domain.\n     *\n     * @param factor  the zoom factor.\n     * @param state  the plot state.\n     * @param source  the source point (in Java2D space) for the zoom.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.zoomDomainAxes": "/**\n     * This method does nothing, because {@code CategoryPlot} doesn't\n     * support zooming on the domain.\n     *\n     * @param lowerPercent  the lower bound.\n     * @param upperPercent  the upper bound.\n     * @param state  the plot state.\n     * @param source  the source point (in Java2D space) for the zoom.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.zoomDomainAxes": "/**\n     * This method does nothing, because {@code CategoryPlot} doesn't\n     * support zooming on the domain.\n     *\n     * @param factor  the zoom factor.\n     * @param info  the plot rendering info.\n     * @param source  the source point (in Java2D space).\n     * @param useAnchor  use source point as zoom anchor?\n     *\n     * @see #zoomRangeAxes(double, PlotRenderingInfo, Point2D, boolean)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.CategoryPlot.zoomRangeAxes": "/**\n     * Multiplies the range on the range axis/axes by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param state  the plot state.\n     * @param source  the source point (in Java2D space) for the zoom.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.zoomRangeAxes": "/**\n     * Multiplies the range on the range axis/axes by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param info  the plot rendering info.\n     * @param source  the source point.\n     * @param useAnchor  a flag that controls whether or not the source point\n     *         is used for the zoom anchor.\n     *\n     * @see #zoomDomainAxes(double, PlotRenderingInfo, Point2D, boolean)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.CategoryPlot.zoomRangeAxes": "/**\n     * Zooms in on the range axes.\n     *\n     * @param lowerPercent  the lower bound.\n     * @param upperPercent  the upper bound.\n     * @param state  the plot state.\n     * @param source  the source point (in Java2D space) for the zoom.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.getAnchorValue": "/**\n     * Returns the anchor value.\n     *\n     * @return The anchor value.\n     *\n     * @see #setAnchorValue(double)\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setAnchorValue": "/**\n     * Sets the anchor value and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param value  the anchor value.\n     *\n     * @see #getAnchorValue()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.setAnchorValue": "/**\n     * Sets the anchor value and, if requested, sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param value  the value.\n     * @param notify  notify listeners?\n     *\n     * @see #getAnchorValue()\n     */\n",
"org.jfree.chart.plot.CategoryPlot.equals": "/**\n     * Tests the plot for equality with an arbitrary object.\n     *\n     * @param obj  the object to test against ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.clone": "/**\n     * Returns a clone of the plot.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the cloning is not supported.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.cloneMarkerMap": "/**\n     * A utility method to clone the marker maps.\n     *\n     * @param map  the map to clone.\n     *\n     * @return A clone of the map.\n     *\n     * @throws CloneNotSupportedException if there is some problem cloning the\n     *                                    map.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.plot.CategoryPlot.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.plot.PieLabelRecord.getBaseY": "/**\n     * Returns the base y-coordinate.  This is where the label will appear if\n     * there is no overlapping of labels.\n     *\n     * @return The base y-coordinate.\n     */\n",
"org.jfree.chart.plot.PieLabelRecord.setBaseY": "/**\n     * Sets the base y-coordinate.\n     *\n     * @param base  the base y-coordinate.\n     */\n",
"org.jfree.chart.plot.PieLabelRecord.getLowerY": "/**\n     * Returns the lower bound of the label.\n     *\n     * @return The lower bound.\n     */\n",
"org.jfree.chart.plot.PieLabelRecord.getUpperY": "/**\n     * Returns the upper bound of the label.\n     *\n     * @return The upper bound.\n     */\n",
"org.jfree.chart.plot.PieLabelRecord.getAngle": "/**\n     * Returns the angle of the middle of the section, in radians.\n     *\n     * @return The angle, in radians.\n     */\n",
"org.jfree.chart.plot.PieLabelRecord.getKey": "/**\n     * Returns the key for the section that the label applies to.\n     *\n     * @return The key.\n     */\n",
"org.jfree.chart.plot.PieLabelRecord.getLabel": "/**\n     * Returns the label.\n     *\n     * @return The label.\n     */\n",
"org.jfree.chart.plot.PieLabelRecord.getLabelHeight": "/**\n     * Returns the label height (you could derive this from the label itself,\n     * but we cache the value so it can be retrieved quickly).\n     *\n     * @return The label height (in Java2D units).\n     */\n",
"org.jfree.chart.plot.PieLabelRecord.getAllocatedY": "/**\n     * Returns the allocated y-coordinate.\n     *\n     * @return The allocated y-coordinate.\n     */\n",
"org.jfree.chart.plot.PieLabelRecord.setAllocatedY": "/**\n     * Sets the allocated y-coordinate.\n     *\n     * @param y  the y-coordinate.\n     */\n",
"org.jfree.chart.plot.PieLabelRecord.getGap": "/**\n     * Returns the gap.\n     *\n     * @return The gap.\n     */\n",
"org.jfree.chart.plot.PieLabelRecord.getLinkPercent": "/**\n     * Returns the link percent.\n     *\n     * @return The link percent.\n     */\n",
"org.jfree.chart.plot.PieLabelRecord.compareTo": "/**\n     * Compares this object to an arbitrary object.\n     *\n     * @param obj  the object to compare against.\n     *\n     * @return An integer that specifies the relative order of the two objects.\n     */\n",
"org.jfree.chart.plot.PieLabelRecord.equals": "/**\n     * Tests this record for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.PieLabelRecord.toString": "/**\n     * Returns a string describing the object.  This is used for debugging only.\n     *\n     * @return A string.\n     */\n",
"org.jfree.chart.plot.dial.DialScale.valueToAngle": "/**\n     * Converts a data value to an angle (in degrees, using the same\n     * specification as Java's Arc2D class).\n     *\n     * @param value  the data value.\n     *\n     * @return The angle in degrees.\n     *\n     * @see #angleToValue(double)\n     */\n",
"org.jfree.chart.plot.dial.DialScale.angleToValue": "/**\n     * Converts an angle (in degrees) to a data value.\n     *\n     * @param angle  the angle (in degrees).\n     *\n     * @return The data value.\n     *\n     * @see #valueToAngle(double)\n     */\n",
"org.jfree.chart.plot.dial.DialTextAnnotation.getLabel": "/**\n     * Returns the label text.\n     *\n     * @return The label text (never {@code null}).\n     *\n     * @see #setLabel(String)\n     */\n",
"org.jfree.chart.plot.dial.DialTextAnnotation.setLabel": "/**\n     * Sets the label and sends a {@link DialLayerChangeEvent} to all\n     * registered listeners.\n     *\n     * @param label  the label ({@code null} not permitted).\n     *\n     * @see #getLabel()\n     */\n",
"org.jfree.chart.plot.dial.DialTextAnnotation.getFont": "/**\n     * Returns the font used to display the label.\n     *\n     * @return The font (never {@code null}).\n     *\n     * @see #setFont(Font)\n     */\n",
"org.jfree.chart.plot.dial.DialTextAnnotation.setFont": "/**\n     * Sets the font used to display the label and sends a\n     * {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param font  the font ({@code null} not permitted).\n     *\n     * @see #getFont()\n     */\n",
"org.jfree.chart.plot.dial.DialTextAnnotation.getPaint": "/**\n     * Returns the paint used to display the label.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setPaint(Paint)\n     */\n",
"org.jfree.chart.plot.dial.DialTextAnnotation.setPaint": "/**\n     * Sets the paint used to display the label and sends a\n     * {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getPaint()\n     */\n",
"org.jfree.chart.plot.dial.DialTextAnnotation.getAngle": "/**\n     * Returns the angle used to calculate the anchor point.\n     *\n     * @return The angle (in degrees).\n     *\n     * @see #setAngle(double)\n     * @see #getRadius()\n     */\n",
"org.jfree.chart.plot.dial.DialTextAnnotation.setAngle": "/**\n     * Sets the angle used to calculate the anchor point and sends a\n     * {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param angle  the angle (in degrees).\n     *\n     * @see #getAngle()\n     * @see #setRadius(double)\n     */\n",
"org.jfree.chart.plot.dial.DialTextAnnotation.getRadius": "/**\n     * Returns the radius used to calculate the anchor point.  This is\n     * specified as a percentage relative to the dial's framing rectangle.\n     *\n     * @return The radius.\n     *\n     * @see #setRadius(double)\n     * @see #getAngle()\n     */\n",
"org.jfree.chart.plot.dial.DialTextAnnotation.setRadius": "/**\n     * Sets the radius used to calculate the anchor point and sends a\n     * {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param radius  the radius (as a percentage of the dial's framing\n     *                rectangle).\n     *\n     * @see #getRadius()\n     * @see #setAngle(double)\n     */\n",
"org.jfree.chart.plot.dial.DialTextAnnotation.getAnchor": "/**\n     * Returns the text anchor point that will be aligned to the position\n     * specified by {@link #getAngle()} and {@link #getRadius()}.\n     *\n     * @return The anchor point.\n     *\n     * @see #setAnchor(TextAnchor)\n     */\n",
"org.jfree.chart.plot.dial.DialTextAnnotation.setAnchor": "/**\n     * Sets the text anchor point and sends a {@link DialLayerChangeEvent} to\n     * all registered listeners.\n     *\n     * @param anchor  the anchor point ({@code null} not permitted).\n     *\n     * @see #getAnchor()\n     */\n",
"org.jfree.chart.plot.dial.DialTextAnnotation.isClippedToWindow": "/**\n     * Returns {@code true} to indicate that this layer should be\n     * clipped within the dial window.\n     *\n     * @return {@code true}.\n     */\n",
"org.jfree.chart.plot.dial.DialTextAnnotation.draw": "/**\n     * Draws the background to the specified graphics device.  If the dial\n     * frame specifies a window, the clipping region will already have been\n     * set to this window before this method is called.\n     *\n     * @param g2  the graphics device ({@code null} not permitted).\n     * @param plot  the plot (ignored here).\n     * @param frame  the dial frame (ignored here).\n     * @param view  the view rectangle ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.dial.DialTextAnnotation.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.dial.DialTextAnnotation.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return The hash code.\n     */\n",
"org.jfree.chart.plot.dial.DialTextAnnotation.clone": "/**\n     * Returns a clone of this instance.\n     *\n     * @return The clone.\n     *\n     * @throws CloneNotSupportedException if some attribute of this instance\n     *     cannot be cloned.\n     */\n",
"org.jfree.chart.plot.dial.DialTextAnnotation.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.plot.dial.DialTextAnnotation.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.plot.dial.DialCap.getRadius": "/**\n     * Returns the radius of the cap, as a percentage of the dial's framing\n     * rectangle.\n     *\n     * @return The radius.\n     *\n     * @see #setRadius(double)\n     */\n",
"org.jfree.chart.plot.dial.DialCap.setRadius": "/**\n     * Sets the radius of the cap, as a percentage of the dial's framing\n     * rectangle, and sends a {@link DialLayerChangeEvent} to all registered\n     * listeners.\n     *\n     * @param radius  the radius (must be greater than zero).\n     *\n     * @see #getRadius()\n     */\n",
"org.jfree.chart.plot.dial.DialCap.getFillPaint": "/**\n     * Returns the paint used to fill the cap.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setFillPaint(Paint)\n     */\n",
"org.jfree.chart.plot.dial.DialCap.setFillPaint": "/**\n     * Sets the paint for the cap background and sends a\n     * {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getFillPaint()\n     */\n",
"org.jfree.chart.plot.dial.DialCap.getOutlinePaint": "/**\n     * Returns the paint used to draw the outline of the cap.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setOutlinePaint(Paint)\n     */\n",
"org.jfree.chart.plot.dial.DialCap.setOutlinePaint": "/**\n     * Sets the paint used to draw the outline of the cap and sends a\n     * {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getOutlinePaint()\n     */\n",
"org.jfree.chart.plot.dial.DialCap.getOutlineStroke": "/**\n     * Returns the stroke used to draw the outline of the cap.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setOutlineStroke(Stroke)\n     */\n",
"org.jfree.chart.plot.dial.DialCap.setOutlineStroke": "/**\n     * Sets the stroke used to draw the outline of the cap and sends a\n     * {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getOutlineStroke()\n     */\n",
"org.jfree.chart.plot.dial.DialCap.isClippedToWindow": "/**\n     * Returns {@code true} to indicate that this layer should be\n     * clipped within the dial window.\n     *\n     * @return {@code true}.\n     */\n",
"org.jfree.chart.plot.dial.DialCap.draw": "/**\n     * Draws the background to the specified graphics device.  If the dial\n     * frame specifies a window, the clipping region will already have been\n     * set to this window before this method is called.\n     *\n     * @param g2  the graphics device ({@code null} not permitted).\n     * @param plot  the plot (ignored here).\n     * @param frame  the dial frame (ignored here).\n     * @param view  the view rectangle ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.dial.DialCap.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.dial.DialCap.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return The hash code.\n     */\n",
"org.jfree.chart.plot.dial.DialCap.clone": "/**\n     * Returns a clone of this instance.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if some attribute of the cap cannot\n     *     be cloned.\n     */\n",
"org.jfree.chart.plot.dial.DialCap.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.plot.dial.DialCap.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.plot.dial.AbstractDialLayer.isVisible": "/**\n     * Returns {@code true} if this layer is visible (should be displayed),\n     * and {@code false} otherwise.\n     *\n     * @return A boolean.\n     *\n     * @see #setVisible(boolean)\n     */\n",
"org.jfree.chart.plot.dial.AbstractDialLayer.setVisible": "/**\n     * Sets the flag that determines whether or not this layer is drawn by\n     * the plot, and sends a {@link DialLayerChangeEvent} to all registered\n     * listeners.\n     *\n     * @param visible  the flag.\n     *\n     * @see #isVisible()\n     */\n",
"org.jfree.chart.plot.dial.AbstractDialLayer.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.dial.AbstractDialLayer.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.plot.dial.AbstractDialLayer.clone": "/**\n     * Returns a clone of this instance.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning this\n     *     instance.\n     */\n",
"org.jfree.chart.plot.dial.AbstractDialLayer.addChangeListener": "/**\n     * Registers an object for notification of changes to the dial layer.\n     *\n     * @param listener  the object that is being registered.\n     *\n     * @see #removeChangeListener(DialLayerChangeListener)\n     */\n",
"org.jfree.chart.plot.dial.AbstractDialLayer.removeChangeListener": "/**\n     * Deregisters an object for notification of changes to the dial layer.\n     *\n     * @param listener  the object to deregister.\n     *\n     * @see #addChangeListener(DialLayerChangeListener)\n     */\n",
"org.jfree.chart.plot.dial.AbstractDialLayer.hasListener": "/**\n     * Returns {@code true} if the specified object is registered with\n     * the dataset as a listener.  Most applications won't need to call this\n     * method, it exists mainly for use by unit testing code.\n     *\n     * @param listener  the listener.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.dial.AbstractDialLayer.notifyListeners": "/**\n     * Notifies all registered listeners that the dial layer has changed.\n     * The {@link DialLayerChangeEvent} provides information about the change.\n     *\n     * @param event  information about the change to the axis.\n     */\n",
"org.jfree.chart.plot.dial.AbstractDialLayer.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.plot.dial.DialFrame.getWindow": "/**\n     * Returns the shape of the viewing window for the dial, or\n     * {@code null} if the dial is completely open.  Other layers in the\n     * plot will rely on their drawing to be clipped within this window.\n     *\n     * @param frame  the reference frame for the dial.\n     *\n     * @return The window.\n     */\n",
"org.jfree.chart.plot.dial.DialLayerChangeListener.dialLayerChanged": "/**\n     * A call-back method for receiving notification of a change to a\n     * {@link DialLayer}.\n     *\n     * @param event  the event.\n     */\n",
"org.jfree.chart.plot.dial.DialLayerChangeEvent.getDialLayer": "/**\n     * Returns the layer that generated the event.\n     *\n     * @return The layer that generated the event.\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.getLowerBound": "/**\n     * Returns the lower bound for the scale.\n     *\n     * @return The lower bound for the scale.\n     *\n     * @see #setLowerBound(double)\n     *\n     * @since 1.0.8\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.setLowerBound": "/**\n     * Sets the lower bound for the scale and sends a\n     * {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param lower  the lower bound.\n     *\n     * @see #getLowerBound()\n     *\n     * @since 1.0.8\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.getUpperBound": "/**\n     * Returns the upper bound for the scale.\n     *\n     * @return The upper bound for the scale.\n     *\n     * @see #setUpperBound(double)\n     *\n     * @since 1.0.8\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.setUpperBound": "/**\n     * Sets the upper bound for the scale and sends a\n     * {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param upper  the upper bound.\n     *\n     * @see #getUpperBound()\n     *\n     * @since 1.0.8\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.getStartAngle": "/**\n     * Returns the start angle for the scale (in degrees using the same\n     * orientation as Java's {@code Arc2D} class).\n     *\n     * @return The start angle.\n     *\n     * @see #setStartAngle(double)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.setStartAngle": "/**\n     * Sets the start angle for the scale and sends a\n     * {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param angle  the angle (in degrees).\n     *\n     * @see #getStartAngle()\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.getExtent": "/**\n     * Returns the extent.\n     *\n     * @return The extent.\n     *\n     * @see #setExtent(double)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.setExtent": "/**\n     * Sets the extent and sends a {@link DialLayerChangeEvent} to all\n     * registered listeners.\n     *\n     * @param extent  the extent.\n     *\n     * @see #getExtent()\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.getTickRadius": "/**\n     * Returns the radius (as a percentage of the maximum space available) of\n     * the outer limit of the tick marks.\n     *\n     * @return The tick radius.\n     *\n     * @see #setTickRadius(double)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.setTickRadius": "/**\n     * Sets the tick radius and sends a {@link DialLayerChangeEvent} to all\n     * registered listeners.\n     *\n     * @param radius  the radius.\n     *\n     * @see #getTickRadius()\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.getMajorTickIncrement": "/**\n     * Returns the increment (in data units) between major tick labels.\n     *\n     * @return The increment between major tick labels.\n     *\n     * @see #setMajorTickIncrement(double)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.setMajorTickIncrement": "/**\n     * Sets the increment (in data units) between major tick labels and sends a\n     * {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param increment  the increment (must be &gt; 0).\n     *\n     * @see #getMajorTickIncrement()\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.getMajorTickLength": "/**\n     * Returns the length factor for the major tick marks.  The value is\n     * subtracted from the tick radius to determine the inner starting point\n     * for the tick marks.\n     *\n     * @return The length factor.\n     *\n     * @see #setMajorTickLength(double)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.setMajorTickLength": "/**\n     * Sets the length factor for the major tick marks and sends a\n     * {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param length  the length.\n     *\n     * @see #getMajorTickLength()\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.getMajorTickPaint": "/**\n     * Returns the major tick paint.\n     *\n     * @return The major tick paint (never {@code null}).\n     *\n     * @see #setMajorTickPaint(Paint)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.setMajorTickPaint": "/**\n     * Sets the major tick paint and sends a {@link DialLayerChangeEvent} to\n     * all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getMajorTickPaint()\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.getMajorTickStroke": "/**\n     * Returns the stroke used to draw the major tick marks.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setMajorTickStroke(Stroke)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.setMajorTickStroke": "/**\n     * Sets the stroke used to draw the major tick marks and sends a\n     * {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getMajorTickStroke()\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.getMinorTickCount": "/**\n     * Returns the number of minor tick marks between major tick marks.\n     *\n     * @return The number of minor tick marks between major tick marks.\n     *\n     * @see #setMinorTickCount(int)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.setMinorTickCount": "/**\n     * Sets the number of minor tick marks between major tick marks and sends\n     * a {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param count  the count.\n     *\n     * @see #getMinorTickCount()\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.getMinorTickLength": "/**\n     * Returns the length factor for the minor tick marks.  The value is\n     * subtracted from the tick radius to determine the inner starting point\n     * for the tick marks.\n     *\n     * @return The length factor.\n     *\n     * @see #setMinorTickLength(double)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.setMinorTickLength": "/**\n     * Sets the length factor for the minor tick marks and sends\n     * a {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param length  the length.\n     *\n     * @see #getMinorTickLength()\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.getMinorTickPaint": "/**\n     * Returns the paint used to draw the minor tick marks.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setMinorTickPaint(Paint)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.setMinorTickPaint": "/**\n     * Sets the paint used to draw the minor tick marks and sends a\n     * {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getMinorTickPaint()\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.getMinorTickStroke": "/**\n     * Returns the stroke used to draw the minor tick marks.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setMinorTickStroke(Stroke)\n     *\n     * @since 1.0.8\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.setMinorTickStroke": "/**\n     * Sets the stroke used to draw the minor tick marks and sends a\n     * {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getMinorTickStroke()\n     *\n     * @since 1.0.8\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.getTickLabelOffset": "/**\n     * Returns the tick label offset.\n     *\n     * @return The tick label offset.\n     *\n     * @see #setTickLabelOffset(double)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.setTickLabelOffset": "/**\n     * Sets the tick label offset and sends a {@link DialLayerChangeEvent} to\n     * all registered listeners.\n     *\n     * @param offset  the offset.\n     *\n     * @see #getTickLabelOffset()\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.getTickLabelFont": "/**\n     * Returns the font used to draw the tick labels.\n     *\n     * @return The font (never {@code null}).\n     *\n     * @see #setTickLabelFont(Font)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.setTickLabelFont": "/**\n     * Sets the font used to display the tick labels and sends a\n     * {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param font  the font ({@code null} not permitted).\n     *\n     * @see #getTickLabelFont()\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.getTickLabelPaint": "/**\n     * Returns the paint used to draw the tick labels.\n     *\n     * @return The paint ({@code null} not permitted).\n     *\n     * @see #setTickLabelPaint(Paint)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.setTickLabelPaint": "/**\n     * Sets the paint used to draw the tick labels and sends a\n     * {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.getTickLabelsVisible": "/**\n     * Returns {@code true} if the tick labels should be displayed,\n     * and {@code false} otherwise.\n     *\n     * @return A boolean.\n     *\n     * @see #setTickLabelsVisible(boolean)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.setTickLabelsVisible": "/**\n     * Sets the flag that controls whether or not the tick labels are\n     * displayed, and sends a {@link DialLayerChangeEvent} to all registered\n     * listeners.\n     *\n     * @param visible  the new flag value.\n     *\n     * @see #getTickLabelsVisible()\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.getTickLabelFormatter": "/**\n     * Returns the number formatter used to convert the tick label values to\n     * strings.\n     *\n     * @return The formatter (never {@code null}).\n     *\n     * @see #setTickLabelFormatter(NumberFormat)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.setTickLabelFormatter": "/**\n     * Sets the number formatter used to convert the tick label values to\n     * strings, and sends a {@link DialLayerChangeEvent} to all registered\n     * listeners.\n     *\n     * @param formatter  the formatter ({@code null} not permitted).\n     *\n     * @see #getTickLabelFormatter()\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.getFirstTickLabelVisible": "/**\n     * Returns a flag that controls whether or not the first tick label is\n     * visible.\n     *\n     * @return A boolean.\n     *\n     * @see #setFirstTickLabelVisible(boolean)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.setFirstTickLabelVisible": "/**\n     * Sets a flag that controls whether or not the first tick label is\n     * visible, and sends a {@link DialLayerChangeEvent} to all registered\n     * listeners.\n     *\n     * @param visible  the new flag value.\n     *\n     * @see #getFirstTickLabelVisible()\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.isClippedToWindow": "/**\n     * Returns {@code true} to indicate that this layer should be\n     * clipped within the dial window.\n     *\n     * @return {@code true}.\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.draw": "/**\n     * Draws the scale on the dial plot.\n     *\n     * @param g2  the graphics target ({@code null} not permitted).\n     * @param plot  the dial plot ({@code null} not permitted).\n     * @param frame  the reference frame that is used to construct the\n     *     geometry of the plot ({@code null} not permitted).\n     * @param view  the visible part of the plot ({@code null} not\n     *     permitted).\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.valueToAngle": "/**\n     * Converts a data value to an angle against this scale.\n     *\n     * @param value  the data value.\n     *\n     * @return The angle (in degrees, using the same specification as Java's\n     *     Arc2D class).\n     *\n     * @see #angleToValue(double)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.angleToValue": "/**\n     * Converts the given angle to a data value, based on this scale.\n     *\n     * @param angle  the angle (in degrees).\n     *\n     * @return The data value.\n     *\n     * @see #valueToAngle(double)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.equals": "/**\n     * Tests this {@code StandardDialScale} for equality with an arbitrary\n     * object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.clone": "/**\n     * Returns a clone of this instance.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if this instance is not cloneable.\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.plot.dial.StandardDialScale.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.plot.dial.ArcDialFrame.getBackgroundPaint": "/**\n     * Returns the background paint (never {@code null}).\n     *\n     * @return The background paint.\n     *\n     * @see #setBackgroundPaint(Paint)\n     */\n",
"org.jfree.chart.plot.dial.ArcDialFrame.setBackgroundPaint": "/**\n     * Sets the background paint and sends a {@link DialLayerChangeEvent} to\n     * all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getBackgroundPaint()\n     */\n",
"org.jfree.chart.plot.dial.ArcDialFrame.getForegroundPaint": "/**\n     * Returns the foreground paint.\n     *\n     * @return The foreground paint (never {@code null}).\n     *\n     * @see #setForegroundPaint(Paint)\n     */\n",
"org.jfree.chart.plot.dial.ArcDialFrame.setForegroundPaint": "/**\n     * Sets the foreground paint and sends a {@link DialLayerChangeEvent} to\n     * all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getForegroundPaint()\n     */\n",
"org.jfree.chart.plot.dial.ArcDialFrame.getStroke": "/**\n     * Returns the stroke.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setStroke(Stroke)\n     */\n",
"org.jfree.chart.plot.dial.ArcDialFrame.setStroke": "/**\n     * Sets the stroke and sends a {@link DialLayerChangeEvent} to\n     * all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getStroke()\n     */\n",
"org.jfree.chart.plot.dial.ArcDialFrame.getInnerRadius": "/**\n     * Returns the inner radius, relative to the framing rectangle.\n     *\n     * @return The inner radius.\n     *\n     * @see #setInnerRadius(double)\n     */\n",
"org.jfree.chart.plot.dial.ArcDialFrame.setInnerRadius": "/**\n     * Sets the inner radius and sends a {@link DialLayerChangeEvent} to\n     * all registered listeners.\n     *\n     * @param radius  the inner radius.\n     *\n     * @see #getInnerRadius()\n     */\n",
"org.jfree.chart.plot.dial.ArcDialFrame.getOuterRadius": "/**\n     * Returns the outer radius, relative to the framing rectangle.\n     *\n     * @return The outer radius.\n     *\n     * @see #setOuterRadius(double)\n     */\n",
"org.jfree.chart.plot.dial.ArcDialFrame.setOuterRadius": "/**\n     * Sets the outer radius and sends a {@link DialLayerChangeEvent} to\n     * all registered listeners.\n     *\n     * @param radius  the outer radius.\n     *\n     * @see #getOuterRadius()\n     */\n",
"org.jfree.chart.plot.dial.ArcDialFrame.getStartAngle": "/**\n     * Returns the start angle.\n     *\n     * @return The start angle.\n     *\n     * @see #setStartAngle(double)\n     */\n",
"org.jfree.chart.plot.dial.ArcDialFrame.setStartAngle": "/**\n     * Sets the start angle and sends a {@link DialLayerChangeEvent} to\n     * all registered listeners.\n     *\n     * @param angle  the angle.\n     *\n     * @see #getStartAngle()\n     */\n",
"org.jfree.chart.plot.dial.ArcDialFrame.getExtent": "/**\n     * Returns the extent.\n     *\n     * @return The extent.\n     *\n     * @see #setExtent(double)\n     */\n",
"org.jfree.chart.plot.dial.ArcDialFrame.setExtent": "/**\n     * Sets the extent and sends a {@link DialLayerChangeEvent} to\n     * all registered listeners.\n     *\n     * @param extent  the extent.\n     *\n     * @see #getExtent()\n     */\n",
"org.jfree.chart.plot.dial.ArcDialFrame.getWindow": "/**\n     * Returns the shape for the window for this dial.  Some dial layers will\n     * request that their drawing be clipped within this window.\n     *\n     * @param frame  the reference frame ({@code null} not permitted).\n     *\n     * @return The shape of the dial's window.\n     */\n",
"org.jfree.chart.plot.dial.ArcDialFrame.getOuterWindow": "/**\n     * Returns the outer window.\n     *\n     * @param frame  the frame.\n     *\n     * @return The outer window.\n     */\n",
"org.jfree.chart.plot.dial.ArcDialFrame.draw": "/**\n     * Draws the frame.\n     *\n     * @param g2  the graphics target.\n     * @param plot  the plot.\n     * @param frame  the dial's reference frame.\n     * @param view  the dial's view rectangle.\n     */\n",
"org.jfree.chart.plot.dial.ArcDialFrame.isClippedToWindow": "/**\n     * Returns {@code false} to indicate that this dial layer is not\n     * clipped to the dial window.\n     *\n     * @return {@code false}.\n     */\n",
"org.jfree.chart.plot.dial.ArcDialFrame.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.dial.ArcDialFrame.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return The hash code.\n     */\n",
"org.jfree.chart.plot.dial.ArcDialFrame.clone": "/**\n     * Returns a clone of this instance.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if any attribute of this instance\n     *     cannot be cloned.\n     */\n",
"org.jfree.chart.plot.dial.ArcDialFrame.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.plot.dial.ArcDialFrame.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.getBackground": "/**\n     * Returns the background.\n     *\n     * @return The background (possibly {@code null}).\n     *\n     * @see #setBackground(DialLayer)\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.setBackground": "/**\n     * Sets the background layer and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param background  the background layer ({@code null} permitted).\n     *\n     * @see #getBackground()\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.getCap": "/**\n     * Returns the cap.\n     *\n     * @return The cap (possibly {@code null}).\n     *\n     * @see #setCap(DialLayer)\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.setCap": "/**\n     * Sets the cap and sends a {@link PlotChangeEvent} to all registered\n     * listeners.\n     *\n     * @param cap  the cap ({@code null} permitted).\n     *\n     * @see #getCap()\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.getDialFrame": "/**\n     * Returns the dial's frame.\n     *\n     * @return The dial's frame (never {@code null}).\n     *\n     * @see #setDialFrame(DialFrame)\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.setDialFrame": "/**\n     * Sets the dial's frame and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param frame  the frame ({@code null} not permitted).\n     *\n     * @see #getDialFrame()\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.getViewX": "/**\n     * Returns the x-coordinate of the viewing rectangle.  This is specified\n     * in the range 0.0 to 1.0, relative to the dial's framing rectangle.\n     *\n     * @return The x-coordinate of the viewing rectangle.\n     *\n     * @see #setView(double, double, double, double)\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.getViewY": "/**\n     * Returns the y-coordinate of the viewing rectangle.  This is specified\n     * in the range 0.0 to 1.0, relative to the dial's framing rectangle.\n     *\n     * @return The y-coordinate of the viewing rectangle.\n     *\n     * @see #setView(double, double, double, double)\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.getViewWidth": "/**\n     * Returns the width of the viewing rectangle.  This is specified\n     * in the range 0.0 to 1.0, relative to the dial's framing rectangle.\n     *\n     * @return The width of the viewing rectangle.\n     *\n     * @see #setView(double, double, double, double)\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.getViewHeight": "/**\n     * Returns the height of the viewing rectangle.  This is specified\n     * in the range 0.0 to 1.0, relative to the dial's framing rectangle.\n     *\n     * @return The height of the viewing rectangle.\n     *\n     * @see #setView(double, double, double, double)\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.setView": "/**\n     * Sets the viewing rectangle, relative to the dial's framing rectangle,\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param x  the x-coordinate (in the range 0.0 to 1.0).\n     * @param y  the y-coordinate (in the range 0.0 to 1.0).\n     * @param w  the width (in the range 0.0 to 1.0).\n     * @param h  the height (in the range 0.0 to 1.0).\n     *\n     * @see #getViewX()\n     * @see #getViewY()\n     * @see #getViewWidth()\n     * @see #getViewHeight()\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.addLayer": "/**\n     * Adds a layer to the plot and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param layer  the layer ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.getLayerIndex": "/**\n     * Returns the index for the specified layer.\n     *\n     * @param layer  the layer ({@code null} not permitted).\n     *\n     * @return The layer index.\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.removeLayer": "/**\n     * Removes the layer at the specified index and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the index.\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.removeLayer": "/**\n     * Removes the specified layer and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param layer  the layer ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.addPointer": "/**\n     * Adds a pointer to the plot and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param pointer  the pointer ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.getPointerIndex": "/**\n     * Returns the index for the specified pointer.\n     *\n     * @param pointer  the pointer ({@code null} not permitted).\n     *\n     * @return The pointer index.\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.removePointer": "/**\n     * Removes the pointer at the specified index and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the index.\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.removePointer": "/**\n     * Removes the specified pointer and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param pointer  the pointer ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.getPointerForDataset": "/**\n     * Returns the dial pointer that is associated with the specified\n     * dataset, or {@code null}.\n     *\n     * @param datasetIndex  the dataset index.\n     *\n     * @return The pointer.\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.getDataset": "/**\n     * Returns the primary dataset for the plot.\n     *\n     * @return The primary dataset (possibly {@code null}).\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.getDataset": "/**\n     * Returns the dataset at the given index.\n     *\n     * @param index  the dataset index.\n     *\n     * @return The dataset (possibly {@code null}).\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.setDataset": "/**\n     * Sets the dataset for the plot, replacing the existing dataset, if there\n     * is one, and sends a {@link PlotChangeEvent} to all registered\n     * listeners.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.setDataset": "/**\n     * Sets a dataset for the plot.\n     *\n     * @param index  the dataset index.\n     * @param dataset  the dataset ({@code null} permitted).\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.getDatasetCount": "/**\n     * Returns the number of datasets.\n     *\n     * @return The number of datasets.\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.draw": "/**\n     * Draws the plot.  This method is usually called by the {@link JFreeChart}\n     * instance that manages the plot.\n     *\n     * @param g2  the graphics target.\n     * @param area  the area in which the plot should be drawn.\n     * @param anchor  the anchor point (typically the last point that the\n     *     mouse clicked on, {@code null} is permitted).\n     * @param parentState  the state for the parent plot (if any).\n     * @param info  used to collect plot rendering info ({@code null}\n     *     permitted).\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.viewToFrame": "/**\n     * Returns the frame surrounding the specified view rectangle.\n     *\n     * @param view  the view rectangle ({@code null} not permitted).\n     *\n     * @return The frame rectangle.\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.getValue": "/**\n     * Returns the value from the specified dataset.\n     *\n     * @param datasetIndex  the dataset index.\n     *\n     * @return The data value.\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.addScale": "/**\n     * Adds a dial scale to the plot and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param index  the scale index.\n     * @param scale  the scale ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.getScale": "/**\n     * Returns the scale at the given index.\n     *\n     * @param index  the scale index.\n     *\n     * @return The scale (possibly {@code null}).\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.mapDatasetToScale": "/**\n     * Maps a dataset to a particular scale.\n     *\n     * @param index  the dataset index (zero-based).\n     * @param scaleIndex  the scale index (zero-based).\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.getScaleForDataset": "/**\n     * Returns the dial scale for a specific dataset.\n     *\n     * @param datasetIndex  the dataset index.\n     *\n     * @return The dial scale.\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.rectangleByRadius": "/**\n     * A utility method that computes a rectangle using relative radius values.\n     *\n     * @param rect  the reference rectangle ({@code null} not permitted).\n     * @param radiusW  the width radius (must be &gt; 0.0)\n     * @param radiusH  the height radius.\n     *\n     * @return A new rectangle.\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.dialLayerChanged": "/**\n     * Receives notification when a layer has changed, and responds by\n     * forwarding a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param event  the event.\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.equals": "/**\n     * Tests this {@code DialPlot} instance for equality with an\n     * arbitrary object.  The plot's dataset(s) is (are) not included in\n     * the test.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return The hash code.\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.getPlotType": "/**\n     * Returns the plot type.\n     *\n     * @return {@code \"DialPlot\"}\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.plot.dial.DialPlot.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.plot.dial.DialBackground.getPaint": "/**\n     * Returns the paint used to fill the background.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setPaint(Paint)\n     */\n",
"org.jfree.chart.plot.dial.DialBackground.setPaint": "/**\n     * Sets the paint for the dial background and sends a\n     * {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getPaint()\n     */\n",
"org.jfree.chart.plot.dial.DialBackground.getGradientPaintTransformer": "/**\n     * Returns the transformer used to adjust the coordinates of any\n     * {@code GradientPaint} instance used for the background paint.\n     *\n     * @return The transformer (never {@code null}).\n     *\n     * @see #setGradientPaintTransformer(GradientPaintTransformer)\n     */\n",
"org.jfree.chart.plot.dial.DialBackground.setGradientPaintTransformer": "/**\n     * Sets the transformer used to adjust the coordinates of any\n     * {@code GradientPaint} instance used for the background paint, and\n     * sends a {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param t  the transformer ({@code null} not permitted).\n     *\n     * @see #getGradientPaintTransformer()\n     */\n",
"org.jfree.chart.plot.dial.DialBackground.isClippedToWindow": "/**\n     * Returns {@code true} to indicate that this layer should be\n     * clipped within the dial window.\n     *\n     * @return {@code true}.\n     */\n",
"org.jfree.chart.plot.dial.DialBackground.draw": "/**\n     * Draws the background to the specified graphics device.  If the dial\n     * frame specifies a window, the clipping region will already have been\n     * set to this window before this method is called.\n     *\n     * @param g2  the graphics device ({@code null} not permitted).\n     * @param plot  the plot (ignored here).\n     * @param frame  the dial frame (ignored here).\n     * @param view  the view rectangle ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.dial.DialBackground.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.dial.DialBackground.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return The hash code.\n     */\n",
"org.jfree.chart.plot.dial.DialBackground.clone": "/**\n     * Returns a clone of this instance.\n     *\n     * @return The clone.\n     *\n     * @throws CloneNotSupportedException if some attribute of this instance\n     *     cannot be cloned.\n     */\n",
"org.jfree.chart.plot.dial.DialBackground.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.plot.dial.DialBackground.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.plot.dial.StandardDialRange.getScaleIndex": "/**\n     * Returns the scale index.\n     *\n     * @return The scale index.\n     *\n     * @see #setScaleIndex(int)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialRange.setScaleIndex": "/**\n     * Sets the scale index and sends a {@link DialLayerChangeEvent} to all\n     * registered listeners.\n     *\n     * @param index  the scale index.\n     *\n     * @see #getScaleIndex()\n     */\n",
"org.jfree.chart.plot.dial.StandardDialRange.getLowerBound": "/**\n     * Returns the lower bound (a data value) of the dial range.\n     *\n     * @return The lower bound of the dial range.\n     *\n     * @see #setLowerBound(double)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialRange.setLowerBound": "/**\n     * Sets the lower bound of the dial range and sends a\n     * {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param bound  the lower bound.\n     *\n     * @see #getLowerBound()\n     */\n",
"org.jfree.chart.plot.dial.StandardDialRange.getUpperBound": "/**\n     * Returns the upper bound of the dial range.\n     *\n     * @return The upper bound.\n     *\n     * @see #setUpperBound(double)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialRange.setUpperBound": "/**\n     * Sets the upper bound of the dial range and sends a\n     * {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param bound  the upper bound.\n     *\n     * @see #getUpperBound()\n     */\n",
"org.jfree.chart.plot.dial.StandardDialRange.setBounds": "/**\n     * Sets the bounds for the range and sends a {@link DialLayerChangeEvent}\n     * to all registered listeners.\n     *\n     * @param lower  the lower bound.\n     * @param upper  the upper bound.\n     */\n",
"org.jfree.chart.plot.dial.StandardDialRange.getPaint": "/**\n     * Returns the paint used to highlight the range.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setPaint(Paint)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialRange.setPaint": "/**\n     * Sets the paint used to highlight the range and sends a\n     * {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getPaint()\n     */\n",
"org.jfree.chart.plot.dial.StandardDialRange.getInnerRadius": "/**\n     * Returns the inner radius.\n     *\n     * @return The inner radius.\n     *\n     * @see #setInnerRadius(double)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialRange.setInnerRadius": "/**\n     * Sets the inner radius and sends a {@link DialLayerChangeEvent} to all\n     * registered listeners.\n     *\n     * @param radius  the radius.\n     *\n     * @see #getInnerRadius()\n     */\n",
"org.jfree.chart.plot.dial.StandardDialRange.getOuterRadius": "/**\n     * Returns the outer radius.\n     *\n     * @return The outer radius.\n     *\n     * @see #setOuterRadius(double)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialRange.setOuterRadius": "/**\n     * Sets the outer radius and sends a {@link DialLayerChangeEvent} to all\n     * registered listeners.\n     *\n     * @param radius  the radius.\n     *\n     * @see #getOuterRadius()\n     */\n",
"org.jfree.chart.plot.dial.StandardDialRange.isClippedToWindow": "/**\n     * Returns {@code true} to indicate that this layer should be\n     * clipped within the dial window.\n     *\n     * @return {@code true}.\n     */\n",
"org.jfree.chart.plot.dial.StandardDialRange.draw": "/**\n     * Draws the range.\n     *\n     * @param g2  the graphics target.\n     * @param plot  the plot.\n     * @param frame  the dial's reference frame (in Java2D space).\n     * @param view  the dial's view rectangle (in Java2D space).\n     */\n",
"org.jfree.chart.plot.dial.StandardDialRange.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.dial.StandardDialRange.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return The hash code.\n     */\n",
"org.jfree.chart.plot.dial.StandardDialRange.clone": "/**\n     * Returns a clone of this instance.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if any of the attributes of this\n     *     instance cannot be cloned.\n     */\n",
"org.jfree.chart.plot.dial.StandardDialRange.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.plot.dial.StandardDialRange.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.plot.dial.StandardDialFrame.getRadius": "/**\n     * Returns the radius, relative to the framing rectangle.\n     *\n     * @return The radius.\n     *\n     * @see #setRadius(double)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialFrame.setRadius": "/**\n     * Sets the radius and sends a {@link DialLayerChangeEvent} to all\n     * registered listeners.\n     *\n     * @param radius  the radius (must be positive).\n     *\n     * @see #getRadius()\n     */\n",
"org.jfree.chart.plot.dial.StandardDialFrame.getBackgroundPaint": "/**\n     * Returns the background paint.\n     *\n     * @return The background paint (never {@code null}).\n     *\n     * @see #setBackgroundPaint(Paint)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialFrame.setBackgroundPaint": "/**\n     * Sets the background paint and sends a {@link DialLayerChangeEvent} to\n     * all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getBackgroundPaint()\n     */\n",
"org.jfree.chart.plot.dial.StandardDialFrame.getForegroundPaint": "/**\n     * Returns the foreground paint.\n     *\n     * @return The foreground paint (never {@code null}).\n     *\n     * @see #setForegroundPaint(Paint)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialFrame.setForegroundPaint": "/**\n     * Sets the foreground paint and sends a {@link DialLayerChangeEvent} to\n     * all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getForegroundPaint()\n     */\n",
"org.jfree.chart.plot.dial.StandardDialFrame.getStroke": "/**\n     * Returns the stroke for the frame.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setStroke(Stroke)\n     */\n",
"org.jfree.chart.plot.dial.StandardDialFrame.setStroke": "/**\n     * Sets the stroke and sends a {@link DialLayerChangeEvent} to all\n     * registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getStroke()\n     */\n",
"org.jfree.chart.plot.dial.StandardDialFrame.getWindow": "/**\n     * Returns the shape for the window for this dial.  Some dial layers will\n     * request that their drawing be clipped within this window.\n     *\n     * @param frame  the reference frame ({@code null} not permitted).\n     *\n     * @return The shape of the dial's window.\n     */\n",
"org.jfree.chart.plot.dial.StandardDialFrame.isClippedToWindow": "/**\n     * Returns {@code false} to indicate that this dial layer is not\n     * clipped to the dial window.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.dial.StandardDialFrame.draw": "/**\n     * Draws the frame.  This method is called by the {@link DialPlot} class,\n     * you shouldn't need to call it directly.\n     *\n     * @param g2  the graphics target ({@code null} not permitted).\n     * @param plot  the plot ({@code null} not permitted).\n     * @param frame  the frame ({@code null} not permitted).\n     * @param view  the view ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.dial.StandardDialFrame.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.dial.StandardDialFrame.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return The hash code.\n     */\n",
"org.jfree.chart.plot.dial.StandardDialFrame.clone": "/**\n     * Returns a clone of this instance.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if any of the frame's attributes\n     *     cannot be cloned.\n     */\n",
"org.jfree.chart.plot.dial.StandardDialFrame.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.plot.dial.StandardDialFrame.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.getDatasetIndex": "/**\n     * Returns the index of the dataset from which this indicator fetches its\n     * current value.\n     *\n     * @return The dataset index.\n     *\n     * @see #setDatasetIndex(int)\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.setDatasetIndex": "/**\n     * Sets the dataset index and sends a {@link DialLayerChangeEvent} to all\n     * registered listeners.\n     *\n     * @param index  the index.\n     *\n     * @see #getDatasetIndex()\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.getAngle": "/**\n     * Returns the angle for the anchor point.  The angle is specified in\n     * degrees using the same orientation as Java's {@code Arc2D} class.\n     *\n     * @return The angle (in degrees).\n     *\n     * @see #setAngle(double)\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.setAngle": "/**\n     * Sets the angle for the anchor point and sends a\n     * {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param angle  the angle (in degrees).\n     *\n     * @see #getAngle()\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.getRadius": "/**\n     * Returns the radius.\n     *\n     * @return The radius.\n     *\n     * @see #setRadius(double)\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.setRadius": "/**\n     * Sets the radius and sends a {@link DialLayerChangeEvent} to all\n     * registered listeners.\n     *\n     * @param radius  the radius.\n     *\n     * @see #getRadius()\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.getFrameAnchor": "/**\n     * Returns the frame anchor.\n     *\n     * @return The frame anchor.\n     *\n     * @see #setFrameAnchor(RectangleAnchor)\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.setFrameAnchor": "/**\n     * Sets the frame anchor and sends a {@link DialLayerChangeEvent} to all\n     * registered listeners.\n     *\n     * @param anchor  the anchor ({@code null} not permitted).\n     *\n     * @see #getFrameAnchor()\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.getTemplateValue": "/**\n     * Returns the template value.\n     *\n     * @return The template value (never {@code null}).\n     *\n     * @see #setTemplateValue(Number)\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.setTemplateValue": "/**\n     * Sets the template value and sends a {@link DialLayerChangeEvent} to\n     * all registered listeners.\n     *\n     * @param value  the value ({@code null} not permitted).\n     *\n     * @see #setTemplateValue(Number)\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.getMaxTemplateValue": "/**\n     * Returns the template value for the maximum size of the indicator\n     * bounds.\n     *\n     * @return The template value (possibly {@code null}).\n     *\n     * @since 1.0.14\n     *\n     * @see #setMaxTemplateValue(java.lang.Number)\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.setMaxTemplateValue": "/**\n     * Sets the template value for the maximum size of the indicator bounds\n     * and sends a {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param value  the value ({@code null} permitted).\n     *\n     * @since 1.0.14\n     *\n     * @see #getMaxTemplateValue()\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.getNumberFormat": "/**\n     * Returns the formatter used to format the value.\n     *\n     * @return The formatter (never {@code null}).\n     *\n     * @see #setNumberFormat(NumberFormat)\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.setNumberFormat": "/**\n     * Sets the formatter used to format the value and sends a\n     * {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param formatter  the formatter ({@code null} not permitted).\n     *\n     * @see #getNumberFormat()\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.getFont": "/**\n     * Returns the font.\n     *\n     * @return The font (never {@code null}).\n     *\n     * @see #getFont()\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.setFont": "/**\n     * Sets the font and sends a {@link DialLayerChangeEvent} to all registered\n     * listeners.\n     *\n     * @param font  the font ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.getPaint": "/**\n     * Returns the paint.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setPaint(Paint)\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.setPaint": "/**\n     * Sets the paint and sends a {@link DialLayerChangeEvent} to all\n     * registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getPaint()\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.getBackgroundPaint": "/**\n     * Returns the background paint.\n     *\n     * @return The background paint.\n     *\n     * @see #setBackgroundPaint(Paint)\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.setBackgroundPaint": "/**\n     * Sets the background paint and sends a {@link DialLayerChangeEvent} to\n     * all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getBackgroundPaint()\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.getOutlineStroke": "/**\n     * Returns the outline stroke.\n     *\n     * @return The outline stroke (never {@code null}).\n     *\n     * @see #setOutlineStroke(Stroke)\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.setOutlineStroke": "/**\n     * Sets the outline stroke and sends a {@link DialLayerChangeEvent} to\n     * all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getOutlineStroke()\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.getOutlinePaint": "/**\n     * Returns the outline paint.\n     *\n     * @return The outline paint (never {@code null}).\n     *\n     * @see #setOutlinePaint(Paint)\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.setOutlinePaint": "/**\n     * Sets the outline paint and sends a {@link DialLayerChangeEvent} to all\n     * registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getOutlinePaint()\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.getInsets": "/**\n     * Returns the insets.\n     *\n     * @return The insets (never {@code null}).\n     *\n     * @see #setInsets(RectangleInsets)\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.setInsets": "/**\n     * Sets the insets and sends a {@link DialLayerChangeEvent} to all\n     * registered listeners.\n     *\n     * @param insets  the insets ({@code null} not permitted).\n     *\n     * @see #getInsets()\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.getValueAnchor": "/**\n     * Returns the value anchor.\n     *\n     * @return The value anchor (never {@code null}).\n     *\n     * @see #setValueAnchor(RectangleAnchor)\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.setValueAnchor": "/**\n     * Sets the value anchor and sends a {@link DialLayerChangeEvent} to all\n     * registered listeners.\n     *\n     * @param anchor  the anchor ({@code null} not permitted).\n     *\n     * @see #getValueAnchor()\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.getTextAnchor": "/**\n     * Returns the text anchor.\n     *\n     * @return The text anchor (never {@code null}).\n     *\n     * @see #setTextAnchor(TextAnchor)\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.setTextAnchor": "/**\n     * Sets the text anchor and sends a {@link DialLayerChangeEvent} to all\n     * registered listeners.\n     *\n     * @param anchor  the anchor ({@code null} not permitted).\n     *\n     * @see #getTextAnchor()\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.isClippedToWindow": "/**\n     * Returns {@code true} to indicate that this layer should be\n     * clipped within the dial window.\n     *\n     * @return {@code true}.\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.draw": "/**\n     * Draws the background to the specified graphics device.  If the dial\n     * frame specifies a window, the clipping region will already have been\n     * set to this window before this method is called.\n     *\n     * @param g2  the graphics device ({@code null} not permitted).\n     * @param plot  the plot (ignored here).\n     * @param frame  the dial frame (ignored here).\n     * @param view  the view rectangle ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.fixToRange": "/**\n     * A utility method that adjusts a value, if necessary, to be within a \n     * specified range.\n     * \n     * @param x  the value.\n     * @param minX  the minimum value in the range.\n     * @param maxX  the maximum value in the range.\n     * \n     * @return The adjusted value.\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return The hash code.\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.clone": "/**\n     * Returns a clone of this instance.\n     *\n     * @return The clone.\n     *\n     * @throws CloneNotSupportedException if some attribute of this instance\n     *     cannot be cloned.\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.plot.dial.DialValueIndicator.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.plot.dial.DialPointer.getDatasetIndex": "/**\n     * Returns the dataset index that the pointer maps to.\n     *\n     * @return The dataset index.\n     *\n     * @see #getDatasetIndex()\n     */\n",
"org.jfree.chart.plot.dial.DialPointer.setDatasetIndex": "/**\n     * Sets the dataset index for the pointer and sends a\n     * {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param index  the index.\n     *\n     * @see #getDatasetIndex()\n     */\n",
"org.jfree.chart.plot.dial.DialPointer.getRadius": "/**\n     * Returns the radius of the pointer, as a percentage of the dial's\n     * framing rectangle.\n     *\n     * @return The radius.\n     *\n     * @see #setRadius(double)\n     */\n",
"org.jfree.chart.plot.dial.DialPointer.setRadius": "/**\n     * Sets the radius of the pointer and sends a\n     * {@link DialLayerChangeEvent} to all registered listeners.\n     *\n     * @param radius  the radius.\n     *\n     * @see #getRadius()\n     */\n",
"org.jfree.chart.plot.dial.DialPointer.isClippedToWindow": "/**\n     * Returns {@code true} to indicate that this layer should be\n     * clipped within the dial window.\n     *\n     * @return {@code true}.\n     */\n",
"org.jfree.chart.plot.dial.DialPointer.equals": "/**\n     * Checks this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} not permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.dial.DialPointer.hashCode": "/**\n     * Returns a hash code.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.plot.dial.DialPointer.clone": "/**\n     * Returns a clone of the pointer.\n     *\n     * @return a clone.\n     *\n     * @throws CloneNotSupportedException if one of the attributes cannot\n     *     be cloned.\n     */\n",
"org.jfree.chart.plot.dial.DialPointer.getPaint": "/**\n         * Returns the paint.\n         *\n         * @return The paint (never {@code null}).\n         *\n         * @see #setPaint(Paint)\n         */\n",
"org.jfree.chart.plot.dial.DialPointer.setPaint": "/**\n         * Sets the paint and sends a {@link DialLayerChangeEvent} to all\n         * registered listeners.\n         *\n         * @param paint  the paint ({@code null} not permitted).\n         *\n         * @see #getPaint()\n         */\n",
"org.jfree.chart.plot.dial.DialPointer.getStroke": "/**\n         * Returns the stroke.\n         *\n         * @return The stroke (never {@code null}).\n         *\n         * @see #setStroke(Stroke)\n         */\n",
"org.jfree.chart.plot.dial.DialPointer.setStroke": "/**\n         * Sets the stroke and sends a {@link DialLayerChangeEvent} to all\n         * registered listeners.\n         *\n         * @param stroke  the stroke ({@code null} not permitted).\n         *\n         * @see #getStroke()\n         */\n",
"org.jfree.chart.plot.dial.DialPointer.draw": "/**\n         * Draws the pointer.\n         *\n         * @param g2  the graphics target.\n         * @param plot  the plot.\n         * @param frame  the dial's reference frame.\n         * @param view  the dial's view.\n         */\n",
"org.jfree.chart.plot.dial.DialPointer.equals": "/**\n         * Tests this pointer for equality with an arbitrary object.\n         *\n         * @param obj  the object ({@code null} permitted).\n         *\n         * @return A boolean.\n         */\n",
"org.jfree.chart.plot.dial.DialPointer.hashCode": "/**\n         * Returns a hash code for this instance.\n         *\n         * @return A hash code.\n         */\n",
"org.jfree.chart.plot.dial.DialPointer.writeObject": "/**\n         * Provides serialization support.\n         *\n         * @param stream  the output stream.\n         *\n         * @throws IOException  if there is an I/O error.\n         */\n",
"org.jfree.chart.plot.dial.DialPointer.readObject": "/**\n         * Provides serialization support.\n         *\n         * @param stream  the input stream.\n         *\n         * @throws IOException  if there is an I/O error.\n         * @throws ClassNotFoundException  if there is a classpath problem.\n         */\n",
"org.jfree.chart.plot.dial.DialPointer.getWidthRadius": "/**\n         * Returns the width radius.\n         *\n         * @return The width radius.\n         *\n         * @see #setWidthRadius(double)\n         */\n",
"org.jfree.chart.plot.dial.DialPointer.setWidthRadius": "/**\n         * Sets the width radius and sends a {@link DialLayerChangeEvent} to\n         * all registered listeners.\n         *\n         * @param radius  the radius\n         *\n         * @see #getWidthRadius()\n         */\n",
"org.jfree.chart.plot.dial.DialPointer.getFillPaint": "/**\n         * Returns the fill paint.\n         *\n         * @return The paint (never {@code null}).\n         *\n         * @see #setFillPaint(Paint)\n         *\n         * @since 1.0.8\n         */\n",
"org.jfree.chart.plot.dial.DialPointer.setFillPaint": "/**\n         * Sets the fill paint and sends a {@link DialLayerChangeEvent} to all\n         * registered listeners.\n         *\n         * @param paint  the paint ({@code null} not permitted).\n         *\n         * @see #getFillPaint()\n         *\n         * @since 1.0.8\n         */\n",
"org.jfree.chart.plot.dial.DialPointer.getOutlinePaint": "/**\n         * Returns the outline paint.\n         *\n         * @return The paint (never {@code null}).\n         *\n         * @see #setOutlinePaint(Paint)\n         *\n         * @since 1.0.8\n         */\n",
"org.jfree.chart.plot.dial.DialPointer.setOutlinePaint": "/**\n         * Sets the outline paint and sends a {@link DialLayerChangeEvent} to\n         * all registered listeners.\n         *\n         * @param paint  the paint ({@code null} not permitted).\n         *\n         * @see #getOutlinePaint()\n         *\n         * @since 1.0.8\n         */\n",
"org.jfree.chart.plot.dial.DialPointer.draw": "/**\n         * Draws the pointer.\n         *\n         * @param g2  the graphics target.\n         * @param plot  the plot.\n         * @param frame  the dial's reference frame.\n         * @param view  the dial's view.\n         */\n",
"org.jfree.chart.plot.dial.DialPointer.equals": "/**\n         * Tests this pointer for equality with an arbitrary object.\n         *\n         * @param obj  the object ({@code null} permitted).\n         *\n         * @return A boolean.\n         */\n",
"org.jfree.chart.plot.dial.DialPointer.hashCode": "/**\n         * Returns a hash code for this instance.\n         *\n         * @return A hash code.\n         */\n",
"org.jfree.chart.plot.dial.DialPointer.writeObject": "/**\n         * Provides serialization support.\n         *\n         * @param stream  the output stream.\n         *\n         * @throws IOException  if there is an I/O error.\n         */\n",
"org.jfree.chart.plot.dial.DialPointer.readObject": "/**\n         * Provides serialization support.\n         *\n         * @param stream  the input stream.\n         *\n         * @throws IOException  if there is an I/O error.\n         * @throws ClassNotFoundException  if there is a classpath problem.\n         */\n",
"org.jfree.chart.plot.dial.DialLayer.isVisible": "/**\n     * Returns a flag that indicates whether or not the layer is visible.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.dial.DialLayer.addChangeListener": "/**\n     * Registers a listener with this layer, so that it receives notification\n     * of changes to this layer.\n     *\n     * @param listener  the listener.\n     */\n",
"org.jfree.chart.plot.dial.DialLayer.removeChangeListener": "/**\n     * Deregisters a listener, so that it no longer receives notification of\n     * changes to this layer.\n     *\n     * @param listener  the listener.\n     */\n",
"org.jfree.chart.plot.dial.DialLayer.hasListener": "/**\n     * Returns {@code true} if the specified listener is currently\n     * registered with the this layer.\n     *\n     * @param listener  the listener.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.dial.DialLayer.isClippedToWindow": "/**\n     * Returns {@code true} if the drawing should be clipped to the\n     * dial window (which is defined by the {@link DialFrame}), and\n     * {@code false} otherwise.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.dial.DialLayer.draw": "/**\n     * Draws the content of this layer.\n     *\n     * @param g2  the graphics target ({@code null} not permitted).\n     * @param plot  the plot (typically this should not be {@code null},\n     *     but for a layer that doesn't need to reference the plot, it may\n     *     be permitted).\n     * @param frame  the reference frame for the dial's geometry\n     *     ({@code null} not permitted).  This is typically larger than\n     *     the visible area of the dial (see the next parameter).\n     * @param view  the visible area for the dial ({@code null} not\n     *     permitted).\n     */\n",
"org.jfree.chart.plot.PolarAxisLocation.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.chart.plot.PolarAxisLocation.equals": "/**\n     * Returns {@code true} if this object is equal to the specified\n     * object, and {@code false} otherwise.\n     *\n     * @param obj  the other object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.PolarAxisLocation.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     *\n     * @return The object.\n     *\n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.chart.plot.CombinedRangeXYPlot.getPlotType": "/**\n     * Returns a string describing the type of plot.\n     *\n     * @return The type of plot.\n     */\n",
"org.jfree.chart.plot.CombinedRangeXYPlot.getGap": "/**\n     * Returns the space between subplots.\n     *\n     * @return The gap.\n     *\n     * @see #setGap(double)\n     */\n",
"org.jfree.chart.plot.CombinedRangeXYPlot.setGap": "/**\n     * Sets the amount of space between subplots.\n     *\n     * @param gap  the gap between subplots.\n     *\n     * @see #getGap()\n     */\n",
"org.jfree.chart.plot.CombinedRangeXYPlot.isDomainPannable": "/**\n     * Returns {@code true} if the domain is pannable for at least one subplot,\n     * and {@code false} otherwise.\n     * \n     * @return A boolean. \n     */\n",
"org.jfree.chart.plot.CombinedRangeXYPlot.setDomainPannable": "/**\n     * Sets the flag, on each of the subplots, that controls whether or not the \n     * domain is pannable.\n     * \n     * @param pannable  the new flag value. \n     */\n",
"org.jfree.chart.plot.CombinedRangeXYPlot.add": "/**\n     * Adds a subplot, with a default 'weight' of 1.\n     * <br><br>\n     * You must ensure that the subplot has a non-null domain axis.  The range\n     * axis for the subplot will be set to {@code null}.\n     *\n     * @param subplot  the subplot.\n     */\n",
"org.jfree.chart.plot.CombinedRangeXYPlot.add": "/**\n     * Adds a subplot with a particular weight (greater than or equal to one).\n     * The weight determines how much space is allocated to the subplot\n     * relative to all the other subplots.\n     * <br><br>\n     * You must ensure that the subplot has a non-null domain axis.  The range\n     * axis for the subplot will be set to {@code null}.\n     *\n     * @param subplot  the subplot ({@code null} not permitted).\n     * @param weight  the weight (must be 1 or greater).\n     */\n",
"org.jfree.chart.plot.CombinedRangeXYPlot.remove": "/**\n     * Removes a subplot from the combined chart.\n     *\n     * @param subplot  the subplot ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.CombinedRangeXYPlot.getSubplots": "/**\n     * Returns the list of subplots.  The returned list may be empty, but is\n     * never {@code null}.\n     *\n     * @return An unmodifiable list of subplots.\n     */\n",
"org.jfree.chart.plot.CombinedRangeXYPlot.calculateAxisSpace": "/**\n     * Calculates the space required for the axes.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     *\n     * @return The space required for the axes.\n     */\n",
"org.jfree.chart.plot.CombinedRangeXYPlot.draw": "/**\n     * Draws the plot within the specified area on a graphics device.\n     *\n     * @param g2  the graphics device.\n     * @param area  the plot area (in Java2D space).\n     * @param anchor  an anchor point in Java2D space ({@code null}\n     *                permitted).\n     * @param parentState  the state from the parent plot, if there is one\n     *                     ({@code null} permitted).\n     * @param info  collects chart drawing information ({@code null}\n     *              permitted).\n     */\n",
"org.jfree.chart.plot.CombinedRangeXYPlot.getLegendItems": "/**\n     * Returns a collection of legend items for the plot.\n     *\n     * @return The legend items.\n     */\n",
"org.jfree.chart.plot.CombinedRangeXYPlot.zoomDomainAxes": "/**\n     * Multiplies the range on the domain axis/axes by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param info  the plot rendering info ({@code null} not permitted).\n     * @param source  the source point ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.CombinedRangeXYPlot.zoomDomainAxes": "/**\n     * Multiplies the range on the domain axis/axes by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param info  the plot rendering info ({@code null} not permitted).\n     * @param source  the source point ({@code null} not permitted).\n     * @param useAnchor  zoom about the anchor point?\n     */\n",
"org.jfree.chart.plot.CombinedRangeXYPlot.zoomDomainAxes": "/**\n     * Zooms in on the domain axes.\n     *\n     * @param lowerPercent  the lower bound.\n     * @param upperPercent  the upper bound.\n     * @param info  the plot rendering info ({@code null} not permitted).\n     * @param source  the source point ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.CombinedRangeXYPlot.panDomainAxes": "/**\n     * Pans all domain axes by the specified percentage.\n     *\n     * @param panRange the distance to pan (as a percentage of the axis length).\n     * @param info the plot info\n     * @param source the source point where the pan action started.\n     *\n     * @since 1.0.15\n     */\n",
"org.jfree.chart.plot.CombinedRangeXYPlot.findSubplot": "/**\n     * Returns the subplot (if any) that contains the (x, y) point (specified\n     * in Java2D space).\n     *\n     * @param info  the chart rendering info ({@code null} not permitted).\n     * @param source  the source point ({@code null} not permitted).\n     *\n     * @return A subplot (possibly {@code null}).\n     */\n",
"org.jfree.chart.plot.CombinedRangeXYPlot.setRenderer": "/**\n     * Sets the item renderer FOR ALL SUBPLOTS.  Registered listeners are\n     * notified that the plot has been modified.\n     * <P>\n     * Note: usually you will want to set the renderer independently for each\n     * subplot, which is NOT what this method does.\n     *\n     * @param renderer the new renderer.\n     */\n",
"org.jfree.chart.plot.CombinedRangeXYPlot.setOrientation": "/**\n     * Sets the orientation for the plot (and all its subplots).\n     *\n     * @param orientation  the orientation.\n     */\n",
"org.jfree.chart.plot.CombinedRangeXYPlot.setShadowGenerator": "/**\n     * Sets the shadow generator for the plot (and all subplots) and sends\n     * a {@link PlotChangeEvent} to all registered listeners.\n     * \n     * @param generator  the new generator ({@code null} permitted).\n     */\n",
"org.jfree.chart.plot.CombinedRangeXYPlot.getDataRange": "/**\n     * Returns a range representing the extent of the data values in this plot\n     * (obtained from the subplots) that will be rendered against the specified\n     * axis.  NOTE: This method is intended for internal JFreeChart use, and\n     * is public only so that code in the axis classes can call it.  Since\n     * only the range axis is shared between subplots, the JFreeChart code\n     * will only call this method for the range values (although this is not\n     * checked/enforced).\n     *\n     * @param axis  the axis.\n     *\n     * @return The range.\n     */\n",
"org.jfree.chart.plot.CombinedRangeXYPlot.setFixedDomainAxisSpaceForSubplots": "/**\n     * Sets the space (width or height, depending on the orientation of the\n     * plot) for the domain axis of each subplot.\n     *\n     * @param space  the space.\n     */\n",
"org.jfree.chart.plot.CombinedRangeXYPlot.handleClick": "/**\n     * Handles a 'click' on the plot by updating the anchor values...\n     *\n     * @param x  x-coordinate, where the click occured.\n     * @param y  y-coordinate, where the click occured.\n     * @param info  object containing information about the plot dimensions.\n     */\n",
"org.jfree.chart.plot.CombinedRangeXYPlot.plotChanged": "/**\n     * Receives a {@link PlotChangeEvent} and responds by notifying all\n     * listeners.\n     *\n     * @param event  the event.\n     */\n",
"org.jfree.chart.plot.CombinedRangeXYPlot.equals": "/**\n     * Tests this plot for equality with another object.\n     *\n     * @param obj  the other object.\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.plot.CombinedRangeXYPlot.clone": "/**\n     * Returns a clone of the plot.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  this class will not throw this\n     *         exception, but subclasses (if any) might.\n     */\n",
"org.jfree.chart.plot.MultiplePiePlot.getDataset": "/**\n     * Returns the dataset used by the plot.\n     *\n     * @return The dataset (possibly {@code null}).\n     */\n",
"org.jfree.chart.plot.MultiplePiePlot.setDataset": "/**\n     * Sets the dataset used by the plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     */\n",
"org.jfree.chart.plot.MultiplePiePlot.getPieChart": "/**\n     * Returns the pie chart that is used to draw the individual pie plots.\n     * Note that there are some attributes on this chart instance that will\n     * be ignored at rendering time (for example, legend item settings).\n     *\n     * @return The pie chart (never {@code null}).\n     *\n     * @see #setPieChart(JFreeChart)\n     */\n",
"org.jfree.chart.plot.MultiplePiePlot.setPieChart": "/**\n     * Sets the chart that is used to draw the individual pie plots.  The\n     * chart's plot must be an instance of {@link PiePlot}.\n     *\n     * @param pieChart  the pie chart ({@code null} not permitted).\n     *\n     * @see #getPieChart()\n     */\n",
"org.jfree.chart.plot.MultiplePiePlot.getDataExtractOrder": "/**\n     * Returns the data extract order (by row or by column).\n     *\n     * @return The data extract order (never {@code null}).\n     */\n",
"org.jfree.chart.plot.MultiplePiePlot.setDataExtractOrder": "/**\n     * Sets the data extract order (by row or by column) and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param order  the order ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.MultiplePiePlot.getLimit": "/**\n     * Returns the limit (as a percentage) below which small pie sections are\n     * aggregated.\n     *\n     * @return The limit percentage.\n     */\n",
"org.jfree.chart.plot.MultiplePiePlot.setLimit": "/**\n     * Sets the limit below which pie sections are aggregated.\n     * Set this to 0.0 if you don't want any aggregation to occur.\n     *\n     * @param limit  the limit percent.\n     */\n",
"org.jfree.chart.plot.MultiplePiePlot.getAggregatedItemsKey": "/**\n     * Returns the key for aggregated items in the pie plots, if there are any.\n     * The default value is \"Other\".\n     *\n     * @return The aggregated items key.\n     *\n     * @since 1.0.2\n     */\n",
"org.jfree.chart.plot.MultiplePiePlot.setAggregatedItemsKey": "/**\n     * Sets the key for aggregated items in the pie plots.  You must ensure\n     * that this doesn't clash with any keys in the dataset.\n     *\n     * @param key  the key ({@code null} not permitted).\n     *\n     * @since 1.0.2\n     */\n",
"org.jfree.chart.plot.MultiplePiePlot.getAggregatedItemsPaint": "/**\n     * Returns the paint used to draw the pie section representing the\n     * aggregated items.  The default value is {code Color.LIGHT_GRAY}.\n     *\n     * @return The paint.\n     *\n     * @since 1.0.2\n     */\n",
"org.jfree.chart.plot.MultiplePiePlot.setAggregatedItemsPaint": "/**\n     * Sets the paint used to draw the pie section representing the aggregated\n     * items and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @since 1.0.2\n     */\n",
"org.jfree.chart.plot.MultiplePiePlot.getPlotType": "/**\n     * Returns a short string describing the type of plot.\n     *\n     * @return The plot type.\n     */\n",
"org.jfree.chart.plot.MultiplePiePlot.getLegendItemShape": "/**\n     * Returns the shape used for legend items.\n     *\n     * @return The shape (never {@code null}).\n     *\n     * @see #setLegendItemShape(Shape)\n     *\n     * @since 1.0.12\n     */\n",
"org.jfree.chart.plot.MultiplePiePlot.setLegendItemShape": "/**\n     * Sets the shape used for legend items and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param shape  the shape ({@code null} not permitted).\n     *\n     * @see #getLegendItemShape()\n     *\n     * @since 1.0.12\n     */\n",
"org.jfree.chart.plot.MultiplePiePlot.draw": "/**\n     * Draws the plot on a Java 2D graphics device (such as the screen or a\n     * printer).\n     *\n     * @param g2  the graphics device.\n     * @param area  the area within which the plot should be drawn.\n     * @param anchor  the anchor point ({@code null} permitted).\n     * @param parentState  the state from the parent plot, if there is one.\n     * @param info  collects info about the drawing.\n     */\n",
"org.jfree.chart.plot.MultiplePiePlot.prefetchSectionPaints": "/**\n     * For each key in the dataset, check the {@code sectionPaints}\n     * cache to see if a paint is associated with that key and, if not,\n     * fetch one from the drawing supplier.  These colors are cached so that\n     * the legend and all the subplots use consistent colors.\n     */\n",
"org.jfree.chart.plot.MultiplePiePlot.getLegendItems": "/**\n     * Returns a collection of legend items for the pie chart.\n     *\n     * @return The legend items.\n     */\n",
"org.jfree.chart.plot.MultiplePiePlot.equals": "/**\n     * Tests this plot for equality with an arbitrary object.  Note that the\n     * plot's dataset is not considered in the equality test.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} if this plot is equal to {@code obj}, and\n     *     {@code false} otherwise.\n     */\n",
"org.jfree.chart.plot.MultiplePiePlot.clone": "/**\n     * Returns a clone of the plot.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if some component of the plot does\n     *         not support cloning.\n     */\n",
"org.jfree.chart.plot.MultiplePiePlot.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.plot.MultiplePiePlot.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.plot.PiePlot3D.getDepthFactor": "/**\n     * Returns the depth factor for the chart.\n     *\n     * @return The depth factor.\n     *\n     * @see #setDepthFactor(double)\n     */\n",
"org.jfree.chart.plot.PiePlot3D.setDepthFactor": "/**\n     * Sets the pie depth as a percentage of the height of the plot area, and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param factor  the depth factor (for example, 0.20 is twenty percent).\n     *\n     * @see #getDepthFactor()\n     */\n",
"org.jfree.chart.plot.PiePlot3D.getDarkerSides": "/**\n     * Returns a flag that controls whether or not the sides of the pie chart\n     * are rendered using a darker colour.\n     *\n     * @return A boolean.\n     *\n     * @see #setDarkerSides(boolean)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.PiePlot3D.setDarkerSides": "/**\n     * Sets a flag that controls whether or not the sides of the pie chart\n     * are rendered using a darker colour, and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param darker true to darken the sides, false to use the default\n     *         behaviour.\n     *\n     * @see #getDarkerSides()\n     *\n     * @since 1.0.7.\n     */\n",
"org.jfree.chart.plot.PiePlot3D.draw": "/**\n     * Draws the plot on a Java 2D graphics device (such as the screen or a\n     * printer).  This method is called by the\n     * {@link org.jfree.chart.JFreeChart} class, you don't normally need\n     * to call it yourself.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the area within which the plot should be drawn.\n     * @param anchor  the anchor point.\n     * @param parentState  the state from the parent plot, if there is one.\n     * @param info  collects info about the drawing\n     *              ({@code null} permitted).\n     */\n",
"org.jfree.chart.plot.PiePlot3D.drawSide": "/**\n     * Draws the side of a pie section.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param arc  the arc.\n     * @param front  the front of the pie.\n     * @param back  the back of the pie.\n     * @param paint  the color.\n     * @param outlinePaint  the outline paint.\n     * @param outlineStroke  the outline stroke.\n     * @param drawFront  draw the front?\n     * @param drawBack  draw the back?\n     */\n",
"org.jfree.chart.plot.PiePlot3D.getPlotType": "/**\n     * Returns a short string describing the type of plot.\n     *\n     * @return <i>Pie 3D Plot</i>.\n     */\n",
"org.jfree.chart.plot.PiePlot3D.isAngleAtFront": "/**\n     * A utility method that returns true if the angle represents a point at\n     * the front of the 3D pie chart.  0 - 180 degrees is the back, 180 - 360\n     * is the front.\n     *\n     * @param angle  the angle.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.PiePlot3D.isAngleAtBack": "/**\n     * A utility method that returns true if the angle represents a point at\n     * the back of the 3D pie chart.  0 - 180 degrees is the back, 180 - 360\n     * is the front.\n     *\n     * @param angle  the angle.\n     *\n     * @return {@code true} if the angle is at the back of the pie.\n     */\n",
"org.jfree.chart.plot.PiePlot3D.equals": "/**\n     * Tests this plot for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.DialShape.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.chart.plot.DialShape.equals": "/**\n     * Returns {@code true} if this object is equal to the specified\n     * object, and {@code false} otherwise.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.DialShape.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.plot.DialShape.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     *\n     * @return The object.\n     *\n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.chart.plot.XYPlot.getPlotType": "/**\n     * Returns the plot type as a string.\n     *\n     * @return A short string describing the type of plot.\n     */\n",
"org.jfree.chart.plot.XYPlot.getOrientation": "/**\n     * Returns the orientation of the plot.\n     *\n     * @return The orientation (never {@code null}).\n     *\n     * @see #setOrientation(PlotOrientation)\n     */\n",
"org.jfree.chart.plot.XYPlot.setOrientation": "/**\n     * Sets the orientation for the plot and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param orientation  the orientation ({@code null} not allowed).\n     *\n     * @see #getOrientation()\n     */\n",
"org.jfree.chart.plot.XYPlot.getAxisOffset": "/**\n     * Returns the axis offset.\n     *\n     * @return The axis offset (never {@code null}).\n     *\n     * @see #setAxisOffset(RectangleInsets)\n     */\n",
"org.jfree.chart.plot.XYPlot.setAxisOffset": "/**\n     * Sets the axis offsets (gap between the data area and the axes) and sends\n     * a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param offset  the offset ({@code null} not permitted).\n     *\n     * @see #getAxisOffset()\n     */\n",
"org.jfree.chart.plot.XYPlot.getDomainAxis": "/**\n     * Returns the domain axis with index 0.  If the domain axis for this plot\n     * is {@code null}, then the method will return the parent plot's\n     * domain axis (if there is a parent plot).\n     *\n     * @return The domain axis (possibly {@code null}).\n     *\n     * @see #getDomainAxis(int)\n     * @see #setDomainAxis(ValueAxis)\n     */\n",
"org.jfree.chart.plot.XYPlot.getDomainAxis": "/**\n     * Returns the domain axis with the specified index, or {@code null} if \n     * there is no axis with that index.\n     *\n     * @param index  the axis index.\n     *\n     * @return The axis ({@code null} possible).\n     *\n     * @see #setDomainAxis(int, ValueAxis)\n     */\n",
"org.jfree.chart.plot.XYPlot.setDomainAxis": "/**\n     * Sets the domain axis for the plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param axis  the new axis ({@code null} permitted).\n     *\n     * @see #getDomainAxis()\n     * @see #setDomainAxis(int, ValueAxis)\n     */\n",
"org.jfree.chart.plot.XYPlot.setDomainAxis": "/**\n     * Sets a domain axis and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param index  the axis index.\n     * @param axis  the axis ({@code null} permitted).\n     *\n     * @see #getDomainAxis(int)\n     * @see #setRangeAxis(int, ValueAxis)\n     */\n",
"org.jfree.chart.plot.XYPlot.setDomainAxis": "/**\n     * Sets a domain axis and, if requested, sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param axis  the axis.\n     * @param notify  notify listeners?\n     *\n     * @see #getDomainAxis(int)\n     */\n",
"org.jfree.chart.plot.XYPlot.setDomainAxes": "/**\n     * Sets the domain axes for this plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param axes  the axes ({@code null} not permitted).\n     *\n     * @see #setRangeAxes(ValueAxis[])\n     */\n",
"org.jfree.chart.plot.XYPlot.getDomainAxisLocation": "/**\n     * Returns the location of the primary domain axis.\n     *\n     * @return The location (never {@code null}).\n     *\n     * @see #setDomainAxisLocation(AxisLocation)\n     */\n",
"org.jfree.chart.plot.XYPlot.setDomainAxisLocation": "/**\n     * Sets the location of the primary domain axis and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param location  the location ({@code null} not permitted).\n     *\n     * @see #getDomainAxisLocation()\n     */\n",
"org.jfree.chart.plot.XYPlot.setDomainAxisLocation": "/**\n     * Sets the location of the domain axis and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param location  the location ({@code null} not permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getDomainAxisLocation()\n     */\n",
"org.jfree.chart.plot.XYPlot.getDomainAxisEdge": "/**\n     * Returns the edge for the primary domain axis (taking into account the\n     * plot's orientation).\n     *\n     * @return The edge.\n     *\n     * @see #getDomainAxisLocation()\n     * @see #getOrientation()\n     */\n",
"org.jfree.chart.plot.XYPlot.getDomainAxisCount": "/**\n     * Returns the number of domain axes.\n     *\n     * @return The axis count.\n     *\n     * @see #getRangeAxisCount()\n     */\n",
"org.jfree.chart.plot.XYPlot.clearDomainAxes": "/**\n     * Clears the domain axes from the plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @see #clearRangeAxes()\n     */\n",
"org.jfree.chart.plot.XYPlot.configureDomainAxes": "/**\n     * Configures the domain axes.\n     */\n",
"org.jfree.chart.plot.XYPlot.getDomainAxisLocation": "/**\n     * Returns the location for a domain axis.  If this hasn't been set\n     * explicitly, the method returns the location that is opposite to the\n     * primary domain axis location.\n     *\n     * @param index  the axis index (must be &gt;= 0).\n     *\n     * @return The location (never {@code null}).\n     *\n     * @see #setDomainAxisLocation(int, AxisLocation)\n     */\n",
"org.jfree.chart.plot.XYPlot.setDomainAxisLocation": "/**\n     * Sets the location for a domain axis and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param location  the location ({@code null} not permitted for index\n     *     0).\n     *\n     * @see #getDomainAxisLocation(int)\n     */\n",
"org.jfree.chart.plot.XYPlot.setDomainAxisLocation": "/**\n     * Sets the axis location for a domain axis and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the axis index (must be &gt;= 0).\n     * @param location  the location ({@code null} not permitted for\n     *     index 0).\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.5\n     *\n     * @see #getDomainAxisLocation(int)\n     * @see #setRangeAxisLocation(int, AxisLocation, boolean)\n     */\n",
"org.jfree.chart.plot.XYPlot.getDomainAxisEdge": "/**\n     * Returns the edge for a domain axis.\n     *\n     * @param index  the axis index.\n     *\n     * @return The edge.\n     *\n     * @see #getRangeAxisEdge(int)\n     */\n",
"org.jfree.chart.plot.XYPlot.getRangeAxis": "/**\n     * Returns the range axis for the plot.  If the range axis for this plot is\n     * {@code null}, then the method will return the parent plot's range\n     * axis (if there is a parent plot).\n     *\n     * @return The range axis.\n     *\n     * @see #getRangeAxis(int)\n     * @see #setRangeAxis(ValueAxis)\n     */\n",
"org.jfree.chart.plot.XYPlot.setRangeAxis": "/**\n     * Sets the range axis for the plot and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param axis  the axis ({@code null} permitted).\n     *\n     * @see #getRangeAxis()\n     * @see #setRangeAxis(int, ValueAxis)\n     */\n",
"org.jfree.chart.plot.XYPlot.getRangeAxisLocation": "/**\n     * Returns the location of the primary range axis.\n     *\n     * @return The location (never {@code null}).\n     *\n     * @see #setRangeAxisLocation(AxisLocation)\n     */\n",
"org.jfree.chart.plot.XYPlot.setRangeAxisLocation": "/**\n     * Sets the location of the primary range axis and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param location  the location ({@code null} not permitted).\n     *\n     * @see #getRangeAxisLocation()\n     */\n",
"org.jfree.chart.plot.XYPlot.setRangeAxisLocation": "/**\n     * Sets the location of the primary range axis and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param location  the location ({@code null} not permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getRangeAxisLocation()\n     */\n",
"org.jfree.chart.plot.XYPlot.getRangeAxisEdge": "/**\n     * Returns the edge for the primary range axis.\n     *\n     * @return The range axis edge.\n     *\n     * @see #getRangeAxisLocation()\n     * @see #getOrientation()\n     */\n",
"org.jfree.chart.plot.XYPlot.getRangeAxis": "/**\n     * Returns the range axis with the specified index, or {@code null} if \n     * there is no axis with that index.\n     *\n     * @param index  the axis index (must be &gt;= 0).\n     *\n     * @return The axis ({@code null} possible).\n     *\n     * @see #setRangeAxis(int, ValueAxis)\n     */\n",
"org.jfree.chart.plot.XYPlot.setRangeAxis": "/**\n     * Sets a range axis and sends a {@link PlotChangeEvent} to all registered\n     * listeners.\n     *\n     * @param index  the axis index.\n     * @param axis  the axis ({@code null} permitted).\n     *\n     * @see #getRangeAxis(int)\n     */\n",
"org.jfree.chart.plot.XYPlot.setRangeAxis": "/**\n     * Sets a range axis and, if requested, sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param axis  the axis ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getRangeAxis(int)\n     */\n",
"org.jfree.chart.plot.XYPlot.setRangeAxes": "/**\n     * Sets the range axes for this plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param axes  the axes ({@code null} not permitted).\n     *\n     * @see #setDomainAxes(ValueAxis[])\n     */\n",
"org.jfree.chart.plot.XYPlot.getRangeAxisCount": "/**\n     * Returns the number of range axes.\n     *\n     * @return The axis count.\n     *\n     * @see #getDomainAxisCount()\n     */\n",
"org.jfree.chart.plot.XYPlot.clearRangeAxes": "/**\n     * Clears the range axes from the plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @see #clearDomainAxes()\n     */\n",
"org.jfree.chart.plot.XYPlot.configureRangeAxes": "/**\n     * Configures the range axes.\n     *\n     * @see #configureDomainAxes()\n     */\n",
"org.jfree.chart.plot.XYPlot.getRangeAxisLocation": "/**\n     * Returns the location for a range axis.  If this hasn't been set\n     * explicitly, the method returns the location that is opposite to the\n     * primary range axis location.\n     *\n     * @param index  the axis index (must be &gt;= 0).\n     *\n     * @return The location (never {@code null}).\n     *\n     * @see #setRangeAxisLocation(int, AxisLocation)\n     */\n",
"org.jfree.chart.plot.XYPlot.setRangeAxisLocation": "/**\n     * Sets the location for a range axis and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param location  the location ({@code null} permitted).\n     *\n     * @see #getRangeAxisLocation(int)\n     */\n",
"org.jfree.chart.plot.XYPlot.setRangeAxisLocation": "/**\n     * Sets the axis location for a domain axis and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param location  the location ({@code null} not permitted for\n     *     index 0).\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.5\n     *\n     * @see #getRangeAxisLocation(int)\n     * @see #setDomainAxisLocation(int, AxisLocation, boolean)\n     */\n",
"org.jfree.chart.plot.XYPlot.getRangeAxisEdge": "/**\n     * Returns the edge for a range axis.\n     *\n     * @param index  the axis index.\n     *\n     * @return The edge.\n     *\n     * @see #getRangeAxisLocation(int)\n     * @see #getOrientation()\n     */\n",
"org.jfree.chart.plot.XYPlot.getDataset": "/**\n     * Returns the primary dataset for the plot.\n     *\n     * @return The primary dataset (possibly {@code null}).\n     *\n     * @see #getDataset(int)\n     * @see #setDataset(XYDataset)\n     */\n",
"org.jfree.chart.plot.XYPlot.getDataset": "/**\n     * Returns the dataset with the specified index, or {@code null} if there\n     * is no dataset with that index.\n     *\n     * @param index  the dataset index (must be &gt;= 0).\n     *\n     * @return The dataset (possibly {@code null}).\n     *\n     * @see #setDataset(int, XYDataset)\n     */\n",
"org.jfree.chart.plot.XYPlot.setDataset": "/**\n     * Sets the primary dataset for the plot, replacing the existing dataset if\n     * there is one.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @see #getDataset()\n     * @see #setDataset(int, XYDataset)\n     */\n",
"org.jfree.chart.plot.XYPlot.setDataset": "/**\n     * Sets a dataset for the plot and sends a change event to all registered\n     * listeners.\n     *\n     * @param index  the dataset index (must be &gt;= 0).\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @see #getDataset(int)\n     */\n",
"org.jfree.chart.plot.XYPlot.getDatasetCount": "/**\n     * Returns the number of datasets.\n     *\n     * @return The number of datasets.\n     */\n",
"org.jfree.chart.plot.XYPlot.indexOf": "/**\n     * Returns the index of the specified dataset, or {@code -1} if the\n     * dataset does not belong to the plot.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The index or -1.\n     */\n",
"org.jfree.chart.plot.XYPlot.mapDatasetToDomainAxis": "/**\n     * Maps a dataset to a particular domain axis.  All data will be plotted\n     * against axis zero by default, no mapping is required for this case.\n     *\n     * @param index  the dataset index (zero-based).\n     * @param axisIndex  the axis index.\n     *\n     * @see #mapDatasetToRangeAxis(int, int)\n     */\n",
"org.jfree.chart.plot.XYPlot.mapDatasetToDomainAxes": "/**\n     * Maps the specified dataset to the axes in the list.  Note that the\n     * conversion of data values into Java2D space is always performed using\n     * the first axis in the list.\n     *\n     * @param index  the dataset index (zero-based).\n     * @param axisIndices  the axis indices ({@code null} permitted).\n     *\n     * @since 1.0.12\n     */\n",
"org.jfree.chart.plot.XYPlot.mapDatasetToRangeAxis": "/**\n     * Maps a dataset to a particular range axis.  All data will be plotted\n     * against axis zero by default, no mapping is required for this case.\n     *\n     * @param index  the dataset index (zero-based).\n     * @param axisIndex  the axis index.\n     *\n     * @see #mapDatasetToDomainAxis(int, int)\n     */\n",
"org.jfree.chart.plot.XYPlot.mapDatasetToRangeAxes": "/**\n     * Maps the specified dataset to the axes in the list.  Note that the\n     * conversion of data values into Java2D space is always performed using\n     * the first axis in the list.\n     *\n     * @param index  the dataset index (zero-based).\n     * @param axisIndices  the axis indices ({@code null} permitted).\n     *\n     * @since 1.0.12\n     */\n",
"org.jfree.chart.plot.XYPlot.checkAxisIndices": "/**\n     * This method is used to perform argument checking on the list of\n     * axis indices passed to mapDatasetToDomainAxes() and\n     * mapDatasetToRangeAxes().\n     *\n     * @param indices  the list of indices ({@code null} permitted).\n     */\n",
"org.jfree.chart.plot.XYPlot.getRendererCount": "/**\n     * Returns the number of renderer slots for this plot.\n     *\n     * @return The number of renderer slots.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.plot.XYPlot.getRenderer": "/**\n     * Returns the renderer for the primary dataset.\n     *\n     * @return The item renderer (possibly {@code null}).\n     *\n     * @see #setRenderer(XYItemRenderer)\n     */\n",
"org.jfree.chart.plot.XYPlot.getRenderer": "/**\n     * Returns the renderer with the specified index, or {@code null}.\n     *\n     * @param index  the renderer index (must be &gt;= 0).\n     *\n     * @return The renderer (possibly {@code null}).\n     *\n     * @see #setRenderer(int, XYItemRenderer)\n     */\n",
"org.jfree.chart.plot.XYPlot.setRenderer": "/**\n     * Sets the renderer for the primary dataset and sends a change event to \n     * all registered listeners.  If the renderer is set to {@code null}, \n     * no data will be displayed.\n     *\n     * @param renderer  the renderer ({@code null} permitted).\n     *\n     * @see #getRenderer()\n     */\n",
"org.jfree.chart.plot.XYPlot.setRenderer": "/**\n     * Sets the renderer for the dataset with the specified index and sends a \n     * change event to all registered listeners.  Note that each dataset should \n     * have its own renderer, you should not use one renderer for multiple \n     * datasets.\n     *\n     * @param index  the index (must be &gt;= 0).\n     * @param renderer  the renderer.\n     *\n     * @see #getRenderer(int)\n     */\n",
"org.jfree.chart.plot.XYPlot.setRenderer": "/**\n     * Sets the renderer for the dataset with the specified index and, if \n     * requested, sends a change event to all registered listeners.  Note that \n     * each dataset should have its own renderer, you should not use one \n     * renderer for multiple datasets.\n     *\n     * @param index  the index (must be &gt;= 0).\n     * @param renderer  the renderer.\n     * @param notify  notify listeners?\n     *\n     * @see #getRenderer(int)\n     */\n",
"org.jfree.chart.plot.XYPlot.setRenderers": "/**\n     * Sets the renderers for this plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param renderers  the renderers ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.XYPlot.getDatasetRenderingOrder": "/**\n     * Returns the dataset rendering order.\n     *\n     * @return The order (never {@code null}).\n     *\n     * @see #setDatasetRenderingOrder(DatasetRenderingOrder)\n     */\n",
"org.jfree.chart.plot.XYPlot.setDatasetRenderingOrder": "/**\n     * Sets the rendering order and sends a {@link PlotChangeEvent} to all\n     * registered listeners.  By default, the plot renders the primary dataset\n     * last (so that the primary dataset overlays the secondary datasets).\n     * You can reverse this if you want to.\n     *\n     * @param order  the rendering order ({@code null} not permitted).\n     *\n     * @see #getDatasetRenderingOrder()\n     */\n",
"org.jfree.chart.plot.XYPlot.getSeriesRenderingOrder": "/**\n     * Returns the series rendering order.\n     *\n     * @return the order (never {@code null}).\n     *\n     * @see #setSeriesRenderingOrder(SeriesRenderingOrder)\n     */\n",
"org.jfree.chart.plot.XYPlot.setSeriesRenderingOrder": "/**\n     * Sets the series order and sends a {@link PlotChangeEvent} to all\n     * registered listeners.  By default, the plot renders the primary series\n     * last (so that the primary series appears to be on top).\n     * You can reverse this if you want to.\n     *\n     * @param order  the rendering order ({@code null} not permitted).\n     *\n     * @see #getSeriesRenderingOrder()\n     */\n",
"org.jfree.chart.plot.XYPlot.getIndexOf": "/**\n     * Returns the index of the specified renderer, or {@code -1} if the\n     * renderer is not assigned to this plot.\n     *\n     * @param renderer  the renderer ({@code null} permitted).\n     *\n     * @return The renderer index.\n     */\n",
"org.jfree.chart.plot.XYPlot.getRendererForDataset": "/**\n     * Returns the renderer for the specified dataset (this is either the\n     * renderer with the same index as the dataset or, if there isn't a \n     * renderer with the same index, the default renderer).  If the dataset\n     * does not belong to the plot, this method will return {@code null}.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The renderer (possibly {@code null}).\n     */\n",
"org.jfree.chart.plot.XYPlot.getWeight": "/**\n     * Returns the weight for this plot when it is used as a subplot within a\n     * combined plot.\n     *\n     * @return The weight.\n     *\n     * @see #setWeight(int)\n     */\n",
"org.jfree.chart.plot.XYPlot.setWeight": "/**\n     * Sets the weight for the plot and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param weight  the weight.\n     *\n     * @see #getWeight()\n     */\n",
"org.jfree.chart.plot.XYPlot.isDomainGridlinesVisible": "/**\n     * Returns {@code true} if the domain gridlines are visible, and\n     * {@code false} otherwise.\n     *\n     * @return {@code true} or {@code false}.\n     *\n     * @see #setDomainGridlinesVisible(boolean)\n     */\n",
"org.jfree.chart.plot.XYPlot.setDomainGridlinesVisible": "/**\n     * Sets the flag that controls whether or not the domain grid-lines are\n     * visible.\n     * <p>\n     * If the flag value is changed, a {@link PlotChangeEvent} is sent to all\n     * registered listeners.\n     *\n     * @param visible  the new value of the flag.\n     *\n     * @see #isDomainGridlinesVisible()\n     */\n",
"org.jfree.chart.plot.XYPlot.isDomainMinorGridlinesVisible": "/**\n     * Returns {@code true} if the domain minor gridlines are visible, and\n     * {@code false} otherwise.\n     *\n     * @return {@code true} or {@code false}.\n     *\n     * @see #setDomainMinorGridlinesVisible(boolean)\n     *\n     * @since 1.0.12\n     */\n",
"org.jfree.chart.plot.XYPlot.setDomainMinorGridlinesVisible": "/**\n     * Sets the flag that controls whether or not the domain minor grid-lines\n     * are visible.\n     * <p>\n     * If the flag value is changed, a {@link PlotChangeEvent} is sent to all\n     * registered listeners.\n     *\n     * @param visible  the new value of the flag.\n     *\n     * @see #isDomainMinorGridlinesVisible()\n     *\n     * @since 1.0.12\n     */\n",
"org.jfree.chart.plot.XYPlot.getDomainGridlineStroke": "/**\n     * Returns the stroke for the grid-lines (if any) plotted against the\n     * domain axis.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setDomainGridlineStroke(Stroke)\n     */\n",
"org.jfree.chart.plot.XYPlot.setDomainGridlineStroke": "/**\n     * Sets the stroke for the grid lines plotted against the domain axis, and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @throws IllegalArgumentException if {@code stroke} is\n     *     {@code null}.\n     *\n     * @see #getDomainGridlineStroke()\n     */\n",
"org.jfree.chart.plot.XYPlot.setDomainMinorGridlineStroke": "/**\n     * Sets the stroke for the minor grid lines plotted against the domain\n     * axis, and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @throws IllegalArgumentException if {@code stroke} is\n     *     {@code null}.\n     *\n     * @see #getDomainMinorGridlineStroke()\n     *\n     * @since 1.0.12\n     */\n",
"org.jfree.chart.plot.XYPlot.getDomainGridlinePaint": "/**\n     * Returns the paint for the grid lines (if any) plotted against the domain\n     * axis.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setDomainGridlinePaint(Paint)\n     */\n",
"org.jfree.chart.plot.XYPlot.setDomainGridlinePaint": "/**\n     * Sets the paint for the grid lines plotted against the domain axis, and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @throws IllegalArgumentException if {@code Paint} is\n     *     {@code null}.\n     *\n     * @see #getDomainGridlinePaint()\n     */\n",
"org.jfree.chart.plot.XYPlot.getDomainMinorGridlinePaint": "/**\n     * Returns the paint for the minor grid lines (if any) plotted against the\n     * domain axis.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setDomainMinorGridlinePaint(Paint)\n     *\n     * @since 1.0.12\n     */\n",
"org.jfree.chart.plot.XYPlot.setDomainMinorGridlinePaint": "/**\n     * Sets the paint for the minor grid lines plotted against the domain axis,\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @throws IllegalArgumentException if {@code Paint} is\n     *     {@code null}.\n     *\n     * @see #getDomainMinorGridlinePaint()\n     *\n     * @since 1.0.12\n     */\n",
"org.jfree.chart.plot.XYPlot.isRangeGridlinesVisible": "/**\n     * Returns {@code true} if the range axis grid is visible, and\n     * {@code false} otherwise.\n     *\n     * @return A boolean.\n     *\n     * @see #setRangeGridlinesVisible(boolean)\n     */\n",
"org.jfree.chart.plot.XYPlot.setRangeGridlinesVisible": "/**\n     * Sets the flag that controls whether or not the range axis grid lines\n     * are visible.\n     * <p>\n     * If the flag value is changed, a {@link PlotChangeEvent} is sent to all\n     * registered listeners.\n     *\n     * @param visible  the new value of the flag.\n     *\n     * @see #isRangeGridlinesVisible()\n     */\n",
"org.jfree.chart.plot.XYPlot.getRangeGridlineStroke": "/**\n     * Returns the stroke for the grid lines (if any) plotted against the\n     * range axis.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setRangeGridlineStroke(Stroke)\n     */\n",
"org.jfree.chart.plot.XYPlot.setRangeGridlineStroke": "/**\n     * Sets the stroke for the grid lines plotted against the range axis,\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getRangeGridlineStroke()\n     */\n",
"org.jfree.chart.plot.XYPlot.getRangeGridlinePaint": "/**\n     * Returns the paint for the grid lines (if any) plotted against the range\n     * axis.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setRangeGridlinePaint(Paint)\n     */\n",
"org.jfree.chart.plot.XYPlot.setRangeGridlinePaint": "/**\n     * Sets the paint for the grid lines plotted against the range axis and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getRangeGridlinePaint()\n     */\n",
"org.jfree.chart.plot.XYPlot.isRangeMinorGridlinesVisible": "/**\n     * Returns {@code true} if the range axis minor grid is visible, and\n     * {@code false} otherwise.\n     *\n     * @return A boolean.\n     *\n     * @see #setRangeMinorGridlinesVisible(boolean)\n     *\n     * @since 1.0.12\n     */\n",
"org.jfree.chart.plot.XYPlot.setRangeMinorGridlinesVisible": "/**\n     * Sets the flag that controls whether or not the range axis minor grid\n     * lines are visible.\n     * <p>\n     * If the flag value is changed, a {@link PlotChangeEvent} is sent to all\n     * registered listeners.\n     *\n     * @param visible  the new value of the flag.\n     *\n     * @see #isRangeMinorGridlinesVisible()\n     *\n     * @since 1.0.12\n     */\n",
"org.jfree.chart.plot.XYPlot.getRangeMinorGridlineStroke": "/**\n     * Returns the stroke for the minor grid lines (if any) plotted against the\n     * range axis.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setRangeMinorGridlineStroke(Stroke)\n     *\n     * @since 1.0.12\n     */\n",
"org.jfree.chart.plot.XYPlot.setRangeMinorGridlineStroke": "/**\n     * Sets the stroke for the minor grid lines plotted against the range axis,\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getRangeMinorGridlineStroke()\n     *\n     * @since 1.0.12\n     */\n",
"org.jfree.chart.plot.XYPlot.getRangeMinorGridlinePaint": "/**\n     * Returns the paint for the minor grid lines (if any) plotted against the\n     * range axis.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setRangeMinorGridlinePaint(Paint)\n     *\n     * @since 1.0.12\n     */\n",
"org.jfree.chart.plot.XYPlot.setRangeMinorGridlinePaint": "/**\n     * Sets the paint for the minor grid lines plotted against the range axis\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getRangeMinorGridlinePaint()\n     *\n     * @since 1.0.12\n     */\n",
"org.jfree.chart.plot.XYPlot.isDomainZeroBaselineVisible": "/**\n     * Returns a flag that controls whether or not a zero baseline is\n     * displayed for the domain axis.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.5\n     *\n     * @see #setDomainZeroBaselineVisible(boolean)\n     */\n",
"org.jfree.chart.plot.XYPlot.setDomainZeroBaselineVisible": "/**\n     * Sets the flag that controls whether or not the zero baseline is\n     * displayed for the domain axis, and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param visible  the flag.\n     *\n     * @since 1.0.5\n     *\n     * @see #isDomainZeroBaselineVisible()\n     */\n",
"org.jfree.chart.plot.XYPlot.getDomainZeroBaselineStroke": "/**\n     * Returns the stroke used for the zero baseline against the domain axis.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @since 1.0.5\n     *\n     * @see #setDomainZeroBaselineStroke(Stroke)\n     */\n",
"org.jfree.chart.plot.XYPlot.setDomainZeroBaselineStroke": "/**\n     * Sets the stroke for the zero baseline for the domain axis,\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @since 1.0.5\n     *\n     * @see #getRangeZeroBaselineStroke()\n     */\n",
"org.jfree.chart.plot.XYPlot.getDomainZeroBaselinePaint": "/**\n     * Returns the paint for the zero baseline (if any) plotted against the\n     * domain axis.\n     *\n     * @since 1.0.5\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setDomainZeroBaselinePaint(Paint)\n     */\n",
"org.jfree.chart.plot.XYPlot.setDomainZeroBaselinePaint": "/**\n     * Sets the paint for the zero baseline plotted against the domain axis and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @since 1.0.5\n     *\n     * @see #getDomainZeroBaselinePaint()\n     */\n",
"org.jfree.chart.plot.XYPlot.isRangeZeroBaselineVisible": "/**\n     * Returns a flag that controls whether or not a zero baseline is\n     * displayed for the range axis.\n     *\n     * @return A boolean.\n     *\n     * @see #setRangeZeroBaselineVisible(boolean)\n     */\n",
"org.jfree.chart.plot.XYPlot.setRangeZeroBaselineVisible": "/**\n     * Sets the flag that controls whether or not the zero baseline is\n     * displayed for the range axis, and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param visible  the flag.\n     *\n     * @see #isRangeZeroBaselineVisible()\n     */\n",
"org.jfree.chart.plot.XYPlot.getRangeZeroBaselineStroke": "/**\n     * Returns the stroke used for the zero baseline against the range axis.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setRangeZeroBaselineStroke(Stroke)\n     */\n",
"org.jfree.chart.plot.XYPlot.setRangeZeroBaselineStroke": "/**\n     * Sets the stroke for the zero baseline for the range axis,\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getRangeZeroBaselineStroke()\n     */\n",
"org.jfree.chart.plot.XYPlot.getRangeZeroBaselinePaint": "/**\n     * Returns the paint for the zero baseline (if any) plotted against the\n     * range axis.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setRangeZeroBaselinePaint(Paint)\n     */\n",
"org.jfree.chart.plot.XYPlot.setRangeZeroBaselinePaint": "/**\n     * Sets the paint for the zero baseline plotted against the range axis and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getRangeZeroBaselinePaint()\n     */\n",
"org.jfree.chart.plot.XYPlot.getDomainTickBandPaint": "/**\n     * Returns the paint used for the domain tick bands.  If this is\n     * {@code null}, no tick bands will be drawn.\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setDomainTickBandPaint(Paint)\n     */\n",
"org.jfree.chart.plot.XYPlot.setDomainTickBandPaint": "/**\n     * Sets the paint for the domain tick bands.\n     *\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getDomainTickBandPaint()\n     */\n",
"org.jfree.chart.plot.XYPlot.getRangeTickBandPaint": "/**\n     * Returns the paint used for the range tick bands.  If this is\n     * {@code null}, no tick bands will be drawn.\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setRangeTickBandPaint(Paint)\n     */\n",
"org.jfree.chart.plot.XYPlot.setRangeTickBandPaint": "/**\n     * Sets the paint for the range tick bands.\n     *\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getRangeTickBandPaint()\n     */\n",
"org.jfree.chart.plot.XYPlot.getQuadrantOrigin": "/**\n     * Returns the origin for the quadrants that can be displayed on the plot.\n     * This defaults to (0, 0).\n     *\n     * @return The origin point (never {@code null}).\n     *\n     * @see #setQuadrantOrigin(Point2D)\n     */\n",
"org.jfree.chart.plot.XYPlot.setQuadrantOrigin": "/**\n     * Sets the quadrant origin and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param origin  the origin ({@code null} not permitted).\n     *\n     * @see #getQuadrantOrigin()\n     */\n",
"org.jfree.chart.plot.XYPlot.getQuadrantPaint": "/**\n     * Returns the paint used for the specified quadrant.\n     *\n     * @param index  the quadrant index (0-3).\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setQuadrantPaint(int, Paint)\n     */\n",
"org.jfree.chart.plot.XYPlot.setQuadrantPaint": "/**\n     * Sets the paint used for the specified quadrant and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the quadrant index (0-3).\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getQuadrantPaint(int)\n     */\n",
"org.jfree.chart.plot.XYPlot.addDomainMarker": "/**\n     * Adds a marker for the domain axis and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to the domain axis, however this is entirely up to the renderer.\n     *\n     * @param marker  the marker ({@code null} not permitted).\n     *\n     * @see #addDomainMarker(Marker, Layer)\n     * @see #clearDomainMarkers()\n     */\n",
"org.jfree.chart.plot.XYPlot.addDomainMarker": "/**\n     * Adds a marker for the domain axis in the specified layer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to the domain axis, however this is entirely up to the renderer.\n     *\n     * @param marker  the marker ({@code null} not permitted).\n     * @param layer  the layer (foreground or background).\n     *\n     * @see #addDomainMarker(int, Marker, Layer)\n     */\n",
"org.jfree.chart.plot.XYPlot.clearDomainMarkers": "/**\n     * Clears all the (foreground and background) domain markers and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @see #addDomainMarker(int, Marker, Layer)\n     */\n",
"org.jfree.chart.plot.XYPlot.clearDomainMarkers": "/**\n     * Clears the (foreground and background) domain markers for a particular\n     * renderer and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the renderer index.\n     *\n     * @see #clearRangeMarkers(int)\n     */\n",
"org.jfree.chart.plot.XYPlot.addDomainMarker": "/**\n     * Adds a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to the domain axis (that the renderer is mapped to), however this is\n     * entirely up to the renderer.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer (foreground or background).\n     *\n     * @see #clearDomainMarkers(int)\n     * @see #addRangeMarker(int, Marker, Layer)\n     */\n",
"org.jfree.chart.plot.XYPlot.addDomainMarker": "/**\n     * Adds a marker for a specific dataset/renderer and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to the domain axis (that the renderer is mapped to), however this is\n     * entirely up to the renderer.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer (foreground or background).\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.plot.XYPlot.removeDomainMarker": "/**\n     * Removes a marker for the domain axis and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param marker  the marker.\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.XYPlot.removeDomainMarker": "/**\n     * Removes a marker for the domain axis in the specified layer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param marker the marker ({@code null} not permitted).\n     * @param layer the layer (foreground or background).\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.XYPlot.removeDomainMarker": "/**\n     * Removes a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index the dataset/renderer index.\n     * @param marker the marker.\n     * @param layer the layer (foreground or background).\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.XYPlot.removeDomainMarker": "/**\n     * Removes a marker for a specific dataset/renderer and, if requested,\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer (foreground or background).\n     * @param notify  notify listeners?\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.plot.XYPlot.addRangeMarker": "/**\n     * Adds a marker for the range axis and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to the range axis, however this is entirely up to the renderer.\n     *\n     * @param marker  the marker ({@code null} not permitted).\n     *\n     * @see #addRangeMarker(Marker, Layer)\n     */\n",
"org.jfree.chart.plot.XYPlot.addRangeMarker": "/**\n     * Adds a marker for the range axis in the specified layer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to the range axis, however this is entirely up to the renderer.\n     *\n     * @param marker  the marker ({@code null} not permitted).\n     * @param layer  the layer (foreground or background).\n     *\n     * @see #addRangeMarker(int, Marker, Layer)\n     */\n",
"org.jfree.chart.plot.XYPlot.clearRangeMarkers": "/**\n     * Clears all the range markers and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @see #clearRangeMarkers()\n     */\n",
"org.jfree.chart.plot.XYPlot.addRangeMarker": "/**\n     * Adds a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to the range axis, however this is entirely up to the renderer.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer (foreground or background).\n     *\n     * @see #clearRangeMarkers(int)\n     * @see #addDomainMarker(int, Marker, Layer)\n     */\n",
"org.jfree.chart.plot.XYPlot.addRangeMarker": "/**\n     * Adds a marker for a specific dataset/renderer and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to the range axis, however this is entirely up to the renderer.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer (foreground or background).\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.plot.XYPlot.clearRangeMarkers": "/**\n     * Clears the (foreground and background) range markers for a particular\n     * renderer.\n     *\n     * @param index  the renderer index.\n     */\n",
"org.jfree.chart.plot.XYPlot.removeRangeMarker": "/**\n     * Removes a marker for the range axis and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param marker the marker.\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.XYPlot.removeRangeMarker": "/**\n     * Removes a marker for the range axis in the specified layer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param marker the marker ({@code null} not permitted).\n     * @param layer the layer (foreground or background).\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.XYPlot.removeRangeMarker": "/**\n     * Removes a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index the dataset/renderer index.\n     * @param marker the marker ({@code null} not permitted).\n     * @param layer the layer (foreground or background).\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.XYPlot.removeRangeMarker": "/**\n     * Removes a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker ({@code null} not permitted).\n     * @param layer  the layer (foreground or background) ({@code null} not permitted).\n     * @param notify  notify listeners?\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.plot.XYPlot.addAnnotation": "/**\n     * Adds an annotation to the plot and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param annotation  the annotation ({@code null} not permitted).\n     *\n     * @see #getAnnotations()\n     * @see #removeAnnotation(XYAnnotation)\n     */\n",
"org.jfree.chart.plot.XYPlot.addAnnotation": "/**\n     * Adds an annotation to the plot and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param annotation  the annotation ({@code null} not permitted).\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.plot.XYPlot.removeAnnotation": "/**\n     * Removes an annotation from the plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param annotation  the annotation ({@code null} not permitted).\n     *\n     * @return A boolean (indicates whether or not the annotation was removed).\n     *\n     * @see #addAnnotation(XYAnnotation)\n     * @see #getAnnotations()\n     */\n",
"org.jfree.chart.plot.XYPlot.removeAnnotation": "/**\n     * Removes an annotation from the plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param annotation  the annotation ({@code null} not permitted).\n     * @param notify  notify listeners?\n     *\n     * @return A boolean (indicates whether or not the annotation was removed).\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.plot.XYPlot.getAnnotations": "/**\n     * Returns the list of annotations.\n     *\n     * @return The list of annotations.\n     *\n     * @since 1.0.1\n     *\n     * @see #addAnnotation(XYAnnotation)\n     */\n",
"org.jfree.chart.plot.XYPlot.clearAnnotations": "/**\n     * Clears all the annotations and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @see #addAnnotation(XYAnnotation)\n     */\n",
"org.jfree.chart.plot.XYPlot.getShadowGenerator": "/**\n     * Returns the shadow generator for the plot, if any.\n     *\n     * @return The shadow generator (possibly {@code null}).\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.XYPlot.setShadowGenerator": "/**\n     * Sets the shadow generator for the plot and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.XYPlot.calculateAxisSpace": "/**\n     * Calculates the space required for all the axes in the plot.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     *\n     * @return The required space.\n     */\n",
"org.jfree.chart.plot.XYPlot.calculateDomainAxisSpace": "/**\n     * Calculates the space required for the domain axis/axes.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param space  a carrier for the result ({@code null} permitted).\n     *\n     * @return The required space.\n     */\n",
"org.jfree.chart.plot.XYPlot.calculateRangeAxisSpace": "/**\n     * Calculates the space required for the range axis/axes.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param space  a carrier for the result ({@code null} permitted).\n     *\n     * @return The required space.\n     */\n",
"org.jfree.chart.plot.XYPlot.integerise": "/**\n     * Trims a rectangle to integer coordinates.\n     *\n     * @param rect  the incoming rectangle.\n     *\n     * @return A rectangle with integer coordinates.\n     */\n",
"org.jfree.chart.plot.XYPlot.draw": "/**\n     * Draws the plot within the specified area on a graphics device.\n     *\n     * @param g2  the graphics device.\n     * @param area  the plot area (in Java2D space).\n     * @param anchor  an anchor point in Java2D space ({@code null}\n     *                permitted).\n     * @param parentState  the state from the parent plot, if there is one\n     *                     ({@code null} permitted).\n     * @param info  collects chart drawing information ({@code null}\n     *              permitted).\n     */\n",
"org.jfree.chart.plot.XYPlot.getDatasetIndices": "/**\n     * Returns the indices of the non-null datasets in the specified order.\n     * \n     * @param order  the order ({@code null} not permitted).\n     * \n     * @return The list of indices. \n     */\n",
"org.jfree.chart.plot.XYPlot.drawBackground": "/**\n     * Draws the background for the plot.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     */\n",
"org.jfree.chart.plot.XYPlot.drawQuadrants": "/**\n     * Draws the quadrants.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     *\n     * @see #setQuadrantOrigin(Point2D)\n     * @see #setQuadrantPaint(int, Paint)\n     */\n",
"org.jfree.chart.plot.XYPlot.drawDomainTickBands": "/**\n     * Draws the domain tick bands, if any.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param ticks  the ticks.\n     *\n     * @see #setDomainTickBandPaint(Paint)\n     */\n",
"org.jfree.chart.plot.XYPlot.drawRangeTickBands": "/**\n     * Draws the range tick bands, if any.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param ticks  the ticks.\n     *\n     * @see #setRangeTickBandPaint(Paint)\n     */\n",
"org.jfree.chart.plot.XYPlot.drawAxes": "/**\n     * A utility method for drawing the axes.\n     *\n     * @param g2  the graphics device ({@code null} not permitted).\n     * @param plotArea  the plot area ({@code null} not permitted).\n     * @param dataArea  the data area ({@code null} not permitted).\n     * @param plotState  collects information about the plot ({@code null}\n     *                   permitted).\n     *\n     * @return A map containing the state for each axis drawn.\n     */\n",
"org.jfree.chart.plot.XYPlot.render": "/**\n     * Draws a representation of the data within the dataArea region, using the\n     * current renderer.\n     * <P>\n     * The {@code info} and {@code crosshairState} arguments may be\n     * {@code null}.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the region in which the data is to be drawn.\n     * @param index  the dataset index.\n     * @param info  an optional object for collection dimension information.\n     * @param crosshairState  collects crosshair information\n     *                        ({@code null} permitted).\n     *\n     * @return A flag that indicates whether any data was actually rendered.\n     */\n",
"org.jfree.chart.plot.XYPlot.getDomainAxisForDataset": "/**\n     * Returns the domain axis for a dataset.\n     *\n     * @param index  the dataset index (must be &gt;= 0).\n     *\n     * @return The axis.\n     */\n",
"org.jfree.chart.plot.XYPlot.getRangeAxisForDataset": "/**\n     * Returns the range axis for a dataset.\n     *\n     * @param index  the dataset index (must be &gt;= 0).\n     *\n     * @return The axis.\n     */\n",
"org.jfree.chart.plot.XYPlot.drawDomainGridlines": "/**\n     * Draws the gridlines for the plot, if they are visible.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param ticks  the ticks.\n     *\n     * @see #drawRangeGridlines(Graphics2D, Rectangle2D, List)\n     */\n",
"org.jfree.chart.plot.XYPlot.drawRangeGridlines": "/**\n     * Draws the gridlines for the plot's primary range axis, if they are\n     * visible.\n     *\n     * @param g2  the graphics device.\n     * @param area  the data area.\n     * @param ticks  the ticks.\n     *\n     * @see #drawDomainGridlines(Graphics2D, Rectangle2D, List)\n     */\n",
"org.jfree.chart.plot.XYPlot.drawZeroDomainBaseline": "/**\n     * Draws a base line across the chart at value zero on the domain axis.\n     *\n     * @param g2  the graphics device.\n     * @param area  the data area.\n     *\n     * @see #setDomainZeroBaselineVisible(boolean)\n     *\n     * @since 1.0.5\n     */\n",
"org.jfree.chart.plot.XYPlot.drawZeroRangeBaseline": "/**\n     * Draws a base line across the chart at value zero on the range axis.\n     *\n     * @param g2  the graphics device.\n     * @param area  the data area.\n     *\n     * @see #setRangeZeroBaselineVisible(boolean)\n     */\n",
"org.jfree.chart.plot.XYPlot.drawAnnotations": "/**\n     * Draws the annotations for the plot.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param info  the chart rendering info.\n     */\n",
"org.jfree.chart.plot.XYPlot.drawDomainMarkers": "/**\n     * Draws the domain markers (if any) for an axis and layer.  This method is\n     * typically called from within the draw() method.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param index  the dataset/renderer index.\n     * @param layer  the layer (foreground or background).\n     */\n",
"org.jfree.chart.plot.XYPlot.drawRangeMarkers": "/**\n     * Draws the range markers (if any) for a renderer and layer.  This method\n     * is typically called from within the draw() method.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param index  the renderer index.\n     * @param layer  the layer (foreground or background).\n     */\n",
"org.jfree.chart.plot.XYPlot.getDomainMarkers": "/**\n     * Returns the list of domain markers (read only) for the specified layer.\n     *\n     * @param layer  the layer (foreground or background).\n     *\n     * @return The list of domain markers.\n     *\n     * @see #getRangeMarkers(Layer)\n     */\n",
"org.jfree.chart.plot.XYPlot.getRangeMarkers": "/**\n     * Returns the list of range markers (read only) for the specified layer.\n     *\n     * @param layer  the layer (foreground or background).\n     *\n     * @return The list of range markers.\n     *\n     * @see #getDomainMarkers(Layer)\n     */\n",
"org.jfree.chart.plot.XYPlot.getDomainMarkers": "/**\n     * Returns a collection of domain markers for a particular renderer and\n     * layer.\n     *\n     * @param index  the renderer index.\n     * @param layer  the layer.\n     *\n     * @return A collection of markers (possibly {@code null}).\n     *\n     * @see #getRangeMarkers(int, Layer)\n     */\n",
"org.jfree.chart.plot.XYPlot.getRangeMarkers": "/**\n     * Returns a collection of range markers for a particular renderer and\n     * layer.\n     *\n     * @param index  the renderer index.\n     * @param layer  the layer.\n     *\n     * @return A collection of markers (possibly {@code null}).\n     *\n     * @see #getDomainMarkers(int, Layer)\n     */\n",
"org.jfree.chart.plot.XYPlot.drawHorizontalLine": "/**\n     * Utility method for drawing a horizontal line across the data area of the\n     * plot.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param value  the coordinate, where to draw the line.\n     * @param stroke  the stroke to use.\n     * @param paint  the paint to use.\n     */\n",
"org.jfree.chart.plot.XYPlot.drawDomainCrosshair": "/**\n     * Draws a domain crosshair.\n     *\n     * @param g2  the graphics target.\n     * @param dataArea  the data area.\n     * @param orientation  the plot orientation.\n     * @param value  the crosshair value.\n     * @param axis  the axis against which the value is measured.\n     * @param stroke  the stroke used to draw the crosshair line.\n     * @param paint  the paint used to draw the crosshair line.\n     *\n     * @since 1.0.4\n     */\n",
"org.jfree.chart.plot.XYPlot.drawVerticalLine": "/**\n     * Utility method for drawing a vertical line on the data area of the plot.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param value  the coordinate, where to draw the line.\n     * @param stroke  the stroke to use.\n     * @param paint  the paint to use.\n     */\n",
"org.jfree.chart.plot.XYPlot.drawRangeCrosshair": "/**\n     * Draws a range crosshair.\n     *\n     * @param g2  the graphics target.\n     * @param dataArea  the data area.\n     * @param orientation  the plot orientation.\n     * @param value  the crosshair value.\n     * @param axis  the axis against which the value is measured.\n     * @param stroke  the stroke used to draw the crosshair line.\n     * @param paint  the paint used to draw the crosshair line.\n     *\n     * @since 1.0.4\n     */\n",
"org.jfree.chart.plot.XYPlot.handleClick": "/**\n     * Handles a 'click' on the plot by updating the anchor values.\n     *\n     * @param x  the x-coordinate, where the click occurred, in Java2D space.\n     * @param y  the y-coordinate, where the click occurred, in Java2D space.\n     * @param info  object containing information about the plot dimensions.\n     */\n",
"org.jfree.chart.plot.XYPlot.getDatasetsMappedToDomainAxis": "/**\n     * A utility method that returns a list of datasets that are mapped to a\n     * particular axis.\n     *\n     * @param axisIndex  the axis index ({@code null} not permitted).\n     *\n     * @return A list of datasets.\n     */\n",
"org.jfree.chart.plot.XYPlot.getDatasetsMappedToRangeAxis": "/**\n     * A utility method that returns a list of datasets that are mapped to a\n     * particular axis.\n     *\n     * @param axisIndex  the axis index ({@code null} not permitted).\n     *\n     * @return A list of datasets.\n     */\n",
"org.jfree.chart.plot.XYPlot.getDomainAxisIndex": "/**\n     * Returns the index of the given domain axis.\n     *\n     * @param axis  the axis.\n     *\n     * @return The axis index.\n     *\n     * @see #getRangeAxisIndex(ValueAxis)\n     */\n",
"org.jfree.chart.plot.XYPlot.getRangeAxisIndex": "/**\n     * Returns the index of the given range axis.\n     *\n     * @param axis  the axis.\n     *\n     * @return The axis index.\n     *\n     * @see #getDomainAxisIndex(ValueAxis)\n     */\n",
"org.jfree.chart.plot.XYPlot.getDataRange": "/**\n     * Returns the range for the specified axis.\n     *\n     * @param axis  the axis.\n     *\n     * @return The range.\n     */\n",
"org.jfree.chart.plot.XYPlot.annotationChanged": "/**\n     * Receives notification of a change to an {@link Annotation} added to\n     * this plot.\n     *\n     * @param event  information about the event (not used here).\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.XYPlot.datasetChanged": "/**\n     * Receives notification of a change to the plot's dataset.\n     * <P>\n     * The axis ranges are updated if necessary.\n     *\n     * @param event  information about the event (not used here).\n     */\n",
"org.jfree.chart.plot.XYPlot.rendererChanged": "/**\n     * Receives notification of a renderer change event.\n     *\n     * @param event  the event.\n     */\n",
"org.jfree.chart.plot.XYPlot.isDomainCrosshairVisible": "/**\n     * Returns a flag indicating whether or not the domain crosshair is visible.\n     *\n     * @return The flag.\n     *\n     * @see #setDomainCrosshairVisible(boolean)\n     */\n",
"org.jfree.chart.plot.XYPlot.setDomainCrosshairVisible": "/**\n     * Sets the flag indicating whether or not the domain crosshair is visible\n     * and, if the flag changes, sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param flag  the new value of the flag.\n     *\n     * @see #isDomainCrosshairVisible()\n     */\n",
"org.jfree.chart.plot.XYPlot.isDomainCrosshairLockedOnData": "/**\n     * Returns a flag indicating whether or not the crosshair should \"lock-on\"\n     * to actual data values.\n     *\n     * @return The flag.\n     *\n     * @see #setDomainCrosshairLockedOnData(boolean)\n     */\n",
"org.jfree.chart.plot.XYPlot.setDomainCrosshairLockedOnData": "/**\n     * Sets the flag indicating whether or not the domain crosshair should\n     * \"lock-on\" to actual data values.  If the flag value changes, this\n     * method sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #isDomainCrosshairLockedOnData()\n     */\n",
"org.jfree.chart.plot.XYPlot.getDomainCrosshairValue": "/**\n     * Returns the domain crosshair value.\n     *\n     * @return The value.\n     *\n     * @see #setDomainCrosshairValue(double)\n     */\n",
"org.jfree.chart.plot.XYPlot.setDomainCrosshairValue": "/**\n     * Sets the domain crosshair value and sends a {@link PlotChangeEvent} to\n     * all registered listeners (provided that the domain crosshair is visible).\n     *\n     * @param value  the value.\n     *\n     * @see #getDomainCrosshairValue()\n     */\n",
"org.jfree.chart.plot.XYPlot.setDomainCrosshairValue": "/**\n     * Sets the domain crosshair value and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners (provided that the\n     * domain crosshair is visible).\n     *\n     * @param value  the new value.\n     * @param notify  notify listeners?\n     *\n     * @see #getDomainCrosshairValue()\n     */\n",
"org.jfree.chart.plot.XYPlot.getDomainCrosshairStroke": "/**\n     * Returns the {@link Stroke} used to draw the crosshair (if visible).\n     *\n     * @return The crosshair stroke (never {@code null}).\n     *\n     * @see #setDomainCrosshairStroke(Stroke)\n     * @see #isDomainCrosshairVisible()\n     * @see #getDomainCrosshairPaint()\n     */\n",
"org.jfree.chart.plot.XYPlot.setDomainCrosshairStroke": "/**\n     * Sets the Stroke used to draw the crosshairs (if visible) and notifies\n     * registered listeners that the axis has been modified.\n     *\n     * @param stroke  the new crosshair stroke ({@code null} not\n     *     permitted).\n     *\n     * @see #getDomainCrosshairStroke()\n     */\n",
"org.jfree.chart.plot.XYPlot.getDomainCrosshairPaint": "/**\n     * Returns the domain crosshair paint.\n     *\n     * @return The crosshair paint (never {@code null}).\n     *\n     * @see #setDomainCrosshairPaint(Paint)\n     * @see #isDomainCrosshairVisible()\n     * @see #getDomainCrosshairStroke()\n     */\n",
"org.jfree.chart.plot.XYPlot.setDomainCrosshairPaint": "/**\n     * Sets the paint used to draw the crosshairs (if visible) and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint the new crosshair paint ({@code null} not permitted).\n     *\n     * @see #getDomainCrosshairPaint()\n     */\n",
"org.jfree.chart.plot.XYPlot.isRangeCrosshairVisible": "/**\n     * Returns a flag indicating whether or not the range crosshair is visible.\n     *\n     * @return The flag.\n     *\n     * @see #setRangeCrosshairVisible(boolean)\n     * @see #isDomainCrosshairVisible()\n     */\n",
"org.jfree.chart.plot.XYPlot.setRangeCrosshairVisible": "/**\n     * Sets the flag indicating whether or not the range crosshair is visible.\n     * If the flag value changes, this method sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param flag  the new value of the flag.\n     *\n     * @see #isRangeCrosshairVisible()\n     */\n",
"org.jfree.chart.plot.XYPlot.isRangeCrosshairLockedOnData": "/**\n     * Returns a flag indicating whether or not the crosshair should \"lock-on\"\n     * to actual data values.\n     *\n     * @return The flag.\n     *\n     * @see #setRangeCrosshairLockedOnData(boolean)\n     */\n",
"org.jfree.chart.plot.XYPlot.setRangeCrosshairLockedOnData": "/**\n     * Sets the flag indicating whether or not the range crosshair should\n     * \"lock-on\" to actual data values.  If the flag value changes, this method\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #isRangeCrosshairLockedOnData()\n     */\n",
"org.jfree.chart.plot.XYPlot.getRangeCrosshairValue": "/**\n     * Returns the range crosshair value.\n     *\n     * @return The value.\n     *\n     * @see #setRangeCrosshairValue(double)\n     */\n",
"org.jfree.chart.plot.XYPlot.setRangeCrosshairValue": "/**\n     * Sets the range crosshair value.\n     * <P>\n     * Registered listeners are notified that the plot has been modified, but\n     * only if the crosshair is visible.\n     *\n     * @param value  the new value.\n     *\n     * @see #getRangeCrosshairValue()\n     */\n",
"org.jfree.chart.plot.XYPlot.setRangeCrosshairValue": "/**\n     * Sets the range crosshair value and sends a {@link PlotChangeEvent} to\n     * all registered listeners, but only if the crosshair is visible.\n     *\n     * @param value  the new value.\n     * @param notify  a flag that controls whether or not listeners are\n     *                notified.\n     *\n     * @see #getRangeCrosshairValue()\n     */\n",
"org.jfree.chart.plot.XYPlot.getRangeCrosshairStroke": "/**\n     * Returns the stroke used to draw the crosshair (if visible).\n     *\n     * @return The crosshair stroke (never {@code null}).\n     *\n     * @see #setRangeCrosshairStroke(Stroke)\n     * @see #isRangeCrosshairVisible()\n     * @see #getRangeCrosshairPaint()\n     */\n",
"org.jfree.chart.plot.XYPlot.setRangeCrosshairStroke": "/**\n     * Sets the stroke used to draw the crosshairs (if visible) and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the new crosshair stroke ({@code null} not\n     *         permitted).\n     *\n     * @see #getRangeCrosshairStroke()\n     */\n",
"org.jfree.chart.plot.XYPlot.getRangeCrosshairPaint": "/**\n     * Returns the range crosshair paint.\n     *\n     * @return The crosshair paint (never {@code null}).\n     *\n     * @see #setRangeCrosshairPaint(Paint)\n     * @see #isRangeCrosshairVisible()\n     * @see #getRangeCrosshairStroke()\n     */\n",
"org.jfree.chart.plot.XYPlot.setRangeCrosshairPaint": "/**\n     * Sets the paint used to color the crosshairs (if visible) and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint the new crosshair paint ({@code null} not permitted).\n     *\n     * @see #getRangeCrosshairPaint()\n     */\n",
"org.jfree.chart.plot.XYPlot.getFixedDomainAxisSpace": "/**\n     * Returns the fixed domain axis space.\n     *\n     * @return The fixed domain axis space (possibly {@code null}).\n     *\n     * @see #setFixedDomainAxisSpace(AxisSpace)\n     */\n",
"org.jfree.chart.plot.XYPlot.setFixedDomainAxisSpace": "/**\n     * Sets the fixed domain axis space and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param space  the space ({@code null} permitted).\n     *\n     * @see #getFixedDomainAxisSpace()\n     */\n",
"org.jfree.chart.plot.XYPlot.setFixedDomainAxisSpace": "/**\n     * Sets the fixed domain axis space and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param space  the space ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getFixedDomainAxisSpace()\n     *\n     * @since 1.0.9\n     */\n",
"org.jfree.chart.plot.XYPlot.getFixedRangeAxisSpace": "/**\n     * Returns the fixed range axis space.\n     *\n     * @return The fixed range axis space (possibly {@code null}).\n     *\n     * @see #setFixedRangeAxisSpace(AxisSpace)\n     */\n",
"org.jfree.chart.plot.XYPlot.setFixedRangeAxisSpace": "/**\n     * Sets the fixed range axis space and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param space  the space ({@code null} permitted).\n     *\n     * @see #getFixedRangeAxisSpace()\n     */\n",
"org.jfree.chart.plot.XYPlot.setFixedRangeAxisSpace": "/**\n     * Sets the fixed range axis space and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param space  the space ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getFixedRangeAxisSpace()\n     *\n     * @since 1.0.9\n     */\n",
"org.jfree.chart.plot.XYPlot.isDomainPannable": "/**\n     * Returns {@code true} if panning is enabled for the domain axes,\n     * and {@code false} otherwise.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.XYPlot.setDomainPannable": "/**\n     * Sets the flag that enables or disables panning of the plot along the\n     * domain axes.\n     *\n     * @param pannable  the new flag value.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.XYPlot.isRangePannable": "/**\n     * Returns {@code true} if panning is enabled for the range axis/axes,\n     * and {@code false} otherwise.  The default value is {@code false}.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.XYPlot.setRangePannable": "/**\n     * Sets the flag that enables or disables panning of the plot along\n     * the range axis/axes.\n     *\n     * @param pannable  the new flag value.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.XYPlot.panDomainAxes": "/**\n     * Pans the domain axes by the specified percentage.\n     *\n     * @param percent  the distance to pan (as a percentage of the axis length).\n     * @param info the plot info\n     * @param source the source point where the pan action started.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.XYPlot.panRangeAxes": "/**\n     * Pans the range axes by the specified percentage.\n     *\n     * @param percent  the distance to pan (as a percentage of the axis length).\n     * @param info the plot info\n     * @param source the source point where the pan action started.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.XYPlot.zoomDomainAxes": "/**\n     * Multiplies the range on the domain axis/axes by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param info  the plot rendering info.\n     * @param source  the source point (in Java2D space).\n     *\n     * @see #zoomRangeAxes(double, PlotRenderingInfo, Point2D)\n     */\n",
"org.jfree.chart.plot.XYPlot.zoomDomainAxes": "/**\n     * Multiplies the range on the domain axis/axes by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param info  the plot rendering info.\n     * @param source  the source point (in Java2D space).\n     * @param useAnchor  use source point as zoom anchor?\n     *\n     * @see #zoomRangeAxes(double, PlotRenderingInfo, Point2D, boolean)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.XYPlot.zoomDomainAxes": "/**\n     * Zooms in on the domain axis/axes.  The new lower and upper bounds are\n     * specified as percentages of the current axis range, where 0 percent is\n     * the current lower bound and 100 percent is the current upper bound.\n     *\n     * @param lowerPercent  a percentage that determines the new lower bound\n     *                      for the axis (e.g. 0.20 is twenty percent).\n     * @param upperPercent  a percentage that determines the new upper bound\n     *                      for the axis (e.g. 0.80 is eighty percent).\n     * @param info  the plot rendering info.\n     * @param source  the source point (ignored).\n     *\n     * @see #zoomRangeAxes(double, double, PlotRenderingInfo, Point2D)\n     */\n",
"org.jfree.chart.plot.XYPlot.zoomRangeAxes": "/**\n     * Multiplies the range on the range axis/axes by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param info  the plot rendering info.\n     * @param source  the source point.\n     *\n     * @see #zoomDomainAxes(double, PlotRenderingInfo, Point2D, boolean)\n     */\n",
"org.jfree.chart.plot.XYPlot.zoomRangeAxes": "/**\n     * Multiplies the range on the range axis/axes by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param info  the plot rendering info.\n     * @param source  the source point.\n     * @param useAnchor  a flag that controls whether or not the source point\n     *         is used for the zoom anchor.\n     *\n     * @see #zoomDomainAxes(double, PlotRenderingInfo, Point2D, boolean)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.XYPlot.zoomRangeAxes": "/**\n     * Zooms in on the range axes.\n     *\n     * @param lowerPercent  the lower bound.\n     * @param upperPercent  the upper bound.\n     * @param info  the plot rendering info.\n     * @param source  the source point.\n     *\n     * @see #zoomDomainAxes(double, double, PlotRenderingInfo, Point2D)\n     */\n",
"org.jfree.chart.plot.XYPlot.isDomainZoomable": "/**\n     * Returns {@code true}, indicating that the domain axis/axes for this\n     * plot are zoomable.\n     *\n     * @return A boolean.\n     *\n     * @see #isRangeZoomable()\n     */\n",
"org.jfree.chart.plot.XYPlot.isRangeZoomable": "/**\n     * Returns {@code true}, indicating that the range axis/axes for this\n     * plot are zoomable.\n     *\n     * @return A boolean.\n     *\n     * @see #isDomainZoomable()\n     */\n",
"org.jfree.chart.plot.XYPlot.getSeriesCount": "/**\n     * Returns the number of series in the primary dataset for this plot.  If\n     * the dataset is {@code null}, the method returns 0.\n     *\n     * @return The series count.\n     */\n",
"org.jfree.chart.plot.XYPlot.getFixedLegendItems": "/**\n     * Returns the fixed legend items, if any.\n     *\n     * @return The legend items (possibly {@code null}).\n     *\n     * @see #setFixedLegendItems(LegendItemCollection)\n     */\n",
"org.jfree.chart.plot.XYPlot.setFixedLegendItems": "/**\n     * Sets the fixed legend items for the plot.  Leave this set to\n     * {@code null} if you prefer the legend items to be created\n     * automatically.\n     *\n     * @param items  the legend items ({@code null} permitted).\n     *\n     * @see #getFixedLegendItems()\n     */\n",
"org.jfree.chart.plot.XYPlot.getLegendItems": "/**\n     * Returns the legend items for the plot.  Each legend item is generated by\n     * the plot's renderer, since the renderer is responsible for the visual\n     * representation of the data.\n     *\n     * @return The legend items.\n     */\n",
"org.jfree.chart.plot.XYPlot.equals": "/**\n     * Tests this plot for equality with another object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.plot.XYPlot.clone": "/**\n     * Returns a clone of the plot.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  this can occur if some component of\n     *         the plot cannot be cloned.\n     */\n",
"org.jfree.chart.plot.XYPlot.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.plot.XYPlot.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.plot.PlotRenderingInfo.getOwner": "/**\n     * Returns the owner (as specified in the constructor).\n     *\n     * @return The owner (possibly {@code null}).\n     */\n",
"org.jfree.chart.plot.PlotRenderingInfo.getPlotArea": "/**\n     * Returns the plot area (in Java2D space).\n     *\n     * @return The plot area (possibly {@code null}).\n     *\n     * @see #setPlotArea(Rectangle2D)\n     */\n",
"org.jfree.chart.plot.PlotRenderingInfo.setPlotArea": "/**\n     * Sets the plot area.\n     *\n     * @param area  the plot area (in Java2D space, {@code null}\n     *     permitted but discouraged)\n     *\n     * @see #getPlotArea()\n     */\n",
"org.jfree.chart.plot.PlotRenderingInfo.getDataArea": "/**\n     * Returns the plot's data area (in Java2D space).\n     *\n     * @return The data area (possibly {@code null}).\n     *\n     * @see #setDataArea(Rectangle2D)\n     */\n",
"org.jfree.chart.plot.PlotRenderingInfo.setDataArea": "/**\n     * Sets the data area.\n     *\n     * @param area  the data area (in Java2D space, {@code null} permitted\n     *     but discouraged).\n     *\n     * @see #getDataArea()\n     */\n",
"org.jfree.chart.plot.PlotRenderingInfo.getSubplotCount": "/**\n     * Returns the number of subplots (possibly zero).\n     *\n     * @return The subplot count.\n     */\n",
"org.jfree.chart.plot.PlotRenderingInfo.addSubplotInfo": "/**\n     * Adds the info for a subplot.\n     *\n     * @param info  the subplot info.\n     *\n     * @see #getSubplotInfo(int)\n     */\n",
"org.jfree.chart.plot.PlotRenderingInfo.getSubplotInfo": "/**\n     * Returns the info for a subplot.\n     *\n     * @param index  the subplot index.\n     *\n     * @return The info.\n     *\n     * @see #addSubplotInfo(PlotRenderingInfo)\n     */\n",
"org.jfree.chart.plot.PlotRenderingInfo.getSubplotIndex": "/**\n     * Returns the index of the subplot that contains the specified\n     * (x, y) point (the \"source\" point).  The source point will usually\n     * come from a mouse click on a {@link org.jfree.chart.ChartPanel},\n     * and this method is then used to determine the subplot that\n     * contains the source point.\n     *\n     * @param source  the source point (in Java2D space, {@code null} not\n     * permitted).\n     *\n     * @return The subplot index (or -1 if no subplot contains {@code source}).\n     */\n",
"org.jfree.chart.plot.PlotRenderingInfo.equals": "/**\n     * Tests this instance for equality against an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.PlotRenderingInfo.clone": "/**\n     * Returns a clone of this object.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning.\n     */\n",
"org.jfree.chart.plot.PlotRenderingInfo.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.plot.PlotRenderingInfo.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.plot.DrawingSupplier.getNextPaint": "/**\n     * Returns the next paint in a sequence maintained by the supplier.\n     *\n     * @return The paint.\n     */\n",
"org.jfree.chart.plot.DrawingSupplier.getNextOutlinePaint": "/**\n     * Returns the next outline paint in a sequence maintained by the supplier.\n     *\n     * @return The paint.\n     */\n",
"org.jfree.chart.plot.DrawingSupplier.getNextFillPaint": "/**\n     * Returns the next fill paint in a sequence maintained by the supplier.\n     *\n     * @return The paint.\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.chart.plot.DrawingSupplier.getNextStroke": "/**\n     * Returns the next {@code Stroke} object in a sequence maintained by\n     * the supplier.\n     *\n     * @return The stroke.\n     */\n",
"org.jfree.chart.plot.DrawingSupplier.getNextOutlineStroke": "/**\n     * Returns the next {@code Stroke} object in a sequence maintained by\n     * the supplier.\n     *\n     * @return The stroke.\n     */\n",
"org.jfree.chart.plot.DrawingSupplier.getNextShape": "/**\n     * Returns the next {@code Shape} object in a sequence maintained by\n     * the supplier.\n     *\n     * @return The shape.\n     */\n",
"org.jfree.chart.plot.Pannable.getOrientation": "/**\n     * Returns the orientation of the plot.\n     *\n     * @return The orientation (never {@code null}).\n     */\n",
"org.jfree.chart.plot.Pannable.isDomainPannable": "/**\n     * Evaluates if the domain axis can be panned.\n     *\n     * @return {@code true} if the domain axis is pannable.\n     */\n",
"org.jfree.chart.plot.Pannable.isRangePannable": "/**\n     * Evaluates if the range axis can be panned.\n     *\n     * @return {@code true} if the range axis is pannable.\n     */\n",
"org.jfree.chart.plot.Pannable.panDomainAxes": "/**\n     * Pans the domain axes by the specified percentage.\n     *\n     * @param percent  the distance to pan (as a percentage of the axis length).\n     * @param info the plot info\n     * @param source the source point where the pan action started.\n     */\n",
"org.jfree.chart.plot.Pannable.panRangeAxes": "/**\n     * Pans the range axes by the specified percentage.\n     *\n     * @param percent  the distance to pan (as a percentage of the axis length).\n     * @param info the plot info\n     * @param source the source point where the pan action started.\n     */\n",
"org.jfree.chart.plot.SeriesRenderingOrder.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string (never {@code null}).\n     */\n",
"org.jfree.chart.plot.SeriesRenderingOrder.equals": "/**\n     * Returns {@code true} if this object is equal to the specified\n     * object, and {@code false} otherwise.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.SeriesRenderingOrder.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.plot.SeriesRenderingOrder.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     *\n     * @return The object.\n     *\n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.chart.plot.Crosshair.isVisible": "/**\n     * Returns the flag that indicates whether or not the crosshair is\n     * currently visible.\n     *\n     * @return A boolean.\n     *\n     * @see #setVisible(boolean)\n     */\n",
"org.jfree.chart.plot.Crosshair.setVisible": "/**\n     * Sets the flag that controls the visibility of the crosshair and sends\n     * a proerty change event (with the name 'visible') to all registered\n     * listeners.\n     *\n     * @param visible  the new flag value.\n     *\n     * @see #isVisible()\n     */\n",
"org.jfree.chart.plot.Crosshair.getValue": "/**\n     * Returns the crosshair value.\n     *\n     * @return The crosshair value.\n     *\n     * @see #setValue(double)\n     */\n",
"org.jfree.chart.plot.Crosshair.setValue": "/**\n     * Sets the crosshair value and sends a property change event with the name\n     * 'value' to all registered listeners.\n     *\n     * @param value  the value.\n     *\n     * @see #getValue()\n     */\n",
"org.jfree.chart.plot.Crosshair.getPaint": "/**\n     * Returns the paint for the crosshair line.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setPaint(java.awt.Paint)\n     */\n",
"org.jfree.chart.plot.Crosshair.setPaint": "/**\n     * Sets the paint for the crosshair line and sends a property change event\n     * with the name \"paint\" to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getPaint()\n     */\n",
"org.jfree.chart.plot.Crosshair.getStroke": "/**\n     * Returns the stroke for the crosshair line.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setStroke(java.awt.Stroke)\n     */\n",
"org.jfree.chart.plot.Crosshair.setStroke": "/**\n     * Sets the stroke for the crosshair line and sends a property change event\n     * with the name \"stroke\" to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getStroke()\n     */\n",
"org.jfree.chart.plot.Crosshair.isLabelVisible": "/**\n     * Returns the flag that controls whether or not a label is drawn for\n     * this crosshair.\n     *\n     * @return A boolean.\n     *\n     * @see #setLabelVisible(boolean)\n     */\n",
"org.jfree.chart.plot.Crosshair.setLabelVisible": "/**\n     * Sets the flag that controls whether or not a label is drawn for the\n     * crosshair and sends a property change event (with the name\n     * 'labelVisible') to all registered listeners.\n     *\n     * @param visible  the new flag value.\n     *\n     * @see #isLabelVisible()\n     */\n",
"org.jfree.chart.plot.Crosshair.getLabelGenerator": "/**\n     * Returns the crosshair label generator.\n     *\n     * @return The label crosshair generator (never {@code null}).\n     *\n     * @see #setLabelGenerator(org.jfree.chart.labels.CrosshairLabelGenerator)\n     */\n",
"org.jfree.chart.plot.Crosshair.setLabelGenerator": "/**\n     * Sets the crosshair label generator and sends a property change event\n     * (with the name 'labelGenerator') to all registered listeners.\n     *\n     * @param generator  the new generator ({@code null} not permitted).\n     *\n     * @see #getLabelGenerator()\n     */\n",
"org.jfree.chart.plot.Crosshair.getLabelAnchor": "/**\n     * Returns the label anchor point.\n     *\n     * @return the label anchor point (never {@code null}.\n     *\n     * @see #setLabelAnchor(org.jfree.chart.ui.RectangleAnchor)\n     */\n",
"org.jfree.chart.plot.Crosshair.setLabelAnchor": "/**\n     * Sets the label anchor point and sends a property change event (with the\n     * name 'labelAnchor') to all registered listeners.\n     *\n     * @param anchor  the anchor ({@code null} not permitted).\n     *\n     * @see #getLabelAnchor()\n     */\n",
"org.jfree.chart.plot.Crosshair.getLabelXOffset": "/**\n     * Returns the x-offset for the label (in Java2D units).\n     *\n     * @return The x-offset.\n     *\n     * @see #setLabelXOffset(double)\n     */\n",
"org.jfree.chart.plot.Crosshair.setLabelXOffset": "/**\n     * Sets the x-offset and sends a property change event (with the name\n     * 'labelXOffset') to all registered listeners.\n     *\n     * @param offset  the new offset.\n     *\n     * @see #getLabelXOffset()\n     */\n",
"org.jfree.chart.plot.Crosshair.getLabelYOffset": "/**\n     * Returns the y-offset for the label (in Java2D units).\n     *\n     * @return The y-offset.\n     *\n     * @see #setLabelYOffset(double)\n     */\n",
"org.jfree.chart.plot.Crosshair.setLabelYOffset": "/**\n     * Sets the y-offset and sends a property change event (with the name\n     * 'labelYOffset') to all registered listeners.\n     *\n     * @param offset  the new offset.\n     *\n     * @see #getLabelYOffset()\n     */\n",
"org.jfree.chart.plot.Crosshair.getLabelFont": "/**\n     * Returns the label font.\n     *\n     * @return The label font (never {@code null}).\n     *\n     * @see #setLabelFont(java.awt.Font)\n     */\n",
"org.jfree.chart.plot.Crosshair.setLabelFont": "/**\n     * Sets the label font and sends a property change event (with the name\n     * 'labelFont') to all registered listeners.\n     *\n     * @param font  the font ({@code null} not permitted).\n     *\n     * @see #getLabelFont()\n     */\n",
"org.jfree.chart.plot.Crosshair.getLabelPaint": "/**\n     * Returns the label paint.  The default value is {@code Color.BLACK}.\n     *\n     * @return The label paint (never {@code null}).\n     *\n     * @see #setLabelPaint\n     */\n",
"org.jfree.chart.plot.Crosshair.setLabelPaint": "/**\n     * Sets the label paint and sends a property change event (with the name\n     * 'labelPaint') to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getLabelPaint()\n     */\n",
"org.jfree.chart.plot.Crosshair.getLabelBackgroundPaint": "/**\n     * Returns the label background paint.\n     *\n     * @return The label background paint (possibly {@code null}).\n     *\n     * @see #setLabelBackgroundPaint(java.awt.Paint)\n     */\n",
"org.jfree.chart.plot.Crosshair.setLabelBackgroundPaint": "/**\n     * Sets the label background paint and sends a property change event with\n     * the name 'labelBackgroundPaint') to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getLabelBackgroundPaint()\n     */\n",
"org.jfree.chart.plot.Crosshair.isLabelOutlineVisible": "/**\n     * Returns the flag that controls the visibility of the label outline.\n     * The default value is {@code true}.\n     *\n     * @return A boolean.\n     *\n     * @see #setLabelOutlineVisible(boolean)\n     */\n",
"org.jfree.chart.plot.Crosshair.setLabelOutlineVisible": "/**\n     * Sets the flag that controls the visibility of the label outlines and\n     * sends a property change event (with the name \"labelOutlineVisible\") to\n     * all registered listeners.\n     *\n     * @param visible  the new flag value.\n     *\n     * @see #isLabelOutlineVisible()\n     */\n",
"org.jfree.chart.plot.Crosshair.getLabelOutlinePaint": "/**\n     * Returns the label outline paint.\n     *\n     * @return The label outline paint (never {@code null}).\n     *\n     * @see #setLabelOutlinePaint(java.awt.Paint)\n     */\n",
"org.jfree.chart.plot.Crosshair.setLabelOutlinePaint": "/**\n     * Sets the label outline paint and sends a property change event (with the\n     * name \"labelOutlinePaint\") to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getLabelOutlinePaint()\n     */\n",
"org.jfree.chart.plot.Crosshair.getLabelOutlineStroke": "/**\n     * Returns the label outline stroke. The default value is \n     * {@code BasicStroke(0.5)}.\n     *\n     * @return The label outline stroke (never {@code null}).\n     *\n     * @see #setLabelOutlineStroke(java.awt.Stroke)\n     */\n",
"org.jfree.chart.plot.Crosshair.setLabelOutlineStroke": "/**\n     * Sets the label outline stroke and sends a property change event (with\n     * the name 'labelOutlineStroke') to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getLabelOutlineStroke()\n     */\n",
"org.jfree.chart.plot.Crosshair.equals": "/**\n     * Tests this crosshair for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.Crosshair.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.plot.Crosshair.clone": "/**\n     * Returns an independent copy of this instance.\n     *\n     * @return An independent copy of this instance.\n     *\n     * @throws java.lang.CloneNotSupportedException if there is a problem with\n     *         cloning.\n     */\n",
"org.jfree.chart.plot.Crosshair.addPropertyChangeListener": "/**\n     * Adds a property change listener.\n     *\n     * @param l  the listener.\n     *\n     * @see #removePropertyChangeListener(java.beans.PropertyChangeListener)\n     */\n",
"org.jfree.chart.plot.Crosshair.removePropertyChangeListener": "/**\n     * Removes a property change listener.\n     *\n     * @param l  the listener.\n     *\n     * @see #addPropertyChangeListener(java.beans.PropertyChangeListener) \n     */\n",
"org.jfree.chart.plot.Crosshair.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.plot.Crosshair.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.plot.Marker.getPaint": "/**\n     * Returns the paint.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setPaint(Paint)\n     */\n",
"org.jfree.chart.plot.Marker.setPaint": "/**\n     * Sets the paint and sends a {@link MarkerChangeEvent} to all registered\n     * listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getPaint()\n     */\n",
"org.jfree.chart.plot.Marker.getStroke": "/**\n     * Returns the stroke.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setStroke(Stroke)\n     */\n",
"org.jfree.chart.plot.Marker.setStroke": "/**\n     * Sets the stroke and sends a {@link MarkerChangeEvent} to all registered\n     * listeners.\n     *\n     * @param stroke  the stroke ({@code null}not permitted).\n     *\n     * @see #getStroke()\n     */\n",
"org.jfree.chart.plot.Marker.getOutlinePaint": "/**\n     * Returns the outline paint.\n     *\n     * @return The outline paint (possibly {@code null}).\n     *\n     * @see #setOutlinePaint(Paint)\n     */\n",
"org.jfree.chart.plot.Marker.setOutlinePaint": "/**\n     * Sets the outline paint and sends a {@link MarkerChangeEvent} to all\n     * registered listeners.\n     *\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getOutlinePaint()\n     */\n",
"org.jfree.chart.plot.Marker.getOutlineStroke": "/**\n     * Returns the outline stroke.\n     *\n     * @return The outline stroke (possibly {@code null}).\n     *\n     * @see #setOutlineStroke(Stroke)\n     */\n",
"org.jfree.chart.plot.Marker.setOutlineStroke": "/**\n     * Sets the outline stroke and sends a {@link MarkerChangeEvent} to all\n     * registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} permitted).\n     *\n     * @see #getOutlineStroke()\n     */\n",
"org.jfree.chart.plot.Marker.getAlpha": "/**\n     * Returns the alpha transparency.\n     *\n     * @return The alpha transparency.\n     *\n     * @see #setAlpha(float)\n     */\n",
"org.jfree.chart.plot.Marker.setAlpha": "/**\n     * Sets the alpha transparency that should be used when drawing the\n     * marker, and sends a {@link MarkerChangeEvent} to all registered\n     * listeners.  The alpha transparency is a value in the range 0.0f\n     * (completely transparent) to 1.0f (completely opaque).\n     *\n     * @param alpha  the alpha transparency (must be in the range 0.0f to\n     *     1.0f).\n     *\n     * @throws IllegalArgumentException if {@code alpha} is not in the\n     *     specified range.\n     *\n     * @see #getAlpha()\n     */\n",
"org.jfree.chart.plot.Marker.getLabel": "/**\n     * Returns the label (if {@code null} no label is displayed).\n     *\n     * @return The label (possibly {@code null}).\n     *\n     * @see #setLabel(String)\n     */\n",
"org.jfree.chart.plot.Marker.setLabel": "/**\n     * Sets the label (if {@code null} no label is displayed) and sends a\n     * {@link MarkerChangeEvent} to all registered listeners.\n     *\n     * @param label  the label ({@code null} permitted).\n     *\n     * @see #getLabel()\n     */\n",
"org.jfree.chart.plot.Marker.getLabelFont": "/**\n     * Returns the label font.\n     *\n     * @return The label font (never {@code null}).\n     *\n     * @see #setLabelFont(Font)\n     */\n",
"org.jfree.chart.plot.Marker.setLabelFont": "/**\n     * Sets the label font and sends a {@link MarkerChangeEvent} to all\n     * registered listeners.\n     *\n     * @param font  the font ({@code null} not permitted).\n     *\n     * @see #getLabelFont()\n     */\n",
"org.jfree.chart.plot.Marker.getLabelPaint": "/**\n     * Returns the label paint.\n     *\n     * @return The label paint (never {@code null}).\n     *\n     * @see #setLabelPaint(Paint)\n     */\n",
"org.jfree.chart.plot.Marker.setLabelPaint": "/**\n     * Sets the label paint and sends a {@link MarkerChangeEvent} to all\n     * registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getLabelPaint()\n     */\n",
"org.jfree.chart.plot.Marker.getLabelBackgroundColor": "/**\n     * Returns the label background color.  The default value is \n     * {@code Color(100, 100, 100, 100)}..\n     * \n     * @return The label background color (never {@code null}).\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.chart.plot.Marker.setLabelBackgroundColor": "/**\n     * Sets the label background color.\n     * \n     * @param color  the color ({@code null} not permitted).\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.chart.plot.Marker.getLabelAnchor": "/**\n     * Returns the label anchor.  This defines the position of the label\n     * anchor, relative to the bounds of the marker.\n     *\n     * @return The label anchor (never {@code null}).\n     *\n     * @see #setLabelAnchor(RectangleAnchor)\n     */\n",
"org.jfree.chart.plot.Marker.setLabelAnchor": "/**\n     * Sets the label anchor and sends a {@link MarkerChangeEvent} to all\n     * registered listeners.  The anchor defines the position of the label\n     * anchor, relative to the bounds of the marker.\n     *\n     * @param anchor  the anchor ({@code null} not permitted).\n     *\n     * @see #getLabelAnchor()\n     */\n",
"org.jfree.chart.plot.Marker.getLabelOffset": "/**\n     * Returns the label offset.\n     *\n     * @return The label offset (never {@code null}).\n     *\n     * @see #setLabelOffset(RectangleInsets)\n     */\n",
"org.jfree.chart.plot.Marker.setLabelOffset": "/**\n     * Sets the label offset and sends a {@link MarkerChangeEvent} to all\n     * registered listeners.\n     *\n     * @param offset  the label offset ({@code null} not permitted).\n     *\n     * @see #getLabelOffset()\n     */\n",
"org.jfree.chart.plot.Marker.getLabelOffsetType": "/**\n     * Returns the label offset type.\n     *\n     * @return The type (never {@code null}).\n     *\n     * @see #setLabelOffsetType(LengthAdjustmentType)\n     */\n",
"org.jfree.chart.plot.Marker.setLabelOffsetType": "/**\n     * Sets the label offset type and sends a {@link MarkerChangeEvent} to all\n     * registered listeners.\n     *\n     * @param adj  the type ({@code null} not permitted).\n     *\n     * @see #getLabelOffsetType()\n     */\n",
"org.jfree.chart.plot.Marker.getLabelTextAnchor": "/**\n     * Returns the label text anchor.\n     *\n     * @return The label text anchor (never {@code null}).\n     *\n     * @see #setLabelTextAnchor(TextAnchor)\n     */\n",
"org.jfree.chart.plot.Marker.setLabelTextAnchor": "/**\n     * Sets the label text anchor and sends a {@link MarkerChangeEvent} to\n     * all registered listeners.\n     *\n     * @param anchor  the label text anchor ({@code null} not permitted).\n     *\n     * @see #getLabelTextAnchor()\n     */\n",
"org.jfree.chart.plot.Marker.addChangeListener": "/**\n     * Registers an object for notification of changes to the marker.\n     *\n     * @param listener  the object to be registered.\n     *\n     * @see #removeChangeListener(MarkerChangeListener)\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.Marker.removeChangeListener": "/**\n     * Unregisters an object for notification of changes to the marker.\n     *\n     * @param listener  the object to be unregistered.\n     *\n     * @see #addChangeListener(MarkerChangeListener)\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.Marker.notifyListeners": "/**\n     * Notifies all registered listeners that the marker has been modified.\n     *\n     * @param event  information about the change event.\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.Marker.getListeners": "/**\n     * Returns an array containing all the listeners of the specified type.\n     *\n     * @param listenerType  the listener type.\n     *\n     * @return The array of listeners.\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.Marker.equals": "/**\n     * Tests the marker for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.Marker.clone": "/**\n     * Creates a clone of the marker.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException never.\n     */\n",
"org.jfree.chart.plot.Marker.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.plot.Marker.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.plot.CategoryCrosshairState.getRowKey": "/**\n     * Returns the row key.\n     *\n     * @return The row key.\n     */\n",
"org.jfree.chart.plot.CategoryCrosshairState.setRowKey": "/**\n     * Sets the row key.\n     *\n     * @param key  the row key.\n     */\n",
"org.jfree.chart.plot.CategoryCrosshairState.getColumnKey": "/**\n     * Returns the column key.\n     *\n     * @return The column key.\n     */\n",
"org.jfree.chart.plot.CategoryCrosshairState.setColumnKey": "/**\n     * Sets the column key.\n     *\n     * @param key  the key.\n     */\n",
"org.jfree.chart.plot.CategoryCrosshairState.updateCrosshairPoint": "/**\n     * Evaluates a data point from a {@link CategoryItemRenderer} and if it is\n     * the closest to the anchor point it becomes the new crosshair point.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     * @param value  y coordinate (measured against the range axis).\n     * @param datasetIndex  the dataset index for this point.\n     * @param transX  x translated into Java2D space.\n     * @param transY  y translated into Java2D space.\n     * @param orientation  the plot orientation.\n     */\n",
"org.jfree.chart.plot.CategoryCrosshairState.updateCrosshairX": "/**\n     * Updates only the crosshair row and column keys (this is for the case\n     * where the range crosshair does NOT lock onto the nearest data value).\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     * @param datasetIndex  the dataset axis index.\n     * @param transX  the translated x-value.\n     * @param orientation  the plot orientation.\n     */\n",
"org.jfree.chart.plot.DefaultDrawingSupplier.getNextPaint": "/**\n     * Returns the next paint in the sequence.\n     *\n     * @return The paint.\n     */\n",
"org.jfree.chart.plot.DefaultDrawingSupplier.getNextOutlinePaint": "/**\n     * Returns the next outline paint in the sequence.\n     *\n     * @return The paint.\n     */\n",
"org.jfree.chart.plot.DefaultDrawingSupplier.getNextFillPaint": "/**\n     * Returns the next fill paint in the sequence.\n     *\n     * @return The paint.\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.chart.plot.DefaultDrawingSupplier.getNextStroke": "/**\n     * Returns the next stroke in the sequence.\n     *\n     * @return The stroke.\n     */\n",
"org.jfree.chart.plot.DefaultDrawingSupplier.getNextOutlineStroke": "/**\n     * Returns the next outline stroke in the sequence.\n     *\n     * @return The stroke.\n     */\n",
"org.jfree.chart.plot.DefaultDrawingSupplier.getNextShape": "/**\n     * Returns the next shape in the sequence.\n     *\n     * @return The shape.\n     */\n",
"org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes": "/**\n     * Creates an array of standard shapes to display for the items in series\n     * on charts.\n     *\n     * @return The array of shapes.\n     */\n",
"org.jfree.chart.plot.DefaultDrawingSupplier.equals": "/**\n     * Tests this object for equality with another object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.DefaultDrawingSupplier.equalShapes": "/**\n     * A utility method for testing the equality of two arrays of shapes.\n     *\n     * @param s1  the first array ({@code null} permitted).\n     * @param s2  the second array ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.DefaultDrawingSupplier.writeObject": "/**\n     * Handles serialization.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException if there is an I/O problem.\n     */\n",
"org.jfree.chart.plot.DefaultDrawingSupplier.readObject": "/**\n     * Restores a serialized object.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException if there is an I/O problem.\n     * @throws ClassNotFoundException if there is a problem loading a class.\n     */\n",
"org.jfree.chart.plot.DefaultDrawingSupplier.intArray": "/**\n     * Helper method to avoid lots of explicit casts in getShape().  Returns\n     * an array containing the provided doubles cast to ints.\n     *\n     * @param a  x\n     * @param b  y\n     * @param c  z\n     *\n     * @return int[3] with converted params.\n     */\n",
"org.jfree.chart.plot.DefaultDrawingSupplier.intArray": "/**\n     * Helper method to avoid lots of explicit casts in getShape().  Returns\n     * an array containing the provided doubles cast to ints.\n     *\n     * @param a  x\n     * @param b  y\n     * @param c  z\n     * @param d  t\n     *\n     * @return int[4] with converted params.\n     */\n",
"org.jfree.chart.plot.DefaultDrawingSupplier.clone": "/**\n     * Returns a clone.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if a component of the supplier does\n     *                                    not support cloning.\n     */\n",
"org.jfree.chart.plot.PlotState.getSharedAxisStates": "/**\n     * Returns a map containing the shared axis states.\n     *\n     * @return A map.\n     */\n",
"org.jfree.chart.plot.AbstractPieLabelDistributor.getPieLabelRecord": "/**\n     * Returns a label record from the list.\n     *\n     * @param index  the index.\n     *\n     * @return The label record.\n     */\n",
"org.jfree.chart.plot.AbstractPieLabelDistributor.addPieLabelRecord": "/**\n     * Adds a label record.\n     *\n     * @param record  the label record ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.AbstractPieLabelDistributor.getItemCount": "/**\n     * Returns the number of items in the list.\n     *\n     * @return The item count.\n     */\n",
"org.jfree.chart.plot.AbstractPieLabelDistributor.clear": "/**\n     * Clears the list of labels.\n     */\n",
"org.jfree.chart.plot.AbstractPieLabelDistributor.distributeLabels": "/**\n     * Called by the {@link PiePlot} class.  Implementations should distribute\n     * the labels in this.labels then return.\n     *\n     * @param minY  the y-coordinate for the top of the label area.\n     * @param height  the height of the label area.\n     */\n",
"org.jfree.chart.plot.PiePlot.getDataset": "/**\n     * Returns the dataset.\n     *\n     * @return The dataset (possibly {@code null}).\n     *\n     * @see #setDataset(PieDataset)\n     */\n",
"org.jfree.chart.plot.PiePlot.setDataset": "/**\n     * Sets the dataset and sends a {@link DatasetChangeEvent} to 'this'.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @see #getDataset()\n     */\n",
"org.jfree.chart.plot.PiePlot.getPieIndex": "/**\n     * Returns the pie index (this is used by the {@link MultiplePiePlot} class\n     * to track subplots).\n     *\n     * @return The pie index.\n     *\n     * @see #setPieIndex(int)\n     */\n",
"org.jfree.chart.plot.PiePlot.setPieIndex": "/**\n     * Sets the pie index (this is used by the {@link MultiplePiePlot} class to\n     * track subplots).\n     *\n     * @param index  the index.\n     *\n     * @see #getPieIndex()\n     */\n",
"org.jfree.chart.plot.PiePlot.getStartAngle": "/**\n     * Returns the start angle for the first pie section.  This is measured in\n     * degrees starting from 3 o'clock and measuring anti-clockwise.\n     *\n     * @return The start angle.\n     *\n     * @see #setStartAngle(double)\n     */\n",
"org.jfree.chart.plot.PiePlot.setStartAngle": "/**\n     * Sets the starting angle and sends a {@link PlotChangeEvent} to all\n     * registered listeners.  The initial default value is 90 degrees, which\n     * corresponds to 12 o'clock.  A value of zero corresponds to 3 o'clock...\n     * this is the encoding used by Java's Arc2D class.\n     *\n     * @param angle  the angle (in degrees).\n     *\n     * @see #getStartAngle()\n     */\n",
"org.jfree.chart.plot.PiePlot.getDirection": "/**\n     * Returns the direction in which the pie sections are drawn (clockwise or\n     * anti-clockwise).\n     *\n     * @return The direction (never {@code null}).\n     *\n     * @see #setDirection(Rotation)\n     */\n",
"org.jfree.chart.plot.PiePlot.setDirection": "/**\n     * Sets the direction in which the pie sections are drawn and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param direction  the direction ({@code null} not permitted).\n     *\n     * @see #getDirection()\n     */\n",
"org.jfree.chart.plot.PiePlot.getInteriorGap": "/**\n     * Returns the interior gap, measured as a percentage of the available\n     * drawing space.\n     *\n     * @return The gap (as a percentage of the available drawing space).\n     *\n     * @see #setInteriorGap(double)\n     */\n",
"org.jfree.chart.plot.PiePlot.setInteriorGap": "/**\n     * Sets the interior gap and sends a {@link PlotChangeEvent} to all\n     * registered listeners.  This controls the space between the edges of the\n     * pie plot and the plot area itself (the region where the section labels\n     * appear).\n     *\n     * @param percent  the gap (as a percentage of the available drawing space).\n     *\n     * @see #getInteriorGap()\n     */\n",
"org.jfree.chart.plot.PiePlot.isCircular": "/**\n     * Returns a flag indicating whether the pie chart is circular, or\n     * stretched into an elliptical shape.\n     *\n     * @return A flag indicating whether the pie chart is circular.\n     *\n     * @see #setCircular(boolean)\n     */\n",
"org.jfree.chart.plot.PiePlot.setCircular": "/**\n     * A flag indicating whether the pie chart is circular, or stretched into\n     * an elliptical shape.\n     *\n     * @param flag  the new value.\n     *\n     * @see #isCircular()\n     */\n",
"org.jfree.chart.plot.PiePlot.setCircular": "/**\n     * Sets the circular attribute and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param circular  the new value of the flag.\n     * @param notify  notify listeners?\n     *\n     * @see #isCircular()\n     */\n",
"org.jfree.chart.plot.PiePlot.getIgnoreNullValues": "/**\n     * Returns the flag that controls whether {@code null} values in the\n     * dataset are ignored.\n     *\n     * @return A boolean.\n     *\n     * @see #setIgnoreNullValues(boolean)\n     */\n",
"org.jfree.chart.plot.PiePlot.setIgnoreNullValues": "/**\n     * Sets a flag that controls whether {@code null} values are ignored,\n     * and sends a {@link PlotChangeEvent} to all registered listeners.  At\n     * present, this only affects whether or not the key is presented in the\n     * legend.\n     *\n     * @param flag  the flag.\n     *\n     * @see #getIgnoreNullValues()\n     * @see #setIgnoreZeroValues(boolean)\n     */\n",
"org.jfree.chart.plot.PiePlot.getIgnoreZeroValues": "/**\n     * Returns the flag that controls whether zero values in the\n     * dataset are ignored.\n     *\n     * @return A boolean.\n     *\n     * @see #setIgnoreZeroValues(boolean)\n     */\n",
"org.jfree.chart.plot.PiePlot.setIgnoreZeroValues": "/**\n     * Sets a flag that controls whether zero values are ignored,\n     * and sends a {@link PlotChangeEvent} to all registered listeners.  This\n     * only affects whether or not a label appears for the non-visible\n     * pie section.\n     *\n     * @param flag  the flag.\n     *\n     * @see #getIgnoreZeroValues()\n     * @see #setIgnoreNullValues(boolean)\n     */\n",
"org.jfree.chart.plot.PiePlot.lookupSectionPaint": "/**\n     * Returns the paint for the specified section.  This is equivalent to\n     * {@code lookupSectionPaint(section, getAutoPopulateSectionPaint())}.\n     *\n     * @param key  the section key.\n     *\n     * @return The paint for the specified section.\n     *\n     * @since 1.0.3\n     *\n     * @see #lookupSectionPaint(Comparable, boolean)\n     */\n",
"org.jfree.chart.plot.PiePlot.lookupSectionPaint": "/**\n     * Returns the paint for the specified section.  The lookup involves these\n     * steps:\n     * <ul>\n     * <li>if {@link #getSectionPaint(Comparable)} is non-{@code null} return\n     *         it;</li>\n     * <li>if {@link #getSectionPaint(Comparable)} is {@code null} but\n     *         {@code autoPopulate} is {@code true}, attempt to fetch\n     *         a new paint from the drawing supplier\n     *         ({@link #getDrawingSupplier()});\n     * <li>if all else fails, return {@link #getDefaultSectionPaint()}.\n     * </ul>\n     *\n     * @param key  the section key.\n     * @param autoPopulate  a flag that controls whether the drawing supplier\n     *     is used to auto-populate the section paint settings.\n     *\n     * @return The paint.\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.PiePlot.getSectionKey": "/**\n     * Returns a key for the specified section. The preferred way of doing this\n     * now is to link the attributes directly to the section key (there are new\n     * methods for this, starting from version 1.0.3).\n     *\n     * @param section  the section index.\n     *\n     * @return The key.\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.PiePlot.getSectionPaint": "/**\n     * Returns the paint associated with the specified key, or\n     * {@code null} if there is no paint associated with the key.\n     *\n     * @param key  the key ({@code null} not permitted).\n     *\n     * @return The paint associated with the specified key, or\n     *     {@code null}.\n     *\n     * @throws IllegalArgumentException if {@code key} is\n     *     {@code null}.\n     *\n     * @see #setSectionPaint(Comparable, Paint)\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.PiePlot.setSectionPaint": "/**\n     * Sets the paint associated with the specified key, and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param key  the key ({@code null} not permitted).\n     * @param paint  the paint.\n     *\n     * @throws IllegalArgumentException if {@code key} is\n     *     {@code null}.\n     *\n     * @see #getSectionPaint(Comparable)\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.PiePlot.clearSectionPaints": "/**\n     * Clears the section paint settings for this plot and, if requested, sends\n     * a {@link PlotChangeEvent} to all registered listeners.  Be aware that\n     * if the {@code autoPopulateSectionPaint} flag is set, the section\n     * paints may be repopulated using the same colours as before.\n     *\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.11\n     *\n     * @see #autoPopulateSectionPaint\n     */\n",
"org.jfree.chart.plot.PiePlot.getDefaultSectionPaint": "/**\n     * Returns the default section paint.  This is used when no other paint is\n     * defined, which is rare.  The default value is {@code Color.GRAY}.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setDefaultSectionPaint(Paint)\n     */\n",
"org.jfree.chart.plot.PiePlot.setDefaultSectionPaint": "/**\n     * Sets the default section paint and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getDefaultSectionPaint()\n     */\n",
"org.jfree.chart.plot.PiePlot.getAutoPopulateSectionPaint": "/**\n     * Returns the flag that controls whether or not the section paint is\n     * auto-populated by the {@link #lookupSectionPaint(Comparable)} method.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.plot.PiePlot.setAutoPopulateSectionPaint": "/**\n     * Sets the flag that controls whether or not the section paint is\n     * auto-populated by the {@link #lookupSectionPaint(Comparable)} method,\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param auto  auto-populate?\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.plot.PiePlot.getSectionOutlinesVisible": "/**\n     * Returns the flag that controls whether or not the outline is drawn for\n     * each pie section.\n     *\n     * @return The flag that controls whether or not the outline is drawn for\n     *         each pie section.\n     *\n     * @see #setSectionOutlinesVisible(boolean)\n     */\n",
"org.jfree.chart.plot.PiePlot.setSectionOutlinesVisible": "/**\n     * Sets the flag that controls whether or not the outline is drawn for\n     * each pie section, and sends a {@link PlotChangeEvent} to all registered\n     * listeners.\n     *\n     * @param visible  the flag.\n     *\n     * @see #getSectionOutlinesVisible()\n     */\n",
"org.jfree.chart.plot.PiePlot.lookupSectionOutlinePaint": "/**\n     * Returns the outline paint for the specified section.  This is equivalent\n     * to {@code lookupSectionPaint(section, \n     * getAutoPopulateSectionOutlinePaint())}.\n     *\n     * @param key  the section key.\n     *\n     * @return The paint for the specified section.\n     *\n     * @since 1.0.3\n     *\n     * @see #lookupSectionOutlinePaint(Comparable, boolean)\n     */\n",
"org.jfree.chart.plot.PiePlot.lookupSectionOutlinePaint": "/**\n     * Returns the outline paint for the specified section.  The lookup\n     * involves these steps:\n     * <ul>\n     * <li>if {@link #getSectionOutlinePaint(Comparable)} is\n     *         non-{@code null} return it;</li>\n     * <li>if {@link #getSectionOutlinePaint(Comparable)} is {@code null} but\n     *         {@code autoPopulate} is {@code true}, attempt to fetch\n     *         a new outline paint from the drawing supplier\n     *         ({@link #getDrawingSupplier()});\n     * <li>if all else fails, return {@link #getDefaultSectionOutlinePaint()}.\n     * </ul>\n     *\n     * @param key  the section key.\n     * @param autoPopulate  a flag that controls whether the drawing supplier\n     *     is used to auto-populate the section outline paint settings.\n     *\n     * @return The paint.\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.PiePlot.getSectionOutlinePaint": "/**\n     * Returns the outline paint associated with the specified key, or\n     * {@code null} if there is no paint associated with the key.\n     *\n     * @param key  the key ({@code null} not permitted).\n     *\n     * @return The paint associated with the specified key, or\n     *     {@code null}.\n     *\n     * @throws IllegalArgumentException if {@code key} is\n     *     {@code null}.\n     *\n     * @see #setSectionOutlinePaint(Comparable, Paint)\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.PiePlot.setSectionOutlinePaint": "/**\n     * Sets the outline paint associated with the specified key, and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param key  the key ({@code null} not permitted).\n     * @param paint  the paint.\n     *\n     * @throws IllegalArgumentException if {@code key} is\n     *     {@code null}.\n     *\n     * @see #getSectionOutlinePaint(Comparable)\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.PiePlot.clearSectionOutlinePaints": "/**\n     * Clears the section outline paint settings for this plot and, if\n     * requested, sends a {@link PlotChangeEvent} to all registered listeners.\n     * Be aware that if the {@code autoPopulateSectionPaint} flag is set,\n     * the section paints may be repopulated using the same colours as before.\n     *\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.11\n     *\n     * @see #autoPopulateSectionOutlinePaint\n     */\n",
"org.jfree.chart.plot.PiePlot.getDefaultSectionOutlinePaint": "/**\n     * Returns the default section paint.  This is used when no other paint is\n     * available.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setDefaultSectionOutlinePaint(Paint)\n     */\n",
"org.jfree.chart.plot.PiePlot.setDefaultSectionOutlinePaint": "/**\n     * Sets the default section paint.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getDefaultSectionOutlinePaint()\n     */\n",
"org.jfree.chart.plot.PiePlot.getAutoPopulateSectionOutlinePaint": "/**\n     * Returns the flag that controls whether or not the section outline paint\n     * is auto-populated by the {@link #lookupSectionOutlinePaint(Comparable)}\n     * method.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.plot.PiePlot.setAutoPopulateSectionOutlinePaint": "/**\n     * Sets the flag that controls whether or not the section outline paint is\n     * auto-populated by the {@link #lookupSectionOutlinePaint(Comparable)}\n     * method, and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param auto  auto-populate?\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.plot.PiePlot.lookupSectionOutlineStroke": "/**\n     * Returns the outline stroke for the specified section.  This is\n     * equivalent to {@code lookupSectionOutlineStroke(section,\n     * getAutoPopulateSectionOutlineStroke())}.\n     *\n     * @param key  the section key.\n     *\n     * @return The stroke for the specified section.\n     *\n     * @since 1.0.3\n     *\n     * @see #lookupSectionOutlineStroke(Comparable, boolean)\n     */\n",
"org.jfree.chart.plot.PiePlot.lookupSectionOutlineStroke": "/**\n     * Returns the outline stroke for the specified section.  The lookup\n     * involves these steps:\n     * <ul>\n     * <li>if {@link #getSectionOutlineStroke(Comparable)} is\n     *         non-{@code null} return it;</li>\n     * <li>if {@link #getSectionOutlineStroke(Comparable)} is {@code null} but\n     *         {@code autoPopulate} is {@code true}, attempt to fetch\n     *         a new outline stroke from the drawing supplier\n     *         ({@link #getDrawingSupplier()});\n     * <li>if all else fails, return {@link #getDefaultSectionOutlineStroke()}.\n     * </ul>\n     *\n     * @param key  the section key.\n     * @param autoPopulate  a flag that controls whether the drawing supplier\n     *     is used to auto-populate the section outline stroke settings.\n     *\n     * @return The stroke.\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.PiePlot.getSectionOutlineStroke": "/**\n     * Returns the outline stroke associated with the specified key, or\n     * {@code null} if there is no stroke associated with the key.\n     *\n     * @param key  the key ({@code null} not permitted).\n     *\n     * @return The stroke associated with the specified key, or\n     *     {@code null}.\n     *\n     * @throws IllegalArgumentException if {@code key} is\n     *     {@code null}.\n     *\n     * @see #setSectionOutlineStroke(Comparable, Stroke)\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.PiePlot.setSectionOutlineStroke": "/**\n     * Sets the outline stroke associated with the specified key, and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param key  the key ({@code null} not permitted).\n     * @param stroke  the stroke.\n     *\n     * @throws IllegalArgumentException if {@code key} is\n     *     {@code null}.\n     *\n     * @see #getSectionOutlineStroke(Comparable)\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.PiePlot.clearSectionOutlineStrokes": "/**\n     * Clears the section outline stroke settings for this plot and, if\n     * requested, sends a {@link PlotChangeEvent} to all registered listeners.\n     * Be aware that if the {@code autoPopulateSectionPaint} flag is set,\n     * the section paints may be repopulated using the same colours as before.\n     *\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.11\n     *\n     * @see #autoPopulateSectionOutlineStroke\n     */\n",
"org.jfree.chart.plot.PiePlot.getDefaultSectionOutlineStroke": "/**\n     * Returns the default section stroke.  This is used when no other stroke is\n     * available.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setDefaultSectionOutlineStroke(Stroke)\n     */\n",
"org.jfree.chart.plot.PiePlot.setDefaultSectionOutlineStroke": "/**\n     * Sets the default section stroke.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getDefaultSectionOutlineStroke()\n     */\n",
"org.jfree.chart.plot.PiePlot.getAutoPopulateSectionOutlineStroke": "/**\n     * Returns the flag that controls whether or not the section outline stroke\n     * is auto-populated by the {@link #lookupSectionOutlinePaint(Comparable)}\n     * method.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.plot.PiePlot.setAutoPopulateSectionOutlineStroke": "/**\n     * Sets the flag that controls whether or not the section outline stroke is\n     * auto-populated by the {@link #lookupSectionOutlineStroke(Comparable)}\n     * method, and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param auto  auto-populate?\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.plot.PiePlot.getShadowPaint": "/**\n     * Returns the shadow paint.\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setShadowPaint(Paint)\n     */\n",
"org.jfree.chart.plot.PiePlot.setShadowPaint": "/**\n     * Sets the shadow paint and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getShadowPaint()\n     */\n",
"org.jfree.chart.plot.PiePlot.getShadowXOffset": "/**\n     * Returns the x-offset for the shadow effect.\n     *\n     * @return The offset (in Java2D units).\n     *\n     * @see #setShadowXOffset(double)\n     */\n",
"org.jfree.chart.plot.PiePlot.setShadowXOffset": "/**\n     * Sets the x-offset for the shadow effect and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param offset  the offset (in Java2D units).\n     *\n     * @see #getShadowXOffset()\n     */\n",
"org.jfree.chart.plot.PiePlot.getShadowYOffset": "/**\n     * Returns the y-offset for the shadow effect.\n     *\n     * @return The offset (in Java2D units).\n     *\n     * @see #setShadowYOffset(double)\n     */\n",
"org.jfree.chart.plot.PiePlot.setShadowYOffset": "/**\n     * Sets the y-offset for the shadow effect and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param offset  the offset (in Java2D units).\n     *\n     * @see #getShadowYOffset()\n     */\n",
"org.jfree.chart.plot.PiePlot.getExplodePercent": "/**\n     * Returns the amount that the section with the specified key should be\n     * exploded.\n     *\n     * @param key  the key ({@code null} not permitted).\n     *\n     * @return The amount that the section with the specified key should be\n     *     exploded.\n     *\n     * @throws IllegalArgumentException if {@code key} is\n     *     {@code null}.\n     *\n     * @since 1.0.3\n     *\n     * @see #setExplodePercent(Comparable, double)\n     */\n",
"org.jfree.chart.plot.PiePlot.setExplodePercent": "/**\n     * Sets the amount that a pie section should be exploded and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param key  the section key ({@code null} not permitted).\n     * @param percent  the explode percentage (0.30 = 30 percent).\n     *\n     * @since 1.0.3\n     *\n     * @see #getExplodePercent(Comparable)\n     */\n",
"org.jfree.chart.plot.PiePlot.getMaximumExplodePercent": "/**\n     * Returns the maximum explode percent.\n     *\n     * @return The percent.\n     */\n",
"org.jfree.chart.plot.PiePlot.getLabelGenerator": "/**\n     * Returns the section label generator.\n     *\n     * @return The generator (possibly {@code null}).\n     *\n     * @see #setLabelGenerator(PieSectionLabelGenerator)\n     */\n",
"org.jfree.chart.plot.PiePlot.setLabelGenerator": "/**\n     * Sets the section label generator and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getLabelGenerator()\n     */\n",
"org.jfree.chart.plot.PiePlot.getLabelGap": "/**\n     * Returns the gap between the edge of the pie and the labels, expressed as\n     * a percentage of the plot width.\n     *\n     * @return The gap (a percentage, where 0.05 = five percent).\n     *\n     * @see #setLabelGap(double)\n     */\n",
"org.jfree.chart.plot.PiePlot.setLabelGap": "/**\n     * Sets the gap between the edge of the pie and the labels (expressed as a\n     * percentage of the plot width) and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param gap  the gap (a percentage, where 0.05 = five percent).\n     *\n     * @see #getLabelGap()\n     */\n",
"org.jfree.chart.plot.PiePlot.getMaximumLabelWidth": "/**\n     * Returns the maximum label width as a percentage of the plot width.\n     *\n     * @return The width (a percentage, where 0.20 = 20 percent).\n     *\n     * @see #setMaximumLabelWidth(double)\n     */\n",
"org.jfree.chart.plot.PiePlot.setMaximumLabelWidth": "/**\n     * Sets the maximum label width as a percentage of the plot width and sends\n     * a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param width  the width (a percentage, where 0.20 = 20 percent).\n     *\n     * @see #getMaximumLabelWidth()\n     */\n",
"org.jfree.chart.plot.PiePlot.getLabelLinksVisible": "/**\n     * Returns the flag that controls whether or not label linking lines are\n     * visible.\n     *\n     * @return A boolean.\n     *\n     * @see #setLabelLinksVisible(boolean)\n     */\n",
"org.jfree.chart.plot.PiePlot.setLabelLinksVisible": "/**\n     * Sets the flag that controls whether or not label linking lines are\n     * visible and sends a {@link PlotChangeEvent} to all registered listeners.\n     * Please take care when hiding the linking lines - depending on the data\n     * values, the labels can be displayed some distance away from the\n     * corresponding pie section.\n     *\n     * @param visible  the flag.\n     *\n     * @see #getLabelLinksVisible()\n     */\n",
"org.jfree.chart.plot.PiePlot.getLabelLinkStyle": "/**\n     * Returns the label link style.\n     *\n     * @return The label link style (never {@code null}).\n     *\n     * @see #setLabelLinkStyle(PieLabelLinkStyle)\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.plot.PiePlot.setLabelLinkStyle": "/**\n     * Sets the label link style and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param style  the new style ({@code null} not permitted).\n     *\n     * @see #getLabelLinkStyle()\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.plot.PiePlot.getLabelLinkMargin": "/**\n     * Returns the margin (expressed as a percentage of the width or height)\n     * between the edge of the pie and the link point.\n     *\n     * @return The link margin (as a percentage, where 0.05 is five percent).\n     *\n     * @see #setLabelLinkMargin(double)\n     */\n",
"org.jfree.chart.plot.PiePlot.setLabelLinkMargin": "/**\n     * Sets the link margin and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param margin  the margin.\n     *\n     * @see #getLabelLinkMargin()\n     */\n",
"org.jfree.chart.plot.PiePlot.getLabelLinkPaint": "/**\n     * Returns the paint used for the lines that connect pie sections to their\n     * corresponding labels.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setLabelLinkPaint(Paint)\n     */\n",
"org.jfree.chart.plot.PiePlot.setLabelLinkPaint": "/**\n     * Sets the paint used for the lines that connect pie sections to their\n     * corresponding labels, and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getLabelLinkPaint()\n     */\n",
"org.jfree.chart.plot.PiePlot.getLabelLinkStroke": "/**\n     * Returns the stroke used for the label linking lines.\n     *\n     * @return The stroke.\n     *\n     * @see #setLabelLinkStroke(Stroke)\n     */\n",
"org.jfree.chart.plot.PiePlot.setLabelLinkStroke": "/**\n     * Sets the link stroke and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param stroke  the stroke.\n     *\n     * @see #getLabelLinkStroke()\n     */\n",
"org.jfree.chart.plot.PiePlot.getLabelLinkDepth": "/**\n     * Returns the distance that the end of the label link is embedded into\n     * the plot, expressed as a percentage of the plot's radius.\n     * <br><br>\n     * This method is overridden in the {@link RingPlot} class to resolve\n     * bug 2121818.\n     *\n     * @return {@code 0.10}.\n     *\n     * @since 1.0.12\n     */\n",
"org.jfree.chart.plot.PiePlot.getLabelFont": "/**\n     * Returns the section label font.\n     *\n     * @return The font (never {@code null}).\n     *\n     * @see #setLabelFont(Font)\n     */\n",
"org.jfree.chart.plot.PiePlot.setLabelFont": "/**\n     * Sets the section label font and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param font  the font ({@code null} not permitted).\n     *\n     * @see #getLabelFont()\n     */\n",
"org.jfree.chart.plot.PiePlot.getLabelPaint": "/**\n     * Returns the section label paint.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setLabelPaint(Paint)\n     */\n",
"org.jfree.chart.plot.PiePlot.setLabelPaint": "/**\n     * Sets the section label paint and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getLabelPaint()\n     */\n",
"org.jfree.chart.plot.PiePlot.getLabelBackgroundPaint": "/**\n     * Returns the section label background paint.\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setLabelBackgroundPaint(Paint)\n     */\n",
"org.jfree.chart.plot.PiePlot.setLabelBackgroundPaint": "/**\n     * Sets the section label background paint and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getLabelBackgroundPaint()\n     */\n",
"org.jfree.chart.plot.PiePlot.getLabelOutlinePaint": "/**\n     * Returns the section label outline paint.\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setLabelOutlinePaint(Paint)\n     */\n",
"org.jfree.chart.plot.PiePlot.setLabelOutlinePaint": "/**\n     * Sets the section label outline paint and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getLabelOutlinePaint()\n     */\n",
"org.jfree.chart.plot.PiePlot.getLabelOutlineStroke": "/**\n     * Returns the section label outline stroke.\n     *\n     * @return The stroke (possibly {@code null}).\n     *\n     * @see #setLabelOutlineStroke(Stroke)\n     */\n",
"org.jfree.chart.plot.PiePlot.setLabelOutlineStroke": "/**\n     * Sets the section label outline stroke and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} permitted).\n     *\n     * @see #getLabelOutlineStroke()\n     */\n",
"org.jfree.chart.plot.PiePlot.getLabelShadowPaint": "/**\n     * Returns the section label shadow paint.\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setLabelShadowPaint(Paint)\n     */\n",
"org.jfree.chart.plot.PiePlot.setLabelShadowPaint": "/**\n     * Sets the section label shadow paint and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getLabelShadowPaint()\n     */\n",
"org.jfree.chart.plot.PiePlot.getLabelPadding": "/**\n     * Returns the label padding.\n     *\n     * @return The label padding (never {@code null}).\n     *\n     * @since 1.0.7\n     *\n     * @see #setLabelPadding(RectangleInsets)\n     */\n",
"org.jfree.chart.plot.PiePlot.setLabelPadding": "/**\n     * Sets the padding between each label and its outline and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param padding  the padding ({@code null} not permitted).\n     *\n     * @since 1.0.7\n     *\n     * @see #getLabelPadding()\n     */\n",
"org.jfree.chart.plot.PiePlot.getSimpleLabels": "/**\n     * Returns the flag that controls whether simple or extended labels are\n     * displayed on the plot.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.PiePlot.setSimpleLabels": "/**\n     * Sets the flag that controls whether simple or extended labels are\n     * displayed on the plot, and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param simple  the new flag value.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.PiePlot.getSimpleLabelOffset": "/**\n     * Returns the offset used for the simple labels, if they are displayed.\n     *\n     * @return The offset (never {@code null}).\n     *\n     * @since 1.0.7\n     *\n     * @see #setSimpleLabelOffset(RectangleInsets)\n     */\n",
"org.jfree.chart.plot.PiePlot.setSimpleLabelOffset": "/**\n     * Sets the offset for the simple labels and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param offset  the offset ({@code null} not permitted).\n     *\n     * @since 1.0.7\n     *\n     * @see #getSimpleLabelOffset()\n     */\n",
"org.jfree.chart.plot.PiePlot.getLabelDistributor": "/**\n     * Returns the object responsible for the vertical layout of the pie\n     * section labels.\n     *\n     * @return The label distributor (never {@code null}).\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.chart.plot.PiePlot.setLabelDistributor": "/**\n     * Sets the label distributor and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param distributor  the distributor ({@code null} not permitted).\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.chart.plot.PiePlot.getToolTipGenerator": "/**\n     * Returns the tool tip generator, an object that is responsible for\n     * generating the text items used for tool tips by the plot.  If the\n     * generator is {@code null}, no tool tips will be created.\n     *\n     * @return The generator (possibly {@code null}).\n     *\n     * @see #setToolTipGenerator(PieToolTipGenerator)\n     */\n",
"org.jfree.chart.plot.PiePlot.setToolTipGenerator": "/**\n     * Sets the tool tip generator and sends a {@link PlotChangeEvent} to all\n     * registered listeners.  Set the generator to {@code null} if you\n     * don't want any tool tips.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getToolTipGenerator()\n     */\n",
"org.jfree.chart.plot.PiePlot.getURLGenerator": "/**\n     * Returns the URL generator.\n     *\n     * @return The generator (possibly {@code null}).\n     *\n     * @see #setURLGenerator(PieURLGenerator)\n     */\n",
"org.jfree.chart.plot.PiePlot.setURLGenerator": "/**\n     * Sets the URL generator and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getURLGenerator()\n     */\n",
"org.jfree.chart.plot.PiePlot.getMinimumArcAngleToDraw": "/**\n     * Returns the minimum arc angle that will be drawn.  Pie sections for an\n     * angle smaller than this are not drawn, to avoid a JDK bug.\n     *\n     * @return The minimum angle.\n     *\n     * @see #setMinimumArcAngleToDraw(double)\n     */\n",
"org.jfree.chart.plot.PiePlot.setMinimumArcAngleToDraw": "/**\n     * Sets the minimum arc angle that will be drawn.  Pie sections for an\n     * angle smaller than this are not drawn, to avoid a JDK bug.  See this\n     * link for details:\n     * <br><br>\n     * <a href=\"http://www.jfree.org/phpBB2/viewtopic.php?t=2707\">\n     * http://www.jfree.org/phpBB2/viewtopic.php?t=2707</a>\n     * <br><br>\n     * ...and this bug report in the Java Bug Parade:\n     * <br><br>\n     * <a href=\n     * \"http://developer.java.sun.com/developer/bugParade/bugs/4836495.html\">\n     * http://developer.java.sun.com/developer/bugParade/bugs/4836495.html</a>\n     *\n     * @param angle  the minimum angle.\n     *\n     * @see #getMinimumArcAngleToDraw()\n     */\n",
"org.jfree.chart.plot.PiePlot.getLegendItemShape": "/**\n     * Returns the shape used for legend items.\n     *\n     * @return The shape (never {@code null}).\n     *\n     * @see #setLegendItemShape(Shape)\n     */\n",
"org.jfree.chart.plot.PiePlot.setLegendItemShape": "/**\n     * Sets the shape used for legend items and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param shape  the shape ({@code null} not permitted).\n     *\n     * @see #getLegendItemShape()\n     */\n",
"org.jfree.chart.plot.PiePlot.getLegendLabelGenerator": "/**\n     * Returns the legend label generator.\n     *\n     * @return The legend label generator (never {@code null}).\n     *\n     * @see #setLegendLabelGenerator(PieSectionLabelGenerator)\n     */\n",
"org.jfree.chart.plot.PiePlot.setLegendLabelGenerator": "/**\n     * Sets the legend label generator and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param generator  the generator ({@code null} not permitted).\n     *\n     * @see #getLegendLabelGenerator()\n     */\n",
"org.jfree.chart.plot.PiePlot.getLegendLabelToolTipGenerator": "/**\n     * Returns the legend label tool tip generator.\n     *\n     * @return The legend label tool tip generator (possibly {@code null}).\n     *\n     * @see #setLegendLabelToolTipGenerator(PieSectionLabelGenerator)\n     */\n",
"org.jfree.chart.plot.PiePlot.setLegendLabelToolTipGenerator": "/**\n     * Sets the legend label tool tip generator and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getLegendLabelToolTipGenerator()\n     */\n",
"org.jfree.chart.plot.PiePlot.getLegendLabelURLGenerator": "/**\n     * Returns the legend label URL generator.\n     *\n     * @return The legend label URL generator (possibly {@code null}).\n     *\n     * @see #setLegendLabelURLGenerator(PieURLGenerator)\n     *\n     * @since 1.0.4\n     */\n",
"org.jfree.chart.plot.PiePlot.setLegendLabelURLGenerator": "/**\n     * Sets the legend label URL generator and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getLegendLabelURLGenerator()\n     *\n     * @since 1.0.4\n     */\n",
"org.jfree.chart.plot.PiePlot.getShadowGenerator": "/**\n     * Returns the shadow generator for the plot, if any.\n     * \n     * @return The shadow generator (possibly {@code null}).\n     * \n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PiePlot.setShadowGenerator": "/**\n     * Sets the shadow generator for the plot and sends a\n     * {@link PlotChangeEvent} to all registered listeners.  Note that this is\n     * a bitmap drop-shadow generation facility and is separate from the\n     * vector based show option that is controlled via the\n     * {@link #setShadowPaint(java.awt.Paint)} method.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PiePlot.handleMouseWheelRotation": "/**\n     * Handles a mouse wheel rotation (this method is intended for use by the\n     * {@code MouseWheelHandler} class).\n     *\n     * @param rotateClicks  the number of rotate clicks on the the mouse wheel.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PiePlot.initialise": "/**\n     * Initialises the drawing procedure.  This method will be called before\n     * the first item is rendered, giving the plot an opportunity to initialise\n     * any state information it wants to maintain.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area ({@code null} not permitted).\n     * @param plot  the plot.\n     * @param index  the secondary index ({@code null} for primary\n     *               renderer).\n     * @param info  collects chart rendering information for return to caller.\n     *\n     * @return A state object (maintains state information relevant to one\n     *         chart drawing).\n     */\n",
"org.jfree.chart.plot.PiePlot.draw": "/**\n     * Draws the plot on a Java 2D graphics device (such as the screen or a\n     * printer).\n     *\n     * @param g2  the graphics device.\n     * @param area  the area within which the plot should be drawn.\n     * @param anchor  the anchor point ({@code null} permitted).\n     * @param parentState  the state from the parent plot, if there is one.\n     * @param info  collects info about the drawing\n     *              ({@code null} permitted).\n     */\n",
"org.jfree.chart.plot.PiePlot.drawPie": "/**\n     * Draws the pie.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param info  chart rendering info.\n     */\n",
"org.jfree.chart.plot.PiePlot.drawItem": "/**\n     * Draws a single data item.\n     *\n     * @param g2  the graphics device ({@code null} not permitted).\n     * @param section  the section index.\n     * @param dataArea  the data plot area.\n     * @param state  state information for one chart.\n     * @param currentPass  the current pass index.\n     */\n",
"org.jfree.chart.plot.PiePlot.drawSimpleLabels": "/**\n     * Draws the pie section labels in the simple form.\n     *\n     * @param g2  the graphics device.\n     * @param keys  the section keys.\n     * @param totalValue  the total value for all sections in the pie.\n     * @param plotArea  the plot area.\n     * @param pieArea  the area containing the pie.\n     * @param state  the plot state.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.PiePlot.drawLabels": "/**\n     * Draws the labels for the pie sections.\n     *\n     * @param g2  the graphics device.\n     * @param keys  the keys.\n     * @param totalValue  the total value.\n     * @param plotArea  the plot area.\n     * @param linkArea  the link area.\n     * @param state  the state.\n     */\n",
"org.jfree.chart.plot.PiePlot.drawLeftLabels": "/**\n     * Draws the left labels.\n     *\n     * @param leftKeys  a collection of keys and angles (to the middle of the\n     *         section, in degrees) for the sections on the left side of the\n     *         plot.\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param linkArea  the link area.\n     * @param maxLabelWidth  the maximum label width.\n     * @param state  the state.\n     */\n",
"org.jfree.chart.plot.PiePlot.drawRightLabels": "/**\n     * Draws the right labels.\n     *\n     * @param keys  the keys.\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param linkArea  the link area.\n     * @param maxLabelWidth  the maximum label width.\n     * @param state  the state.\n     */\n",
"org.jfree.chart.plot.PiePlot.getLegendItems": "/**\n     * Returns a collection of legend items for the pie chart.\n     *\n     * @return The legend items (never {@code null}).\n     */\n",
"org.jfree.chart.plot.PiePlot.getPlotType": "/**\n     * Returns a short string describing the type of plot.\n     *\n     * @return The plot type.\n     */\n",
"org.jfree.chart.plot.PiePlot.getArcBounds": "/**\n     * Returns a rectangle that can be used to create a pie section (taking\n     * into account the amount by which the pie section is 'exploded').\n     *\n     * @param unexploded  the area inside which the unexploded pie sections are\n     *                    drawn.\n     * @param exploded  the area inside which the exploded pie sections are\n     *                  drawn.\n     * @param angle  the start angle.\n     * @param extent  the extent of the arc.\n     * @param explodePercent  the amount by which the pie section is exploded.\n     *\n     * @return A rectangle that can be used to create a pie section.\n     */\n",
"org.jfree.chart.plot.PiePlot.drawLeftLabel": "/**\n     * Draws a section label on the left side of the pie chart.\n     *\n     * @param g2  the graphics device.\n     * @param state  the state.\n     * @param record  the label record.\n     */\n",
"org.jfree.chart.plot.PiePlot.drawRightLabel": "/**\n     * Draws a section label on the right side of the pie chart.\n     *\n     * @param g2  the graphics device.\n     * @param state  the state.\n     * @param record  the label record.\n     */\n",
"org.jfree.chart.plot.PiePlot.getArcCenter": "/**\n     * Returns the center for the specified section.\n     * Checks to see if the section is exploded and recalculates the\n     * new center if so.\n     *\n     * @param state  PiePlotState\n     * @param key  section key.\n     *\n     * @return The center for the specified section.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PiePlot.lookupSectionPaint": "/**\n     * Returns the paint for the specified section. This is equivalent to\n     * {@code lookupSectionPaint(section)}.  Checks to see if the user set the \n     * {@code Paint} to be of type {@code RadialGradientPaint} and if so it \n     * adjusts the center and radius to match the Pie.\n     *\n     * @param key  the section key.\n     * @param state  PiePlotState.\n     *\n     * @return The paint for the specified section.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PiePlot.equals": "/**\n     * Tests this plot for equality with an arbitrary object.  Note that the\n     * plot's dataset is NOT included in the test for equality.\n     *\n     * @param obj the object to test against ({@code null} permitted).\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.plot.PiePlot.hashCode": "/**\n     * Generates a hashcode.  Note that, as with the equals method, the dataset\n     * is NOT included in the hashcode.\n     * \n     * @return the hashcode\n     */\n",
"org.jfree.chart.plot.PiePlot.clone": "/**\n     * Returns a clone of the plot.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if some component of the plot does\n     *         not support cloning.\n     */\n",
"org.jfree.chart.plot.PiePlot.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.plot.PiePlot.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.plot.RingPlot.getCenterTextMode": "/**\n     * Returns the mode for displaying text in the center of the plot.  The\n     * default value is {@link CenterTextMode#NONE} therefore no text\n     * will be displayed by default.\n     * \n     * @return The mode (never {@code null}).\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.chart.plot.RingPlot.setCenterTextMode": "/**\n     * Sets the mode for displaying text in the center of the plot and sends \n     * a change event to all registered listeners.  For\n     * {@link CenterTextMode#FIXED}, the display text will come from the \n     * {@code centerText} attribute (see {@link #getCenterText()}).\n     * For {@link CenterTextMode#VALUE}, the center text will be the value from\n     * the first section in the dataset.\n     * \n     * @param mode  the mode ({@code null} not permitted).\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.chart.plot.RingPlot.getCenterText": "/**\n     * Returns the text to display in the center of the plot when the mode\n     * is {@link CenterTextMode#FIXED}.\n     * \n     * @return The text (possibly {@code null}).\n     * \n     * @since 1.0.18.\n     */\n",
"org.jfree.chart.plot.RingPlot.setCenterText": "/**\n     * Sets the text to display in the center of the plot and sends a\n     * change event to all registered listeners.  If the text is set to \n     * {@code null}, no text will be displayed.\n     * \n     * @param text  the text ({@code null} permitted).\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.chart.plot.RingPlot.getCenterTextFormatter": "/**\n     * Returns the formatter used to format the center text value for the mode\n     * {@link CenterTextMode#VALUE}.  The default value is \n     * {@code DecimalFormat(\"0.00\")}.\n     * \n     * @return The formatter (never {@code null}).\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.chart.plot.RingPlot.setCenterTextFormatter": "/**\n     * Sets the formatter used to format the center text value and sends a\n     * change event to all registered listeners.\n     * \n     * @param formatter  the formatter ({@code null} not permitted).\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.chart.plot.RingPlot.getCenterTextFont": "/**\n     * Returns the font used to display the center text.  The default value\n     * is {@link PiePlot#DEFAULT_LABEL_FONT}.\n     * \n     * @return The font (never {@code null}).\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.chart.plot.RingPlot.setCenterTextFont": "/**\n     * Sets the font used to display the center text and sends a change event\n     * to all registered listeners.\n     * \n     * @param font  the font ({@code null} not permitted).\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.chart.plot.RingPlot.getCenterTextColor": "/**\n     * Returns the color for the center text.  The default value is\n     * {@code Color.BLACK}.\n     * \n     * @return The color (never {@code null}). \n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.chart.plot.RingPlot.setCenterTextColor": "/**\n     * Sets the color for the center text and sends a change event to all \n     * registered listeners.\n     * \n     * @param color  the color ({@code null} not permitted).\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.chart.plot.RingPlot.getSeparatorsVisible": "/**\n     * Returns a flag that indicates whether or not separators are drawn between\n     * the sections in the chart.\n     *\n     * @return A boolean.\n     *\n     * @see #setSeparatorsVisible(boolean)\n     */\n",
"org.jfree.chart.plot.RingPlot.setSeparatorsVisible": "/**\n     * Sets the flag that controls whether or not separators are drawn between\n     * the sections in the chart, and sends a change event to all registered \n     * listeners.\n     *\n     * @param visible  the flag.\n     *\n     * @see #getSeparatorsVisible()\n     */\n",
"org.jfree.chart.plot.RingPlot.getSeparatorStroke": "/**\n     * Returns the separator stroke.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setSeparatorStroke(Stroke)\n     */\n",
"org.jfree.chart.plot.RingPlot.setSeparatorStroke": "/**\n     * Sets the stroke used to draw the separator between sections and sends\n     * a change event to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getSeparatorStroke()\n     */\n",
"org.jfree.chart.plot.RingPlot.getSeparatorPaint": "/**\n     * Returns the separator paint.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setSeparatorPaint(Paint)\n     */\n",
"org.jfree.chart.plot.RingPlot.setSeparatorPaint": "/**\n     * Sets the paint used to draw the separator between sections and sends a\n     * change event to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getSeparatorPaint()\n     */\n",
"org.jfree.chart.plot.RingPlot.getInnerSeparatorExtension": "/**\n     * Returns the length of the inner extension of the separator line that\n     * is drawn between sections, expressed as a percentage of the depth of\n     * the section.\n     *\n     * @return The inner separator extension (as a percentage).\n     *\n     * @see #setInnerSeparatorExtension(double)\n     */\n",
"org.jfree.chart.plot.RingPlot.setInnerSeparatorExtension": "/**\n     * Sets the length of the inner extension of the separator line that is\n     * drawn between sections, as a percentage of the depth of the\n     * sections, and sends a change event to all registered listeners.\n     *\n     * @param percent  the percentage.\n     *\n     * @see #getInnerSeparatorExtension()\n     * @see #setOuterSeparatorExtension(double)\n     */\n",
"org.jfree.chart.plot.RingPlot.getOuterSeparatorExtension": "/**\n     * Returns the length of the outer extension of the separator line that\n     * is drawn between sections, expressed as a percentage of the depth of\n     * the section.\n     *\n     * @return The outer separator extension (as a percentage).\n     *\n     * @see #setOuterSeparatorExtension(double)\n     */\n",
"org.jfree.chart.plot.RingPlot.setOuterSeparatorExtension": "/**\n     * Sets the length of the outer extension of the separator line that is\n     * drawn between sections, as a percentage of the depth of the\n     * sections, and sends a change event to all registered listeners.\n     *\n     * @param percent  the percentage.\n     *\n     * @see #getOuterSeparatorExtension()\n     */\n",
"org.jfree.chart.plot.RingPlot.getSectionDepth": "/**\n     * Returns the depth of each section, expressed as a percentage of the\n     * plot radius.\n     *\n     * @return The depth of each section.\n     *\n     * @see #setSectionDepth(double)\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.RingPlot.setSectionDepth": "/**\n     * The section depth is given as percentage of the plot radius.\n     * Specifying 1.0 results in a straightforward pie chart.\n     *\n     * @param sectionDepth  the section depth.\n     *\n     * @see #getSectionDepth()\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.RingPlot.initialise": "/**\n     * Initialises the plot state (which will store the total of all dataset\n     * values, among other things).  This method is called once at the\n     * beginning of each drawing.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area ({@code null} not permitted).\n     * @param plot  the plot.\n     * @param index  the secondary index ({@code null} for primary\n     *               renderer).\n     * @param info  collects chart rendering information for return to caller.\n     *\n     * @return A state object (maintains state information relevant to one\n     *         chart drawing).\n     */\n",
"org.jfree.chart.plot.RingPlot.drawItem": "/**\n     * Draws a single data item.\n     *\n     * @param g2  the graphics device ({@code null} not permitted).\n     * @param section  the section index.\n     * @param dataArea  the data plot area.\n     * @param state  state information for one chart.\n     * @param currentPass  the current pass index.\n     */\n",
"org.jfree.chart.plot.RingPlot.getLabelLinkDepth": "/**\n     * This method overrides the default value for cases where the ring plot\n     * is very thin.  This fixes bug 2121818.\n     *\n     * @return The label link depth, as a percentage of the plot's radius.\n     */\n",
"org.jfree.chart.plot.RingPlot.equals": "/**\n     * Tests this plot for equality with an arbitrary object.\n     *\n     * @param obj  the object to test against ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.RingPlot.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.plot.RingPlot.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.plot.PolarPlot.getPlotType": "/**\n     * Returns the plot type as a string.\n     *\n     * @return A short string describing the type of plot.\n     */\n",
"org.jfree.chart.plot.PolarPlot.getAxis": "/**\n     * Returns the primary axis for the plot.\n     *\n     * @return The primary axis (possibly {@code null}).\n     *\n     * @see #setAxis(ValueAxis)\n     */\n",
"org.jfree.chart.plot.PolarPlot.getAxis": "/**\n     * Returns an axis for the plot.\n     *\n     * @param index  the axis index.\n     *\n     * @return The axis ({@code null} possible).\n     *\n     * @see #setAxis(int, ValueAxis)\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.setAxis": "/**\n     * Sets the primary axis for the plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param axis  the new primary axis ({@code null} permitted).\n     */\n",
"org.jfree.chart.plot.PolarPlot.setAxis": "/**\n     * Sets an axis for the plot and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param index  the axis index.\n     * @param axis  the axis ({@code null} permitted).\n     *\n     * @see #getAxis(int)\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.setAxis": "/**\n     * Sets an axis for the plot and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param axis  the axis ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getAxis(int)\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.getAxisLocation": "/**\n     * Returns the location of the primary axis.\n     *\n     * @return The location (never {@code null}).\n     *\n     * @see #setAxisLocation(PolarAxisLocation)\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.getAxisLocation": "/**\n     * Returns the location for an axis.\n     *\n     * @param index  the axis index.\n     *\n     * @return The location (never {@code null}).\n     *\n     * @see #setAxisLocation(int, PolarAxisLocation)\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.setAxisLocation": "/**\n     * Sets the location of the primary axis and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param location  the location ({@code null} not permitted).\n     *\n     * @see #getAxisLocation()\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.setAxisLocation": "/**\n     * Sets the location of the primary axis and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param location  the location ({@code null} not permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getAxisLocation()\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.setAxisLocation": "/**\n     * Sets the location for an axis and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param location  the location ({@code null} not permitted).\n     *\n     * @see #getAxisLocation(int)\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.setAxisLocation": "/**\n     * Sets the axis location for an axis and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param location  the location ({@code null} not permitted).\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.getAxisCount": "/**\n     * Returns the number of domain axes.\n     *\n     * @return The axis count.\n     *\n     * @since 1.0.14\n     **/\n",
"org.jfree.chart.plot.PolarPlot.getDataset": "/**\n     * Returns the primary dataset for the plot.\n     *\n     * @return The primary dataset (possibly {@code null}).\n     *\n     * @see #setDataset(XYDataset)\n     */\n",
"org.jfree.chart.plot.PolarPlot.getDataset": "/**\n     * Returns the dataset with the specified index, if any.\n     *\n     * @param index  the dataset index.\n     *\n     * @return The dataset (possibly {@code null}).\n     *\n     * @see #setDataset(int, XYDataset)\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.setDataset": "/**\n     * Sets the primary dataset for the plot, replacing the existing dataset\n     * if there is one, and sends a {@code link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @see #getDataset()\n     */\n",
"org.jfree.chart.plot.PolarPlot.setDataset": "/**\n     * Sets a dataset for the plot, replacing the existing dataset at the same\n     * index if there is one, and sends a {@code link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param index  the dataset index.\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @see #getDataset(int)\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.getDatasetCount": "/**\n     * Returns the number of datasets.\n     *\n     * @return The number of datasets.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.indexOf": "/**\n     * Returns the index of the specified dataset, or {@code -1} if the\n     * dataset does not belong to the plot.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The index.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.getRenderer": "/**\n     * Returns the primary renderer.\n     *\n     * @return The renderer (possibly {@code null}).\n     *\n     * @see #setRenderer(PolarItemRenderer)\n     */\n",
"org.jfree.chart.plot.PolarPlot.getRenderer": "/**\n     * Returns the renderer at the specified index, if there is one.\n     *\n     * @param index  the renderer index.\n     *\n     * @return The renderer (possibly {@code null}).\n     *\n     * @see #setRenderer(int, PolarItemRenderer)\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.setRenderer": "/**\n     * Sets the primary renderer, and notifies all listeners of a change to the\n     * plot.  If the renderer is set to {@code null}, no data items will\n     * be drawn for the corresponding dataset.\n     *\n     * @param renderer  the new renderer ({@code null} permitted).\n     *\n     * @see #getRenderer()\n     */\n",
"org.jfree.chart.plot.PolarPlot.setRenderer": "/**\n     * Sets a renderer and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param index  the index.\n     * @param renderer  the renderer.\n     *\n     * @see #getRenderer(int)\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.setRenderer": "/**\n     * Sets a renderer and, if requested, sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param index  the index.\n     * @param renderer  the renderer.\n     * @param notify  notify listeners?\n     *\n     * @see #getRenderer(int)\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.getAngleTickUnit": "/**\n     * Returns the tick unit that controls the spacing of the angular grid\n     * lines.\n     *\n     * @return The tick unit (never {@code null}).\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.plot.PolarPlot.setAngleTickUnit": "/**\n     * Sets the tick unit that controls the spacing of the angular grid\n     * lines, and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param unit  the tick unit ({@code null} not permitted).\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.plot.PolarPlot.getAngleOffset": "/**\n     * Returns the offset that is used for all angles.\n     *\n     * @return The offset for the angles.\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.setAngleOffset": "/**\n     * Sets the offset that is used for all angles and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * This is useful to let 0 degrees be at the north, east, south or west\n     * side of the chart.\n     *\n     * @param offset The offset\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.isCounterClockwise": "/**\n     * Get the direction for growing angle degrees.\n     *\n     * @return {@code true} if angle increases counterclockwise,\n     *         {@code false} otherwise.\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.setCounterClockwise": "/**\n     * Sets the flag for increasing angle degrees direction.\n     *\n     * {@code true} for counterclockwise, {@code false} for\n     * clockwise.\n     *\n     * @param counterClockwise The flag.\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.isAngleLabelsVisible": "/**\n     * Returns a flag that controls whether or not the angle labels are visible.\n     *\n     * @return A boolean.\n     *\n     * @see #setAngleLabelsVisible(boolean)\n     */\n",
"org.jfree.chart.plot.PolarPlot.setAngleLabelsVisible": "/**\n     * Sets the flag that controls whether or not the angle labels are visible,\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param visible  the flag.\n     *\n     * @see #isAngleLabelsVisible()\n     */\n",
"org.jfree.chart.plot.PolarPlot.getAngleLabelFont": "/**\n     * Returns the font used to display the angle labels.\n     *\n     * @return A font (never {@code null}).\n     *\n     * @see #setAngleLabelFont(Font)\n     */\n",
"org.jfree.chart.plot.PolarPlot.setAngleLabelFont": "/**\n     * Sets the font used to display the angle labels and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param font  the font ({@code null} not permitted).\n     *\n     * @see #getAngleLabelFont()\n     */\n",
"org.jfree.chart.plot.PolarPlot.getAngleLabelPaint": "/**\n     * Returns the paint used to display the angle labels.\n     *\n     * @return A paint (never {@code null}).\n     *\n     * @see #setAngleLabelPaint(Paint)\n     */\n",
"org.jfree.chart.plot.PolarPlot.setAngleLabelPaint": "/**\n     * Sets the paint used to display the angle labels and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.PolarPlot.isAngleGridlinesVisible": "/**\n     * Returns {@code true} if the angular gridlines are visible, and\n     * {@code false} otherwise.\n     *\n     * @return {@code true} or {@code false}.\n     *\n     * @see #setAngleGridlinesVisible(boolean)\n     */\n",
"org.jfree.chart.plot.PolarPlot.setAngleGridlinesVisible": "/**\n     * Sets the flag that controls whether or not the angular grid-lines are\n     * visible.\n     * <p>\n     * If the flag value is changed, a {@link PlotChangeEvent} is sent to all\n     * registered listeners.\n     *\n     * @param visible  the new value of the flag.\n     *\n     * @see #isAngleGridlinesVisible()\n     */\n",
"org.jfree.chart.plot.PolarPlot.getAngleGridlineStroke": "/**\n     * Returns the stroke for the grid-lines (if any) plotted against the\n     * angular axis.\n     *\n     * @return The stroke (possibly {@code null}).\n     *\n     * @see #setAngleGridlineStroke(Stroke)\n     */\n",
"org.jfree.chart.plot.PolarPlot.setAngleGridlineStroke": "/**\n     * Sets the stroke for the grid lines plotted against the angular axis and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     * <p>\n     * If you set this to {@code null}, no grid lines will be drawn.\n     *\n     * @param stroke  the stroke ({@code null} permitted).\n     *\n     * @see #getAngleGridlineStroke()\n     */\n",
"org.jfree.chart.plot.PolarPlot.getAngleGridlinePaint": "/**\n     * Returns the paint for the grid lines (if any) plotted against the\n     * angular axis.\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setAngleGridlinePaint(Paint)\n     */\n",
"org.jfree.chart.plot.PolarPlot.setAngleGridlinePaint": "/**\n     * Sets the paint for the grid lines plotted against the angular axis.\n     * <p>\n     * If you set this to {@code null}, no grid lines will be drawn.\n     *\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getAngleGridlinePaint()\n     */\n",
"org.jfree.chart.plot.PolarPlot.isRadiusGridlinesVisible": "/**\n     * Returns {@code true} if the radius axis grid is visible, and\n     * {@code false} otherwise.\n     *\n     * @return {@code true} or {@code false}.\n     *\n     * @see #setRadiusGridlinesVisible(boolean)\n     */\n",
"org.jfree.chart.plot.PolarPlot.setRadiusGridlinesVisible": "/**\n     * Sets the flag that controls whether or not the radius axis grid lines\n     * are visible.\n     * <p>\n     * If the flag value is changed, a {@link PlotChangeEvent} is sent to all\n     * registered listeners.\n     *\n     * @param visible  the new value of the flag.\n     *\n     * @see #isRadiusGridlinesVisible()\n     */\n",
"org.jfree.chart.plot.PolarPlot.getRadiusGridlineStroke": "/**\n     * Returns the stroke for the grid lines (if any) plotted against the\n     * radius axis.\n     *\n     * @return The stroke (possibly {@code null}).\n     *\n     * @see #setRadiusGridlineStroke(Stroke)\n     */\n",
"org.jfree.chart.plot.PolarPlot.setRadiusGridlineStroke": "/**\n     * Sets the stroke for the grid lines plotted against the radius axis and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     * <p>\n     * If you set this to {@code null}, no grid lines will be drawn.\n     *\n     * @param stroke  the stroke ({@code null} permitted).\n     *\n     * @see #getRadiusGridlineStroke()\n     */\n",
"org.jfree.chart.plot.PolarPlot.getRadiusGridlinePaint": "/**\n     * Returns the paint for the grid lines (if any) plotted against the radius\n     * axis.\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setRadiusGridlinePaint(Paint)\n     */\n",
"org.jfree.chart.plot.PolarPlot.setRadiusGridlinePaint": "/**\n     * Sets the paint for the grid lines plotted against the radius axis and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     * <p>\n     * If you set this to {@code null}, no grid lines will be drawn.\n     *\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getRadiusGridlinePaint()\n     */\n",
"org.jfree.chart.plot.PolarPlot.isRadiusMinorGridlinesVisible": "/**\n     * Return the current value of the flag indicating if radial minor\n     * grid-lines will be drawn or not.\n     *\n     * @return Returns {@code true} if radial minor grid-lines are drawn.\n     * @since 1.0.15\n     */\n",
"org.jfree.chart.plot.PolarPlot.setRadiusMinorGridlinesVisible": "/**\n     * Set the flag that determines if radial minor grid-lines will be drawn,\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param flag {@code true} to draw the radial minor grid-lines,\n     *             {@code false} to hide them.\n     * @since 1.0.15\n     */\n",
"org.jfree.chart.plot.PolarPlot.getMargin": "/**\n     * Returns the margin around the plot area.\n     *\n     * @return The actual margin in pixels.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.setMargin": "/**\n     * Set the margin around the plot area and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param margin The new margin in pixels.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.getFixedLegendItems": "/**\n     * Returns the fixed legend items, if any.\n     *\n     * @return The legend items (possibly {@code null}).\n     *\n     * @see #setFixedLegendItems(LegendItemCollection)\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.setFixedLegendItems": "/**\n     * Sets the fixed legend items for the plot.  Leave this set to\n     * {@code null} if you prefer the legend items to be created\n     * automatically.\n     *\n     * @param items  the legend items ({@code null} permitted).\n     *\n     * @see #getFixedLegendItems()\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.addCornerTextItem": "/**\n     * Add text to be displayed in the lower right hand corner and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param text  the text to display ({@code null} not permitted).\n     *\n     * @see #removeCornerTextItem(String)\n     */\n",
"org.jfree.chart.plot.PolarPlot.removeCornerTextItem": "/**\n     * Remove the given text from the list of corner text items and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param text  the text to remove ({@code null} ignored).\n     *\n     * @see #addCornerTextItem(String)\n     */\n",
"org.jfree.chart.plot.PolarPlot.clearCornerTextItems": "/**\n     * Clear the list of corner text items and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @see #addCornerTextItem(String)\n     * @see #removeCornerTextItem(String)\n     */\n",
"org.jfree.chart.plot.PolarPlot.refreshAngleTicks": "/**\n     * Generates a list of tick values for the angular tick marks.\n     *\n     * @return A list of {@link NumberTick} instances.\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.plot.PolarPlot.calculateTextAnchor": "/**\n     * Calculate the text position for the given degrees.\n     *\n     * @param angleDegrees  the angle in degrees.\n     * \n     * @return The optimal text anchor.\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.mapDatasetToAxis": "/**\n     * Maps a dataset to a particular axis.  All data will be plotted\n     * against axis zero by default, no mapping is required for this case.\n     *\n     * @param index  the dataset index (zero-based).\n     * @param axisIndex  the axis index.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.mapDatasetToAxes": "/**\n     * Maps the specified dataset to the axes in the list.  Note that the\n     * conversion of data values into Java2D space is always performed using\n     * the first axis in the list.\n     *\n     * @param index  the dataset index (zero-based).\n     * @param axisIndices  the axis indices ({@code null} permitted).\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.checkAxisIndices": "/**\n     * This method is used to perform argument checking on the list of\n     * axis indices passed to mapDatasetToAxes().\n     *\n     * @param indices  the list of indices ({@code null} permitted).\n     */\n",
"org.jfree.chart.plot.PolarPlot.getAxisForDataset": "/**\n     * Returns the axis for a dataset.\n     *\n     * @param index  the dataset index.\n     *\n     * @return The axis.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.getAxisIndex": "/**\n     * Returns the index of the given axis.\n     *\n     * @param axis  the axis.\n     *\n     * @return The axis index or -1 if axis is not used in this plot.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.getIndexOf": "/**\n     * Returns the index of the specified renderer, or {@code -1} if the\n     * renderer is not assigned to this plot.\n     *\n     * @param renderer  the renderer ({@code null} permitted).\n     *\n     * @return The renderer index.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.draw": "/**\n     * Draws the plot on a Java 2D graphics device (such as the screen or a\n     * printer).\n     * <P>\n     * This plot relies on a {@link PolarItemRenderer} to draw each\n     * item in the plot.  This allows the visual representation of the data to\n     * be changed easily.\n     * <P>\n     * The optional info argument collects information about the rendering of\n     * the plot (dimensions, tooltip information etc).  Just pass in\n     * {@code null} if you do not need this information.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area within which the plot (including axes and\n     *              labels) should be drawn.\n     * @param anchor  the anchor point ({@code null} permitted).\n     * @param parentState  ignored.\n     * @param info  collects chart drawing information ({@code null}\n     *              permitted).\n     */\n",
"org.jfree.chart.plot.PolarPlot.drawCornerTextItems": "/**\n     * Draws the corner text items.\n     *\n     * @param g2  the drawing surface.\n     * @param area  the area.\n     */\n",
"org.jfree.chart.plot.PolarPlot.drawAxis": "/**\n     * Draws the axis with the specified index.\n     *\n     * @param axis  the axis.\n     * @param location  the axis location.\n     * @param g2  the graphics target.\n     * @param plotArea  the plot area.\n     *\n     * @return The axis state.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.render": "/**\n     * Draws a representation of the data within the dataArea region, using the\n     * current m_Renderer.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the region in which the data is to be drawn.\n     * @param info  an optional object for collection dimension\n     *              information ({@code null} permitted).\n     */\n",
"org.jfree.chart.plot.PolarPlot.drawGridlines": "/**\n     * Draws the gridlines for the plot, if they are visible.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param angularTicks  the ticks for the angular axis.\n     * @param radialTicks  the ticks for the radial axis.\n     */\n",
"org.jfree.chart.plot.PolarPlot.buildRadialTicks": "/**\n     * Create a list of ticks based on the given list and plot properties.\n     * Only ticks of a specific type may be in the result list.\n     *\n     * @param allTicks A list of all available ticks for the primary axis.\n     *        {@code null} not permitted.\n     * @return Ticks to use for radial gridlines.\n     * @since 1.0.15\n     */\n",
"org.jfree.chart.plot.PolarPlot.zoom": "/**\n     * Zooms the axis ranges by the specified percentage about the anchor point.\n     *\n     * @param percent  the amount of the zoom.\n     */\n",
"org.jfree.chart.plot.PolarPlot.getDatasetsMappedToAxis": "/**\n     * A utility method that returns a list of datasets that are mapped to a\n     * particular axis.\n     *\n     * @param axisIndex  the axis index ({@code null} not permitted).\n     *\n     * @return A list of datasets.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.PolarPlot.getDataRange": "/**\n     * Returns the range for the specified axis.\n     *\n     * @param axis  the axis.\n     *\n     * @return The range.\n     */\n",
"org.jfree.chart.plot.PolarPlot.datasetChanged": "/**\n     * Receives notification of a change to the plot's m_Dataset.\n     * <P>\n     * The axis ranges are updated if necessary.\n     *\n     * @param event  information about the event (not used here).\n     */\n",
"org.jfree.chart.plot.PolarPlot.rendererChanged": "/**\n     * Notifies all registered listeners of a property change.\n     * <P>\n     * One source of property change events is the plot's m_Renderer.\n     *\n     * @param event  information about the property change.\n     */\n",
"org.jfree.chart.plot.PolarPlot.getLegendItems": "/**\n     * Returns the legend items for the plot.  Each legend item is generated by\n     * the plot's m_Renderer, since the m_Renderer is responsible for the visual\n     * representation of the data.\n     *\n     * @return The legend items.\n     */\n",
"org.jfree.chart.plot.PolarPlot.equals": "/**\n     * Tests this plot for equality with another object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.plot.PolarPlot.clone": "/**\n     * Returns a clone of the plot.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  this can occur if some component of\n     *         the plot cannot be cloned.\n     */\n",
"org.jfree.chart.plot.PolarPlot.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.plot.PolarPlot.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.plot.PolarPlot.zoomDomainAxes": "/**\n     * This method is required by the {@link Zoomable} interface, but since\n     * the plot does not have any domain axes, it does nothing.\n     *\n     * @param factor  the zoom factor.\n     * @param state  the plot state.\n     * @param source  the source point (in Java2D coordinates).\n     */\n",
"org.jfree.chart.plot.PolarPlot.zoomDomainAxes": "/**\n     * This method is required by the {@link Zoomable} interface, but since\n     * the plot does not have any domain axes, it does nothing.\n     *\n     * @param factor  the zoom factor.\n     * @param state  the plot state.\n     * @param source  the source point (in Java2D coordinates).\n     * @param useAnchor  use source point as zoom anchor?\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.PolarPlot.zoomDomainAxes": "/**\n     * This method is required by the {@link Zoomable} interface, but since\n     * the plot does not have any domain axes, it does nothing.\n     *\n     * @param lowerPercent  the new lower bound.\n     * @param upperPercent  the new upper bound.\n     * @param state  the plot state.\n     * @param source  the source point (in Java2D coordinates).\n     */\n",
"org.jfree.chart.plot.PolarPlot.zoomRangeAxes": "/**\n     * Multiplies the range on the range axis/axes by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param state  the plot state.\n     * @param source  the source point (in Java2D coordinates).\n     */\n",
"org.jfree.chart.plot.PolarPlot.zoomRangeAxes": "/**\n     * Multiplies the range on the range axis by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param info  the plot rendering info.\n     * @param source  the source point (in Java2D space).\n     * @param useAnchor  use source point as zoom anchor?\n     *\n     * @see #zoomDomainAxes(double, PlotRenderingInfo, Point2D, boolean)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.PolarPlot.zoomRangeAxes": "/**\n     * Zooms in on the range axes.\n     *\n     * @param lowerPercent  the new lower bound.\n     * @param upperPercent  the new upper bound.\n     * @param state  the plot state.\n     * @param source  the source point (in Java2D coordinates).\n     */\n",
"org.jfree.chart.plot.PolarPlot.isDomainZoomable": "/**\n     * Returns {@code false} always.\n     *\n     * @return {@code false} always.\n     */\n",
"org.jfree.chart.plot.PolarPlot.isRangeZoomable": "/**\n     * Returns {@code true} to indicate that the range axis is zoomable.\n     *\n     * @return {@code true}.\n     */\n",
"org.jfree.chart.plot.PolarPlot.getOrientation": "/**\n     * Returns the orientation of the plot.\n     *\n     * @return The orientation.\n     */\n",
"org.jfree.chart.plot.PolarPlot.translateToJava2D": "/**\n     * Translates a (theta, radius) pair into Java2D coordinates.  If\n     * {@code radius} is less than the lower bound of the axis, then\n     * this method returns the centre point.\n     *\n     * @param angleDegrees  the angle in degrees.\n     * @param radius  the radius.\n     * @param axis  the axis.\n     * @param dataArea  the data area.\n     *\n     * @return A point in Java2D space.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.plot.MeterPlot.getDialShape": "/**\n     * Returns the dial shape.  The default is {@link DialShape#CIRCLE}).\n     *\n     * @return The dial shape (never {@code null}).\n     *\n     * @see #setDialShape(DialShape)\n     */\n",
"org.jfree.chart.plot.MeterPlot.setDialShape": "/**\n     * Sets the dial shape and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param shape  the shape ({@code null} not permitted).\n     *\n     * @see #getDialShape()\n     */\n",
"org.jfree.chart.plot.MeterPlot.getMeterAngle": "/**\n     * Returns the meter angle in degrees.  This defines, in part, the shape\n     * of the dial.  The default is 270 degrees.\n     *\n     * @return The meter angle (in degrees).\n     *\n     * @see #setMeterAngle(int)\n     */\n",
"org.jfree.chart.plot.MeterPlot.setMeterAngle": "/**\n     * Sets the angle (in degrees) for the whole range of the dial and sends\n     * a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param angle  the angle (in degrees, in the range 1-360).\n     *\n     * @see #getMeterAngle()\n     */\n",
"org.jfree.chart.plot.MeterPlot.getRange": "/**\n     * Returns the overall range for the dial.\n     *\n     * @return The overall range (never {@code null}).\n     *\n     * @see #setRange(Range)\n     */\n",
"org.jfree.chart.plot.MeterPlot.setRange": "/**\n     * Sets the range for the dial and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param range  the range ({@code null} not permitted and zero-length\n     *               ranges not permitted).\n     *\n     * @see #getRange()\n     */\n",
"org.jfree.chart.plot.MeterPlot.getTickSize": "/**\n     * Returns the tick size (the interval between ticks on the dial).\n     *\n     * @return The tick size.\n     *\n     * @see #setTickSize(double)\n     */\n",
"org.jfree.chart.plot.MeterPlot.setTickSize": "/**\n     * Sets the tick size and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param size  the tick size (must be &gt; 0).\n     *\n     * @see #getTickSize()\n     */\n",
"org.jfree.chart.plot.MeterPlot.getTickPaint": "/**\n     * Returns the paint used to draw the ticks around the dial.\n     *\n     * @return The paint used to draw the ticks around the dial (never\n     *         {@code null}).\n     *\n     * @see #setTickPaint(Paint)\n     */\n",
"org.jfree.chart.plot.MeterPlot.setTickPaint": "/**\n     * Sets the paint used to draw the tick labels around the dial and sends\n     * a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getTickPaint()\n     */\n",
"org.jfree.chart.plot.MeterPlot.getUnits": "/**\n     * Returns a string describing the units for the dial.\n     *\n     * @return The units (possibly {@code null}).\n     *\n     * @see #setUnits(String)\n     */\n",
"org.jfree.chart.plot.MeterPlot.setUnits": "/**\n     * Sets the units for the dial and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param units  the units ({@code null} permitted).\n     *\n     * @see #getUnits()\n     */\n",
"org.jfree.chart.plot.MeterPlot.getNeedlePaint": "/**\n     * Returns the paint for the needle.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setNeedlePaint(Paint)\n     */\n",
"org.jfree.chart.plot.MeterPlot.setNeedlePaint": "/**\n     * Sets the paint used to display the needle and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getNeedlePaint()\n     */\n",
"org.jfree.chart.plot.MeterPlot.getTickLabelsVisible": "/**\n     * Returns the flag that determines whether or not tick labels are visible.\n     *\n     * @return The flag.\n     *\n     * @see #setTickLabelsVisible(boolean)\n     */\n",
"org.jfree.chart.plot.MeterPlot.setTickLabelsVisible": "/**\n     * Sets the flag that controls whether or not the tick labels are visible\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param visible  the flag.\n     *\n     * @see #getTickLabelsVisible()\n     */\n",
"org.jfree.chart.plot.MeterPlot.getTickLabelFont": "/**\n     * Returns the tick label font.\n     *\n     * @return The font (never {@code null}).\n     *\n     * @see #setTickLabelFont(Font)\n     */\n",
"org.jfree.chart.plot.MeterPlot.setTickLabelFont": "/**\n     * Sets the tick label font and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param font  the font ({@code null} not permitted).\n     *\n     * @see #getTickLabelFont()\n     */\n",
"org.jfree.chart.plot.MeterPlot.getTickLabelPaint": "/**\n     * Returns the tick label paint.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setTickLabelPaint(Paint)\n     */\n",
"org.jfree.chart.plot.MeterPlot.setTickLabelPaint": "/**\n     * Sets the tick label paint and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getTickLabelPaint()\n     */\n",
"org.jfree.chart.plot.MeterPlot.getTickLabelFormat": "/**\n     * Returns the tick label format.\n     *\n     * @return The tick label format (never {@code null}).\n     *\n     * @see #setTickLabelFormat(NumberFormat)\n     */\n",
"org.jfree.chart.plot.MeterPlot.setTickLabelFormat": "/**\n     * Sets the format for the tick labels and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param format  the format ({@code null} not permitted).\n     *\n     * @see #getTickLabelFormat()\n     */\n",
"org.jfree.chart.plot.MeterPlot.getValueFont": "/**\n     * Returns the font for the value label.\n     *\n     * @return The font (never {@code null}).\n     *\n     * @see #setValueFont(Font)\n     */\n",
"org.jfree.chart.plot.MeterPlot.setValueFont": "/**\n     * Sets the font used to display the value label and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param font  the font ({@code null} not permitted).\n     *\n     * @see #getValueFont()\n     */\n",
"org.jfree.chart.plot.MeterPlot.getValuePaint": "/**\n     * Returns the paint for the value label.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setValuePaint(Paint)\n     */\n",
"org.jfree.chart.plot.MeterPlot.setValuePaint": "/**\n     * Sets the paint used to display the value label and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getValuePaint()\n     */\n",
"org.jfree.chart.plot.MeterPlot.getDialBackgroundPaint": "/**\n     * Returns the paint for the dial background.\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setDialBackgroundPaint(Paint)\n     */\n",
"org.jfree.chart.plot.MeterPlot.setDialBackgroundPaint": "/**\n     * Sets the paint used to fill the dial background.  Set this to\n     * {@code null} for no background.\n     *\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getDialBackgroundPaint()\n     */\n",
"org.jfree.chart.plot.MeterPlot.getDrawBorder": "/**\n     * Returns a flag that controls whether or not a rectangular border is\n     * drawn around the plot area.\n     *\n     * @return A flag.\n     *\n     * @see #setDrawBorder(boolean)\n     */\n",
"org.jfree.chart.plot.MeterPlot.setDrawBorder": "/**\n     * Sets the flag that controls whether or not a rectangular border is drawn\n     * around the plot area and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param draw  the flag.\n     *\n     * @see #getDrawBorder()\n     */\n",
"org.jfree.chart.plot.MeterPlot.getDialOutlinePaint": "/**\n     * Returns the dial outline paint.\n     *\n     * @return The paint.\n     *\n     * @see #setDialOutlinePaint(Paint)\n     */\n",
"org.jfree.chart.plot.MeterPlot.setDialOutlinePaint": "/**\n     * Sets the dial outline paint and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param paint  the paint.\n     *\n     * @see #getDialOutlinePaint()\n     */\n",
"org.jfree.chart.plot.MeterPlot.getDataset": "/**\n     * Returns the dataset for the plot.\n     *\n     * @return The dataset (possibly {@code null}).\n     *\n     * @see #setDataset(ValueDataset)\n     */\n",
"org.jfree.chart.plot.MeterPlot.setDataset": "/**\n     * Sets the dataset for the plot, replacing the existing dataset if there\n     * is one, and triggers a {@link PlotChangeEvent}.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @see #getDataset()\n     */\n",
"org.jfree.chart.plot.MeterPlot.getIntervals": "/**\n     * Returns an unmodifiable list of the intervals for the plot.\n     *\n     * @return A list.\n     *\n     * @see #addInterval(MeterInterval)\n     */\n",
"org.jfree.chart.plot.MeterPlot.addInterval": "/**\n     * Adds an interval and sends a {@link PlotChangeEvent} to all registered\n     * listeners.\n     *\n     * @param interval  the interval ({@code null} not permitted).\n     *\n     * @see #getIntervals()\n     * @see #clearIntervals()\n     */\n",
"org.jfree.chart.plot.MeterPlot.clearIntervals": "/**\n     * Clears the intervals for the plot and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @see #addInterval(MeterInterval)\n     */\n",
"org.jfree.chart.plot.MeterPlot.getLegendItems": "/**\n     * Returns an item for each interval.\n     *\n     * @return A collection of legend items.\n     */\n",
"org.jfree.chart.plot.MeterPlot.draw": "/**\n     * Draws the plot on a Java 2D graphics device (such as the screen or a\n     * printer).\n     *\n     * @param g2  the graphics device.\n     * @param area  the area within which the plot should be drawn.\n     * @param anchor  the anchor point ({@code null} permitted).\n     * @param parentState  the state from the parent plot, if there is one.\n     * @param info  collects info about the drawing.\n     */\n",
"org.jfree.chart.plot.MeterPlot.drawArcForInterval": "/**\n     * Draws the arc to represent an interval.\n     *\n     * @param g2  the graphics device.\n     * @param meterArea  the drawing area.\n     * @param interval  the interval.\n     */\n",
"org.jfree.chart.plot.MeterPlot.drawArc": "/**\n     * Draws an arc.\n     *\n     * @param g2  the graphics device.\n     * @param area  the plot area.\n     * @param minValue  the minimum value.\n     * @param maxValue  the maximum value.\n     * @param paint  the paint.\n     * @param stroke  the stroke.\n     */\n",
"org.jfree.chart.plot.MeterPlot.fillArc": "/**\n     * Fills an arc on the dial between the given values.\n     *\n     * @param g2  the graphics device.\n     * @param area  the plot area.\n     * @param minValue  the minimum data value.\n     * @param maxValue  the maximum data value.\n     * @param paint  the background paint ({@code null} not permitted).\n     * @param dial  a flag that indicates whether the arc represents the whole\n     *              dial.\n     */\n",
"org.jfree.chart.plot.MeterPlot.valueToAngle": "/**\n     * Translates a data value to an angle on the dial.\n     *\n     * @param value  the value.\n     *\n     * @return The angle on the dial.\n     */\n",
"org.jfree.chart.plot.MeterPlot.drawTicks": "/**\n     * Draws the ticks that subdivide the overall range.\n     *\n     * @param g2  the graphics device.\n     * @param meterArea  the meter area.\n     * @param minValue  the minimum value.\n     * @param maxValue  the maximum value.\n     */\n",
"org.jfree.chart.plot.MeterPlot.drawTick": "/**\n     * Draws a tick.\n     *\n     * @param g2  the graphics device.\n     * @param meterArea  the meter area.\n     * @param value  the value.\n     */\n",
"org.jfree.chart.plot.MeterPlot.drawTick": "/**\n     * Draws a tick on the dial.\n     *\n     * @param g2  the graphics device.\n     * @param meterArea  the meter area.\n     * @param value  the tick value.\n     * @param label  a flag that controls whether or not a value label is drawn.\n     */\n",
"org.jfree.chart.plot.MeterPlot.drawValueLabel": "/**\n     * Draws the value label just below the center of the dial.\n     *\n     * @param g2  the graphics device.\n     * @param area  the plot area.\n     */\n",
"org.jfree.chart.plot.MeterPlot.getPlotType": "/**\n     * Returns a short string describing the type of plot.\n     *\n     * @return A string describing the type of plot.\n     */\n",
"org.jfree.chart.plot.MeterPlot.zoom": "/**\n     * A zoom method that does nothing.  Plots are required to support the\n     * zoom operation.  In the case of a meter plot, it doesn't make sense to\n     * zoom in or out, so the method is empty.\n     *\n     * @param percent   The zoom percentage.\n     */\n",
"org.jfree.chart.plot.MeterPlot.equals": "/**\n     * Tests the plot for equality with an arbitrary object.  Note that the\n     * dataset is ignored for the purposes of testing equality.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.MeterPlot.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.plot.MeterPlot.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.plot.MeterPlot.clone": "/**\n     * Returns an independent copy (clone) of the plot.  The dataset is NOT\n     * cloned - both the original and the clone will have a reference to the\n     * same dataset.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if some component of the plot cannot\n     *         be cloned.\n     */\n",
"org.jfree.chart.plot.PlotOrientation.isHorizontal": "/**\n     * Returns {@code true} if this orientation is {@code HORIZONTAL},\n     * and {@code false} otherwise.  \n     * \n     * @return A boolean.\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.chart.plot.PlotOrientation.isVertical": "/**\n     * Returns {@code true} if this orientation is {@code VERTICAL},\n     * and {@code false} otherwise.\n     * \n     * @return A boolean.\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.chart.plot.PlotOrientation.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.chart.plot.PlotOrientation.equals": "/**\n     * Returns {@code true} if this object is equal to the specified\n     * object, and {@code false} otherwise.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.PlotOrientation.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.plot.PlotOrientation.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     *\n     * @return The object.\n     *\n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.getPlotType": "/**\n     * Returns a short string describing the plot type.\n     *\n     * @return A short string describing the plot type.\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.getData": "/**\n     * Returns the data array used by the plot.\n     *\n     * @return The data array (possibly {@code null}).\n     *\n     * @see #setData(float[][])\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.setData": "/**\n     * Sets the data array used by the plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param data  the data array ({@code null} permitted).\n     *\n     * @see #getData()\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.getOrientation": "/**\n     * Returns the orientation of the plot.\n     *\n     * @return The orientation (always {@link PlotOrientation#VERTICAL}).\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.getDomainAxis": "/**\n     * Returns the domain axis for the plot.\n     *\n     * @return The domain axis (never {@code null}).\n     *\n     * @see #setDomainAxis(ValueAxis)\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.setDomainAxis": "/**\n     * Sets the domain axis and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param axis  the axis ({@code null} not permitted).\n     *\n     * @since 1.0.3\n     *\n     * @see #getDomainAxis()\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.getRangeAxis": "/**\n     * Returns the range axis for the plot.\n     *\n     * @return The range axis (never {@code null}).\n     *\n     * @see #setRangeAxis(ValueAxis)\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.setRangeAxis": "/**\n     * Sets the range axis and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param axis  the axis ({@code null} not permitted).\n     *\n     * @since 1.0.3\n     *\n     * @see #getRangeAxis()\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.getPaint": "/**\n     * Returns the paint used to plot data points.  The default is\n     * {@code Color.RED}.\n     *\n     * @return The paint.\n     *\n     * @see #setPaint(Paint)\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.setPaint": "/**\n     * Sets the color for the data points and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getPaint()\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.isDomainGridlinesVisible": "/**\n     * Returns {@code true} if the domain gridlines are visible, and\n     * {@code false} otherwise.\n     *\n     * @return {@code true} or {@code false}.\n     *\n     * @see #setDomainGridlinesVisible(boolean)\n     * @see #setDomainGridlinePaint(Paint)\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.setDomainGridlinesVisible": "/**\n     * Sets the flag that controls whether or not the domain grid-lines are\n     * visible.  If the flag value is changed, a {@link PlotChangeEvent} is\n     * sent to all registered listeners.\n     *\n     * @param visible  the new value of the flag.\n     *\n     * @see #getDomainGridlinePaint()\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.getDomainGridlineStroke": "/**\n     * Returns the stroke for the grid-lines (if any) plotted against the\n     * domain axis.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setDomainGridlineStroke(Stroke)\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.setDomainGridlineStroke": "/**\n     * Sets the stroke for the grid lines plotted against the domain axis and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getDomainGridlineStroke()\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.getDomainGridlinePaint": "/**\n     * Returns the paint for the grid lines (if any) plotted against the domain\n     * axis.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setDomainGridlinePaint(Paint)\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.setDomainGridlinePaint": "/**\n     * Sets the paint for the grid lines plotted against the domain axis and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getDomainGridlinePaint()\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.isRangeGridlinesVisible": "/**\n     * Returns {@code true} if the range axis grid is visible, and\n     * {@code false} otherwise.\n     *\n     * @return {@code true} or {@code false}.\n     *\n     * @see #setRangeGridlinesVisible(boolean)\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.setRangeGridlinesVisible": "/**\n     * Sets the flag that controls whether or not the range axis grid lines are\n     * visible.  If the flag value is changed, a {@link PlotChangeEvent} is\n     * sent to all registered listeners.\n     *\n     * @param visible  the new value of the flag.\n     *\n     * @see #isRangeGridlinesVisible()\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.getRangeGridlineStroke": "/**\n     * Returns the stroke for the grid lines (if any) plotted against the range\n     * axis.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setRangeGridlineStroke(Stroke)\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.setRangeGridlineStroke": "/**\n     * Sets the stroke for the grid lines plotted against the range axis and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} permitted).\n     *\n     * @see #getRangeGridlineStroke()\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.getRangeGridlinePaint": "/**\n     * Returns the paint for the grid lines (if any) plotted against the range\n     * axis.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setRangeGridlinePaint(Paint)\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.setRangeGridlinePaint": "/**\n     * Sets the paint for the grid lines plotted against the range axis and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getRangeGridlinePaint()\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.draw": "/**\n     * Draws the fast scatter plot on a Java 2D graphics device (such as the\n     * screen or a printer).\n     *\n     * @param g2  the graphics device.\n     * @param area   the area within which the plot (including axis labels)\n     *                   should be drawn.\n     * @param anchor  the anchor point ({@code null} permitted).\n     * @param parentState  the state from the parent plot (ignored).\n     * @param info  collects chart drawing information ({@code null}\n     *              permitted).\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.render": "/**\n     * Draws a representation of the data within the dataArea region.  The\n     * {@code info} and {@code crosshairState} arguments may be\n     * {@code null}.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the region in which the data is to be drawn.\n     * @param info  an optional object for collection dimension information.\n     * @param crosshairState  collects crosshair information ({@code null}\n     *                        permitted).\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.drawDomainGridlines": "/**\n     * Draws the gridlines for the plot, if they are visible.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param ticks  the ticks.\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.drawRangeGridlines": "/**\n     * Draws the gridlines for the plot, if they are visible.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param ticks  the ticks.\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.getDataRange": "/**\n     * Returns the range of data values to be plotted along the axis, or\n     * {@code null} if the specified axis isn't the domain axis or the\n     * range axis for the plot.\n     *\n     * @param axis  the axis ({@code null} permitted).\n     *\n     * @return The range (possibly {@code null}).\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.calculateXDataRange": "/**\n     * Calculates the X data range.\n     *\n     * @param data  the data ({@code null} permitted).\n     *\n     * @return The range.\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.calculateYDataRange": "/**\n     * Calculates the Y data range.\n     *\n     * @param data  the data ({@code null} permitted).\n     *\n     * @return The range.\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.zoomDomainAxes": "/**\n     * Multiplies the range on the domain axis by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param info  the plot rendering info.\n     * @param source  the source point.\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.zoomDomainAxes": "/**\n     * Multiplies the range on the domain axis by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param info  the plot rendering info.\n     * @param source  the source point (in Java2D space).\n     * @param useAnchor  use source point as zoom anchor?\n     *\n     * @see #zoomRangeAxes(double, PlotRenderingInfo, Point2D, boolean)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.zoomDomainAxes": "/**\n     * Zooms in on the domain axes.\n     *\n     * @param lowerPercent  the new lower bound as a percentage of the current\n     *                      range.\n     * @param upperPercent  the new upper bound as a percentage of the current\n     *                      range.\n     * @param info  the plot rendering info.\n     * @param source  the source point.\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.zoomRangeAxes": "/**\n     * Multiplies the range on the range axis/axes by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param info  the plot rendering info.\n     * @param source  the source point.\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.zoomRangeAxes": "/**\n     * Multiplies the range on the range axis by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param info  the plot rendering info.\n     * @param source  the source point (in Java2D space).\n     * @param useAnchor  use source point as zoom anchor?\n     *\n     * @see #zoomDomainAxes(double, PlotRenderingInfo, Point2D, boolean)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.zoomRangeAxes": "/**\n     * Zooms in on the range axes.\n     *\n     * @param lowerPercent  the new lower bound as a percentage of the current\n     *                      range.\n     * @param upperPercent  the new upper bound as a percentage of the current\n     *                      range.\n     * @param info  the plot rendering info.\n     * @param source  the source point.\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.isDomainZoomable": "/**\n     * Returns {@code true}.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.isRangeZoomable": "/**\n     * Returns {@code true}.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.isDomainPannable": "/**\n     * Returns {@code true} if panning is enabled for the domain axes,\n     * and {@code false} otherwise.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.setDomainPannable": "/**\n     * Sets the flag that enables or disables panning of the plot along the\n     * domain axes.\n     *\n     * @param pannable  the new flag value.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.isRangePannable": "/**\n     * Returns {@code true} if panning is enabled for the range axes,\n     * and {@code false} otherwise.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.setRangePannable": "/**\n     * Sets the flag that enables or disables panning of the plot along\n     * the range axes.\n     *\n     * @param pannable  the new flag value.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.panDomainAxes": "/**\n     * Pans the domain axes by the specified percentage.\n     *\n     * @param percent  the distance to pan (as a percentage of the axis length).\n     * @param info the plot info\n     * @param source the source point where the pan action started.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.panRangeAxes": "/**\n     * Pans the range axes by the specified percentage.\n     *\n     * @param percent  the distance to pan (as a percentage of the axis length).\n     * @param info the plot info\n     * @param source the source point where the pan action started.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.equals": "/**\n     * Tests an arbitrary object for equality with this plot.  Note that\n     * {@code FastScatterPlot} carries its data around with it (rather\n     * than referencing a dataset), and the data is included in the\n     * equality test.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.clone": "/**\n     * Returns a clone of the plot.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if some component of the plot does\n     *                                    not support cloning.\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.plot.FastScatterPlot.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.getPlotType": "/**\n     * Returns a string describing the type of plot.\n     *\n     * @return The type of plot.\n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.getGap": "/**\n     * Returns the gap between subplots, measured in Java2D units.\n     *\n     * @return The gap (in Java2D units).\n     *\n     * @see #setGap(double)\n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.setGap": "/**\n     * Sets the amount of space between subplots and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param gap  the gap between subplots (in Java2D units).\n     *\n     * @see #getGap()\n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.isRangePannable": "/**\n     * Returns {@code true} if the range is pannable for at least one subplot,\n     * and {@code false} otherwise.\n     * \n     * @return A boolean. \n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.setRangePannable": "/**\n     * Sets the flag, on each of the subplots, that controls whether or not the \n     * range is pannable.\n     * \n     * @param pannable  the new flag value. \n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.setOrientation": "/**\n     * Sets the orientation for the plot (also changes the orientation for all\n     * the subplots to match).\n     *\n     * @param orientation  the orientation ({@code null} not allowed).\n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.setShadowGenerator": "/**\n     * Sets the shadow generator for the plot (and all subplots) and sends\n     * a {@link PlotChangeEvent} to all registered listeners.\n     * \n     * @param generator  the new generator ({@code null} permitted).\n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.getDataRange": "/**\n     * Returns a range representing the extent of the data values in this plot\n     * (obtained from the subplots) that will be rendered against the specified\n     * axis.  NOTE: This method is intended for internal JFreeChart use, and\n     * is public only so that code in the axis classes can call it.  Since\n     * only the domain axis is shared between subplots, the JFreeChart code\n     * will only call this method for the domain values (although this is not\n     * checked/enforced).\n     *\n     * @param axis  the axis.\n     *\n     * @return The range (possibly {@code null}).\n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.add": "/**\n     * Adds a subplot (with a default 'weight' of 1) and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     * <P>\n     * The domain axis for the subplot will be set to {@code null}.  You\n     * must ensure that the subplot has a non-null range axis.\n     *\n     * @param subplot  the subplot ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.add": "/**\n     * Adds a subplot with the specified weight and sends a\n     * {@link PlotChangeEvent} to all registered listeners.  The weight\n     * determines how much space is allocated to the subplot relative to all\n     * the other subplots.\n     * <P>\n     * The domain axis for the subplot will be set to {@code null}.  You\n     * must ensure that the subplot has a non-null range axis.\n     *\n     * @param subplot  the subplot ({@code null} not permitted).\n     * @param weight  the weight (must be &gt;= 1).\n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.remove": "/**\n     * Removes a subplot from the combined chart and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param subplot  the subplot ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.getSubplots": "/**\n     * Returns the list of subplots.  The returned list may be empty, but is\n     * never {@code null}.\n     *\n     * @return An unmodifiable list of subplots.\n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.calculateAxisSpace": "/**\n     * Calculates the axis space required.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     *\n     * @return The space.\n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.draw": "/**\n     * Draws the plot within the specified area on a graphics device.\n     *\n     * @param g2  the graphics device.\n     * @param area  the plot area (in Java2D space).\n     * @param anchor  an anchor point in Java2D space ({@code null}\n     *                permitted).\n     * @param parentState  the state from the parent plot, if there is one\n     *                     ({@code null} permitted).\n     * @param info  collects chart drawing information ({@code null}\n     *              permitted).\n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.getLegendItems": "/**\n     * Returns a collection of legend items for the plot.\n     *\n     * @return The legend items.\n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.zoomRangeAxes": "/**\n     * Multiplies the range on the range axis/axes by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param info  the plot rendering info ({@code null} not permitted).\n     * @param source  the source point ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.zoomRangeAxes": "/**\n     * Multiplies the range on the range axis/axes by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param state  the plot state.\n     * @param source  the source point (in Java2D coordinates).\n     * @param useAnchor  use source point as zoom anchor?\n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.zoomRangeAxes": "/**\n     * Zooms in on the range axes.\n     *\n     * @param lowerPercent  the lower bound.\n     * @param upperPercent  the upper bound.\n     * @param info  the plot rendering info ({@code null} not permitted).\n     * @param source  the source point ({@code null} not permitted).\n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.panRangeAxes": "/**\n     * Pans all range axes by the specified percentage.\n     *\n     * @param panRange the distance to pan (as a percentage of the axis length).\n     * @param info  the plot info ({@code null} not permitted).\n     * @param source the source point where the pan action started.\n     *\n     * @since 1.0.15\n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.findSubplot": "/**\n     * Returns the subplot (if any) that contains the (x, y) point (specified\n     * in Java2D space).\n     *\n     * @param info  the chart rendering info ({@code null} not permitted).\n     * @param source  the source point ({@code null} not permitted).\n     *\n     * @return A subplot (possibly {@code null}).\n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.setRenderer": "/**\n     * Sets the item renderer FOR ALL SUBPLOTS.  Registered listeners are\n     * notified that the plot has been modified.\n     * <P>\n     * Note: usually you will want to set the renderer independently for each\n     * subplot, which is NOT what this method does.\n     *\n     * @param renderer the new renderer.\n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.setFixedRangeAxisSpace": "/**\n     * Sets the fixed range axis space and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param space  the space ({@code null} permitted).\n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.setFixedRangeAxisSpaceForSubplots": "/**\n     * Sets the size (width or height, depending on the orientation of the\n     * plot) for the domain axis of each subplot.\n     *\n     * @param space  the space.\n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.handleClick": "/**\n     * Handles a 'click' on the plot by updating the anchor values.\n     *\n     * @param x  x-coordinate, where the click occurred.\n     * @param y  y-coordinate, where the click occurred.\n     * @param info  object containing information about the plot dimensions.\n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.datasetChanged": "/**\n     * Receives notification of a change to the plot's dataset.\n     * <P>\n     * The axis ranges are updated if necessary.\n     *\n     * @param event  information about the event (not used here).\n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.plotChanged": "/**\n     * Receives a {@link PlotChangeEvent} and responds by notifying all\n     * listeners.\n     *\n     * @param event  the event.\n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.equals": "/**\n     * Tests this plot for equality with another object.\n     *\n     * @param obj  the other object.\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.plot.CombinedDomainXYPlot.clone": "/**\n     * Returns a clone of the annotation.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  this class will not throw this\n     *         exception, but subclasses (if any) might.\n     */\n",
"org.jfree.chart.plot.ValueMarker.getValue": "/**\n     * Returns the value.\n     *\n     * @return The value.\n     *\n     * @see #setValue(double)\n     */\n",
"org.jfree.chart.plot.ValueMarker.setValue": "/**\n     * Sets the value for the marker and sends a {@link MarkerChangeEvent} to\n     * all registered listeners.\n     *\n     * @param value  the value.\n     *\n     * @see #getValue()\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.plot.ValueMarker.equals": "/**\n     * Tests this marker for equality with an arbitrary object.  This method\n     * returns {@code true} if:\n     *\n     * <ul>\n     * <li>{@code obj} is not {@code null};</li>\n     * <li>{@code obj} is an instance of {@code ValueMarker};</li>\n     * <li>{@code obj} has the same value as this marker;</li>\n     * <li>{@code super.equals(obj)} returns {@code true}.</li>\n     * </ul>\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.LegendRenderingOrder.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.chart.LegendRenderingOrder.equals": "/**\n     * Returns {@code true} if this object is equal to the specified\n     * object, and {@code false} otherwise.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.LegendRenderingOrder.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     *\n     * @return The object.\n     *\n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.setPlot": "/**\n     * Set the plot associated with this renderer.\n     *\n     * @param plot  the plot.\n     *\n     * @see #getPlot()\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.getPlot": "/**\n     * Return the plot associated with this renderer.\n     *\n     * @return The plot.\n     *\n     * @see #setPlot(PolarPlot)\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.getDrawOutlineWhenFilled": "/**\n     * Returns {@code true} if the renderer will draw an outline around\n     * a filled polygon, {@code false} otherwise.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.setDrawOutlineWhenFilled": "/**\n     * Set the flag that controls whether the outline around a filled\n     * polygon will be drawn or not and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param drawOutlineWhenFilled  the flag.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.getFillComposite": "/**\n     * Get the composite that is used for filling.\n     *\n     * @return The composite (never {@code null}).\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.setFillComposite": "/**\n     * Sets the composite which will be used for filling polygons and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param composite  the composite to use ({@code null} not\n     *         permitted).\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.getShapesVisible": "/**\n     * Returns {@code true} if a shape will be drawn for every item, or\n     * {@code false} if not.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.setShapesVisible": "/**\n     * Set the flag that controls whether a shape will be drawn for every\n     * item, or not and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param visible  the flag.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.getConnectFirstAndLastPoint": "/**\n     * Returns {@code true} if first and last point of a series will be\n     * connected, {@code false} otherwise.\n     * \n     * @return The current status of the flag.\n     * \n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.setConnectFirstAndLastPoint": "/**\n     * Set the flag that controls whether the first and last point of a series\n     * will be connected or not and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     * \n     * @param connect the flag.\n     * \n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.getDrawingSupplier": "/**\n     * Returns the drawing supplier from the plot.\n     *\n     * @return The drawing supplier.\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.isSeriesFilled": "/**\n     * Returns {@code true} if the renderer should fill the specified\n     * series, and {@code false} otherwise.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.setSeriesFilled": "/**\n     * Sets a flag that controls whether or not a series is filled.\n     *\n     * @param series  the series index.\n     * @param filled  the flag.\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.getUseFillPaint": "/**\n     * Returns {@code true} if the renderer should use the fill paint\n     * setting to fill shapes, and {@code false} if it should just\n     * use the regular paint.\n     *\n     * @return A boolean.\n     *\n     * @see #setUseFillPaint(boolean)\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.setUseFillPaint": "/**\n     * Sets the flag that controls whether the fill paint is used to fill\n     * shapes, and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #getUseFillPaint()\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.getLegendLine": "/**\n     * Returns the shape used to represent a line in the legend.\n     *\n     * @return The legend line (never {@code null}).\n     *\n     * @see #setLegendLine(Shape)\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.setLegendLine": "/**\n     * Sets the shape used as a line in each legend item and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param line  the line ({@code null} not permitted).\n     *\n     * @see #getLegendLine()\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.addEntity": "/**\n     * Adds an entity to the collection.\n     *\n     * @param entities  the entity collection being populated.\n     * @param area  the entity area (if {@code null} a default will be\n     *              used).\n     * @param dataset  the dataset.\n     * @param series  the series.\n     * @param item  the item.\n     * @param entityX  the entity's center x-coordinate in user space (only\n     *                 used if {@code area} is {@code null}).\n     * @param entityY  the entity's center y-coordinate in user space (only\n     *                 used if {@code area} is {@code null}).\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.drawSeries": "/**\n     * Plots the data for a given series.\n     *\n     * @param g2  the drawing surface.\n     * @param dataArea  the data area.\n     * @param info  collects plot rendering info.\n     * @param plot  the plot.\n     * @param dataset  the dataset.\n     * @param seriesIndex  the series index.\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.drawAngularGridLines": "/**\n     * Draw the angular gridlines - the spokes.\n     *\n     * @param g2  the drawing surface.\n     * @param plot  the plot ({@code null} not permitted).\n     * @param ticks  the ticks ({@code null} not permitted).\n     * @param dataArea  the data area.\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines": "/**\n     * Draw the radial gridlines - the rings.\n     *\n     * @param g2  the drawing surface ({@code null} not permitted).\n     * @param plot  the plot ({@code null} not permitted).\n     * @param radialAxis  the radial axis ({@code null} not permitted).\n     * @param ticks  the ticks ({@code null} not permitted).\n     * @param dataArea  the data area.\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.getLegendItem": "/**\n     * Return the legend for the given series.\n     *\n     * @param series  the series index.\n     *\n     * @return The legend item.\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.getToolTipGenerator": "/**\n     * Returns the tooltip generator for the specified series and item.\n     * \n     * @param series  the series index.\n     * @param item  the item index.\n     * \n     * @return The tooltip generator (possibly {@code null}).\n     * \n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.getSeriesToolTipGenerator": "/**\n     * Returns the tool tip generator for the specified series.\n     * \n     * @return The tooltip generator (possibly {@code null}).\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.setSeriesToolTipGenerator": "/**\n     * Sets the tooltip generator for the specified series.\n     * \n     * @param series  the series index.\n     * @param generator  the tool tip generator ({@code null} permitted).\n     * \n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.getBaseToolTipGenerator": "/**\n     * Returns the default tool tip generator.\n     * \n     * @return The default tool tip generator (possibly {@code null}).\n     * \n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.setBaseToolTipGenerator": "/**\n     * Sets the default tool tip generator and sends a \n     * {@link RendererChangeEvent} to all registered listeners.\n     * \n     * @param generator  the generator ({@code null} permitted).\n     * \n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.getURLGenerator": "/**\n     * Returns the URL generator.\n     * \n     * @return The URL generator (possibly {@code null}).\n     * \n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.setURLGenerator": "/**\n     * Sets the URL generator.\n     * \n     * @param urlGenerator  the generator ({@code null} permitted)\n     * \n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.getLegendItemToolTipGenerator": "/**\n     * Returns the legend item tool tip generator.\n     *\n     * @return The tool tip generator (possibly {@code null}).\n     *\n     * @see #setLegendItemToolTipGenerator(XYSeriesLabelGenerator)\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.setLegendItemToolTipGenerator": "/**\n     * Sets the legend item tool tip generator and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getLegendItemToolTipGenerator()\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.getLegendItemURLGenerator": "/**\n     * Returns the legend item URL generator.\n     *\n     * @return The URL generator (possibly {@code null}).\n     *\n     * @see #setLegendItemURLGenerator(XYSeriesLabelGenerator)\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.setLegendItemURLGenerator": "/**\n     * Sets the legend item URL generator and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getLegendItemURLGenerator()\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} not permitted).\n     *\n     * @return {@code true} if this renderer is equal to {@code obj},\n     *     and {@code false} otherwise.\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.clone": "/**\n     * Returns a clone of the renderer.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if the renderer cannot be cloned.\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.renderer.DefaultPolarItemRenderer.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.renderer.RendererUtils.findLiveItemsLowerBound": "/**\n     * Finds the lower index of the range of live items in the specified data\n     * series.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series index.\n     * @param xLow  the lowest x-value in the live range.\n     * @param xHigh  the highest x-value in the live range.\n     *\n     * @return The index of the required item.\n     *\n     * @since 1.0.6\n     *\n     * @see #findLiveItemsUpperBound(XYDataset, int, double, double)\n     */\n",
"org.jfree.chart.renderer.RendererUtils.findLiveItemsUpperBound": "/**\n     * Finds the upper index of the range of live items in the specified data\n     * series.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series index.\n     * @param xLow  the lowest x-value in the live range.\n     * @param xHigh  the highest x-value in the live range.\n     *\n     * @return The index of the required item.\n     *\n     * @since 1.0.6\n     *\n     * @see #findLiveItemsLowerBound(XYDataset, int, double, double)\n     */\n",
"org.jfree.chart.renderer.RendererUtils.findLiveItems": "/**\n     * Finds a range of item indices that is guaranteed to contain all the\n     * x-values from x0 to x1 (inclusive).\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series index.\n     * @param xLow  the lower bound of the x-value range.\n     * @param xHigh  the upper bound of the x-value range.\n     *\n     * @return The indices of the boundary items.\n     */\n",
"org.jfree.chart.renderer.AreaRendererEndType.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.chart.renderer.AreaRendererEndType.equals": "/**\n     * Returns {@code true} if this object is equal to the specified\n     * object, and {@code false} otherwise.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.AreaRendererEndType.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     *\n     * @return The object.\n     *\n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.chart.renderer.PaintScale.getLowerBound": "/**\n     * Returns the lower bound for the scale.\n     *\n     * @return The lower bound.\n     *\n     * @see #getUpperBound()\n     */\n",
"org.jfree.chart.renderer.PaintScale.getUpperBound": "/**\n     * Returns the upper bound for the scale.\n     *\n     * @return The upper bound.\n     *\n     * @see #getLowerBound()\n     */\n",
"org.jfree.chart.renderer.PaintScale.getPaint": "/**\n     * Returns a {@code Paint} instance for the specified value.\n     *\n     * @param value  the value.\n     *\n     * @return A {@code Paint} instance (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.WindItemRenderer.drawItem": "/**\n     * Draws the visual representation of a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param plotArea  the area within which the plot is being drawn.\n     * @param info  optional information collection.\n     * @param plot  the plot (can be used to obtain standard color\n     *              information etc).\n     * @param domainAxis  the horizontal axis.\n     * @param rangeAxis  the vertical axis.\n     * @param dataset  the dataset.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param crosshairState  crosshair information for the plot\n     *                        ({@code null} permitted).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.xy.WindItemRenderer.clone": "/**\n     * Returns a clone of the renderer.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the renderer cannot be cloned.\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYBarRenderer.getRenderAsPercentages": "/**\n     * Returns {@code true} if the renderer displays each item value as\n     * a percentage (so that the stacked bars add to 100%), and\n     * {@code false} otherwise.\n     *\n     * @return A boolean.\n     *\n     * @see #setRenderAsPercentages(boolean)\n     *\n     * @since 1.0.5\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYBarRenderer.setRenderAsPercentages": "/**\n     * Sets the flag that controls whether the renderer displays each item\n     * value as a percentage (so that the stacked bars add to 100%), and sends\n     * a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param asPercentages  the flag.\n     *\n     * @see #getRenderAsPercentages()\n     *\n     * @since 1.0.5\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYBarRenderer.getPassCount": "/**\n     * Returns {@code 3} to indicate that this renderer requires three\n     * passes for drawing (shadows are drawn in the first pass, the bars in the\n     * second, and item labels are drawn in the third pass so that\n     * they always appear in front of all the bars).\n     *\n     * @return {@code 2}.\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYBarRenderer.initialise": "/**\n     * Initialises the renderer and returns a state object that should be\n     * passed to all subsequent calls to the drawItem() method. Here there is\n     * nothing to do.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area inside the axes.\n     * @param plot  the plot.\n     * @param data  the data.\n     * @param info  an optional info collection object to return data back to\n     *              the caller.\n     *\n     * @return A state object.\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYBarRenderer.findRangeBounds": "/**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range ({@code null} if the dataset is {@code null}\n     *         or empty).\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYBarRenderer.drawItem": "/**\n     * Draws the visual representation of a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area within which the plot is being drawn.\n     * @param info  collects information about the drawing.\n     * @param plot  the plot (can be used to obtain standard color information\n     *              etc).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param crosshairState  crosshair information for the plot\n     *                        ({@code null} permitted).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYBarRenderer.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYBarRenderer.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.renderer.xy.XYShapeRenderer.getPaintScale": "/**\n     * Returns the paint scale used by the renderer.\n     *\n     * @return The paint scale (never {@code null}).\n     *\n     * @see #setPaintScale(PaintScale)\n     */\n",
"org.jfree.chart.renderer.xy.XYShapeRenderer.setPaintScale": "/**\n     * Sets the paint scale used by the renderer and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param scale  the scale ({@code null} not permitted).\n     *\n     * @see #getPaintScale()\n     */\n",
"org.jfree.chart.renderer.xy.XYShapeRenderer.getDrawOutlines": "/**\n     * Returns {@code true} if outlines should be drawn for shapes, and\n     * {@code false} otherwise.\n     *\n     * @return A boolean.\n     *\n     * @see #setDrawOutlines(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYShapeRenderer.setDrawOutlines": "/**\n     * Sets the flag that controls whether outlines are drawn for\n     * shapes, and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     * <P>\n     * In some cases, shapes look better if they do NOT have an outline, but\n     * this flag allows you to set your own preference.\n     *\n     * @param flag  the flag.\n     *\n     * @see #getDrawOutlines()\n     */\n",
"org.jfree.chart.renderer.xy.XYShapeRenderer.getUseFillPaint": "/**\n     * Returns {@code true} if the renderer should use the fill paint\n     * setting to fill shapes, and {@code false} if it should just\n     * use the regular paint.\n     * <p>\n     * Refer to {@code XYLineAndShapeRendererDemo2.java} to see the\n     * effect of this flag.\n     *\n     * @return A boolean.\n     *\n     * @see #setUseFillPaint(boolean)\n     * @see #getUseOutlinePaint()\n     */\n",
"org.jfree.chart.renderer.xy.XYShapeRenderer.setUseFillPaint": "/**\n     * Sets the flag that controls whether the fill paint is used to fill\n     * shapes, and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #getUseFillPaint()\n     */\n",
"org.jfree.chart.renderer.xy.XYShapeRenderer.getUseOutlinePaint": "/**\n     * Returns the flag that controls whether the outline paint is used for\n     * shape outlines.  If not, the regular series paint is used.\n     *\n     * @return A boolean.\n     *\n     * @see #setUseOutlinePaint(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYShapeRenderer.setUseOutlinePaint": "/**\n     * Sets the flag that controls whether the outline paint is used for shape\n     * outlines, and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param use  the flag.\n     *\n     * @see #getUseOutlinePaint()\n     */\n",
"org.jfree.chart.renderer.xy.XYShapeRenderer.isGuideLinesVisible": "/**\n     * Returns a flag that controls whether or not guide lines are drawn for\n     * each data item (the lines are horizontal and vertical \"crosshairs\"\n     * linking the data point to the axes).\n     *\n     * @return A boolean.\n     *\n     * @see #setGuideLinesVisible(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYShapeRenderer.setGuideLinesVisible": "/**\n     * Sets the flag that controls whether or not guide lines are drawn for\n     * each data item and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param visible  the new flag value.\n     *\n     * @see #isGuideLinesVisible()\n     */\n",
"org.jfree.chart.renderer.xy.XYShapeRenderer.getGuideLinePaint": "/**\n     * Returns the paint used to draw the guide lines.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setGuideLinePaint(Paint)\n     */\n",
"org.jfree.chart.renderer.xy.XYShapeRenderer.setGuideLinePaint": "/**\n     * Sets the paint used to draw the guide lines and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getGuideLinePaint()\n     */\n",
"org.jfree.chart.renderer.xy.XYShapeRenderer.getGuideLineStroke": "/**\n     * Returns the stroke used to draw the guide lines.\n     *\n     * @return The stroke.\n     *\n     * @see #setGuideLineStroke(Stroke)\n     */\n",
"org.jfree.chart.renderer.xy.XYShapeRenderer.setGuideLineStroke": "/**\n     * Sets the stroke used to draw the guide lines and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getGuideLineStroke()\n     */\n",
"org.jfree.chart.renderer.xy.XYShapeRenderer.findDomainBounds": "/**\n     * Returns the lower and upper bounds (range) of the x-values in the\n     * specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range ({@code null} if the dataset is {@code null}\n     *         or empty).\n     */\n",
"org.jfree.chart.renderer.xy.XYShapeRenderer.findRangeBounds": "/**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range ({@code null} if the dataset is {@code null}\n     *         or empty).\n     */\n",
"org.jfree.chart.renderer.xy.XYShapeRenderer.findZBounds": "/**\n     * Return the range of z-values in the specified dataset.\n     *  \n     * @param dataset  the dataset ({@code null} permitted).\n     * \n     * @return The range ({@code null} if the dataset is {@code null}\n     *         or empty).\n     */\n",
"org.jfree.chart.renderer.xy.XYShapeRenderer.getPassCount": "/**\n     * Returns the number of passes required by this renderer.\n     *\n     * @return {@code 2}.\n     */\n",
"org.jfree.chart.renderer.xy.XYShapeRenderer.drawItem": "/**\n     * Draws the block representing the specified item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the state.\n     * @param dataArea  the data area.\n     * @param info  the plot rendering info.\n     * @param plot  the plot.\n     * @param domainAxis  the x-axis.\n     * @param rangeAxis  the y-axis.\n     * @param dataset  the dataset.\n     * @param series  the series index.\n     * @param item  the item index.\n     * @param crosshairState  the crosshair state.\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.xy.XYShapeRenderer.getPaint": "/**\n     * Get the paint for a given series and item from a dataset.\n     *\n     * @param dataset  the dataset.\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The paint.\n     */\n",
"org.jfree.chart.renderer.xy.XYShapeRenderer.equals": "/**\n     * Tests this instance for equality with an arbitrary object.  This method\n     * returns {@code true} if and only if:\n     * <ul>\n     * <li>{@code obj} is an instance of {@code XYShapeRenderer} (not\n     *     {@code null});</li>\n     * <li>{@code obj} has the same field values as this\n     *     {@code XYShapeRenderer};</li>\n     * </ul>\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.XYShapeRenderer.clone": "/**\n     * Returns a clone of this renderer.\n     *\n     * @return A clone of this renderer.\n     *\n     * @throws CloneNotSupportedException if there is a problem creating the\n     *     clone.\n     */\n",
"org.jfree.chart.renderer.xy.XYShapeRenderer.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.renderer.xy.XYShapeRenderer.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.getBaseShapesVisible": "/**\n     * Returns true if shapes are being plotted by the renderer.\n     *\n     * @return {@code true} if shapes are being plotted by the renderer.\n     *\n     * @see #setBaseShapesVisible\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.setBaseShapesVisible": "/**\n     * Sets the flag that controls whether or not a shape is plotted at each\n     * data point.\n     *\n     * @param flag  the flag.\n     *\n     * @see #getBaseShapesVisible\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.getItemShapeFilled": "/**\n     * Returns the flag used to control whether or not the shape for an item is\n     * filled.\n     * <p>\n     * The default implementation passes control to the\n     * {@code getSeriesShapesFilled()} method.  You can override this method\n     * if you require different behaviour.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return A boolean.\n     *\n     * @see #getSeriesShapesFilled(int)\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.getSeriesShapesFilled": "/**\n     * Returns the flag used to control whether or not the shapes for a series\n     * are filled.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.setSeriesShapesFilled": "/**\n     * Sets the 'shapes filled' flag for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param flag  the flag.\n     *\n     * @see #getSeriesShapesFilled(int)\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.getBaseShapesFilled": "/**\n     * Returns the base 'shape filled' attribute.\n     *\n     * @return The base flag.\n     *\n     * @see #setBaseShapesFilled(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.setBaseShapesFilled": "/**\n     * Sets the base 'shapes filled' flag and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #getBaseShapesFilled()\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.getPlotLines": "/**\n     * Returns true if lines are being plotted by the renderer.\n     *\n     * @return {@code true} if lines are being plotted by the renderer.\n     *\n     * @see #setPlotLines(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.setPlotLines": "/**\n     * Sets the flag that controls whether or not a line is plotted between\n     * each data point and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #getPlotLines()\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.getGapThresholdType": "/**\n     * Returns the gap threshold type (relative or absolute).\n     *\n     * @return The type.\n     *\n     * @see #setGapThresholdType(UnitType)\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.setGapThresholdType": "/**\n     * Sets the gap threshold type and sends a {@link RendererChangeEvent} to\n     * all registered listeners.\n     *\n     * @param thresholdType  the type ({@code null} not permitted).\n     *\n     * @see #getGapThresholdType()\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.getGapThreshold": "/**\n     * Returns the gap threshold for discontinuous lines.\n     *\n     * @return The gap threshold.\n     *\n     * @see #setGapThreshold(double)\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.setGapThreshold": "/**\n     * Sets the gap threshold for discontinuous lines and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param t  the threshold.\n     *\n     * @see #getGapThreshold()\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.getPlotImages": "/**\n     * Returns true if images are being plotted by the renderer.\n     *\n     * @return {@code true} if images are being plotted by the renderer.\n     *\n     * @see #setPlotImages(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.setPlotImages": "/**\n     * Sets the flag that controls whether or not an image is drawn at each\n     * data point and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #getPlotImages()\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.getPlotDiscontinuous": "/**\n     * Returns a flag that controls whether or not the renderer shows\n     * discontinuous lines.\n     *\n     * @return {@code true} if lines should be discontinuous.\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.setPlotDiscontinuous": "/**\n     * Sets the flag that controls whether or not the renderer shows\n     * discontinuous lines, and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param flag  the new flag value.\n     *\n     * @since 1.0.5\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.getDrawSeriesLineAsPath": "/**\n     * Returns a flag that controls whether or not each series is drawn as a\n     * single path.\n     *\n     * @return A boolean.\n     *\n     * @see #setDrawSeriesLineAsPath(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.setDrawSeriesLineAsPath": "/**\n     * Sets the flag that controls whether or not each series is drawn as a\n     * single path.\n     *\n     * @param flag  the flag.\n     *\n     * @see #getDrawSeriesLineAsPath()\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.getLegendLine": "/**\n     * Returns the shape used to represent a line in the legend.\n     *\n     * @return The legend line (never {@code null}).\n     *\n     * @see #setLegendLine(Shape)\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.setLegendLine": "/**\n     * Sets the shape used as a line in each legend item and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param line  the line ({@code null} not permitted).\n     *\n     * @see #getLegendLine()\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.getLegendItem": "/**\n     * Returns a legend item for a series.\n     *\n     * @param datasetIndex  the dataset index (zero-based).\n     * @param series  the series index (zero-based).\n     *\n     * @return A legend item for the series.\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.isLastPointGood": "/**\n         * Returns a flag that indicates if the last point drawn (in the\n         * current series) was 'good' (non-null).\n         *\n         * @return A boolean.\n         */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.setLastPointGood": "/**\n         * Sets a flag that indicates if the last point drawn (in the current\n         * series) was 'good' (non-null).\n         *\n         * @param good  the flag.\n         */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.getSeriesIndex": "/**\n         * Returns the series index for the current path.\n         *\n         * @return The series index for the current path.\n         */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.setSeriesIndex": "/**\n         * Sets the series index for the current path.\n         *\n         * @param index  the index.\n         */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.initialise": "/**\n     * Initialises the renderer.\n     * <P>\n     * This method will be called before the first item is rendered, giving the\n     * renderer an opportunity to initialise any state information it wants to\n     * maintain. The renderer can do nothing if it chooses.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area inside the axes.\n     * @param plot  the plot.\n     * @param data  the data.\n     * @param info  an optional info collection object to return data back to\n     *              the caller.\n     *\n     * @return The renderer state.\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.drawItem": "/**\n     * Draws the visual representation of a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area within which the data is being drawn.\n     * @param info  collects information about the drawing.\n     * @param plot  the plot (can be used to obtain standard color information\n     *              etc).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param crosshairState  crosshair information for the plot\n     *                        ({@code null} permitted).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.equals": "/**\n     * Tests this renderer for equality with another object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.clone": "/**\n     * Returns a clone of the renderer.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the renderer cannot be cloned.\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.getImage": "/**\n     * Returns the image used to draw a single data item.\n     *\n     * @param plot  the plot (can be used to obtain standard color information\n     *              etc).\n     * @param series  the series index.\n     * @param item  the item index.\n     * @param x  the x value of the item.\n     * @param y  the y value of the item.\n     *\n     * @return The image.\n     *\n     * @see #getPlotImages()\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.getImageHotspot": "/**\n     * Returns the hotspot of the image used to draw a single data item.\n     * The hotspot is the point relative to the top left of the image\n     * that should indicate the data item. The default is the center of the\n     * image.\n     *\n     * @param plot  the plot (can be used to obtain standard color information\n     *              etc).\n     * @param image  the image (can be used to get size information about the\n     *               image)\n     * @param series  the series index\n     * @param item  the item index\n     * @param x  the x value of the item\n     * @param y  the y value of the item\n     *\n     * @return The hotspot used to draw the data item.\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYItemRenderer.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultBarPainter": "/**\n     * Returns the default bar painter.\n     *\n     * @return The default bar painter.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.setDefaultBarPainter": "/**\n     * Sets the default bar painter.\n     *\n     * @param painter  the painter ({@code null} not permitted).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultShadowsVisible": "/**\n     * Returns the default value for the {@code shadowsVisible} flag.\n     *\n     * @return A boolean.\n     *\n     * @see #setDefaultShadowsVisible(boolean)\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.setDefaultShadowsVisible": "/**\n     * Sets the default value for the shadows visible flag.\n     *\n     * @param visible  the new value for the default.\n     *\n     * @see #getDefaultShadowsVisible()\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.getG2Base": "/**\n         * Returns the base (range) value in Java 2D space.\n         *\n         * @return The base value.\n         */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.setG2Base": "/**\n         * Sets the range axis base in Java2D space.\n         *\n         * @param value  the value.\n         */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.getBase": "/**\n     * Returns the base value for the bars.\n     *\n     * @return The base value for the bars.\n     *\n     * @see #setBase(double)\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.setBase": "/**\n     * Sets the base value for the bars and sends a {@link RendererChangeEvent}\n     * to all registered listeners.  The base value is not used if the dataset's\n     * y-interval is being used to determine the bar length.\n     *\n     * @param base  the new base value.\n     *\n     * @see #getBase()\n     * @see #getUseYInterval()\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.getUseYInterval": "/**\n     * Returns a flag that determines whether the y-interval from the dataset is\n     * used to calculate the length of each bar.\n     *\n     * @return A boolean.\n     *\n     * @see #setUseYInterval(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.setUseYInterval": "/**\n     * Sets the flag that determines whether the y-interval from the dataset is\n     * used to calculate the length of each bar, and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param use  the flag.\n     *\n     * @see #getUseYInterval()\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.getMargin": "/**\n     * Returns the margin which is a percentage amount by which the bars are\n     * trimmed.\n     *\n     * @return The margin.\n     *\n     * @see #setMargin(double)\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.setMargin": "/**\n     * Sets the percentage amount by which the bars are trimmed and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param margin  the new margin.\n     *\n     * @see #getMargin()\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.isDrawBarOutline": "/**\n     * Returns a flag that controls whether or not bar outlines are drawn.\n     *\n     * @return A boolean.\n     *\n     * @see #setDrawBarOutline(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.setDrawBarOutline": "/**\n     * Sets the flag that controls whether or not bar outlines are drawn and\n     * sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param draw  the flag.\n     *\n     * @see #isDrawBarOutline()\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.getGradientPaintTransformer": "/**\n     * Returns the gradient paint transformer (an object used to transform\n     * gradient paint objects to fit each bar).\n     *\n     * @return A transformer ({@code null} possible).\n     *\n     * @see #setGradientPaintTransformer(GradientPaintTransformer)\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.setGradientPaintTransformer": "/**\n     * Sets the gradient paint transformer and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param transformer  the transformer ({@code null} permitted).\n     *\n     * @see #getGradientPaintTransformer()\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.getLegendBar": "/**\n     * Returns the shape used to represent bars in each legend item.\n     *\n     * @return The shape used to represent bars in each legend item (never\n     *         {@code null}).\n     *\n     * @see #setLegendBar(Shape)\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.setLegendBar": "/**\n     * Sets the shape used to represent bars in each legend item and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param bar  the bar shape ({@code null} not permitted).\n     *\n     * @see #getLegendBar()\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.getPositiveItemLabelPositionFallback": "/**\n     * Returns the fallback position for positive item labels that don't fit\n     * within a bar.\n     *\n     * @return The fallback position ({@code null} possible).\n     *\n     * @see #setPositiveItemLabelPositionFallback(ItemLabelPosition)\n     * @since 1.0.2\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.setPositiveItemLabelPositionFallback": "/**\n     * Sets the fallback position for positive item labels that don't fit\n     * within a bar, and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param position  the position ({@code null} permitted).\n     *\n     * @see #getPositiveItemLabelPositionFallback()\n     * @since 1.0.2\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.getNegativeItemLabelPositionFallback": "/**\n     * Returns the fallback position for negative item labels that don't fit\n     * within a bar.\n     *\n     * @return The fallback position ({@code null} possible).\n     *\n     * @see #setNegativeItemLabelPositionFallback(ItemLabelPosition)\n     * @since 1.0.2\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.setNegativeItemLabelPositionFallback": "/**\n     * Sets the fallback position for negative item labels that don't fit\n     * within a bar, and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param position  the position ({@code null} permitted).\n     *\n     * @see #getNegativeItemLabelPositionFallback()\n     * @since 1.0.2\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.getBarPainter": "/**\n     * Returns the bar painter.\n     *\n     * @return The bar painter (never {@code null}).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.setBarPainter": "/**\n     * Sets the bar painter and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param painter  the painter ({@code null} not permitted).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.getShadowsVisible": "/**\n     * Returns the flag that controls whether or not shadows are drawn for\n     * the bars.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.setShadowVisible": "/**\n     * Sets the flag that controls whether or not the renderer\n     * draws shadows for the bars, and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param visible  the new flag value.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.getShadowXOffset": "/**\n     * Returns the shadow x-offset.\n     *\n     * @return The shadow x-offset.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.setShadowXOffset": "/**\n     * Sets the x-offset for the bar shadow and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param offset  the offset.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.getShadowYOffset": "/**\n     * Returns the shadow y-offset.\n     *\n     * @return The shadow y-offset.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.setShadowYOffset": "/**\n     * Sets the y-offset for the bar shadow and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param offset  the offset.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.getBarAlignmentFactor": "/**\n     * Returns the bar alignment factor. \n     * \n     * @return The bar alignment factor.\n     * \n     * @since 1.0.13\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.setBarAlignmentFactor": "/**\n     * Sets the bar alignment factor and sends a {@link RendererChangeEvent}\n     * to all registered listeners.  If the alignment factor is outside the\n     * range 0.0 to 1.0, no alignment will be performed by the renderer.\n     *\n     * @param factor  the factor.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.initialise": "/**\n     * Initialises the renderer and returns a state object that should be\n     * passed to all subsequent calls to the drawItem() method.  Here we\n     * calculate the Java2D y-coordinate for zero, since all the bars have\n     * their bases fixed at zero.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area inside the axes.\n     * @param plot  the plot.\n     * @param dataset  the data.\n     * @param info  an optional info collection object to return data back to\n     *              the caller.\n     *\n     * @return A state object.\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.getLegendItem": "/**\n     * Returns a default legend item for the specified series.  Subclasses\n     * should override this method to generate customised items.\n     *\n     * @param datasetIndex  the dataset index (zero-based).\n     * @param series  the series index (zero-based).\n     *\n     * @return A legend item for the series.\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.drawItem": "/**\n     * Draws the visual representation of a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area within which the plot is being drawn.\n     * @param info  collects information about the drawing.\n     * @param plot  the plot (can be used to obtain standard color\n     *              information etc).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param crosshairState  crosshair information for the plot\n     *                        ({@code null} permitted).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.drawItemLabel": "/**\n     * Draws an item label.  This method is provided as an alternative to\n     * {@link #drawItemLabel(Graphics2D, PlotOrientation, XYDataset, int, int,\n     * double, double, boolean)} so that the bar can be used to calculate the\n     * label anchor point.\n     *\n     * @param g2  the graphics device.\n     * @param dataset  the dataset.\n     * @param series  the series index.\n     * @param item  the item index.\n     * @param plot  the plot.\n     * @param generator  the label generator ({@code null} permitted, in\n     *         which case the method does nothing, just returns).\n     * @param bar  the bar.\n     * @param negative  a flag indicating a negative value.\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.calculateLabelAnchorPoint": "/**\n     * Calculates the item label anchor point.\n     *\n     * @param anchor  the anchor.\n     * @param bar  the bar.\n     * @param orientation  the plot orientation.\n     *\n     * @return The anchor point.\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.isInternalAnchor": "/**\n     * Returns {@code true} if the specified anchor point is inside a bar.\n     *\n     * @param anchor  the anchor point.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.findDomainBounds": "/**\n     * Returns the lower and upper bounds (range) of the x-values in the\n     * specified dataset.  Since this renderer uses the x-interval in the\n     * dataset, this is taken into account for the range.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range ({@code null} if the dataset is\n     *         {@code null} or empty).\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.findRangeBounds": "/**\n     * Returns the lower and upper bounds (range) of the y-values in the\n     * specified dataset.  If the renderer is plotting the y-interval from the\n     * dataset, this is taken into account for the range.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range ({@code null} if the dataset is\n     *         {@code null} or empty).\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.clone": "/**\n     * Returns a clone of the renderer.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the renderer cannot be cloned.\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object to test against ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.renderer.xy.XYBarRenderer.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.renderer.xy.SamplingXYLineRenderer.getPassCount": "/**\n     * Returns the number of passes through the data that the renderer requires\n     * in order to draw the chart.  Most charts will require a single pass, but\n     * some require two passes.\n     *\n     * @return The pass count.\n     */\n",
"org.jfree.chart.renderer.xy.SamplingXYLineRenderer.startSeriesPass": "/**\n         * This method is called by the {@link XYPlot} at the start of each\n         * series pass.  We reset the state for the current series.\n         *\n         * @param dataset  the dataset.\n         * @param series  the series index.\n         * @param firstItem  the first item index for this pass.\n         * @param lastItem  the last item index for this pass.\n         * @param pass  the current pass index.\n         * @param passCount  the number of passes.\n         */\n",
"org.jfree.chart.renderer.xy.SamplingXYLineRenderer.initialise": "/**\n     * Initialises the renderer.\n     * <P>\n     * This method will be called before the first item is rendered, giving the\n     * renderer an opportunity to initialise any state information it wants to\n     * maintain.  The renderer can do nothing if it chooses.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area inside the axes.\n     * @param plot  the plot.\n     * @param data  the data.\n     * @param info  an optional info collection object to return data back to\n     *              the caller.\n     *\n     * @return The renderer state.\n     */\n",
"org.jfree.chart.renderer.xy.SamplingXYLineRenderer.drawItem": "/**\n     * Draws the visual representation of a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area within which the data is being drawn.\n     * @param info  collects information about the drawing.\n     * @param plot  the plot (can be used to obtain standard color\n     *              information etc).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param crosshairState  crosshair information for the plot\n     *                        ({@code null} permitted).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.xy.SamplingXYLineRenderer.clone": "/**\n     * Returns a clone of the renderer.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if the clone cannot be created.\n     */\n",
"org.jfree.chart.renderer.xy.SamplingXYLineRenderer.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.renderer.xy.SamplingXYLineRenderer.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.renderer.xy.SamplingXYLineRenderer.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer2.isOutline": "/**\n     * Returns a flag that controls whether or not outlines of the areas are\n     * drawn.\n     *\n     * @return The flag.\n     *\n     * @see #setOutline(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer2.setOutline": "/**\n     * Sets a flag that controls whether or not outlines of the areas are\n     * drawn, and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param show  the flag.\n     *\n     * @see #isOutline()\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer2.getLegendArea": "/**\n     * Returns the shape used to represent an area in the legend.\n     *\n     * @return The legend area (never {@code null}).\n     *\n     * @see #setLegendArea(Shape)\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer2.setLegendArea": "/**\n     * Sets the shape used as an area in each legend item and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param area  the area ({@code null} not permitted).\n     *\n     * @see #getLegendArea()\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer2.getLegendItem": "/**\n     * Returns a default legend item for the specified series.  Subclasses\n     * should override this method to generate customised items.\n     *\n     * @param datasetIndex  the dataset index (zero-based).\n     * @param series  the series index (zero-based).\n     *\n     * @return A legend item for the series.\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer2.drawItem": "/**\n     * Draws the visual representation of a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area within which the data is being drawn.\n     * @param info  collects information about the drawing.\n     * @param plot  the plot (can be used to obtain standard color\n     *              information etc).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param crosshairState  crosshair information for the plot\n     *                        ({@code null} permitted).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer2.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} not permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer2.clone": "/**\n     * Returns a clone of the renderer.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the renderer cannot be cloned.\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer2.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer2.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRendererState.getProcessVisibleItemsOnly": "/**\n     * Returns the flag that controls whether the plot passes all data\n     * items in each series to the renderer, or just the visible items.  The\n     * default value is {@code true}.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.6\n     *\n     * @see #setProcessVisibleItemsOnly(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRendererState.setProcessVisibleItemsOnly": "/**\n     * Sets the flag that controls whether the plot passes all data\n     * items in each series to the renderer, or just the visible items.\n     *\n     * @param flag  the new flag value.\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRendererState.getFirstItemIndex": "/**\n     * Returns the first item index (this is updated with each call to\n     * {@link #startSeriesPass(XYDataset, int, int, int, int, int)}.\n     *\n     * @return The first item index.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRendererState.getLastItemIndex": "/**\n     * Returns the last item index (this is updated with each call to\n     * {@link #startSeriesPass(XYDataset, int, int, int, int, int)}.\n     *\n     * @return The last item index.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRendererState.startSeriesPass": "/**\n     * This method is called by the {@link XYPlot} when it starts a pass\n     * through the (visible) items in a series.  The default implementation\n     * records the first and last item indices - override this method to\n     * implement additional specialised behaviour.\n     *\n     * @param dataset  the dataset.\n     * @param series  the series index.\n     * @param firstItem  the index of the first item in the series.\n     * @param lastItem  the index of the last item in the series.\n     * @param pass  the pass index.\n     * @param passCount  the number of passes.\n     *\n     * @see #endSeriesPass(XYDataset, int, int, int, int, int)\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRendererState.endSeriesPass": "/**\n     * This method is called by the {@link XYPlot} when it ends a pass\n     * through the (visible) items in a series.  The default implementation\n     * does nothing, but you can override this method to implement specialised\n     * behaviour.\n     *\n     * @param dataset  the dataset.\n     * @param series  the series index.\n     * @param firstItem  the index of the first item in the series.\n     * @param lastItem  the index of the last item in the series.\n     * @param pass  the pass index.\n     * @param passCount  the number of passes.\n     *\n     * @see #startSeriesPass(XYDataset, int, int, int, int, int)\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.xy.GradientXYBarPainter.paintBar": "/**\n     * Paints a single bar instance.\n     *\n     * @param g2  the graphics target.\n     * @param renderer  the renderer.\n     * @param row  the row index.\n     * @param column  the column index.\n     * @param bar  the bar\n     * @param base  indicates which side of the rectangle is the base of the\n     *              bar.\n     */\n",
"org.jfree.chart.renderer.xy.GradientXYBarPainter.paintBarShadow": "/**\n     * Paints a single bar instance.\n     *\n     * @param g2  the graphics target.\n     * @param renderer  the renderer.\n     * @param row  the row index.\n     * @param column  the column index.\n     * @param bar  the bar\n     * @param base  indicates which side of the rectangle is the base of the\n     *              bar.\n     * @param pegShadow  peg the shadow to the base of the bar?\n     */\n",
"org.jfree.chart.renderer.xy.GradientXYBarPainter.createShadow": "/**\n     * Creates a shadow for the bar.\n     *\n     * @param bar  the bar shape.\n     * @param xOffset  the x-offset for the shadow.\n     * @param yOffset  the y-offset for the shadow.\n     * @param base  the edge that is the base of the bar.\n     * @param pegShadow  peg the shadow to the base?\n     *\n     * @return A rectangle for the shadow.\n     */\n",
"org.jfree.chart.renderer.xy.GradientXYBarPainter.splitVerticalBar": "/**\n     * Splits a bar into subregions (elsewhere, these subregions will have\n     * different gradients applied to them).\n     *\n     * @param bar  the bar shape.\n     * @param a  the first division.\n     * @param b  the second division.\n     * @param c  the third division.\n     *\n     * @return An array containing four subregions.\n     */\n",
"org.jfree.chart.renderer.xy.GradientXYBarPainter.splitHorizontalBar": "/**\n     * Splits a bar into subregions (elsewhere, these subregions will have\n     * different gradients applied to them).\n     *\n     * @param bar  the bar shape.\n     * @param a  the first division.\n     * @param b  the second division.\n     * @param c  the third division.\n     *\n     * @return An array containing four subregions.\n     */\n",
"org.jfree.chart.renderer.xy.GradientXYBarPainter.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the obj ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.GradientXYBarPainter.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.renderer.xy.XYBarPainter.paintBar": "/**\n     * Paints a single bar on behalf of a renderer.\n     *\n     * @param g2  the graphics target.\n     * @param renderer  the renderer.\n     * @param row  the row index for the item.\n     * @param column  the column index for the item.\n     * @param bar  the bounds for the bar.\n     * @param base  the base of the bar.\n     */\n",
"org.jfree.chart.renderer.xy.XYBarPainter.paintBarShadow": "/**\n     * Paints the shadow for a single bar on behalf of a renderer.\n     *\n     * @param g2  the graphics target.\n     * @param renderer  the renderer.\n     * @param row  the row index for the item.\n     * @param column  the column index for the item.\n     * @param bar  the bounds for the bar.\n     * @param base  the base of the bar.\n     * @param pegShadow  peg the shadow to the base of the bar?\n     */\n",
"org.jfree.chart.renderer.xy.CyclicXYItemRenderer.drawItem": "/**\n     * Draws the visual representation of a single data item.\n     * When using cyclic axis, do not draw a line from right to left when\n     * cycling as would a standard XY item renderer, but instead draw a line\n     * from the previous point to the cycle bound in the last cycle, and a line\n     * from the cycle bound to current point in the current cycle.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the data area.\n     * @param info  the plot rendering info.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param series  the series index.\n     * @param item  the item index.\n     * @param crosshairState  crosshair information for the plot\n     *                        ({@code null} permitted).\n     * @param pass  the current pass index.\n     */\n",
"org.jfree.chart.renderer.xy.CyclicXYItemRenderer.getDomainOrder": "/**\n         * Returns the order of the domain (X) values.\n         *\n         * @return The domain order.\n         */\n",
"org.jfree.chart.renderer.xy.CyclicXYItemRenderer.getItemCount": "/**\n         * Returns the number of items for the given series.\n         *\n         * @param series  the series index (zero-based).\n         *\n         * @return The item count.\n         */\n",
"org.jfree.chart.renderer.xy.CyclicXYItemRenderer.getX": "/**\n         * Returns the x-value.\n         *\n         * @param series  the series index (zero-based).\n         * @param item  the item index (zero-based).\n         *\n         * @return The x-value.\n         */\n",
"org.jfree.chart.renderer.xy.CyclicXYItemRenderer.getXValue": "/**\n         * Returns the x-value (as a double primitive) for an item within a\n         * series.\n         *\n         * @param series  the series (zero-based index).\n         * @param item  the item (zero-based index).\n         *\n         * @return The x-value.\n         */\n",
"org.jfree.chart.renderer.xy.CyclicXYItemRenderer.getY": "/**\n         * Returns the y-value.\n         *\n         * @param series  the series index (zero-based).\n         * @param item  the item index (zero-based).\n         *\n         * @return The y-value.\n         */\n",
"org.jfree.chart.renderer.xy.CyclicXYItemRenderer.getYValue": "/**\n         * Returns the y-value (as a double primitive) for an item within a\n         * series.\n         *\n         * @param series  the series (zero-based index).\n         * @param item  the item (zero-based index).\n         *\n         * @return The y-value.\n         */\n",
"org.jfree.chart.renderer.xy.CyclicXYItemRenderer.getSeriesCount": "/**\n         * Returns the number of series in the dataset.\n         *\n         * @return The series count.\n         */\n",
"org.jfree.chart.renderer.xy.CyclicXYItemRenderer.getSeriesKey": "/**\n         * Returns the name of the given series.\n         *\n         * @param series  the series index (zero-based).\n         *\n         * @return The series name.\n         */\n",
"org.jfree.chart.renderer.xy.CyclicXYItemRenderer.indexOf": "/**\n         * Returns the index of the named series, or -1.\n         *\n         * @param seriesName  the series name.\n         *\n         * @return The index.\n         */\n",
"org.jfree.chart.renderer.xy.CyclicXYItemRenderer.addChangeListener": "/**\n         * Does nothing.\n         *\n         * @param listener  ignored.\n         */\n",
"org.jfree.chart.renderer.xy.CyclicXYItemRenderer.removeChangeListener": "/**\n         * Does nothing.\n         *\n         * @param listener  ignored.\n         */\n",
"org.jfree.chart.renderer.xy.CyclicXYItemRenderer.getGroup": "/**\n         * Returns the dataset group.\n         *\n         * @return The dataset group.\n         */\n",
"org.jfree.chart.renderer.xy.CyclicXYItemRenderer.setGroup": "/**\n         * Does nothing.\n         *\n         * @param group  ignored.\n         */\n",
"org.jfree.chart.renderer.xy.XYStepRenderer.getStepPoint": "/**\n     * Returns the fraction of the domain position between two points on which\n     * the step is drawn.  The default is 1.0d, which means the step is drawn\n     * at the domain position of the second`point. If the stepPoint is 0.5d the\n     * step is drawn at half between the two points.\n     *\n     * @return The fraction of the domain position between two points where the\n     *         step is drawn.\n     *\n     * @see #setStepPoint(double)\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.renderer.xy.XYStepRenderer.setStepPoint": "/**\n     * Sets the step point and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param stepPoint  the step point (in the range 0.0 to 1.0)\n     *\n     * @see #getStepPoint()\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.renderer.xy.XYStepRenderer.drawItem": "/**\n     * Draws the visual representation of a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area within which the data is being drawn.\n     * @param info  collects information about the drawing.\n     * @param plot  the plot (can be used to obtain standard color\n     *              information etc).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the vertical axis.\n     * @param dataset  the dataset.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param crosshairState  crosshair information for the plot\n     *                        ({@code null} permitted).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.xy.XYStepRenderer.drawLine": "/**\n     * A utility method that draws a line but only if none of the coordinates\n     * are NaN values.\n     *\n     * @param g2  the graphics target.\n     * @param line  the line object.\n     * @param x0  the x-coordinate for the starting point of the line.\n     * @param y0  the y-coordinate for the starting point of the line.\n     * @param x1  the x-coordinate for the ending point of the line.\n     * @param y1  the y-coordinate for the ending point of the line.\n     */\n",
"org.jfree.chart.renderer.xy.XYStepRenderer.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.XYStepRenderer.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.renderer.xy.XYStepRenderer.clone": "/**\n     * Returns a clone of the renderer.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the renderer cannot be cloned.\n     */\n",
"org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds": "/**\n     * Returns the lower and upper bounds (range) of the x-values in the\n     * specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range ({@code null} if the dataset is {@code null}\n     *         or empty).\n     */\n",
"org.jfree.chart.renderer.xy.VectorRenderer.findRangeBounds": "/**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range ({@code null} if the dataset is {@code null}\n     *         or empty).\n     */\n",
"org.jfree.chart.renderer.xy.VectorRenderer.drawItem": "/**\n     * Draws the block representing the specified item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the state.\n     * @param dataArea  the data area.\n     * @param info  the plot rendering info.\n     * @param plot  the plot.\n     * @param domainAxis  the x-axis.\n     * @param rangeAxis  the y-axis.\n     * @param dataset  the dataset.\n     * @param series  the series index.\n     * @param item  the item index.\n     * @param crosshairState  the crosshair state.\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.xy.VectorRenderer.equals": "/**\n     * Tests this {@code VectorRenderer} for equality with an arbitrary\n     * object.  This method returns {@code true} if and only if:\n     * <ul>\n     * <li>{@code obj} is an instance of {@code VectorRenderer} (not\n     *     {@code null});</li>\n     * <li>{@code obj} has the same field values as this\n     *     {@code VectorRenderer};</li>\n     * </ul>\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.VectorRenderer.clone": "/**\n     * Returns a clone of this renderer.\n     *\n     * @return A clone of this renderer.\n     *\n     * @throws CloneNotSupportedException if there is a problem creating the\n     *     clone.\n     */\n",
"org.jfree.chart.renderer.xy.CandlestickRenderer.getCandleWidth": "/**\n     * Returns the width of each candle.\n     *\n     * @return The candle width.\n     *\n     * @see #setCandleWidth(double)\n     */\n",
"org.jfree.chart.renderer.xy.CandlestickRenderer.setCandleWidth": "/**\n     * Sets the candle width and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     * <P>\n     * If you set the width to a negative value, the renderer will calculate\n     * the candle width automatically based on the space available on the chart.\n     *\n     * @param width  The width.\n     * @see #setAutoWidthMethod(int)\n     * @see #setAutoWidthGap(double)\n     * @see #setAutoWidthFactor(double)\n     * @see #setMaxCandleWidthInMilliseconds(double)\n     */\n",
"org.jfree.chart.renderer.xy.CandlestickRenderer.getMaxCandleWidthInMilliseconds": "/**\n     * Returns the maximum width (in milliseconds) of each candle.\n     *\n     * @return The maximum candle width in milliseconds.\n     *\n     * @see #setMaxCandleWidthInMilliseconds(double)\n     */\n",
"org.jfree.chart.renderer.xy.CandlestickRenderer.setMaxCandleWidthInMilliseconds": "/**\n     * Sets the maximum candle width (in milliseconds) and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param millis  The maximum width.\n     *\n     * @see #getMaxCandleWidthInMilliseconds()\n     * @see #setCandleWidth(double)\n     * @see #setAutoWidthMethod(int)\n     * @see #setAutoWidthGap(double)\n     * @see #setAutoWidthFactor(double)\n     */\n",
"org.jfree.chart.renderer.xy.CandlestickRenderer.getAutoWidthMethod": "/**\n     * Returns the method of automatically calculating the candle width.\n     *\n     * @return The method of automatically calculating the candle width.\n     *\n     * @see #setAutoWidthMethod(int)\n     */\n",
"org.jfree.chart.renderer.xy.CandlestickRenderer.setAutoWidthMethod": "/**\n     * Sets the method of automatically calculating the candle width and\n     * sends a {@link RendererChangeEvent} to all registered listeners.\n     * <p>\n     * {@code WIDTHMETHOD_AVERAGE}: Divides the entire display (ignoring\n     * scale factor) by the number of items, and uses this as the available\n     * width.<br>\n     * {@code WIDTHMETHOD_SMALLEST}: Checks the interval between each\n     * item, and uses the smallest as the available width.<br>\n     * {@code WIDTHMETHOD_INTERVALDATA}: Assumes that the dataset supports\n     * the IntervalXYDataset interface, and uses the startXValue - endXValue as\n     * the available width.\n     * <br>\n     *\n     * @param autoWidthMethod  The method of automatically calculating the\n     * candle width.\n     *\n     * @see #WIDTHMETHOD_AVERAGE\n     * @see #WIDTHMETHOD_SMALLEST\n     * @see #WIDTHMETHOD_INTERVALDATA\n     * @see #getAutoWidthMethod()\n     * @see #setCandleWidth(double)\n     * @see #setAutoWidthGap(double)\n     * @see #setAutoWidthFactor(double)\n     * @see #setMaxCandleWidthInMilliseconds(double)\n     */\n",
"org.jfree.chart.renderer.xy.CandlestickRenderer.getAutoWidthFactor": "/**\n     * Returns the factor by which the available space automatically\n     * calculated for the candles will be multiplied to determine the actual\n     * width to use.\n     *\n     * @return The width factor (generally between 0.0 and 1.0).\n     *\n     * @see #setAutoWidthFactor(double)\n     */\n",
"org.jfree.chart.renderer.xy.CandlestickRenderer.setAutoWidthFactor": "/**\n     * Sets the factor by which the available space automatically calculated\n     * for the candles will be multiplied to determine the actual width to use.\n     *\n     * @param autoWidthFactor The width factor (generally between 0.0 and 1.0).\n     *\n     * @see #getAutoWidthFactor()\n     * @see #setCandleWidth(double)\n     * @see #setAutoWidthMethod(int)\n     * @see #setAutoWidthGap(double)\n     * @see #setMaxCandleWidthInMilliseconds(double)\n     */\n",
"org.jfree.chart.renderer.xy.CandlestickRenderer.getAutoWidthGap": "/**\n     * Returns the amount of space to leave on the left and right of each\n     * candle when automatically calculating widths.\n     *\n     * @return The gap.\n     *\n     * @see #setAutoWidthGap(double)\n     */\n",
"org.jfree.chart.renderer.xy.CandlestickRenderer.setAutoWidthGap": "/**\n     * Sets the amount of space to leave on the left and right of each candle\n     * when automatically calculating widths and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param autoWidthGap The gap.\n     *\n     * @see #getAutoWidthGap()\n     * @see #setCandleWidth(double)\n     * @see #setAutoWidthMethod(int)\n     * @see #setAutoWidthFactor(double)\n     * @see #setMaxCandleWidthInMilliseconds(double)\n     */\n",
"org.jfree.chart.renderer.xy.CandlestickRenderer.getUpPaint": "/**\n     * Returns the paint used to fill candles when the price moves up from open\n     * to close.\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setUpPaint(Paint)\n     */\n",
"org.jfree.chart.renderer.xy.CandlestickRenderer.setUpPaint": "/**\n     * Sets the paint used to fill candles when the price moves up from open\n     * to close and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getUpPaint()\n     */\n",
"org.jfree.chart.renderer.xy.CandlestickRenderer.getDownPaint": "/**\n     * Returns the paint used to fill candles when the price moves down from\n     * open to close.\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setDownPaint(Paint)\n     */\n",
"org.jfree.chart.renderer.xy.CandlestickRenderer.setDownPaint": "/**\n     * Sets the paint used to fill candles when the price moves down from open\n     * to close and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param paint  The paint ({@code null} permitted).\n     */\n",
"org.jfree.chart.renderer.xy.CandlestickRenderer.getDrawVolume": "/**\n     * Returns a flag indicating whether or not volume bars are drawn on the\n     * chart.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.5\n     *\n     * @see #setDrawVolume(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.CandlestickRenderer.setDrawVolume": "/**\n     * Sets a flag that controls whether or not volume bars are drawn in the\n     * background and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #getDrawVolume()\n     */\n",
"org.jfree.chart.renderer.xy.CandlestickRenderer.getVolumePaint": "/**\n     * Returns the paint that is used to fill the volume bars if they are\n     * visible.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setVolumePaint(Paint)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.renderer.xy.CandlestickRenderer.setVolumePaint": "/**\n     * Sets the paint used to fill the volume bars, and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getVolumePaint()\n     * @see #getDrawVolume()\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.renderer.xy.CandlestickRenderer.getUseOutlinePaint": "/**\n     * Returns the flag that controls whether or not the renderer's outline\n     * paint is used to draw the candlestick outline.  The default value is\n     * {@code false}.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.5\n     *\n     * @see #setUseOutlinePaint(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.CandlestickRenderer.setUseOutlinePaint": "/**\n     * Sets the flag that controls whether or not the renderer's outline\n     * paint is used to draw the candlestick outline, and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param use  the new flag value.\n     *\n     * @since 1.0.5\n     *\n     * @see #getUseOutlinePaint()\n     */\n",
"org.jfree.chart.renderer.xy.CandlestickRenderer.findRangeBounds": "/**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range ({@code null} if the dataset is {@code null}\n     *         or empty).\n     */\n",
"org.jfree.chart.renderer.xy.CandlestickRenderer.initialise": "/**\n     * Initialises the renderer then returns the number of 'passes' through the\n     * data that the renderer will require (usually just one).  This method\n     * will be called before the first item is rendered, giving the renderer\n     * an opportunity to initialise any state information it wants to maintain.\n     * The renderer can do nothing if it chooses.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area inside the axes.\n     * @param plot  the plot.\n     * @param dataset  the data.\n     * @param info  an optional info collection object to return data back to\n     *              the caller.\n     *\n     * @return The number of passes the renderer requires.\n     */\n",
"org.jfree.chart.renderer.xy.CandlestickRenderer.drawItem": "/**\n     * Draws the visual representation of a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area within which the plot is being drawn.\n     * @param info  collects info about the drawing.\n     * @param plot  the plot (can be used to obtain standard color\n     *              information etc).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param crosshairState  crosshair information for the plot\n     *                        ({@code null} permitted).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.xy.CandlestickRenderer.equals": "/**\n     * Tests this renderer for equality with another object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.renderer.xy.CandlestickRenderer.clone": "/**\n     * Returns a clone of the renderer.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the renderer cannot be cloned.\n     */\n",
"org.jfree.chart.renderer.xy.CandlestickRenderer.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.renderer.xy.CandlestickRenderer.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getPassCount": "/**\n     * Returns the number of passes through the data that the renderer requires\n     * in order to draw the chart.  Most charts will require a single pass, but\n     * some require two passes.\n     *\n     * @return The pass count.\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getPlot": "/**\n     * Returns the plot that the renderer is assigned to.\n     *\n     * @return The plot (possibly {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setPlot": "/**\n     * Sets the plot that the renderer is assigned to.\n     *\n     * @param plot  the plot ({@code null} permitted).\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.initialise": "/**\n     * Initialises the renderer and returns a state object that should be\n     * passed to all subsequent calls to the drawItem() method.\n     * <P>\n     * This method will be called before the first item is rendered, giving the\n     * renderer an opportunity to initialise any state information it wants to\n     * maintain.  The renderer can do nothing if it chooses.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area inside the axes.\n     * @param plot  the plot.\n     * @param dataset  the dataset.\n     * @param info  an optional info collection object to return data back to\n     *              the caller.\n     *\n     * @return The renderer state (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.beginElementGroup": "/**\n     * Adds a {@code KEY_BEGIN_ELEMENT} hint to the graphics target.  This\n     * hint is recognised by <b>JFreeSVG</b> (in theory it could be used by \n     * other {@code Graphics2D} implementations also).\n     * \n     * @param g2  the graphics target ({@code null} not permitted).\n     * @param seriesKey  the series key that identifies the element \n     *     ({@code null} not permitted).\n     * @param itemIndex  the item index. \n     * \n     * @since 1.0.20\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getItemLabelGenerator": "/**\n     * Returns the label generator for a data item.  This implementation simply\n     * passes control to the {@link #getSeriesItemLabelGenerator(int)} method.\n     * If, for some reason, you want a different generator for individual\n     * items, you can override this method.\n     *\n     * @param series  the series index (zero based).\n     * @param item  the item index (zero based).\n     *\n     * @return The generator (possibly {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getSeriesItemLabelGenerator": "/**\n     * Returns the item label generator for a series.\n     *\n     * @param series  the series index (zero based).\n     *\n     * @return The generator (possibly {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setSeriesItemLabelGenerator": "/**\n     * Sets the item label generator for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero based).\n     * @param generator  the generator ({@code null} permitted).\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getDefaultItemLabelGenerator": "/**\n     * Returns the default item label generator.\n     *\n     * @return The generator (possibly {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setDefaultItemLabelGenerator": "/**\n     * Sets the default item label generator and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getToolTipGenerator": "/**\n     * Returns the tool tip generator for a data item.  If, for some reason,\n     * you want a different generator for individual items, you can override\n     * this method.\n     *\n     * @param series  the series index (zero based).\n     * @param item  the item index (zero based).\n     *\n     * @return The generator (possibly {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getSeriesToolTipGenerator": "/**\n     * Returns the tool tip generator for a series.\n     *\n     * @param series  the series index (zero based).\n     *\n     * @return The generator (possibly {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setSeriesToolTipGenerator": "/**\n     * Sets the tool tip generator for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero based).\n     * @param generator  the generator ({@code null} permitted).\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getDefaultToolTipGenerator": "/**\n     * Returns the default tool tip generator.\n     *\n     * @return The generator (possibly {@code null}).\n     *\n     * @see #setDefaultToolTipGenerator(XYToolTipGenerator)\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setDefaultToolTipGenerator": "/**\n     * Sets the default tool tip generator and sends a \n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getDefaultToolTipGenerator()\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getURLGenerator": "/**\n     * Returns the URL generator for HTML image maps.\n     *\n     * @return The URL generator (possibly {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setURLGenerator": "/**\n     * Sets the URL generator for HTML image maps and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param urlGenerator  the URL generator ({@code null} permitted).\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.addAnnotation": "/**\n     * Adds an annotation and sends a {@link RendererChangeEvent} to all\n     * registered listeners.  The annotation is added to the foreground\n     * layer.\n     *\n     * @param annotation  the annotation ({@code null} not permitted).\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.addAnnotation": "/**\n     * Adds an annotation to the specified layer and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param annotation  the annotation ({@code null} not permitted).\n     * @param layer  the layer ({@code null} not permitted).\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.removeAnnotation": "/**\n     * Removes the specified annotation and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param annotation  the annotation to remove ({@code null} not\n     *                    permitted).\n     *\n     * @return A boolean to indicate whether or not the annotation was\n     *         successfully removed.\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.removeAnnotations": "/**\n     * Removes all annotations and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.annotationChanged": "/**\n     * Receives notification of a change to an {@link Annotation} added to\n     * this renderer.\n     *\n     * @param event  information about the event (not used here).\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getAnnotations": "/**\n     * Returns a collection of the annotations that are assigned to the\n     * renderer.\n     *\n     * @return A collection of annotations (possibly empty but never\n     *     {@code null}).\n     * \n     * @since 1.0.13\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getLegendItemLabelGenerator": "/**\n     * Returns the legend item label generator.\n     *\n     * @return The label generator (never {@code null}).\n     *\n     * @see #setLegendItemLabelGenerator(XYSeriesLabelGenerator)\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setLegendItemLabelGenerator": "/**\n     * Sets the legend item label generator and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator ({@code null} not permitted).\n     *\n     * @see #getLegendItemLabelGenerator()\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getLegendItemToolTipGenerator": "/**\n     * Returns the legend item tool tip generator.\n     *\n     * @return The tool tip generator (possibly {@code null}).\n     *\n     * @see #setLegendItemToolTipGenerator(XYSeriesLabelGenerator)\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setLegendItemToolTipGenerator": "/**\n     * Sets the legend item tool tip generator and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getLegendItemToolTipGenerator()\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getLegendItemURLGenerator": "/**\n     * Returns the legend item URL generator.\n     *\n     * @return The URL generator (possibly {@code null}).\n     *\n     * @see #setLegendItemURLGenerator(XYSeriesLabelGenerator)\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setLegendItemURLGenerator": "/**\n     * Sets the legend item URL generator and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getLegendItemURLGenerator()\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds": "/**\n     * Returns the lower and upper bounds (range) of the x-values in the\n     * specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range ({@code null} if the dataset is {@code null}\n     *         or empty).\n     *\n     * @see #findRangeBounds(XYDataset)\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds": "/**\n     * Returns the lower and upper bounds (range) of the x-values in the\n     * specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     * @param includeInterval  include the interval (if any) for the dataset?\n     *\n     * @return The range ({@code null} if the dataset is {@code null}\n     *         or empty).\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findRangeBounds": "/**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range ({@code null} if the dataset is {@code null}\n     *         or empty).\n     *\n     * @see #findDomainBounds(XYDataset)\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findRangeBounds": "/**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     * @param includeInterval  include the interval (if any) for the dataset?\n     *\n     * @return The range ({@code null} if the dataset is {@code null}\n     *         or empty).\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getLegendItems": "/**\n     * Returns a (possibly empty) collection of legend items for the series\n     * that this renderer is responsible for drawing.\n     *\n     * @return The legend item collection (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getLegendItem": "/**\n     * Returns a default legend item for the specified series.  Subclasses\n     * should override this method to generate customised items.\n     *\n     * @param datasetIndex  the dataset index (zero-based).\n     * @param series  the series index (zero-based).\n     *\n     * @return A legend item for the series.\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.fillDomainGridBand": "/**\n     * Fills a band between two values on the axis.  This can be used to color\n     * bands between the grid lines.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param axis  the domain axis.\n     * @param dataArea  the data area.\n     * @param start  the start value.\n     * @param end  the end value.\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.fillRangeGridBand": "/**\n     * Fills a band between two values on the range axis.  This can be used to\n     * color bands between the grid lines.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param axis  the range axis.\n     * @param dataArea  the data area.\n     * @param start  the start value.\n     * @param end  the end value.\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.drawDomainLine": "/**\n     * Draws a line perpendicular to the domain axis.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param axis  the value axis.\n     * @param dataArea  the area for plotting data.\n     * @param value  the value at which the grid line should be drawn.\n     * @param paint  the paint ({@code null} not permitted).\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @since 1.0.5\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.drawRangeLine": "/**\n     * Draws a line perpendicular to the range axis.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param axis  the value axis.\n     * @param dataArea  the area for plotting data.\n     * @param value  the value at which the grid line should be drawn.\n     * @param paint  the paint.\n     * @param stroke  the stroke.\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.drawDomainMarker": "/**\n     * Draws a line on the chart perpendicular to the x-axis to mark\n     * a value or range of values.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param marker  the marker line.\n     * @param dataArea  the axis data area.\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.calculateDomainMarkerTextAnchorPoint": "/**\n     * Calculates the {@code (x, y)} coordinates for drawing a marker label.\n     *\n     * @param g2  the graphics device.\n     * @param orientation  the plot orientation.\n     * @param dataArea  the data area.\n     * @param markerArea  the rectangle surrounding the marker area.\n     * @param markerOffset  the marker label offset.\n     * @param labelOffsetType  the label offset type.\n     * @param anchor  the label anchor.\n     *\n     * @return The coordinates for drawing the marker label.\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.drawRangeMarker": "/**\n     * Draws a line on the chart perpendicular to the y-axis to mark a value\n     * or range of values.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param rangeAxis  the range axis.\n     * @param marker  the marker line.\n     * @param dataArea  the axis data area.\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.calculateRangeMarkerTextAnchorPoint": "/**\n     * Calculates the (x, y) coordinates for drawing a marker label.\n     *\n     * @param g2  the graphics device.\n     * @param orientation  the plot orientation.\n     * @param dataArea  the data area.\n     * @param markerArea  the marker area.\n     * @param markerOffset  the marker offset.\n     * @param labelOffsetForRange  ??\n     * @param anchor  the label anchor.\n     *\n     * @return The coordinates for drawing the marker label.\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.clone": "/**\n     * Returns a clone of the renderer.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if the renderer does not support\n     *         cloning.\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.equals": "/**\n     * Tests this renderer for equality with another object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getDrawingSupplier": "/**\n     * Returns the drawing supplier from the plot.\n     *\n     * @return The drawing supplier (possibly {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.updateCrosshairValues": "/**\n     * Considers the current (x, y) coordinate and updates the crosshair point\n     * if it meets the criteria (usually means the (x, y) coordinate is the\n     * closest to the anchor point so far).\n     *\n     * @param crosshairState  the crosshair state ({@code null} permitted,\n     *                        but the method does nothing in that case).\n     * @param x  the x-value (in data space).\n     * @param y  the y-value (in data space).\n     * @param datasetIndex  the index of the dataset for the point.\n     * @param transX  the x-value translated to Java2D space.\n     * @param transY  the y-value translated to Java2D space.\n     * @param orientation  the plot orientation ({@code null} not\n     *                     permitted).\n     *\n     * @since 1.0.20\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.drawItemLabel": "/**\n     * Draws an item label.\n     *\n     * @param g2  the graphics device.\n     * @param orientation  the orientation.\n     * @param dataset  the dataset.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param x  the x coordinate (in Java2D space).\n     * @param y  the y coordinate (in Java2D space).\n     * @param negative  indicates a negative value (which affects the item\n     *                  label position).\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.drawAnnotations": "/**\n     * Draws all the annotations for the specified layer.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param layer  the layer ({@code null} not permitted).\n     * @param info  the plot rendering info.\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.addEntity": "/**\n     * Adds an entity to the collection.  Note the the {@code entityX} and\n     * {@code entityY} coordinates are in Java2D space, should already be \n     * adjusted for the plot orientation, and will only be used if \n     * {@code hotspot} is {@code null}.\n     *\n     * @param entities  the entity collection being populated.\n     * @param hotspot  the entity area (if {@code null} a default will be\n     *              used).\n     * @param dataset  the dataset.\n     * @param series  the series.\n     * @param item  the item.\n     * @param entityX  the entity x-coordinate (in Java2D space, only used if \n     *         {@code hotspot} is {@code null}).\n     * @param entityY  the entity y-coordinate (in Java2D space, only used if \n     *         {@code hotspot} is {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.moveTo": "/**\n     * Utility method delegating to {@link GeneralPath#moveTo} taking double as\n     * parameters.\n     *\n     * @param hotspot  the region under construction ({@code null} not \n     *           permitted);\n     * @param x  the x coordinate;\n     * @param y  the y coordinate;\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.xy.AbstractXYItemRenderer.lineTo": "/**\n     * Utility method delegating to {@link GeneralPath#lineTo} taking double as\n     * parameters.\n     *\n     * @param hotspot  the region under construction ({@code null} not \n     *           permitted);\n     * @param x  the x coordinate;\n     * @param y  the y coordinate;\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getPlot": "/**\n     * Returns the plot that this renderer has been assigned to.\n     *\n     * @return The plot.\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setPlot": "/**\n     * Sets the plot that this renderer is assigned to.  This method will be\n     * called by the plot class...you do not need to call it yourself.\n     *\n     * @param plot  the plot.\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getPassCount": "/**\n     * Returns the number of passes through the data required by the renderer.\n     *\n     * @return The pass count.\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.findDomainBounds": "/**\n     * Returns the lower and upper bounds (range) of the x-values in the\n     * specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range.\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.findRangeBounds": "/**\n     * Returns the lower and upper bounds (range) of the y-values in the\n     * specified dataset.  The implementation of this method will take\n     * into account the presentation used by the renderers (for example,\n     * a renderer that \"stacks\" values will return a bigger range than\n     * a renderer that doesn't).\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range (or {@code null} if the dataset is\n     *         {@code null} or empty).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.addChangeListener": "/**\n     * Add a renderer change listener.\n     *\n     * @param listener  the listener.\n     *\n     * @see #removeChangeListener(RendererChangeListener)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.removeChangeListener": "/**\n     * Removes a change listener.\n     *\n     * @param listener  the listener.\n     *\n     * @see #addChangeListener(RendererChangeListener)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getItemVisible": "/**\n     * Returns a boolean that indicates whether or not the specified item\n     * should be drawn (this is typically used to hide an entire series).\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.isSeriesVisible": "/**\n     * Returns a boolean that indicates whether or not the specified series\n     * should be drawn (this is typically used to hide an entire series).\n     *\n     * @param series  the series index.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getSeriesVisible": "/**\n     * Returns the flag that controls whether a series is visible.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The flag (possibly {@code null}).\n     *\n     * @see #setSeriesVisible(int, Boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesVisible": "/**\n     * Sets the flag that controls whether a series is visible and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param visible  the flag ({@code null} permitted).\n     *\n     * @see #getSeriesVisible(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesVisible": "/**\n     * Sets the flag that controls whether a series is visible and, if\n     * requested, sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param series  the series index.\n     * @param visible  the flag ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getSeriesVisible(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getDefaultSeriesVisible": "/**\n     * Returns the default visibility for all series.\n     *\n     * @return The default visibility.\n     *\n     * @see #setDefaultSeriesVisible(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultSeriesVisible": "/**\n     * Sets the default visibility and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param visible  the flag.\n     *\n     * @see #getDefaultSeriesVisible()\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultSeriesVisible": "/**\n     * Sets the default visibility and, if requested, sends\n     * a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param visible  the visibility.\n     * @param notify  notify listeners?\n     *\n     * @see #getDefaultSeriesVisible()\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.isSeriesVisibleInLegend": "/**\n     * Returns {@code true} if the series should be shown in the legend,\n     * and {@code false} otherwise.\n     *\n     * @param series  the series index.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getSeriesVisibleInLegend": "/**\n     * Returns the flag that controls whether a series is visible in the\n     * legend.  This method returns only the \"per series\" settings - to\n     * incorporate the override and base settings as well, you need to use the\n     * {@link #isSeriesVisibleInLegend(int)} method.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The flag (possibly {@code null}).\n     *\n     * @see #setSeriesVisibleInLegend(int, Boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesVisibleInLegend": "/**\n     * Sets the flag that controls whether a series is visible in the legend\n     * and sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param visible  the flag ({@code null} permitted).\n     *\n     * @see #getSeriesVisibleInLegend(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesVisibleInLegend": "/**\n     * Sets the flag that controls whether a series is visible in the legend\n     * and, if requested, sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param series  the series index.\n     * @param visible  the flag ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getSeriesVisibleInLegend(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getDefaultSeriesVisibleInLegend": "/**\n     * Returns the default visibility in the legend for all series.\n     *\n     * @return The default visibility.\n     *\n     * @see #setDefaultSeriesVisibleInLegend(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultSeriesVisibleInLegend": "/**\n     * Sets the default visibility in the legend and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param visible  the flag.\n     *\n     * @see #getDefaultSeriesVisibleInLegend()\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultSeriesVisibleInLegend": "/**\n     * Sets the default visibility in the legend and, if requested, sends\n     * a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param visible  the visibility.\n     * @param notify  notify listeners?\n     *\n     * @see #getDefaultSeriesVisibleInLegend()\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getItemPaint": "/**\n     * Returns the paint used to color data items as they are drawn.\n     *\n     * @param row  the row (or series) index (zero-based).\n     * @param column  the column (or category) index (zero-based).\n     *\n     * @return The paint (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getSeriesPaint": "/**\n     * Returns the paint used to color an item drawn by the renderer.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setSeriesPaint(int, Paint)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesPaint": "/**\n     * Sets the paint used for a series and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getSeriesPaint(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesPaint": "/**\n     * Sets the paint used for a series and sends a {@link RendererChangeEvent}\n     * to all registered listeners if requested.\n     *\n     * @param series  the series index (zero-based).\n     * @param paint  the paint ({@code null} permitted).\n     * @param notify  send a change event?\n     *\n     * @see #getSeriesPaint(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getDefaultPaint": "/**\n     * Returns the default paint.\n     *\n     * @return The default paint (never {@code null}).\n     *\n     * @see #setDefaultPaint(Paint)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultPaint": "/**\n     * Sets the default paint and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getDefaultPaint()\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultPaint": "/**\n     * Sets the default paint and sends a {@link RendererChangeEvent} to all\n     * registered listeners if requested.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     * @param notify  send a change event?\n     *\n     * @see #getDefaultPaint()\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getItemFillPaint": "/**\n     * Returns the paint used to fill data items as they are drawn.\n     *\n     * @param row  the row (or series) index (zero-based).\n     * @param column  the column (or category) index (zero-based).\n     *\n     * @return The paint (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getSeriesFillPaint": "/**\n     * Returns the paint used to fill an item drawn by the renderer.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The paint (possibly {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesFillPaint": "/**\n     * Sets the paint used for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param paint  the paint ({@code null} permitted).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesFillPaint": "/**\n     * Sets the paint used for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners if requested.\n     *\n     * @param series  the series index (zero-based).\n     * @param paint  the paint ({@code null} permitted).\n     * @param notify  send a change event?\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getDefaultFillPaint": "/**\n     * Returns the default paint.\n     *\n     * @return The default paint (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultFillPaint": "/**\n     * Sets the default paint and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultFillPaint": "/**\n     * Sets the default paint and sends a {@link RendererChangeEvent} to all\n     * registered listeners if requested.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     * @param notify  send a change event?\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getItemOutlinePaint": "/**\n     * Returns the paint used to outline data items as they are drawn.\n     *\n     * @param row  the row (or series) index (zero-based).\n     * @param column  the column (or category) index (zero-based).\n     *\n     * @return The paint (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getSeriesOutlinePaint": "/**\n     * Returns the paint used to outline an item drawn by the renderer.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setSeriesOutlinePaint(int, Paint)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesOutlinePaint": "/**\n     * Sets the paint used for a series outline and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getSeriesOutlinePaint(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesOutlinePaint": "/**\n     * Sets the paint used for a series outline and sends a\n     * {@link RendererChangeEvent} to all registered listeners if requested.\n     *\n     * @param series  the series index (zero-based).\n     * @param paint  the paint ({@code null} permitted).\n     * @param notify  send a change event?\n     *\n     * @see #getSeriesOutlinePaint(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getDefaultOutlinePaint": "/**\n     * Returns the default outline paint.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setDefaultOutlinePaint(Paint)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultOutlinePaint": "/**\n     * Sets the default outline paint and sends a {@link RendererChangeEvent} to\n     * all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getDefaultOutlinePaint()\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultOutlinePaint": "/**\n     * Sets the default outline paint and sends a {@link RendererChangeEvent} to\n     * all registered listeners if requested.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     * @param notify  send a change event?\n     *\n     * @see #getDefaultOutlinePaint()\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getItemStroke": "/**\n     * Returns the stroke used to draw data items.\n     *\n     * @param row  the row (or series) index (zero-based).\n     * @param column  the column (or category) index (zero-based).\n     *\n     * @return The stroke (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getSeriesStroke": "/**\n     * Returns the stroke used to draw the items in a series.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The stroke (possibly {@code null}).\n     *\n     * @see #setSeriesStroke(int, Stroke)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesStroke": "/**\n     * Sets the stroke used for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param stroke  the stroke ({@code null} permitted).\n     *\n     * @see #getSeriesStroke(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesStroke": "/**\n     * Sets the stroke used for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners if requested.\n     *\n     * @param series  the series index (zero-based).\n     * @param stroke  the stroke ({@code null} permitted).\n     * @param notify  send a change event?\n     *\n     * @see #getSeriesStroke(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getDefaultStroke": "/**\n     * Returns the default stroke.\n     *\n     * @return The default stroke (never {@code null}).\n     *\n     * @see #setDefaultStroke(Stroke)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultStroke": "/**\n     * Sets the default stroke and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getDefaultStroke()\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultStroke": "/**\n     * Sets the default stroke and sends a {@link RendererChangeEvent} to all\n     * registered listeners if requested.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     * @param notify  send a change event?\n     *\n     * @see #getDefaultStroke()\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getItemOutlineStroke": "/**\n     * Returns the stroke used to outline data items.  The default\n     * implementation passes control to the lookupSeriesOutlineStroke method.\n     * You can override this method if you require different behaviour.\n     *\n     * @param row  the row (or series) index (zero-based).\n     * @param column  the column (or category) index (zero-based).\n     *\n     * @return The stroke (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getSeriesOutlineStroke": "/**\n     * Returns the stroke used to outline the items in a series.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The stroke (possibly {@code null}).\n     *\n     * @see #setSeriesOutlineStroke(int, Stroke)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesOutlineStroke": "/**\n     * Sets the outline stroke used for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param stroke  the stroke ({@code null} permitted).\n     *\n     * @see #getSeriesOutlineStroke(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesOutlineStroke": "/**\n     * Sets the outline stroke used for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners if requested.\n     *\n     * @param series  the series index (zero-based).\n     * @param stroke  the stroke ({@code null} permitted).\n     * @param notify  send a change event?\n     *\n     * @see #getSeriesOutlineStroke(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getDefaultOutlineStroke": "/**\n     * Returns the default outline stroke.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setDefaultOutlineStroke(Stroke)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultOutlineStroke": "/**\n     * Sets the base outline stroke and sends a {@link RendererChangeEvent} to\n     * all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getDefaultOutlineStroke()\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultOutlineStroke": "/**\n     * Sets the base outline stroke and sends a {@link RendererChangeEvent} to\n     * all registered listeners if requested.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     * @param notify  send a change event.\n     *\n     * @see #getDefaultOutlineStroke()\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getItemShape": "/**\n     * Returns a shape used to represent a data item.\n     *\n     * @param row  the row (or series) index (zero-based).\n     * @param column  the column (or category) index (zero-based).\n     *\n     * @return The shape (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getSeriesShape": "/**\n     * Returns a shape used to represent the items in a series.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The shape (possibly {@code null}).\n     *\n     * @see #setSeriesShape(int, Shape)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesShape": "/**\n     * Sets the shape used for a series and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param shape  the shape ({@code null} permitted).\n     *\n     * @see #getSeriesShape(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesShape": "/**\n     * Sets the shape used for a series and sends a {@link RendererChangeEvent}\n     * to all registered listeners if requested.\n     *\n     * @param series  the series index (zero-based).\n     * @param shape  the shape ({@code null} permitted).\n     * @param notify  send a change event?\n     *\n     * @see #getSeriesShape(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getDefaultShape": "/**\n     * Returns the default shape.\n     *\n     * @return The shape (never {@code null}).\n     *\n     * @see #setDefaultShape(Shape)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultShape": "/**\n     * Sets the default shape and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param shape  the shape ({@code null} not permitted).\n     *\n     * @see #getDefaultShape()\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultShape": "/**\n     * Sets the default shape and sends a {@link RendererChangeEvent} to all\n     * registered listeners if requested.\n     *\n     * @param shape  the shape ({@code null} not permitted).\n     * @param notify  send a change event?\n     *\n     * @see #getDefaultShape()\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getLegendItem": "/**\n     * Returns a legend item for a series from a dataset.\n     *\n     * @param datasetIndex  the dataset index.\n     * @param series  the series (zero-based index).\n     *\n     * @return The legend item (possibly {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getLegendItemLabelGenerator": "/**\n     * Returns the legend item label generator.\n     *\n     * @return The legend item label generator (never {@code null}).\n     *\n     * @see #setLegendItemLabelGenerator(XYSeriesLabelGenerator)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setLegendItemLabelGenerator": "/**\n     * Sets the legend item label generator and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator ({@code null} not permitted).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getToolTipGenerator": "/**\n     * Returns the tool tip generator for a data item.\n     *\n     * @param row  the row index (zero based).\n     * @param column  the column index (zero based).\n     *\n     * @return The generator (possibly {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getSeriesToolTipGenerator": "/**\n     * Returns the tool tip generator for a series.\n     *\n     * @param series  the series index (zero based).\n     *\n     * @return The generator (possibly {@code null}).\n     *\n     * @see #setSeriesToolTipGenerator(int, XYToolTipGenerator)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesToolTipGenerator": "/**\n     * Sets the tool tip generator for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero based).\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getSeriesToolTipGenerator(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getDefaultToolTipGenerator": "/**\n     * Returns the default tool tip generator.\n     *\n     * @return The generator (possibly {@code null}).\n     *\n     * @see #setDefaultToolTipGenerator(XYToolTipGenerator)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultToolTipGenerator": "/**\n     * Sets the default tool tip generator and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getDefaultToolTipGenerator()\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getURLGenerator": "/**\n     * Returns the URL generator for HTML image maps.\n     *\n     * @return The URL generator (possibly null).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setURLGenerator": "/**\n     * Sets the URL generator for HTML image maps.\n     *\n     * @param urlGenerator the URL generator (null permitted).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.isItemLabelVisible": "/**\n     * Returns {@code true} if an item label is visible, and\n     * {@code false} otherwise.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.isSeriesItemLabelsVisible": "/**\n     * Returns {@code true} if the item labels for a series are visible,\n     * and {@code false} otherwise.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesItemLabelsVisible": "/**\n     * Sets a flag that controls the visibility of the item labels for a\n     * series and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param visible  the flag.\n     *\n     * @see #isSeriesItemLabelsVisible(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesItemLabelsVisible": "/**\n     * Sets a flag that controls the visibility of the item labels for a series.\n     *\n     * @param series  the series index (zero-based).\n     * @param visible  the flag ({@code null} permitted).\n     *\n     * @see #isSeriesItemLabelsVisible(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesItemLabelsVisible": "/**\n     * Sets the visibility of item labels for a series and, if requested,\n     * sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param visible  the visible flag.\n     * @param notify  a flag that controls whether or not listeners are\n     *                notified.\n     *\n     * @see #isSeriesItemLabelsVisible(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getDefaultItemLabelsVisible": "/**\n     * Returns the default setting for item label visibility.\n     *\n     * @return A flag (possibly {@code null}).\n     *\n     * @see #setDefaultItemLabelsVisible(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultItemLabelsVisible": "/**\n     * Sets the default flag that controls whether or not item labels are visible.\n     *\n     * @param visible  the flag.\n     *\n     * @see #getDefaultItemLabelsVisible()\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultItemLabelsVisible": "/**\n     * Sets the default visibility for item labels and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param visible  the visibility flag.\n     * @param notify  a flag that controls whether or not listeners are\n     *                notified.\n     *\n     * @see #getDefaultItemLabelsVisible()\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getItemLabelGenerator": "/**\n     * Returns the item label generator for a data item.\n     *\n     * @param row  the row index (zero based).\n     * @param column  the column index (zero based).\n     *\n     * @return The generator (possibly {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getSeriesItemLabelGenerator": "/**\n     * Returns the item label generator for a series.\n     *\n     * @param series  the series index (zero based).\n     *\n     * @return The generator (possibly {@code null}).\n     *\n     * @see #setSeriesItemLabelGenerator(int, XYItemLabelGenerator)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesItemLabelGenerator": "/**\n     * Sets the item label generator for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero based).\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getSeriesItemLabelGenerator(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getDefaultItemLabelGenerator": "/**\n     * Returns the default item label generator.\n     *\n     * @return The generator (possibly {@code null}).\n     *\n     * @see #setDefaultItemLabelGenerator(XYItemLabelGenerator)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultItemLabelGenerator": "/**\n     * Sets the default item label generator and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getDefaultItemLabelGenerator()\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getItemLabelFont": "/**\n     * Returns the font for an item label.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The font (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getSeriesItemLabelFont": "/**\n     * Returns the font for all the item labels in a series.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The font (possibly {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesItemLabelFont": "/**\n     * Sets the item label font for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param font  the font ({@code null} permitted).\n     *\n     * @see #getSeriesItemLabelFont(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getDefaultItemLabelFont": "/**\n     * Returns the default item label font (this is used when no other font\n     * setting is available).\n     *\n     * @return The font (never {@code null}).\n     *\n     * @see #setDefaultItemLabelFont(Font)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultItemLabelFont": "/**\n     * Sets the default item label font and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param font  the font ({@code null} not permitted).\n     *\n     * @see #getDefaultItemLabelFont()\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getItemLabelPaint": "/**\n     * Returns the paint used to draw an item label.\n     *\n     * @param row  the row index (zero based).\n     * @param column  the column index (zero based).\n     *\n     * @return The paint (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getSeriesItemLabelPaint": "/**\n     * Returns the paint used to draw the item labels for a series.\n     *\n     * @param series  the series index (zero based).\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setSeriesItemLabelPaint(int, Paint)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesItemLabelPaint": "/**\n     * Sets the item label paint for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series (zero based index).\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getSeriesItemLabelPaint(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getDefaultItemLabelPaint": "/**\n     * Returns the default item label paint.\n     *\n     * @return The paint (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultItemLabelPaint": "/**\n     * Sets the default item label paint and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getPositiveItemLabelPosition": "/**\n     * Returns the item label position for positive values.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The item label position (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getSeriesPositiveItemLabelPosition": "/**\n     * Returns the item label position for all positive values in a series.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The item label position (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesPositiveItemLabelPosition": "/**\n     * Sets the item label position for all positive values in a series and\n     * sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param position  the position ({@code null} permitted).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesPositiveItemLabelPosition": "/**\n     * Sets the item label position for all positive values in a series and (if\n     * requested) sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param position  the position ({@code null} permitted).\n     * @param notify  notify registered listeners?\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getDefaultPositiveItemLabelPosition": "/**\n     * Returns the default positive item label position.\n     *\n     * @return The position (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultPositiveItemLabelPosition": "/**\n     * Sets the default positive item label position.\n     *\n     * @param position  the position ({@code null} not permitted).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultPositiveItemLabelPosition": "/**\n     * Sets the default positive item label position and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param position  the position ({@code null} not permitted).\n     * @param notify  notify registered listeners?\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getNegativeItemLabelPosition": "/**\n     * Returns the item label position for negative values.  This method can be\n     * overridden to provide customisation of the item label position for\n     * individual data items.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column (zero-based).\n     *\n     * @return The item label position (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getSeriesNegativeItemLabelPosition": "/**\n     * Returns the item label position for all negative values in a series.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The item label position (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesNegativeItemLabelPosition": "/**\n     * Sets the item label position for negative values in a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param position  the position ({@code null} permitted).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesNegativeItemLabelPosition": "/**\n     * Sets the item label position for negative values in a series and (if\n     * requested) sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param position  the position ({@code null} permitted).\n     * @param notify  notify registered listeners?\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getDefaultNegativeItemLabelPosition": "/**\n     * Returns the default item label position for negative values.\n     *\n     * @return The position (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultNegativeItemLabelPosition": "/**\n     * Sets the default item label position for negative values and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param position  the position ({@code null} not permitted).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultNegativeItemLabelPosition": "/**\n     * Sets the default negative item label position and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param position  the position ({@code null} not permitted).\n     * @param notify  notify registered listeners?\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getItemCreateEntity": "/**\n     * Returns {@code true} if an entity should be created for an item, and\n     * {@code false} otherwise.\n     * \n     * @param series  the series.\n     * @param item  the item.\n     * \n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getSeriesCreateEntities": "/**\n     * Returns {@code true} if entities should be created for a series, and\n     * {@code false} otherwise.  This method can return {@code null} in which\n     * case the renderering framework will look at the default setting.\n     * \n     * @param series  the series.\n     * \n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesCreateEntities": "/**\n     * Sets a flag that specifies whether or not entities should be created for\n     * a series during rendering, and sends a change event to registered \n     * listeners.\n     * \n     * @param series  the series.\n     * @param create  the flag value ({@code null} permitted).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setSeriesCreateEntities": "/**\n     * Sets a flag that specifies whether or not entities should be created for\n     * a series during rendering, and sends a change event to registered \n     * listeners.\n     * \n     * @param series  the series.\n     * @param create  the flag value ({@code null} permitted).\n     * @param notify  send a change event?\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.getDefaultCreateEntities": "/**\n     * Returns the default value determining whether or not entities should be\n     * created by the renderer.\n     * \n     * @return A boolean. \n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultCreateEntities": "/**\n     * Sets the default value determining whether or not entities should be\n     * created by the renderer, and sends a change event to all registered\n     * listeners.\n     * \n     * @param create  the flag value.\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.setDefaultCreateEntities": "/**\n     * Sets the default value determining whether or not entities should be\n     * created by the renderer, and sends a change event to all registered\n     * listeners.\n     * \n     * @param create  the flag value.\n     * @param notify  notify listeners?\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.addAnnotation": "/**\n     * Adds an annotation and sends a {@link RendererChangeEvent} to all\n     * registered listeners.  The annotation is added to the foreground\n     * layer.\n     *\n     * @param annotation  the annotation ({@code null} not permitted).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.addAnnotation": "/**\n     * Adds an annotation to the specified layer.\n     *\n     * @param annotation  the annotation ({@code null} not permitted).\n     * @param layer  the layer ({@code null} not permitted).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.removeAnnotation": "/**\n     * Removes the specified annotation and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param annotation  the annotation to remove ({@code null} not\n     *                    permitted).\n     *\n     * @return A boolean to indicate whether or not the annotation was\n     *         successfully removed.\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.removeAnnotations": "/**\n     * Removes all annotations and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.drawAnnotations": "/**\n     * Draws all the annotations for the specified layer.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param layer  the layer.\n     * @param info  the plot rendering info.\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.initialise": "/**\n     * Initialises the renderer then returns the number of 'passes' through the\n     * data that the renderer will require (usually just one).  This method\n     * will be called before the first item is rendered, giving the renderer\n     * an opportunity to initialise any state information it wants to maintain.\n     * The renderer can do nothing if it chooses.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area inside the axes.\n     * @param plot  the plot.\n     * @param dataset  the dataset.\n     * @param info  an optional info collection object to return data back to\n     *              the caller.\n     *\n     * @return The number of passes the renderer requires.\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.drawItem": "/**\n     * Called for each item to be plotted.\n     * <p>\n     * The {@link XYPlot} can make multiple passes through the dataset,\n     * depending on the value returned by the renderer's initialise() method.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area within which the data is being rendered.\n     * @param info  collects drawing info.\n     * @param plot  the plot (can be used to obtain standard color\n     *              information etc).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param crosshairState  crosshair information for the plot\n     *                        ({@code null} permitted).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.fillDomainGridBand": "/**\n     * Fills a band between two values on the axis.  This can be used to color\n     * bands between the grid lines.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param axis  the domain axis.\n     * @param dataArea  the data area.\n     * @param start  the start value.\n     * @param end  the end value.\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.fillRangeGridBand": "/**\n     * Fills a band between two values on the range axis.  This can be used to\n     * color bands between the grid lines.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param axis  the range axis.\n     * @param dataArea  the data area.\n     * @param start  the start value.\n     * @param end  the end value.\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.drawDomainLine": "/**\n     * Draws a grid line against the domain axis.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param axis  the value axis.\n     * @param dataArea  the area for plotting data.\n     * @param value  the value.\n     * @param paint  the paint ({@code null} not permitted).\n     * @param stroke  the stroke ({@code null} not permitted).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.drawRangeLine": "/**\n     * Draws a line perpendicular to the range axis.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param axis  the value axis.\n     * @param dataArea  the area for plotting data.\n     * @param value  the data value.\n     * @param paint  the paint ({@code null} not permitted).\n     * @param stroke  the stroke ({@code null} not permitted).\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.drawDomainMarker": "/**\n     * Draws the specified {@code marker} against the domain axis.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param axis  the value axis.\n     * @param marker  the marker.\n     * @param dataArea  the axis data area.\n     */\n",
"org.jfree.chart.renderer.xy.XYItemRenderer.drawRangeMarker": "/**\n     * Draws a horizontal line across the chart to represent a 'range marker'.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param axis  the value axis.\n     * @param marker  the marker line.\n     * @param dataArea  the axis data area.\n     */\n",
"org.jfree.chart.renderer.xy.XYBlockRenderer.getBlockWidth": "/**\n     * Returns the block width, in data/axis units.\n     *\n     * @return The block width.\n     *\n     * @see #setBlockWidth(double)\n     */\n",
"org.jfree.chart.renderer.xy.XYBlockRenderer.setBlockWidth": "/**\n     * Sets the width of the blocks used to represent each data item and\n     * sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param width  the new width, in data/axis units (must be &gt; 0.0).\n     *\n     * @see #getBlockWidth()\n     */\n",
"org.jfree.chart.renderer.xy.XYBlockRenderer.getBlockHeight": "/**\n     * Returns the block height, in data/axis units.\n     *\n     * @return The block height.\n     *\n     * @see #setBlockHeight(double)\n     */\n",
"org.jfree.chart.renderer.xy.XYBlockRenderer.setBlockHeight": "/**\n     * Sets the height of the blocks used to represent each data item and\n     * sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param height  the new height, in data/axis units (must be &gt; 0.0).\n     *\n     * @see #getBlockHeight()\n     */\n",
"org.jfree.chart.renderer.xy.XYBlockRenderer.getBlockAnchor": "/**\n     * Returns the anchor point used to align a block at its (x, y) location.\n     * The default values is {@link RectangleAnchor#CENTER}.\n     *\n     * @return The anchor point (never {@code null}).\n     *\n     * @see #setBlockAnchor(RectangleAnchor)\n     */\n",
"org.jfree.chart.renderer.xy.XYBlockRenderer.setBlockAnchor": "/**\n     * Sets the anchor point used to align a block at its (x, y) location and\n     * sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param anchor  the anchor.\n     *\n     * @see #getBlockAnchor()\n     */\n",
"org.jfree.chart.renderer.xy.XYBlockRenderer.getPaintScale": "/**\n     * Returns the paint scale used by the renderer.\n     *\n     * @return The paint scale (never {@code null}).\n     *\n     * @see #setPaintScale(PaintScale)\n     * @since 1.0.4\n     */\n",
"org.jfree.chart.renderer.xy.XYBlockRenderer.setPaintScale": "/**\n     * Sets the paint scale used by the renderer and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param scale  the scale ({@code null} not permitted).\n     *\n     * @see #getPaintScale()\n     * @since 1.0.4\n     */\n",
"org.jfree.chart.renderer.xy.XYBlockRenderer.updateOffsets": "/**\n     * Updates the offsets to take into account the block width, height and\n     * anchor.\n     */\n",
"org.jfree.chart.renderer.xy.XYBlockRenderer.findDomainBounds": "/**\n     * Returns the lower and upper bounds (range) of the x-values in the\n     * specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range ({@code null} if the dataset is {@code null}\n     *         or empty).\n     *\n     * @see #findRangeBounds(XYDataset)\n     */\n",
"org.jfree.chart.renderer.xy.XYBlockRenderer.findRangeBounds": "/**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range ({@code null} if the dataset is {@code null}\n     *         or empty).\n     *\n     * @see #findDomainBounds(XYDataset)\n     */\n",
"org.jfree.chart.renderer.xy.XYBlockRenderer.drawItem": "/**\n     * Draws the block representing the specified item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the state.\n     * @param dataArea  the data area.\n     * @param info  the plot rendering info.\n     * @param plot  the plot.\n     * @param domainAxis  the x-axis.\n     * @param rangeAxis  the y-axis.\n     * @param dataset  the dataset.\n     * @param series  the series index.\n     * @param item  the item index.\n     * @param crosshairState  the crosshair state.\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.xy.XYBlockRenderer.equals": "/**\n     * Tests this {@code XYBlockRenderer} for equality with an arbitrary\n     * object.  This method returns {@code true} if and only if:\n     * <ul>\n     * <li>{@code obj} is an instance of {@code XYBlockRenderer} (not\n     *     {@code null});</li>\n     * <li>{@code obj} has the same field values as this\n     *     {@code XYBlockRenderer};</li>\n     * </ul>\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.XYBlockRenderer.clone": "/**\n     * Returns a clone of this renderer.\n     *\n     * @return A clone of this renderer.\n     *\n     * @throws CloneNotSupportedException if there is a problem creating the\n     *     clone.\n     */\n",
"org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.getPassCount": "/**\n     * Returns the number of passes through the dataset that this renderer\n     * requires.  In this case, two passes are required, the first for drawing\n     * the shadows (if visible), and the second for drawing the bars.\n     *\n     * @return {@code 2}.\n     */\n",
"org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.findDomainBounds": "/**\n     * Returns the x-value bounds for the specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The bounds (possibly {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.findDomainBoundsWithOffset": "/**\n     * Iterates over the items in an {@link IntervalXYDataset} to find\n     * the range of x-values including the interval OFFSET so that it centers\n     * the interval around the start value.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The range (possibly {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.drawItem": "/**\n     * Draws the visual representation of a single data item. This method\n     * is mostly copied from the superclass, the change is that in the\n     * calculated space for a singe bar we draw bars for each series next to\n     * each other. The width of each bar is the available width divided by\n     * the number of series. Bars for each series are drawn in order left to\n     * right.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area within which the plot is being drawn.\n     * @param info  collects information about the drawing.\n     * @param plot  the plot (can be used to obtain standard color\n     *              information etc).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param series  the series index.\n     * @param item  the item index.\n     * @param crosshairState  crosshair information for the plot\n     *                        ({@code null} permitted).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.equals": "/**\n     * Tests this renderer for equality with an arbitrary object, returning\n     * {@code true} if {@code obj} is a {@code ClusteredXYBarRenderer} with the\n     * same settings as this renderer, and {@code false} otherwise.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.clone": "/**\n     * Returns a clone of the renderer.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the renderer cannot be cloned.\n     */\n",
"org.jfree.chart.renderer.xy.DeviationStepRenderer.drawItem": "/**\n     * Draws the visual representation of a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area within which the data is being drawn.\n     * @param info  collects information about the drawing.\n     * @param plot  the plot (can be used to obtain standard color\n     *              information etc).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param crosshairState  crosshair information for the plot\n     *                        ({@code null} permitted).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.xy.DeviationStepRenderer.drawPrimaryLineAsPath": "/**\n     * Draws the item (first pass). This method draws the lines\n     * connecting the items. Instead of drawing separate lines,\n     * a {@code GeneralPath} is constructed and drawn at the end of\n     * the series painting.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param plot  the plot (can be used to obtain standard color information\n     *              etc).\n     * @param dataset  the dataset.\n     * @param pass  the pass.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataArea  the area within which the data is being drawn.\n     */\n",
"org.jfree.chart.renderer.xy.DeviationStepRenderer.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.getBoxWidth": "/**\n     * Returns the width of each box.\n     *\n     * @return The box width.\n     *\n     * @see #setBoxWidth(double)\n     */\n",
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.setBoxWidth": "/**\n     * Sets the box width and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     * <P>\n     * If you set the width to a negative value, the renderer will calculate\n     * the box width automatically based on the space available on the chart.\n     *\n     * @param width  the width.\n     *\n     * @see #getBoxWidth()\n     */\n",
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.getBoxPaint": "/**\n     * Returns the paint used to fill boxes.\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setBoxPaint(Paint)\n     */\n",
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.setBoxPaint": "/**\n     * Sets the paint used to fill boxes and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getBoxPaint()\n     */\n",
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.getFillBox": "/**\n     * Returns the flag that controls whether or not the box is filled.\n     *\n     * @return A boolean.\n     *\n     * @see #setFillBox(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.setFillBox": "/**\n     * Sets the flag that controls whether or not the box is filled and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #setFillBox(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.getArtifactPaint": "/**\n     * Returns the paint used to paint the various artifacts such as outliers,\n     * farout symbol, median line and the averages ellipse.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setArtifactPaint(Paint)\n     */\n",
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.setArtifactPaint": "/**\n     * Sets the paint used to paint the various artifacts such as outliers,\n     * farout symbol, median line and the averages ellipse, and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getArtifactPaint()\n     */\n",
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.findRangeBounds": "/**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range ({@code null} if the dataset is {@code null}\n     *         or empty).\n     *\n     * @see #findDomainBounds(XYDataset)\n     */\n",
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.lookupBoxPaint": "/**\n     * Returns the box paint or, if this is {@code null}, the item\n     * paint.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The paint used to fill the box for the specified item (never\n     *         {@code null}).\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.drawItem": "/**\n     * Draws the visual representation of a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area within which the plot is being drawn.\n     * @param info  collects info about the drawing.\n     * @param plot  the plot (can be used to obtain standard color\n     *              information etc).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset (must be an instance of\n     *                 {@link BoxAndWhiskerXYDataset}).\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param crosshairState  crosshair information for the plot\n     *                        ({@code null} permitted).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.drawHorizontalItem": "/**\n     * Draws the visual representation of a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area within which the plot is being drawn.\n     * @param info  collects info about the drawing.\n     * @param plot  the plot (can be used to obtain standard color\n     *              information etc).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset (must be an instance of\n     *                 {@link BoxAndWhiskerXYDataset}).\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param crosshairState  crosshair information for the plot\n     *                        ({@code null} permitted).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.drawVerticalItem": "/**\n     * Draws the visual representation of a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area within which the plot is being drawn.\n     * @param info  collects info about the drawing.\n     * @param plot  the plot (can be used to obtain standard color\n     *              information etc).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset (must be an instance of\n     *                 {@link BoxAndWhiskerXYDataset}).\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param crosshairState  crosshair information for the plot\n     *                        ({@code null} permitted).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.drawEllipse": "/**\n     * Draws an ellipse to represent an outlier.\n     *\n     * @param point  the location.\n     * @param oRadius  the radius.\n     * @param g2  the graphics device.\n     */\n",
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.drawMultipleEllipse": "/**\n     * Draws two ellipses to represent overlapping outliers.\n     *\n     * @param point  the location.\n     * @param boxWidth  the box width.\n     * @param oRadius  the radius.\n     * @param g2  the graphics device.\n     */\n",
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.drawHighFarOut": "/**\n     * Draws a triangle to indicate the presence of far out values.\n     *\n     * @param aRadius  the radius.\n     * @param g2  the graphics device.\n     * @param xx  the x value.\n     * @param m  the max y value.\n     */\n",
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.drawLowFarOut": "/**\n     * Draws a triangle to indicate the presence of far out values.\n     *\n     * @param aRadius  the radius.\n     * @param g2  the graphics device.\n     * @param xx  the x value.\n     * @param m  the min y value.\n     */\n",
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.equals": "/**\n     * Tests this renderer for equality with another object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.clone": "/**\n     * Returns a clone of the renderer.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the renderer cannot be cloned.\n     */\n",
"org.jfree.chart.renderer.xy.XYDifferenceRenderer.getPositivePaint": "/**\n     * Returns the paint used to highlight positive differences.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setPositivePaint(Paint)\n     */\n",
"org.jfree.chart.renderer.xy.XYDifferenceRenderer.setPositivePaint": "/**\n     * Sets the paint used to highlight positive differences and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getPositivePaint()\n     */\n",
"org.jfree.chart.renderer.xy.XYDifferenceRenderer.getNegativePaint": "/**\n     * Returns the paint used to highlight negative differences.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setNegativePaint(Paint)\n     */\n",
"org.jfree.chart.renderer.xy.XYDifferenceRenderer.setNegativePaint": "/**\n     * Sets the paint used to highlight negative differences.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getNegativePaint()\n     */\n",
"org.jfree.chart.renderer.xy.XYDifferenceRenderer.getShapesVisible": "/**\n     * Returns a flag that controls whether or not shapes are drawn for each\n     * data value.\n     *\n     * @return A boolean.\n     *\n     * @see #setShapesVisible(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYDifferenceRenderer.setShapesVisible": "/**\n     * Sets a flag that controls whether or not shapes are drawn for each\n     * data value, and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #getShapesVisible()\n     */\n",
"org.jfree.chart.renderer.xy.XYDifferenceRenderer.getLegendLine": "/**\n     * Returns the shape used to represent a line in the legend.\n     *\n     * @return The legend line (never {@code null}).\n     *\n     * @see #setLegendLine(Shape)\n     */\n",
"org.jfree.chart.renderer.xy.XYDifferenceRenderer.setLegendLine": "/**\n     * Sets the shape used as a line in each legend item and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param line  the line ({@code null} not permitted).\n     *\n     * @see #getLegendLine()\n     */\n",
"org.jfree.chart.renderer.xy.XYDifferenceRenderer.getRoundXCoordinates": "/**\n     * Returns the flag that controls whether or not the x-coordinates (in\n     * Java2D space) are rounded to integer values.\n     *\n     * @return The flag.\n     *\n     * @since 1.0.4\n     *\n     * @see #setRoundXCoordinates(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYDifferenceRenderer.setRoundXCoordinates": "/**\n     * Sets the flag that controls whether or not the x-coordinates (in\n     * Java2D space) are rounded to integer values, and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param round  the new flag value.\n     *\n     * @since 1.0.4\n     *\n     * @see #getRoundXCoordinates()\n     */\n",
"org.jfree.chart.renderer.xy.XYDifferenceRenderer.initialise": "/**\n     * Initialises the renderer and returns a state object that should be\n     * passed to subsequent calls to the drawItem() method.  This method will\n     * be called before the first item is rendered, giving the renderer an\n     * opportunity to initialise any state information it wants to maintain.\n     * The renderer can do nothing if it chooses.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area inside the axes.\n     * @param plot  the plot.\n     * @param data  the data.\n     * @param info  an optional info collection object to return data back to\n     *              the caller.\n     *\n     * @return A state object.\n     */\n",
"org.jfree.chart.renderer.xy.XYDifferenceRenderer.getPassCount": "/**\n     * Returns {@code 2}, the number of passes required by the renderer.\n     * The {@link XYPlot} will run through the dataset this number of times.\n     *\n     * @return The number of passes required by the renderer.\n     */\n",
"org.jfree.chart.renderer.xy.XYDifferenceRenderer.drawItem": "/**\n     * Draws the visual representation of a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area within which the data is being drawn.\n     * @param info  collects information about the drawing.\n     * @param plot  the plot (can be used to obtain standard color\n     *              information etc).\n     * @param domainAxis  the domain (horizontal) axis.\n     * @param rangeAxis  the range (vertical) axis.\n     * @param dataset  the dataset.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param crosshairState  crosshair information for the plot\n     *                        ({@code null} permitted).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.xy.XYDifferenceRenderer.drawItemPass0": "/**\n     * Draws the visual representation of a single data item, first pass.\n     *\n     * @param x_graphics  the graphics device.\n     * @param x_dataArea  the area within which the data is being drawn.\n     * @param x_info  collects information about the drawing.\n     * @param x_plot  the plot (can be used to obtain standard color\n     *                information etc).\n     * @param x_domainAxis  the domain (horizontal) axis.\n     * @param x_rangeAxis  the range (vertical) axis.\n     * @param x_dataset  the dataset.\n     * @param x_series  the series index (zero-based).\n     * @param x_item  the item index (zero-based).\n     * @param x_crosshairState  crosshair information for the plot\n     *                          ({@code null} permitted).\n     */\n",
"org.jfree.chart.renderer.xy.XYDifferenceRenderer.drawItemPass1": "/**\n     * Draws the visual representation of a single data item, second pass.  In\n     * the second pass, the renderer draws the lines and shapes for the\n     * individual points in the two series.\n     *\n     * @param x_graphics  the graphics device.\n     * @param x_dataArea  the area within which the data is being drawn.\n     * @param x_info  collects information about the drawing.\n     * @param x_plot  the plot (can be used to obtain standard color\n     *         information etc).\n     * @param x_domainAxis  the domain (horizontal) axis.\n     * @param x_rangeAxis  the range (vertical) axis.\n     * @param x_dataset  the dataset.\n     * @param x_series  the series index (zero-based).\n     * @param x_item  the item index (zero-based).\n     * @param x_crosshairState  crosshair information for the plot\n     *                          ({@code null} permitted).\n     */\n",
"org.jfree.chart.renderer.xy.XYDifferenceRenderer.isEitherSeriesDegenerate": "/**\n     * Determines if a dataset is degenerate.  A degenerate dataset is a\n     * dataset where either series has less than two (2) points.\n     *\n     * @param x_dataset  the dataset.\n     * @param x_impliedZeroSubtrahend  if false, do not check the subtrahend\n     *\n     * @return true if the dataset is degenerate.\n     */\n",
"org.jfree.chart.renderer.xy.XYDifferenceRenderer.areSeriesDisjoint": "/**\n     * Determines if the two (2) series are disjoint.\n     * Disjoint series do not overlap in the domain space.\n     *\n     * @param x_dataset  the dataset.\n     *\n     * @return true if the dataset is degenerate.\n     */\n",
"org.jfree.chart.renderer.xy.XYDifferenceRenderer.createPolygon": "/**\n     * Draws the visual representation of a polygon\n     *\n     * @param x_graphics  the graphics device.\n     * @param x_dataArea  the area within which the data is being drawn.\n     * @param x_plot  the plot (can be used to obtain standard color\n     *                information etc).\n     * @param x_domainAxis  the domain (horizontal) axis.\n     * @param x_rangeAxis  the range (vertical) axis.\n     * @param x_positive  indicates if the polygon is positive (true) or\n     *                    negative (false).\n     * @param x_xValues  a linked list of the x values (expects values to be\n     *                   of type Double).\n     * @param x_yValues  a linked list of the y values (expects values to be\n     *                   of type Double).\n     */\n",
"org.jfree.chart.renderer.xy.XYDifferenceRenderer.getLegendItem": "/**\n     * Returns a default legend item for the specified series.  Subclasses\n     * should override this method to generate customised items.\n     *\n     * @param datasetIndex  the dataset index (zero-based).\n     * @param series  the series index (zero-based).\n     *\n     * @return A legend item for the series.\n     */\n",
"org.jfree.chart.renderer.xy.XYDifferenceRenderer.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.XYDifferenceRenderer.clone": "/**\n     * Returns a clone of the renderer.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the renderer cannot be cloned.\n     */\n",
"org.jfree.chart.renderer.xy.XYDifferenceRenderer.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.renderer.xy.XYDifferenceRenderer.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.renderer.xy.XYErrorRenderer.getDrawXError": "/**\n     * Returns the flag that controls whether or not the renderer draws error\n     * bars for the x-values.\n     *\n     * @return A boolean.\n     *\n     * @see #setDrawXError(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYErrorRenderer.setDrawXError": "/**\n     * Sets the flag that controls whether or not the renderer draws error\n     * bars for the x-values and, if the flag changes, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param draw  the flag value.\n     *\n     * @see #getDrawXError()\n     */\n",
"org.jfree.chart.renderer.xy.XYErrorRenderer.getDrawYError": "/**\n     * Returns the flag that controls whether or not the renderer draws error\n     * bars for the y-values.\n     *\n     * @return A boolean.\n     *\n     * @see #setDrawYError(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYErrorRenderer.setDrawYError": "/**\n     * Sets the flag that controls whether or not the renderer draws error\n     * bars for the y-values and, if the flag changes, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param draw  the flag value.\n     *\n     * @see #getDrawYError()\n     */\n",
"org.jfree.chart.renderer.xy.XYErrorRenderer.getCapLength": "/**\n     * Returns the length (in Java2D units) of the cap at the end of the error\n     * bars.\n     *\n     * @return The cap length.\n     *\n     * @see #setCapLength(double)\n     */\n",
"org.jfree.chart.renderer.xy.XYErrorRenderer.setCapLength": "/**\n     * Sets the length of the cap at the end of the error bars, and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param length  the length (in Java2D units).\n     *\n     * @see #getCapLength()\n     */\n",
"org.jfree.chart.renderer.xy.XYErrorRenderer.getErrorPaint": "/**\n     * Returns the paint used to draw the error bars.  If this is\n     * {@code null} (the default), the item paint is used instead.\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setErrorPaint(Paint)\n     */\n",
"org.jfree.chart.renderer.xy.XYErrorRenderer.setErrorPaint": "/**\n     * Sets the paint used to draw the error bars and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getErrorPaint()\n     */\n",
"org.jfree.chart.renderer.xy.XYErrorRenderer.getErrorStroke": "/**\n     * Returns the stroke used to draw the error bars.  If this is \n     * {@code null} (the default), the item outline stroke is used \n     * instead.\n     * \n     * @return The stroke (possibly {@code null}).\n     *\n     * @see #setErrorStroke(Stroke)\n     * \n     * @since 1.0.13\n     */\n",
"org.jfree.chart.renderer.xy.XYErrorRenderer.setErrorStroke": "/**\n     * Sets the stroke used to draw the error bars and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param stroke   the stroke ({@code null} permitted).\n     *\n     * @see #getErrorStroke()\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.renderer.xy.XYErrorRenderer.findDomainBounds": "/**\n     * Returns the range required by this renderer to display all the domain\n     * values in the specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range, or {@code null} if the dataset is\n     *     {@code null}.\n     */\n",
"org.jfree.chart.renderer.xy.XYErrorRenderer.findRangeBounds": "/**\n     * Returns the range required by this renderer to display all the range\n     * values in the specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range, or {@code null} if the dataset is\n     *     {@code null}.\n     */\n",
"org.jfree.chart.renderer.xy.XYErrorRenderer.drawItem": "/**\n     * Draws the visual representation for one data item.\n     *\n     * @param g2  the graphics output target.\n     * @param state  the renderer state.\n     * @param dataArea  the data area.\n     * @param info  the plot rendering info.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param series  the series index.\n     * @param item  the item index.\n     * @param crosshairState  the crosshair state.\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.xy.XYErrorRenderer.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.XYErrorRenderer.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.renderer.xy.XYErrorRenderer.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.renderer.xy.DeviationRenderer.getAlpha": "/**\n     * Returns the alpha transparency for the background shading.\n     *\n     * @return The alpha transparency.\n     *\n     * @see #setAlpha(float)\n     */\n",
"org.jfree.chart.renderer.xy.DeviationRenderer.setAlpha": "/**\n     * Sets the alpha transparency for the background shading, and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param alpha   the alpha (in the range 0.0f to 1.0f).\n     *\n     * @see #getAlpha()\n     */\n",
"org.jfree.chart.renderer.xy.DeviationRenderer.setDrawSeriesLineAsPath": "/**\n     * This method is overridden so that this flag cannot be changed---it is\n     * set to {@code true} for this renderer.\n     *\n     * @param flag  ignored.\n     */\n",
"org.jfree.chart.renderer.xy.DeviationRenderer.findRangeBounds": "/**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range ({@code null} if the dataset is {@code null}\n     *         or empty).\n     */\n",
"org.jfree.chart.renderer.xy.DeviationRenderer.initialise": "/**\n     * Initialises and returns a state object that can be passed to each\n     * invocation of the {@link #drawItem} method.\n     *\n     * @param g2  the graphics target.\n     * @param dataArea  the data area.\n     * @param plot  the plot.\n     * @param dataset  the dataset.\n     * @param info  the plot rendering info.\n     *\n     * @return A newly initialised state object.\n     */\n",
"org.jfree.chart.renderer.xy.DeviationRenderer.getPassCount": "/**\n     * Returns the number of passes (through the dataset) used by this\n     * renderer.\n     *\n     * @return {@code 3}.\n     */\n",
"org.jfree.chart.renderer.xy.DeviationRenderer.isItemPass": "/**\n     * Returns {@code true} if this is the pass where the shapes are\n     * drawn.\n     *\n     * @param pass  the pass index.\n     *\n     * @return A boolean.\n     *\n     * @see #isLinePass(int)\n     */\n",
"org.jfree.chart.renderer.xy.DeviationRenderer.isLinePass": "/**\n     * Returns {@code true} if this is the pass where the lines are\n     * drawn.\n     *\n     * @param pass  the pass index.\n     *\n     * @return A boolean.\n     *\n     * @see #isItemPass(int)\n     */\n",
"org.jfree.chart.renderer.xy.DeviationRenderer.drawItem": "/**\n     * Draws the visual representation of a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area within which the data is being drawn.\n     * @param info  collects information about the drawing.\n     * @param plot  the plot (can be used to obtain standard color\n     *              information etc).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param crosshairState  crosshair information for the plot\n     *                        ({@code null} permitted).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.xy.DeviationRenderer.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.getRoundXCoordinates": "/**\n     * Returns the flag that controls whether or not the x-coordinates (in\n     * Java2D space) are rounded to integer values.\n     *\n     * @return The flag.\n     *\n     * @since 1.0.4\n     *\n     * @see #setRoundXCoordinates(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.setRoundXCoordinates": "/**\n     * Sets the flag that controls whether or not the x-coordinates (in\n     * Java2D space) are rounded to integer values, and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param round  the new flag value.\n     *\n     * @since 1.0.4\n     *\n     * @see #getRoundXCoordinates()\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.findRangeBounds": "/**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range (or {@code null} if the dataset is {@code null} or \n     *     empty).\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.getPassCount": "/**\n     * Returns the number of passes required by the renderer.\n     *\n     * @return 1.\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.drawItem": "/**\n     * Draws the visual representation of a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area within which the data is being drawn.\n     * @param info  collects information about the drawing.\n     * @param plot  the plot (can be used to obtain standard color information\n     *              etc).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param crosshairState  information about crosshairs on a plot.\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.getStackValues": "/**\n     * Calculates the stacked values (one positive and one negative) of all\n     * series up to, but not including, {@code series} for the specified\n     * item. It returns [0.0, 0.0] if {@code series} is the first series.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series index.\n     * @param index  the item index.\n     *\n     * @return An array containing the cumulative negative and positive values\n     *     for all series values up to but excluding {@code series}\n     *     for {@code index}.\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.averageStackValues": "/**\n     * Returns a pair of \"stack\" values calculated as the mean of the two\n     * specified stack value pairs.\n     *\n     * @param stack1  the first stack pair.\n     * @param stack2  the second stack pair.\n     *\n     * @return A pair of average stack values.\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.adjustedStackValues": "/**\n     * Calculates adjusted stack values from the supplied values.  The value is\n     * the mean of the supplied values, unless either of the supplied values\n     * is zero, in which case the adjusted value is zero also.\n     *\n     * @param stack1  the first stack pair.\n     * @param stack2  the second stack pair.\n     *\n     * @return A pair of average stack values.\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.clone": "/**\n     * Returns a clone of the renderer.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the renderer cannot be cloned.\n     */\n",
"org.jfree.chart.renderer.xy.YIntervalRenderer.getAdditionalItemLabelGenerator": "/**\n     * Returns the generator for the item labels that appear near the lower\n     * y-value.\n     *\n     * @return The generator (possibly {@code null}).\n     *\n     * @see #setAdditionalItemLabelGenerator(XYItemLabelGenerator)\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.renderer.xy.YIntervalRenderer.setAdditionalItemLabelGenerator": "/**\n     * Sets the generator for the item labels that appear near the lower\n     * y-value and sends a {@link RendererChangeEvent} to all registered\n     * listeners.  If this is set to {@code null}, no item labels will be\n     * drawn.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getAdditionalItemLabelGenerator()\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.renderer.xy.YIntervalRenderer.findRangeBounds": "/**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range ({@code null} if the dataset is {@code null} or empty).\n     */\n",
"org.jfree.chart.renderer.xy.YIntervalRenderer.drawItem": "/**\n     * Draws the visual representation of a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area within which the plot is being drawn.\n     * @param info  collects information about the drawing.\n     * @param plot  the plot (can be used to obtain standard color\n     *              information etc).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param crosshairState  crosshair information for the plot\n     *                        ({@code null} permitted).\n     * @param pass  the pass index (ignored here).\n     */\n",
"org.jfree.chart.renderer.xy.YIntervalRenderer.drawAdditionalItemLabel": "/**\n     * Draws an item label.\n     *\n     * @param g2  the graphics device.\n     * @param orientation  the orientation.\n     * @param dataset  the dataset.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param x  the x coordinate (in Java2D space).\n     * @param y  the y coordinate (in Java2D space).\n     */\n",
"org.jfree.chart.renderer.xy.YIntervalRenderer.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.YIntervalRenderer.clone": "/**\n     * Returns a clone of the renderer.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the renderer cannot be cloned.\n     */\n",
"org.jfree.chart.renderer.xy.XYSplineRenderer.getPrecision": "/**\n     * Returns the number of line segments used to approximate the spline\n     * curve between data points.\n     *\n     * @return The number of line segments.\n     *\n     * @see #setPrecision(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYSplineRenderer.setPrecision": "/**\n     * Set the resolution of splines and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param p  number of line segments between points (must be &gt; 0).\n     *\n     * @see #getPrecision()\n     */\n",
"org.jfree.chart.renderer.xy.XYSplineRenderer.getFillType": "/**\n     * Returns the type of fill that the renderer draws beneath the curve.\n     *\n     * @return The type of fill (never {@code null}).\n     *\n     * @see #setFillType(FillType) \n     * \n     * @since 1.0.17\n     */\n",
"org.jfree.chart.renderer.xy.XYSplineRenderer.setFillType": "/**\n     * Set the fill type and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param fillType   the fill type ({@code null} not permitted).\n     *\n     * @see #getFillType()\n     * \n     * @since 1.0.17\n     */\n",
"org.jfree.chart.renderer.xy.XYSplineRenderer.getGradientPaintTransformer": "/**\n     * Returns the gradient paint transformer, or {@code null}.\n     * \n     * @return The gradient paint transformer (possibly {@code null}).\n     * \n     * @since 1.0.17\n     */\n",
"org.jfree.chart.renderer.xy.XYSplineRenderer.setGradientPaintTransformer": "/**\n     * Sets the gradient paint transformer and sends a \n     * {@link RendererChangeEvent} to all registered listeners.\n     * \n     * @param gpt  the transformer ({@code null} permitted).\n     * \n     * @since 1.0.17\n     */\n",
"org.jfree.chart.renderer.xy.XYSplineRenderer.initialise": "/**\n     * Initialises the renderer.\n     * <P>\n     * This method will be called before the first item is rendered, giving the\n     * renderer an opportunity to initialise any state information it wants to\n     * maintain.  The renderer can do nothing if it chooses.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area inside the axes.\n     * @param plot  the plot.\n     * @param data  the data.\n     * @param info  an optional info collection object to return data back to\n     *              the caller.\n     *\n     * @return The renderer state.\n     */\n",
"org.jfree.chart.renderer.xy.XYSplineRenderer.drawPrimaryLineAsPath": "/**\n     * Draws the item (first pass). This method draws the lines\n     * connecting the items. Instead of drawing separate lines,\n     * a GeneralPath is constructed and drawn at the end of\n     * the series painting.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param plot  the plot (can be used to obtain standard color information\n     *              etc).\n     * @param dataset  the dataset.\n     * @param pass  the pass.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param xAxis  the domain axis.\n     * @param yAxis  the range axis.\n     * @param dataArea  the area within which the data is being drawn.\n     */\n",
"org.jfree.chart.renderer.xy.XYSplineRenderer.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer.getSeriesArea": "/**\n         * Returns the series area.\n         *\n         * @return The series area.\n         */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer.setSeriesArea": "/**\n         * Sets the series area.\n         *\n         * @param area  the area.\n         */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer.getLine": "/**\n         * Returns the working line.\n         *\n         * @return The working line.\n         */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer.getCurrentSeriesPoints": "/**\n         * Returns the current series points.\n         *\n         * @return The current series points.\n         */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer.setCurrentSeriesPoints": "/**\n         * Sets the current series points.\n         *\n         * @param points  the points.\n         */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer.getLastSeriesPoints": "/**\n         * Returns the last series points.\n         *\n         * @return The last series points.\n         */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer.setLastSeriesPoints": "/**\n         * Sets the last series points.\n         *\n         * @param points  the points.\n         */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer.getShapePaint": "/**\n     * Returns the paint used for rendering shapes, or {@code null} if\n     * using series paints.\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setShapePaint(Paint)\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer.setShapePaint": "/**\n     * Sets the paint for rendering shapes and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param shapePaint  the paint ({@code null} permitted).\n     *\n     * @see #getShapePaint()\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer.getShapeStroke": "/**\n     * Returns the stroke used for rendering shapes, or {@code null} if\n     * using series strokes.\n     *\n     * @return The stroke (possibly {@code null}).\n     *\n     * @see #setShapeStroke(Stroke)\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer.setShapeStroke": "/**\n     * Sets the stroke for rendering shapes and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param shapeStroke  the stroke ({@code null} permitted).\n     *\n     * @see #getShapeStroke()\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer.initialise": "/**\n     * Initialises the renderer. This method will be called before the first\n     * item is rendered, giving the renderer an opportunity to initialise any\n     * state information it wants to maintain.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area inside the axes.\n     * @param plot  the plot.\n     * @param data  the data.\n     * @param info  an optional info collection object to return data back to\n     *              the caller.\n     *\n     * @return A state object that should be passed to subsequent calls to the\n     *         drawItem() method.\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer.getPassCount": "/**\n     * Returns the number of passes required by the renderer.\n     *\n     * @return 2.\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer.findRangeBounds": "/**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range ([0.0, 0.0] if the dataset contains no values, and\n     *         {@code null} if the dataset is {@code null}).\n     *\n     * @throws ClassCastException if {@code dataset} is not an instance\n     *         of {@link TableXYDataset}.\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer.drawItem": "/**\n     * Draws the visual representation of a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area within which the data is being drawn.\n     * @param info  collects information about the drawing.\n     * @param plot  the plot (can be used to obtain standard color information\n     *              etc).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param crosshairState  information about crosshairs on a plot.\n     * @param pass  the pass index.\n     *\n     * @throws ClassCastException if {@code state} is not an instance of\n     *         {@code StackedXYAreaRendererState} or {@code dataset}\n     *         is not an instance of {@link TableXYDataset}.\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer.getPreviousHeight": "/**\n     * Calculates the stacked value of the all series up to, but not including\n     * {@code series} for the specified item. It returns 0.0 if\n     * {@code series} is the first series, i.e. 0.\n     *\n     * @param dataset  the dataset.\n     * @param series  the series.\n     * @param index  the index.\n     *\n     * @return The cumulative value for all series' values up to but excluding\n     *         {@code series} for {@code index}.\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer.equals": "/**\n     * Tests the renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer.clone": "/**\n     * Returns a clone of the renderer.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if the renderer cannot be cloned.\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.renderer.xy.XYBubbleRenderer.getScaleType": "/**\n     * Returns the scale type that was set when the renderer was constructed.\n     *\n     * @return The scale type (one of: {@link #SCALE_ON_BOTH_AXES},\n     *         {@link #SCALE_ON_DOMAIN_AXIS}, {@link #SCALE_ON_RANGE_AXIS}).\n     */\n",
"org.jfree.chart.renderer.xy.XYBubbleRenderer.drawItem": "/**\n     * Draws the visual representation of a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area within which the data is being drawn.\n     * @param info  collects information about the drawing.\n     * @param plot  the plot (can be used to obtain standard color\n     *              information etc).\n     * @param domainAxis  the domain (horizontal) axis.\n     * @param rangeAxis  the range (vertical) axis.\n     * @param dataset  the dataset (an {@link XYZDataset} is expected).\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param crosshairState  crosshair information for the plot\n     *                        ({@code null} permitted).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.xy.XYBubbleRenderer.getLegendItem": "/**\n     * Returns a legend item for the specified series.  The default method\n     * is overridden so that the legend displays circles for all series.\n     *\n     * @param datasetIndex  the dataset index (zero-based).\n     * @param series  the series index (zero-based).\n     *\n     * @return A legend item for the series.\n     */\n",
"org.jfree.chart.renderer.xy.XYBubbleRenderer.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.XYBubbleRenderer.clone": "/**\n     * Returns a clone of the renderer.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the renderer cannot be cloned.\n     */\n",
"org.jfree.chart.renderer.xy.HighLowRenderer.getDrawOpenTicks": "/**\n     * Returns the flag that controls whether open ticks are drawn.\n     *\n     * @return A boolean.\n     *\n     * @see #getDrawCloseTicks()\n     * @see #setDrawOpenTicks(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.HighLowRenderer.setDrawOpenTicks": "/**\n     * Sets the flag that controls whether open ticks are drawn, and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param draw  the flag.\n     *\n     * @see #getDrawOpenTicks()\n     */\n",
"org.jfree.chart.renderer.xy.HighLowRenderer.getDrawCloseTicks": "/**\n     * Returns the flag that controls whether close ticks are drawn.\n     *\n     * @return A boolean.\n     *\n     * @see #getDrawOpenTicks()\n     * @see #setDrawCloseTicks(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.HighLowRenderer.setDrawCloseTicks": "/**\n     * Sets the flag that controls whether close ticks are drawn, and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param draw  the flag.\n     *\n     * @see #getDrawCloseTicks()\n     */\n",
"org.jfree.chart.renderer.xy.HighLowRenderer.getOpenTickPaint": "/**\n     * Returns the paint used to draw the ticks for the open values.\n     *\n     * @return The paint used to draw the ticks for the open values (possibly\n     *         {@code null}).\n     *\n     * @see #setOpenTickPaint(Paint)\n     */\n",
"org.jfree.chart.renderer.xy.HighLowRenderer.setOpenTickPaint": "/**\n     * Sets the paint used to draw the ticks for the open values and sends a\n     * {@link RendererChangeEvent} to all registered listeners.  If you set\n     * this to {@code null} (the default), the series paint is used\n     * instead.\n     *\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getOpenTickPaint()\n     */\n",
"org.jfree.chart.renderer.xy.HighLowRenderer.getCloseTickPaint": "/**\n     * Returns the paint used to draw the ticks for the close values.\n     *\n     * @return The paint used to draw the ticks for the close values (possibly\n     *         {@code null}).\n     *\n     * @see #setCloseTickPaint(Paint)\n     */\n",
"org.jfree.chart.renderer.xy.HighLowRenderer.setCloseTickPaint": "/**\n     * Sets the paint used to draw the ticks for the close values and sends a\n     * {@link RendererChangeEvent} to all registered listeners.  If you set\n     * this to {@code null} (the default), the series paint is used\n     * instead.\n     *\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getCloseTickPaint()\n     */\n",
"org.jfree.chart.renderer.xy.HighLowRenderer.getTickLength": "/**\n     * Returns the tick length (in Java2D units).\n     *\n     * @return The tick length.\n     *\n     * @since 1.0.10\n     *\n     * @see #setTickLength(double)\n     */\n",
"org.jfree.chart.renderer.xy.HighLowRenderer.setTickLength": "/**\n     * Sets the tick length (in Java2D units) and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param length  the length.\n     *\n     * @since 1.0.10\n     *\n     * @see #getTickLength()\n     */\n",
"org.jfree.chart.renderer.xy.HighLowRenderer.findRangeBounds": "/**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range ({@code null} if the dataset is {@code null}\n     *         or empty).\n     */\n",
"org.jfree.chart.renderer.xy.HighLowRenderer.drawItem": "/**\n     * Draws the visual representation of a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area within which the plot is being drawn.\n     * @param info  collects information about the drawing.\n     * @param plot  the plot (can be used to obtain standard color\n     *              information etc).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param crosshairState  crosshair information for the plot\n     *                        ({@code null} permitted).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.xy.HighLowRenderer.clone": "/**\n     * Returns a clone of the renderer.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the renderer cannot be cloned.\n     */\n",
"org.jfree.chart.renderer.xy.HighLowRenderer.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.HighLowRenderer.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.renderer.xy.HighLowRenderer.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.renderer.xy.XYDotRenderer.getDotWidth": "/**\n     * Returns the dot width (the default value is 1).\n     *\n     * @return The dot width.\n     *\n     * @since 1.0.2\n     * @see #setDotWidth(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYDotRenderer.setDotWidth": "/**\n     * Sets the dot width and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param w  the new width (must be greater than zero).\n     *\n     * @throws IllegalArgumentException if {@code w} is less than one.\n     *\n     * @since 1.0.2\n     * @see #getDotWidth()\n     */\n",
"org.jfree.chart.renderer.xy.XYDotRenderer.getDotHeight": "/**\n     * Returns the dot height (the default value is 1).\n     *\n     * @return The dot height.\n     *\n     * @since 1.0.2\n     * @see #setDotHeight(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYDotRenderer.setDotHeight": "/**\n     * Sets the dot height and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param h  the new height (must be greater than zero).\n     *\n     * @throws IllegalArgumentException if {@code h} is less than one.\n     *\n     * @since 1.0.2\n     * @see #getDotHeight()\n     */\n",
"org.jfree.chart.renderer.xy.XYDotRenderer.getLegendShape": "/**\n     * Returns the shape used to represent an item in the legend.\n     *\n     * @return The legend shape (never {@code null}).\n     *\n     * @see #setLegendShape(Shape)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.renderer.xy.XYDotRenderer.setLegendShape": "/**\n     * Sets the shape used as a line in each legend item and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param shape  the shape ({@code null} not permitted).\n     *\n     * @see #getLegendShape()\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.renderer.xy.XYDotRenderer.drawItem": "/**\n     * Draws the visual representation of a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area within which the data is being drawn.\n     * @param info  collects information about the drawing.\n     * @param plot  the plot (can be used to obtain standard color\n     *              information etc).\n     * @param domainAxis  the domain (horizontal) axis.\n     * @param rangeAxis  the range (vertical) axis.\n     * @param dataset  the dataset.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param crosshairState  crosshair information for the plot\n     *                        ({@code null} permitted).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.xy.XYDotRenderer.getLegendItem": "/**\n     * Returns a legend item for the specified series.\n     *\n     * @param datasetIndex  the dataset index (zero-based).\n     * @param series  the series index (zero-based).\n     *\n     * @return A legend item for the series (possibly {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.XYDotRenderer.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.  This method\n     * returns {@code true} if and only if:\n     *\n     * <ul>\n     * <li>{@code obj} is not {@code null};</li>\n     * <li>{@code obj} is an instance of {@code XYDotRenderer};</li>\n     * <li>both renderers have the same attribute values.\n     * </ul>\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.XYDotRenderer.clone": "/**\n     * Returns a clone of the renderer.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the renderer cannot be cloned.\n     */\n",
"org.jfree.chart.renderer.xy.XYDotRenderer.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.renderer.xy.XYDotRenderer.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYBarPainter.paintBar": "/**\n     * Paints a single bar instance.\n     *\n     * @param g2  the graphics target.\n     * @param renderer  the renderer.\n     * @param row  the row index.\n     * @param column  the column index.\n     * @param bar  the bar\n     * @param base  indicates which side of the rectangle is the base of the\n     *              bar.\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYBarPainter.paintBarShadow": "/**\n     * Paints a single bar instance.\n     *\n     * @param g2  the graphics target.\n     * @param renderer  the renderer.\n     * @param row  the row index.\n     * @param column  the column index.\n     * @param bar  the bar\n     * @param base  indicates which side of the rectangle is the base of the\n     *              bar.\n     * @param pegShadow  peg the shadow to the base of the bar?\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYBarPainter.createShadow": "/**\n     * Creates a shadow for the bar.\n     *\n     * @param bar  the bar shape.\n     * @param xOffset  the x-offset for the shadow.\n     * @param yOffset  the y-offset for the shadow.\n     * @param base  the edge that is the base of the bar.\n     * @param pegShadow  peg the shadow to the base?\n     *\n     * @return A rectangle for the shadow.\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYBarPainter.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the obj ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.StandardXYBarPainter.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getDrawSeriesLineAsPath": "/**\n     * Returns a flag that controls whether or not each series is drawn as a\n     * single path.  The default value is {@code false}.\n     *\n     * @return A boolean.\n     *\n     * @see #setDrawSeriesLineAsPath(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setDrawSeriesLineAsPath": "/**\n     * Sets the flag that controls whether or not each series is drawn as a\n     * single path and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #getDrawSeriesLineAsPath()\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getPassCount": "/**\n     * Returns the number of passes through the data that the renderer requires\n     * in order to draw the chart.  Most charts will require a single pass, but\n     * some require two passes.\n     *\n     * @return The pass count.\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getItemLineVisible": "/**\n     * Returns the flag used to control whether or not the shape for an item is\n     * visible.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getSeriesLinesVisible": "/**\n     * Returns the flag used to control whether or not the lines for a series\n     * are visible.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The flag (possibly {@code null}).\n     *\n     * @see #setSeriesLinesVisible(int, Boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesLinesVisible": "/**\n     * Sets the 'lines visible' flag for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param flag  the flag ({@code null} permitted).\n     *\n     * @see #getSeriesLinesVisible(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesLinesVisible": "/**\n     * Sets the 'lines visible' flag for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param visible  the flag.\n     *\n     * @see #getSeriesLinesVisible(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getDefaultLinesVisible": "/**\n     * Returns the default 'lines visible' attribute.\n     *\n     * @return The default flag.\n     *\n     * @see #setDefaultLinesVisible(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setDefaultLinesVisible": "/**\n     * Sets the default 'lines visible' flag and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #getDefaultLinesVisible()\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getLegendLine": "/**\n     * Returns the shape used to represent a line in the legend.\n     *\n     * @return The legend line (never {@code null}).\n     *\n     * @see #setLegendLine(Shape)\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setLegendLine": "/**\n     * Sets the shape used as a line in each legend item and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param line  the line ({@code null} not permitted).\n     *\n     * @see #getLegendLine()\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getItemShapeVisible": "/**\n     * Returns the flag used to control whether or not the shape for an item is\n     * visible.\n     * <p>\n     * The default implementation passes control to the\n     * {@code getSeriesShapesVisible()} method. You can override this method\n     * if you require different behaviour.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getSeriesShapesVisible": "/**\n     * Returns the flag used to control whether or not the shapes for a series\n     * are visible.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return A boolean.\n     *\n     * @see #setSeriesShapesVisible(int, Boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesShapesVisible": "/**\n     * Sets the 'shapes visible' flag for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param visible  the flag.\n     *\n     * @see #getSeriesShapesVisible(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesShapesVisible": "/**\n     * Sets the 'shapes visible' flag for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param flag  the flag.\n     *\n     * @see #getSeriesShapesVisible(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getDefaultShapesVisible": "/**\n     * Returns the default 'shape visible' attribute.\n     *\n     * @return The default flag.\n     *\n     * @see #setDefaultShapesVisible(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setDefaultShapesVisible": "/**\n     * Sets the default 'shapes visible' flag and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #getDefaultShapesVisible()\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getItemShapeFilled": "/**\n     * Returns the flag used to control whether or not the shape for an item\n     * is filled.\n     * <p>\n     * The default implementation passes control to the\n     * {@code getSeriesShapesFilled} method. You can override this method\n     * if you require different behaviour.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getSeriesShapesFilled": "/**\n     * Returns the flag used to control whether or not the shapes for a series\n     * are filled.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return A boolean.\n     *\n     * @see #setSeriesShapesFilled(int, Boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesShapesFilled": "/**\n     * Sets the 'shapes filled' flag for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param flag  the flag.\n     *\n     * @see #getSeriesShapesFilled(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesShapesFilled": "/**\n     * Sets the 'shapes filled' flag for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param flag  the flag.\n     *\n     * @see #getSeriesShapesFilled(int)\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getDefaultShapesFilled": "/**\n     * Returns the default 'shape filled' attribute.\n     *\n     * @return The default flag.\n     *\n     * @see #setDefaultShapesFilled(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setDefaultShapesFilled": "/**\n     * Sets the default 'shapes filled' flag and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #getDefaultShapesFilled()\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getDrawOutlines": "/**\n     * Returns {@code true} if outlines should be drawn for shapes, and\n     * {@code false} otherwise.\n     *\n     * @return A boolean.\n     *\n     * @see #setDrawOutlines(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setDrawOutlines": "/**\n     * Sets the flag that controls whether outlines are drawn for\n     * shapes, and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     * <P>\n     * In some cases, shapes look better if they do NOT have an outline, but\n     * this flag allows you to set your own preference.\n     *\n     * @param flag  the flag.\n     *\n     * @see #getDrawOutlines()\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getUseFillPaint": "/**\n     * Returns {@code true} if the renderer should use the fill paint\n     * setting to fill shapes, and {@code false} if it should just\n     * use the regular paint.\n     * <p>\n     * Refer to {@code XYLineAndShapeRendererDemo2.java} to see the\n     * effect of this flag.\n     *\n     * @return A boolean.\n     *\n     * @see #setUseFillPaint(boolean)\n     * @see #getUseOutlinePaint()\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setUseFillPaint": "/**\n     * Sets the flag that controls whether the fill paint is used to fill\n     * shapes, and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #getUseFillPaint()\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getUseOutlinePaint": "/**\n     * Returns {@code true} if the renderer should use the outline paint\n     * setting to draw shape outlines, and {@code false} if it should just\n     * use the regular paint.\n     *\n     * @return A boolean.\n     *\n     * @see #setUseOutlinePaint(boolean)\n     * @see #getUseFillPaint()\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setUseOutlinePaint": "/**\n     * Sets the flag that controls whether the outline paint is used to draw\n     * shape outlines, and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     * <p>\n     * Refer to {@code XYLineAndShapeRendererDemo2.java} to see the\n     * effect of this flag.\n     *\n     * @param flag  the flag.\n     *\n     * @see #getUseOutlinePaint()\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.isLastPointGood": "/**\n         * Returns a flag that indicates if the last point drawn (in the\n         * current series) was 'good' (non-null).\n         *\n         * @return A boolean.\n         */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setLastPointGood": "/**\n         * Sets a flag that indicates if the last point drawn (in the current\n         * series) was 'good' (non-null).\n         *\n         * @param good  the flag.\n         */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.startSeriesPass": "/**\n         * This method is called by the {@link XYPlot} at the start of each\n         * series pass.  We reset the state for the current series.\n         *\n         * @param dataset  the dataset.\n         * @param series  the series index.\n         * @param firstItem  the first item index for this pass.\n         * @param lastItem  the last item index for this pass.\n         * @param pass  the current pass index.\n         * @param passCount  the number of passes.\n         */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.initialise": "/**\n     * Initialises the renderer.\n     * <P>\n     * This method will be called before the first item is rendered, giving the\n     * renderer an opportunity to initialise any state information it wants to\n     * maintain.  The renderer can do nothing if it chooses.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area inside the axes.\n     * @param plot  the plot.\n     * @param data  the data.\n     * @param info  an optional info collection object to return data back to\n     *              the caller.\n     *\n     * @return The renderer state.\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.drawItem": "/**\n     * Draws the visual representation of a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area within which the data is being drawn.\n     * @param info  collects information about the drawing.\n     * @param plot  the plot (can be used to obtain standard color\n     *              information etc).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param crosshairState  crosshair information for the plot\n     *                        ({@code null} permitted).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.isLinePass": "/**\n     * Returns {@code true} if the specified pass is the one for drawing\n     * lines.\n     *\n     * @param pass  the pass.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.isItemPass": "/**\n     * Returns {@code true} if the specified pass is the one for drawing\n     * items.\n     *\n     * @param pass  the pass.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.drawPrimaryLine": "/**\n     * Draws the item (first pass). This method draws the lines\n     * connecting the items.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area within which the data is being drawn.\n     * @param plot  the plot (can be used to obtain standard color\n     *              information etc).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param pass  the pass.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.drawFirstPassShape": "/**\n     * Draws the first pass shape.\n     *\n     * @param g2  the graphics device.\n     * @param pass  the pass.\n     * @param series  the series index.\n     * @param item  the item index.\n     * @param shape  the shape.\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.drawPrimaryLineAsPath": "/**\n     * Draws the item (first pass). This method draws the lines\n     * connecting the items. Instead of drawing separate lines,\n     * a {@code GeneralPath} is constructed and drawn at the end of\n     * the series painting.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param plot  the plot (can be used to obtain standard color information\n     *              etc).\n     * @param dataset  the dataset.\n     * @param pass  the pass.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataArea  the area within which the data is being drawn.\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.drawSecondaryPass": "/**\n     * Draws the item shapes and adds chart entities (second pass). This method\n     * draws the shapes which mark the item positions. If {@code entities}\n     * is not {@code null} it will be populated with entity information\n     * for points that fall within the data area.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot (can be used to obtain standard color\n     *              information etc).\n     * @param domainAxis  the domain axis.\n     * @param dataArea  the area within which the data is being drawn.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param pass  the pass.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param crosshairState  the crosshair state.\n     * @param entities the entity collection.\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getLegendItem": "/**\n     * Returns a legend item for the specified series.\n     *\n     * @param datasetIndex  the dataset index (zero-based).\n     * @param series  the series index (zero-based).\n     *\n     * @return A legend item for the series (possibly {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.clone": "/**\n     * Returns a clone of the renderer.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if the clone cannot be created.\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.renderer.xy.XYStepAreaRenderer.isOutline": "/**\n     * Returns a flag that controls whether or not outlines of the areas are\n     * drawn.\n     *\n     * @return The flag.\n     *\n     * @see #setOutline(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYStepAreaRenderer.setOutline": "/**\n     * Sets a flag that controls whether or not outlines of the areas are\n     * drawn, and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param show  the flag.\n     *\n     * @see #isOutline()\n     */\n",
"org.jfree.chart.renderer.xy.XYStepAreaRenderer.getShapesVisible": "/**\n     * Returns true if shapes are being plotted by the renderer.\n     *\n     * @return {@code true} if shapes are being plotted by the renderer.\n     *\n     * @see #setShapesVisible(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYStepAreaRenderer.setShapesVisible": "/**\n     * Sets the flag that controls whether or not shapes are displayed for each\n     * data item, and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #getShapesVisible()\n     */\n",
"org.jfree.chart.renderer.xy.XYStepAreaRenderer.isShapesFilled": "/**\n     * Returns the flag that controls whether or not the shapes are filled.\n     *\n     * @return A boolean.\n     *\n     * @see #setShapesFilled(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYStepAreaRenderer.setShapesFilled": "/**\n     * Sets the 'shapes filled' for ALL series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param filled  the flag.\n     *\n     * @see #isShapesFilled()\n     */\n",
"org.jfree.chart.renderer.xy.XYStepAreaRenderer.getPlotArea": "/**\n     * Returns true if Area is being plotted by the renderer.\n     *\n     * @return {@code true} if Area is being plotted by the renderer.\n     *\n     * @see #setPlotArea(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYStepAreaRenderer.setPlotArea": "/**\n     * Sets a flag that controls whether or not areas are drawn for each data\n     * item and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #getPlotArea()\n     */\n",
"org.jfree.chart.renderer.xy.XYStepAreaRenderer.getRangeBase": "/**\n     * Returns the value on the range axis which defines the 'lower' border of\n     * the area.\n     *\n     * @return {@code double} the value on the range axis which defines\n     *         the 'lower' border of the area.\n     *\n     * @see #setRangeBase(double)\n     */\n",
"org.jfree.chart.renderer.xy.XYStepAreaRenderer.setRangeBase": "/**\n     * Sets the value on the range axis which defines the default border of the\n     * area, and sends a {@link RendererChangeEvent} to all registered\n     * listeners.  E.g. setRangeBase(Double.NEGATIVE_INFINITY) lets areas always\n     * reach the lower border of the plotArea.\n     *\n     * @param val  the value on the range axis which defines the default border\n     *             of the area.\n     *\n     * @see #getRangeBase()\n     */\n",
"org.jfree.chart.renderer.xy.XYStepAreaRenderer.getStepPoint": "/**\n     * Returns the fraction of the domain position between two points on which\n     * the step is drawn.  The default is 1.0d, which means the step is drawn\n     * at the domain position of the second`point. If the stepPoint is 0.5d the\n     * step is drawn at half between the two points.\n     *\n     * @return The fraction of the domain position between two points where the\n     *         step is drawn.\n     *\n     * @see #setStepPoint(double)\n     *\n     * @since 1.0.18\n     */\n",
"org.jfree.chart.renderer.xy.XYStepAreaRenderer.setStepPoint": "/**\n     * Sets the step point and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param stepPoint  the step point (in the range 0.0 to 1.0)\n     *\n     * @see #getStepPoint()\n     *\n     * @since 1.0.18\n     */\n",
"org.jfree.chart.renderer.xy.XYStepAreaRenderer.initialise": "/**\n     * Initialises the renderer.  Here we calculate the Java2D y-coordinate for\n     * zero, since all the bars have their bases fixed at zero.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area inside the axes.\n     * @param plot  the plot.\n     * @param data  the data.\n     * @param info  an optional info collection object to return data back to\n     *              the caller.\n     *\n     * @return The number of passes required by the renderer.\n     */\n",
"org.jfree.chart.renderer.xy.XYStepAreaRenderer.drawItem": "/**\n     * Draws the visual representation of a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area within which the data is being drawn.\n     * @param info  collects information about the drawing.\n     * @param plot  the plot (can be used to obtain standard color information\n     *              etc).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param crosshairState  crosshair information for the plot\n     *                        ({@code null} permitted).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.xy.XYStepAreaRenderer.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.XYStepAreaRenderer.clone": "/**\n     * Returns a clone of the renderer.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the renderer cannot be cloned.\n     */\n",
"org.jfree.chart.renderer.xy.XYStepAreaRenderer.restrictValueToDataArea": "/**\n     * Helper method which returns a value if it lies\n     * inside the visible dataArea and otherwise the corresponding\n     * coordinate on the border of the dataArea. The PlotOrientation\n     * is taken into account.\n     * Useful to avoid possible sun.dc.pr.PRException: endPath: bad path\n     * which occurs when trying to draw lines/shapes which in large part\n     * lie outside of the visible dataArea.\n     *\n     * @param value the value which shall be\n     * @param dataArea  the area within which the data is being drawn.\n     * @param plot  the plot (can be used to obtain standard color\n     *              information etc).\n     * @return {@code double} value inside the data area.\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer.getPlotShapes": "/**\n     * Returns true if shapes are being plotted by the renderer.\n     *\n     * @return {@code true} if shapes are being plotted by the renderer.\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer.getPlotLines": "/**\n     * Returns true if lines are being plotted by the renderer.\n     *\n     * @return {@code true} if lines are being plotted by the renderer.\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer.getPlotArea": "/**\n     * Returns true if Area is being plotted by the renderer.\n     *\n     * @return {@code true} if Area is being plotted by the renderer.\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer.isOutline": "/**\n     * Returns a flag that controls whether or not outlines of the areas are\n     * drawn.\n     *\n     * @return The flag.\n     *\n     * @see #setOutline(boolean)\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer.setOutline": "/**\n     * Sets a flag that controls whether or not outlines of the areas are drawn\n     * and sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param show  the flag.\n     *\n     * @see #isOutline()\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer.getLegendArea": "/**\n     * Returns the shape used to represent an area in the legend.\n     *\n     * @return The legend area (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer.setLegendArea": "/**\n     * Sets the shape used as an area in each legend item and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param area  the area ({@code null} not permitted).\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer.getUseFillPaint": "/**\n     * Returns the flag that controls whether the series fill paint is used to\n     * fill the area under the line.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer.setUseFillPaint": "/**\n     * Sets the flag that controls whether or not the series fill paint is\n     * used to fill the area under the line and sends a\n     * {@link RendererChangeEvent} to all listeners.\n     *\n     * @param use  the new flag value.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer.getGradientTransformer": "/**\n     * Returns the gradient paint transformer.\n     *\n     * @return The gradient paint transformer (never {@code null}).\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer.setGradientTransformer": "/**\n     * Sets the gradient paint transformer and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param transformer  the transformer ({@code null} not permitted).\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer.initialise": "/**\n     * Initialises the renderer and returns a state object that should be\n     * passed to all subsequent calls to the drawItem() method.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area inside the axes.\n     * @param plot  the plot.\n     * @param data  the data.\n     * @param info  an optional info collection object to return data back to\n     *              the caller.\n     *\n     * @return A state object for use by the renderer.\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer.getLegendItem": "/**\n     * Returns a default legend item for the specified series.  Subclasses\n     * should override this method to generate customised items.\n     *\n     * @param datasetIndex  the dataset index (zero-based).\n     * @param series  the series index (zero-based).\n     *\n     * @return A legend item for the series.\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer.drawItem": "/**\n     * Draws the visual representation of a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area within which the data is being drawn.\n     * @param info  collects information about the drawing.\n     * @param plot  the plot (can be used to obtain standard color information\n     *              etc).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * @param crosshairState  crosshair information for the plot\n     *                        ({@code null} permitted).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer.clone": "/**\n     * Returns a clone of the renderer.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the renderer cannot be cloned.\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.renderer.xy.XYAreaRenderer.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.renderer.OutlierList.add": "/**\n     * Adds an outlier to the list.\n     *\n     * @param outlier  the outlier.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.OutlierList.getItemCount": "/**\n     * Returns the number of outliers in the list.\n     *\n     * @return The item count.\n     */\n",
"org.jfree.chart.renderer.OutlierList.getAveragedOutlier": "/**\n     * Returns the averaged outlier.\n     *\n     * @return The averaged outlier.\n     */\n",
"org.jfree.chart.renderer.OutlierList.setAveragedOutlier": "/**\n     * Sets the averaged outlier.\n     *\n     * @param averagedOutlier  the averaged outlier.\n     */\n",
"org.jfree.chart.renderer.OutlierList.isMultiple": "/**\n     * Returns {@code true} if the list contains multiple outliers, and\n     * {@code false} otherwise.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.OutlierList.setMultiple": "/**\n     * Sets the flag that indicates whether or not this list represents\n     * multiple outliers.\n     *\n     * @param multiple  the flag.\n     */\n",
"org.jfree.chart.renderer.OutlierList.isOverlapped": "/**\n     * Returns {@code true} if the outlier overlaps, and\n     * {@code false} otherwise.\n     *\n     * @param other  the outlier.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.OutlierList.updateAveragedOutlier": "/**\n     * Updates the averaged outlier.\n     *\n     */\n",
"org.jfree.chart.renderer.Outlier.getPoint": "/**\n     * Returns the xy coordinates of the bounding box containing the outlier\n     * ellipse.\n     *\n     * @return The location of the outlier ellipse.\n     */\n",
"org.jfree.chart.renderer.Outlier.setPoint": "/**\n     * Sets the xy coordinates of the bounding box containing the outlier\n     * ellipse.\n     *\n     * @param point  the location.\n     */\n",
"org.jfree.chart.renderer.Outlier.getX": "/**\n     * Returns the x coordinate of the bounding box containing the outlier\n     * ellipse.\n     *\n     * @return The x coordinate.\n     */\n",
"org.jfree.chart.renderer.Outlier.getY": "/**\n     * Returns the y coordinate of the bounding box containing the outlier\n     * ellipse.\n     *\n     * @return The y coordinate.\n     */\n",
"org.jfree.chart.renderer.Outlier.getRadius": "/**\n     * Returns the radius of the outlier ellipse.\n     *\n     * @return The radius.\n     */\n",
"org.jfree.chart.renderer.Outlier.setRadius": "/**\n     * Sets the radius of the outlier ellipse.\n     *\n     * @param radius  the new radius.\n     */\n",
"org.jfree.chart.renderer.Outlier.compareTo": "/**\n     * Compares this object with the specified object for order, based on\n     * the outlier's point.\n     *\n     * @param   o the Object to be compared.\n     * @return A negative integer, zero, or a positive integer as this object\n     *      is less than, equal to, or greater than the specified object.\n     *\n     */\n",
"org.jfree.chart.renderer.Outlier.overlaps": "/**\n     * Returns a true if outlier is overlapped and false if it is not.\n     * Overlapping is determined by the respective bounding boxes plus\n     * a small margin.\n     *\n     * @param other  the other outlier.\n     *\n     * @return A {@code boolean} indicating whether or not an overlap has\n     *         occurred.\n     */\n",
"org.jfree.chart.renderer.Outlier.equals": "/**\n     * Tests this outlier for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.Outlier.toString": "/**\n     * Returns a textual representation of the outlier.\n     *\n     * @return A {@code String} representing the outlier.\n     */\n",
"org.jfree.chart.renderer.category.StackedAreaRenderer.getRenderAsPercentages": "/**\n     * Returns {@code true} if the renderer displays each item value as\n     * a percentage (so that the stacked areas add to 100%), and\n     * {@code false} otherwise.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.renderer.category.StackedAreaRenderer.setRenderAsPercentages": "/**\n     * Sets the flag that controls whether the renderer displays each item\n     * value as a percentage (so that the stacked areas add to 100%), and sends\n     * a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param asPercentages  the flag.\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.renderer.category.StackedAreaRenderer.getPassCount": "/**\n     * Returns the number of passes ({@code 2}) required by this renderer.\n     * The first pass is used to draw the areas, the second pass is used to\n     * draw the item labels (if visible).\n     *\n     * @return The number of passes required by the renderer.\n     */\n",
"org.jfree.chart.renderer.category.StackedAreaRenderer.findRangeBounds": "/**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The range (or {@code null} if the dataset is empty).\n     */\n",
"org.jfree.chart.renderer.category.StackedAreaRenderer.drawItem": "/**\n     * Draw a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the data plot area.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the data.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues": "/**\n     * Calculates the stacked values (one positive and one negative) of all\n     * series up to, but not including, {@code series} for the specified\n     * item. It returns [0.0, 0.0] if {@code series} is the first series.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series index.\n     * @param index  the item index.\n     * @param validRows  the valid rows.\n     *\n     * @return An array containing the cumulative negative and positive values\n     *     for all series values up to but excluding {@code series}\n     *     for {@code index}.\n     */\n",
"org.jfree.chart.renderer.category.StackedAreaRenderer.averageStackValues": "/**\n     * Returns a pair of \"stack\" values calculated as the mean of the two\n     * specified stack value pairs.\n     *\n     * @param stack1  the first stack pair.\n     * @param stack2  the second stack pair.\n     *\n     * @return A pair of average stack values.\n     */\n",
"org.jfree.chart.renderer.category.StackedAreaRenderer.adjustedStackValues": "/**\n     * Calculates adjusted stack values from the supplied values.  The value is\n     * the mean of the supplied values, unless either of the supplied values\n     * is zero, in which case the adjusted value is zero also.\n     *\n     * @param stack1  the first stack pair.\n     * @param stack2  the second stack pair.\n     *\n     * @return A pair of average stack values.\n     */\n",
"org.jfree.chart.renderer.category.StackedAreaRenderer.equals": "/**\n     * Checks this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} not permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.GanttRenderer.getCompletePaint": "/**\n     * Returns the paint used to show the percentage complete.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setCompletePaint(Paint)\n     */\n",
"org.jfree.chart.renderer.category.GanttRenderer.setCompletePaint": "/**\n     * Sets the paint used to show the percentage complete and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getCompletePaint()\n     */\n",
"org.jfree.chart.renderer.category.GanttRenderer.getIncompletePaint": "/**\n     * Returns the paint used to show the percentage incomplete.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setCompletePaint(Paint)\n     */\n",
"org.jfree.chart.renderer.category.GanttRenderer.setIncompletePaint": "/**\n     * Sets the paint used to show the percentage incomplete and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getIncompletePaint()\n     */\n",
"org.jfree.chart.renderer.category.GanttRenderer.getStartPercent": "/**\n     * Returns the position of the start of the progress indicator, as a\n     * percentage of the bar width.\n     *\n     * @return The start percent.\n     *\n     * @see #setStartPercent(double)\n     */\n",
"org.jfree.chart.renderer.category.GanttRenderer.setStartPercent": "/**\n     * Sets the position of the start of the progress indicator, as a\n     * percentage of the bar width, and sends a {@link RendererChangeEvent} to\n     * all registered listeners.\n     *\n     * @param percent  the percent.\n     *\n     * @see #getStartPercent()\n     */\n",
"org.jfree.chart.renderer.category.GanttRenderer.getEndPercent": "/**\n     * Returns the position of the end of the progress indicator, as a\n     * percentage of the bar width.\n     *\n     * @return The end percent.\n     *\n     * @see #setEndPercent(double)\n     */\n",
"org.jfree.chart.renderer.category.GanttRenderer.setEndPercent": "/**\n     * Sets the position of the end of the progress indicator, as a percentage\n     * of the bar width, and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param percent  the percent.\n     *\n     * @see #getEndPercent()\n     */\n",
"org.jfree.chart.renderer.category.GanttRenderer.drawItem": "/**\n     * Draws the bar for a single (series, category) data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the data area.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.category.GanttRenderer.drawTasks": "/**\n     * Draws the tasks/subtasks for one item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the data plot area.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the data.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     */\n",
"org.jfree.chart.renderer.category.GanttRenderer.drawTask": "/**\n     * Draws a single task.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the data plot area.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the data.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     */\n",
"org.jfree.chart.renderer.category.GanttRenderer.getItemMiddle": "/**\n     * Returns the Java2D coordinate for the middle of the specified data item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     * @param dataset  the dataset.\n     * @param axis  the axis.\n     * @param area  the drawing area.\n     * @param edge  the edge along which the axis lies.\n     *\n     * @return The Java2D coordinate.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.category.GanttRenderer.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.GanttRenderer.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.renderer.category.GanttRenderer.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.renderer.category.MinMaxCategoryRenderer.isDrawLines": "/**\n     * Gets whether or not lines are drawn between category points.\n     *\n     * @return boolean true if line will be drawn between sequenced categories,\n     *         otherwise false.\n     *\n     * @see #setDrawLines(boolean)\n     */\n",
"org.jfree.chart.renderer.category.MinMaxCategoryRenderer.setDrawLines": "/**\n     * Sets the flag that controls whether or not lines are drawn to connect\n     * the items within a series and sends a {@link RendererChangeEvent} to\n     * all registered listeners.\n     *\n     * @param draw  the new value of the flag.\n     *\n     * @see #isDrawLines()\n     */\n",
"org.jfree.chart.renderer.category.MinMaxCategoryRenderer.getGroupPaint": "/**\n     * Returns the paint used to draw the line between the minimum and maximum\n     * value items in each category.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setGroupPaint(Paint)\n     */\n",
"org.jfree.chart.renderer.category.MinMaxCategoryRenderer.setGroupPaint": "/**\n     * Sets the paint used to draw the line between the minimum and maximum\n     * value items in each category and sends a {@link RendererChangeEvent} to\n     * all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getGroupPaint()\n     */\n",
"org.jfree.chart.renderer.category.MinMaxCategoryRenderer.getGroupStroke": "/**\n     * Returns the stroke used to draw the line between the minimum and maximum\n     * value items in each category.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setGroupStroke(Stroke)\n     */\n",
"org.jfree.chart.renderer.category.MinMaxCategoryRenderer.setGroupStroke": "/**\n     * Sets the stroke of the line between the minimum value and the maximum\n     * value and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param stroke the new stroke ({@code null} not permitted).\n     */\n",
"org.jfree.chart.renderer.category.MinMaxCategoryRenderer.getObjectIcon": "/**\n     * Returns the icon drawn for each data item.\n     *\n     * @return The icon (never {@code null}).\n     *\n     * @see #setObjectIcon(Icon)\n     */\n",
"org.jfree.chart.renderer.category.MinMaxCategoryRenderer.setObjectIcon": "/**\n     * Sets the icon drawn for each data item and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param icon  the icon.\n     *\n     * @see #getObjectIcon()\n     */\n",
"org.jfree.chart.renderer.category.MinMaxCategoryRenderer.getMaxIcon": "/**\n     * Returns the icon displayed for the maximum value data item within each\n     * category.\n     *\n     * @return The icon (never {@code null}).\n     *\n     * @see #setMaxIcon(Icon)\n     */\n",
"org.jfree.chart.renderer.category.MinMaxCategoryRenderer.setMaxIcon": "/**\n     * Sets the icon displayed for the maximum value data item within each\n     * category and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param icon  the icon ({@code null} not permitted).\n     *\n     * @see #getMaxIcon()\n     */\n",
"org.jfree.chart.renderer.category.MinMaxCategoryRenderer.getMinIcon": "/**\n     * Returns the icon displayed for the minimum value data item within each\n     * category.\n     *\n     * @return The icon (never {@code null}).\n     *\n     * @see #setMinIcon(Icon)\n     */\n",
"org.jfree.chart.renderer.category.MinMaxCategoryRenderer.setMinIcon": "/**\n     * Sets the icon displayed for the minimum value data item within each\n     * category and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param icon  the icon ({@code null} not permitted).\n     *\n     * @see #getMinIcon()\n     */\n",
"org.jfree.chart.renderer.category.MinMaxCategoryRenderer.drawItem": "/**\n     * Draw a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area in which the data is drawn.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.category.MinMaxCategoryRenderer.equals": "/**\n     * Tests this instance for equality with an arbitrary object.  The icon\n     * fields are NOT included in the test, so this implementation is a little\n     * weak.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.renderer.category.MinMaxCategoryRenderer.getIcon": "/**\n     * Returns an icon.\n     *\n     * @param shape  the shape.\n     * @param fillPaint  the fill paint.\n     * @param outlinePaint  the outline paint.\n     *\n     * @return The icon.\n     */\n",
"org.jfree.chart.renderer.category.MinMaxCategoryRenderer.getIcon": "/**\n     * Returns an icon from a shape.\n     *\n     * @param shape  the shape.\n     * @param fill  the fill flag.\n     * @param outline  the outline flag.\n     *\n     * @return The icon.\n     */\n",
"org.jfree.chart.renderer.category.MinMaxCategoryRenderer.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.renderer.category.MinMaxCategoryRenderer.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.renderer.category.ScatterRenderer.getUseSeriesOffset": "/**\n     * Returns the flag that controls whether or not the x-position for each\n     * data item is offset within the category according to the series.\n     *\n     * @return A boolean.\n     *\n     * @see #setUseSeriesOffset(boolean)\n     */\n",
"org.jfree.chart.renderer.category.ScatterRenderer.setUseSeriesOffset": "/**\n     * Sets the flag that controls whether or not the x-position for each\n     * data item is offset within its category according to the series, and\n     * sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param offset  the offset.\n     *\n     * @see #getUseSeriesOffset()\n     */\n",
"org.jfree.chart.renderer.category.ScatterRenderer.getItemMargin": "/**\n     * Returns the item margin, which is the gap between items within a\n     * category (expressed as a percentage of the overall category width).\n     * This can be used to match the offset alignment with the bars drawn by\n     * a {@link BarRenderer}).\n     *\n     * @return The item margin.\n     *\n     * @see #setItemMargin(double)\n     * @see #getUseSeriesOffset()\n     */\n",
"org.jfree.chart.renderer.category.ScatterRenderer.setItemMargin": "/**\n     * Sets the item margin, which is the gap between items within a category\n     * (expressed as a percentage of the overall category width), and sends\n     * a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param margin  the margin (0.0 &lt;= margin &lt; 1.0).\n     *\n     * @see #getItemMargin()\n     * @see #getUseSeriesOffset()\n     */\n",
"org.jfree.chart.renderer.category.ScatterRenderer.getDrawOutlines": "/**\n     * Returns {@code true} if outlines should be drawn for shapes, and\n     * {@code false} otherwise.\n     *\n     * @return A boolean.\n     *\n     * @see #setDrawOutlines(boolean)\n     */\n",
"org.jfree.chart.renderer.category.ScatterRenderer.setDrawOutlines": "/**\n     * Sets the flag that controls whether outlines are drawn for\n     * shapes, and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     * <p>In some cases, shapes look better if they do NOT have an outline, but\n     * this flag allows you to set your own preference.</p>\n     *\n     * @param flag the flag.\n     *\n     * @see #getDrawOutlines()\n     */\n",
"org.jfree.chart.renderer.category.ScatterRenderer.getUseOutlinePaint": "/**\n     * Returns the flag that controls whether the outline paint is used for\n     * shape outlines.  If not, the regular series paint is used.\n     *\n     * @return A boolean.\n     *\n     * @see #setUseOutlinePaint(boolean)\n     */\n",
"org.jfree.chart.renderer.category.ScatterRenderer.setUseOutlinePaint": "/**\n     * Sets the flag that controls whether the outline paint is used for shape\n     * outlines, and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param use the flag.\n     *\n     * @see #getUseOutlinePaint()\n     */\n",
"org.jfree.chart.renderer.category.ScatterRenderer.getItemShapeFilled": "/**\n     * Returns the flag used to control whether or not the shape for an item\n     * is filled. The default implementation passes control to the\n     * {@code getSeriesShapesFilled} method. You can override this method\n     * if you require different behaviour.\n     *\n     * @param series the series index (zero-based).\n     * @param item   the item index (zero-based).\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.ScatterRenderer.getSeriesShapesFilled": "/**\n     * Returns the flag used to control whether or not the shapes for a series\n     * are filled.\n     *\n     * @param series the series index (zero-based).\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.ScatterRenderer.setSeriesShapesFilled": "/**\n     * Sets the 'shapes filled' flag for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series the series index (zero-based).\n     * @param filled the flag.\n     */\n",
"org.jfree.chart.renderer.category.ScatterRenderer.setSeriesShapesFilled": "/**\n     * Sets the 'shapes filled' flag for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series the series index (zero-based).\n     * @param filled the flag.\n     */\n",
"org.jfree.chart.renderer.category.ScatterRenderer.getBaseShapesFilled": "/**\n     * Returns the base 'shape filled' attribute.\n     *\n     * @return The base flag.\n     */\n",
"org.jfree.chart.renderer.category.ScatterRenderer.setBaseShapesFilled": "/**\n     * Sets the base 'shapes filled' flag and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param flag the flag.\n     */\n",
"org.jfree.chart.renderer.category.ScatterRenderer.getUseFillPaint": "/**\n     * Returns {@code true} if the renderer should use the fill paint\n     * setting to fill shapes, and {@code false} if it should just\n     * use the regular paint.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.ScatterRenderer.setUseFillPaint": "/**\n     * Sets the flag that controls whether the fill paint is used to fill\n     * shapes, and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param flag the flag.\n     */\n",
"org.jfree.chart.renderer.category.ScatterRenderer.findRangeBounds": "/**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset. This takes into account the range\n     * between the min/max values, possibly ignoring invisible series.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range (or {@code null} if the dataset is\n     *         {@code null} or empty).\n     */\n",
"org.jfree.chart.renderer.category.ScatterRenderer.drawItem": "/**\n     * Draw a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area in which the data is drawn.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.category.ScatterRenderer.getLegendItem": "/**\n     * Returns a legend item for a series.\n     *\n     * @param datasetIndex  the dataset index (zero-based).\n     * @param series  the series index (zero-based).\n     *\n     * @return The legend item.\n     */\n",
"org.jfree.chart.renderer.category.ScatterRenderer.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj the object ({@code null} permitted).\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.ScatterRenderer.clone": "/**\n     * Returns an independent copy of the renderer.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  should not happen.\n     */\n",
"org.jfree.chart.renderer.category.ScatterRenderer.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream the output stream.\n     * @throws java.io.IOException if there is an I/O error.\n     */\n",
"org.jfree.chart.renderer.category.ScatterRenderer.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream the input stream.\n     * @throws java.io.IOException    if there is an I/O error.\n     * @throws ClassNotFoundException if there is a classpath problem.\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getPassCount": "/**\n     * Returns the number of passes through the dataset required by the\n     * renderer.  Usually this will be one, but some renderers may use\n     * a second or third pass to overlay items on top of things that were\n     * drawn in an earlier pass.\n     *\n     * @return The pass count.\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getPlot": "/**\n     * Returns the plot that the renderer has been assigned to (where\n     * {@code null} indicates that the renderer is not currently assigned\n     * to a plot).\n     *\n     * @return The plot (possibly {@code null}).\n     *\n     * @see #setPlot(CategoryPlot)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setPlot": "/**\n     * Sets the plot that the renderer has been assigned to.  This method is\n     * usually called by the {@link CategoryPlot}, in normal usage you\n     * shouldn't need to call this method directly.\n     *\n     * @param plot  the plot ({@code null} not permitted).\n     *\n     * @see #getPlot()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.addChangeListener": "/**\n     * Adds a change listener.\n     *\n     * @param listener  the listener.\n     *\n     * @see #removeChangeListener(RendererChangeListener)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.removeChangeListener": "/**\n     * Removes a change listener.\n     *\n     * @param listener  the listener.\n     *\n     * @see #addChangeListener(RendererChangeListener)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.findRangeBounds": "/**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range (or {@code null} if the dataset is\n     *         {@code null} or empty).\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.initialise": "/**\n     * Initialises the renderer.  This method will be called before the first\n     * item is rendered, giving the renderer an opportunity to initialise any\n     * state information it wants to maintain. The renderer can do nothing if\n     * it chooses.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area inside the axes.\n     * @param plot  the plot.\n     * @param rendererIndex  the renderer index.\n     * @param info  collects chart rendering information for return to caller.\n     *\n     * @return A state object (maintains state information relevant to one\n     *         chart drawing).\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getItemVisible": "/**\n     * Returns a boolean that indicates whether or not the specified item\n     * should be drawn (this is typically used to hide an entire series).\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.isSeriesVisible": "/**\n     * Returns a boolean that indicates whether or not the specified series\n     * should be drawn (this is typically used to hide an entire series).\n     *\n     * @param series  the series index.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getSeriesVisible": "/**\n     * Returns the flag that controls whether a series is visible.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The flag (possibly {@code null}).\n     *\n     * @see #setSeriesVisible(int, Boolean)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesVisible": "/**\n     * Sets the flag that controls whether a series is visible and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param visible  the flag ({@code null} permitted).\n     *\n     * @see #getSeriesVisible(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesVisible": "/**\n     * Sets the flag that controls whether a series is visible and, if\n     * requested, sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param series  the series index.\n     * @param visible  the flag ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getSeriesVisible(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getDefaultSeriesVisible": "/**\n     * Returns the default visibility for all series.\n     *\n     * @return The default visibility.\n     *\n     * @see #setDefaultSeriesVisible(boolean)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultSeriesVisible": "/**\n     * Sets the default visibility and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param visible  the flag.\n     *\n     * @see #getDefaultSeriesVisible()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultSeriesVisible": "/**\n     * Sets the default visibility and, if requested, sends\n     * a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param visible  the visibility.\n     * @param notify  notify listeners?\n     *\n     * @see #getDefaultSeriesVisible()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.isSeriesVisibleInLegend": "/**\n     * Returns {@code true} if the series should be shown in the legend,\n     * and {@code false} otherwise.\n     *\n     * @param series  the series index.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getSeriesVisibleInLegend": "/**\n     * Returns the flag that controls whether a series is visible in the\n     * legend.  This method returns only the \"per series\" settings - to\n     * incorporate the override and base settings as well, you need to use the\n     * {@link #isSeriesVisibleInLegend(int)} method.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The flag (possibly {@code null}).\n     *\n     * @see #setSeriesVisibleInLegend(int, Boolean)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesVisibleInLegend": "/**\n     * Sets the flag that controls whether a series is visible in the legend\n     * and sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param visible  the flag ({@code null} permitted).\n     *\n     * @see #getSeriesVisibleInLegend(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesVisibleInLegend": "/**\n     * Sets the flag that controls whether a series is visible in the legend\n     * and, if requested, sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param series  the series index.\n     * @param visible  the flag ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getSeriesVisibleInLegend(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getDefaultSeriesVisibleInLegend": "/**\n     * Returns the default visibility in the legend for all series.\n     *\n     * @return The default visibility.\n     *\n     * @see #setDefaultSeriesVisibleInLegend(boolean)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultSeriesVisibleInLegend": "/**\n     * Sets the default visibility in the legend and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param visible  the flag.\n     *\n     * @see #getDefaultSeriesVisibleInLegend()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultSeriesVisibleInLegend": "/**\n     * Sets the default visibility in the legend and, if requested, sends\n     * a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param visible  the visibility.\n     * @param notify  notify listeners?\n     *\n     * @see #getDefaultSeriesVisibleInLegend()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getItemPaint": "/**\n     * Returns the paint used to fill data items as they are drawn.\n     *\n     * @param row  the row (or series) index (zero-based).\n     * @param column  the column (or category) index (zero-based).\n     *\n     * @return The paint (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getSeriesPaint": "/**\n     * Returns the paint used to fill an item drawn by the renderer.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setSeriesPaint(int, Paint)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesPaint": "/**\n     * Sets the paint used for a series and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getSeriesPaint(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesPaint": "/**\n     * Sets the paint used for a series and, if requested, sends a \n     * {@link RendererChangeEvent} to all registered listeners.\n     * \n     * @param series  the series index (zero-based).\n     * @param paint  the paint ({@code null} permitted).\n     * @param notify  notify listeners?\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getDefaultPaint": "/**\n     * Returns the default paint.  During rendering, a renderer will first look\n     * up the series paint and, if this is {@code null}, it will use the\n     * default paint.\n     *\n     * @return The default paint (never {@code null}).\n     *\n     * @see #setDefaultPaint(Paint)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultPaint": "/**\n     * Sets the default paint and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getDefaultPaint()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultPaint": "/**\n     * Sets the default paint and, if requested, sends a \n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getDefaultPaint()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getItemFillPaint": "/**\n     * Returns the paint used to fill data items as they are drawn.\n     *\n     * @param row  the row (or series) index (zero-based).\n     * @param column  the column (or category) index (zero-based).\n     *\n     * @return The paint (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getSeriesFillPaint": "/**\n     * Returns the paint used to fill an item drawn by the renderer.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setSeriesFillPaint(int, Paint)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesFillPaint": "/**\n     * Sets the paint used for a series outline and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getSeriesFillPaint(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getDefaultFillPaint": "/**\n     * Returns the default outline paint.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setDefaultFillPaint(Paint)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultFillPaint": "/**\n     * Sets the default outline paint and sends a {@link RendererChangeEvent} to\n     * all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getDefaultFillPaint()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getItemOutlinePaint": "/**\n     * Returns the paint used to outline data items as they are drawn.\n     *\n     * @param row  the row (or series) index (zero-based).\n     * @param column  the column (or category) index (zero-based).\n     *\n     * @return The paint (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getSeriesOutlinePaint": "/**\n     * Returns the paint used to outline an item drawn by the renderer.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setSeriesOutlinePaint(int, Paint)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesOutlinePaint": "/**\n     * Sets the paint used for a series outline and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getSeriesOutlinePaint(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesOutlinePaint": "/**\n     * Sets the paint used for a series outline and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param paint  the paint ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getSeriesOutlinePaint(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getDefaultOutlinePaint": "/**\n     * Returns the default outline paint.  During rendering, the renderer\n     * will look up the series outline paint and, if this is {@code null}, it \n     * will use the default outline paint.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setDefaultOutlinePaint(Paint)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultOutlinePaint": "/**\n     * Sets the default outline paint and sends a {@link RendererChangeEvent} to\n     * all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getDefaultOutlinePaint()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultOutlinePaint": "/**\n     * Sets the default outline paint and, if requested, sends a \n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getDefaultOutlinePaint()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getItemStroke": "/**\n     * Returns the stroke used to draw data items.\n     *\n     * @param row  the row (or series) index (zero-based).\n     * @param column  the column (or category) index (zero-based).\n     *\n     * @return The stroke (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getSeriesStroke": "/**\n     * Returns the stroke used to draw the items in a series.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setSeriesStroke(int, Stroke)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesStroke": "/**\n     * Sets the stroke used for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param stroke  the stroke ({@code null} permitted).\n     *\n     * @see #getSeriesStroke(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesStroke": "/**\n     * Sets the stroke used for a series and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param stroke  the stroke ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getSeriesStroke(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getDefaultStroke": "/**\n     * Returns the default stroke.\n     *\n     * @return The default stroke (never {@code null}).\n     *\n     * @see #setDefaultStroke(Stroke)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultStroke": "/**\n     * Sets the default stroke and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getDefaultStroke()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultStroke": "/**\n     * Sets the default stroke and, if requested, sends a \n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getDefaultStroke()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getItemOutlineStroke": "/**\n     * Returns the stroke used to outline data items.\n     * <p>\n     * The default implementation passes control to the\n     * lookupSeriesOutlineStroke method.  You can override this method if you\n     * require different behaviour.\n     *\n     * @param row  the row (or series) index (zero-based).\n     * @param column  the column (or category) index (zero-based).\n     *\n     * @return The stroke (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getSeriesOutlineStroke": "/**\n     * Returns the stroke used to outline the items in a series.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The stroke (possibly {@code null}).\n     *\n     * @see #setSeriesOutlineStroke(int, Stroke)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesOutlineStroke": "/**\n     * Sets the outline stroke used for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param stroke  the stroke ({@code null} permitted).\n     *\n     * @see #getSeriesOutlineStroke(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesOutlineStroke": "/**\n     * Sets the outline stroke used for a series and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param stroke  the stroke ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getSeriesOutlineStroke(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getDefaultOutlineStroke": "/**\n     * Returns the default outline stroke.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setDefaultOutlineStroke(Stroke)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultOutlineStroke": "/**\n     * Sets the default outline stroke and sends a {@link RendererChangeEvent} to\n     * all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getDefaultOutlineStroke()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultOutlineStroke": "/**\n     * Sets the default outline stroke and, if requested, sends a \n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getDefaultOutlineStroke()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getItemShape": "/**\n     * Returns a shape used to represent a data item.\n     *\n     * @param row  the row (or series) index (zero-based).\n     * @param column  the column (or category) index (zero-based).\n     *\n     * @return The shape (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getSeriesShape": "/**\n     * Returns a shape used to represent the items in a series.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The shape (possibly {@code null}).\n     *\n     * @see #setSeriesShape(int, Shape)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesShape": "/**\n     * Sets the shape used for a series and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param shape  the shape ({@code null} permitted).\n     *\n     * @see #getSeriesShape(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesShape": "/**\n     * Sets the shape used for a series and, if requested, sends a \n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param shape  the shape ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getSeriesShape(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getDefaultShape": "/**\n     * Returns the default shape.\n     *\n     * @return The shape (never {@code null}).\n     *\n     * @see #setDefaultShape(Shape)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultShape": "/**\n     * Sets the default shape and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param shape  the shape ({@code null} not permitted).\n     *\n     * @see #getDefaultShape()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultShape": "/**\n     * Sets the default shape and, if requested, sends a \n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param shape  the shape ({@code null} not permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getDefaultShape()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.isItemLabelVisible": "/**\n     * Returns {@code true} if an item label is visible, and\n     * {@code false} otherwise.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.isSeriesItemLabelsVisible": "/**\n     * Returns {@code true} if the item labels for a series are visible,\n     * and {@code false} otherwise.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return A boolean.\n     *\n     * @see #setSeriesItemLabelsVisible(int, Boolean)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesItemLabelsVisible": "/**\n     * Sets a flag that controls the visibility of the item labels for a series.\n     *\n     * @param series  the series index (zero-based).\n     * @param visible  the flag.\n     *\n     * @see #isSeriesItemLabelsVisible(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesItemLabelsVisible": "/**\n     * Sets a flag that controls the visibility of the item labels for a series.\n     *\n     * @param series  the series index (zero-based).\n     * @param visible  the flag ({@code null} permitted).\n     *\n     * @see #isSeriesItemLabelsVisible(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesItemLabelsVisible": "/**\n     * Sets the visibility of item labels for a series and, if requested, sends\n     * a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param visible  the visible flag.\n     * @param notify  a flag that controls whether or not listeners are\n     *                notified.\n     *\n     * @see #isSeriesItemLabelsVisible(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getDefaultItemLabelsVisible": "/**\n     * Returns the default setting for item label visibility.  A {@code null}\n     * result should be interpreted as equivalent to {@code Boolean.FALSE}\n     * (this is an error in the API design, the return value should have been\n     * a boolean primitive).\n     *\n     * @return A flag (possibly {@code null}).\n     *\n     * @see #setDefaultItemLabelsVisible(boolean)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultItemLabelsVisible": "/**\n     * Sets the default flag that controls whether or not item labels are visible\n     * and sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param visible  the flag.\n     *\n     * @see #getDefaultItemLabelsVisible()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultItemLabelsVisible": "/**\n     * Sets the default visibility for item labels and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param visible  the visibility flag.\n     * @param notify  a flag that controls whether or not listeners are\n     *                notified.\n     *\n     * @see #getDefaultItemLabelsVisible()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getItemLabelGenerator": "/**\n     * Returns the item label generator for the specified data item.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The generator (possibly {@code null}).\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getSeriesItemLabelGenerator": "/**\n     * Returns the item label generator for a series.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The label generator (possibly {@code null}).\n     *\n     * @see #setSeriesItemLabelGenerator(int, CategoryItemLabelGenerator)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesItemLabelGenerator": "/**\n     * Sets the item label generator for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param generator  the generator.\n     *\n     * @see #getSeriesItemLabelGenerator(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesItemLabelGenerator": "/**\n     * Sets the item label generator for a series and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param generator  the generator.\n     * @param notify  notify listeners?\n     *\n     * @see #getSeriesItemLabelGenerator(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getDefaultItemLabelGenerator": "/**\n     * Returns the default item label generator.\n     *\n     * @return The generator (possibly {@code null}).\n     *\n     * @see #setDefaultItemLabelGenerator(CategoryItemLabelGenerator)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultItemLabelGenerator": "/**\n     * Sets the default item label generator and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getDefaultItemLabelGenerator()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultItemLabelGenerator": "/**\n     * Sets the default item label generator and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getDefaultItemLabelGenerator()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getToolTipGenerator": "/**\n     * Returns the tool tip generator that should be used for the specified\n     * item.  This method looks up the generator using the \"three-layer\"\n     * approach outlined in the general description of this interface.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The generator (possibly {@code null}).\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getSeriesToolTipGenerator": "/**\n     * Returns the tool tip generator for the specified series (a \"layer 1\"\n     * generator).\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The tool tip generator (possibly {@code null}).\n     *\n     * @see #setSeriesToolTipGenerator(int, CategoryToolTipGenerator)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesToolTipGenerator": "/**\n     * Sets the tool tip generator for a series and sends a\n     * {@link org.jfree.chart.event.RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getSeriesToolTipGenerator(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesToolTipGenerator": "/**\n     * Sets the tool tip generator for a series and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param generator  the generator ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getSeriesToolTipGenerator(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getDefaultToolTipGenerator": "/**\n     * Returns the default tool tip generator (the \"layer 2\" generator).\n     *\n     * @return The tool tip generator (possibly {@code null}).\n     *\n     * @see #setDefaultToolTipGenerator(CategoryToolTipGenerator)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultToolTipGenerator": "/**\n     * Sets the default tool tip generator and sends a\n     * {@link org.jfree.chart.event.RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getDefaultToolTipGenerator()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultToolTipGenerator": "/**\n     * Sets the default tool tip generator and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getDefaultToolTipGenerator()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getItemLabelFont": "/**\n     * Returns the font for an item label.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The font (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getSeriesItemLabelFont": "/**\n     * Returns the font for all the item labels in a series.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The font (possibly {@code null}).\n     *\n     * @see #setSeriesItemLabelFont(int, Font)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesItemLabelFont": "/**\n     * Sets the item label font for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param font  the font ({@code null} permitted).\n     *\n     * @see #getSeriesItemLabelFont(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesItemLabelFont": "/**\n     * Sets the item label font for a series and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param font  the font ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getSeriesItemLabelFont(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getDefaultItemLabelFont": "/**\n     * Returns the default item label font (this is used when no other font\n     * setting is available).\n     *\n     * @return The font (never {@code null}).\n     *\n     * @see #setDefaultItemLabelFont(Font)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultItemLabelFont": "/**\n     * Sets the default item label font and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param font  the font ({@code null} not permitted).\n     *\n     * @see #getDefaultItemLabelFont()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultItemLabelFont": "/**\n     * Sets the default item label font and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param font  the font ({@code null} not permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getDefaultItemLabelFont()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getItemLabelPaint": "/**\n     * Returns the paint used to draw an item label.\n     *\n     * @param row  the row index (zero based).\n     * @param column  the column index (zero based).\n     *\n     * @return The paint (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getSeriesItemLabelPaint": "/**\n     * Returns the paint used to draw the item labels for a series.\n     *\n     * @param series  the series index (zero based).\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setSeriesItemLabelPaint(int, Paint)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesItemLabelPaint": "/**\n     * Sets the item label paint for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series (zero based index).\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getSeriesItemLabelPaint(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesItemLabelPaint": "/**\n     * Sets the item label paint for a series and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series (zero based index).\n     * @param paint  the paint ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getSeriesItemLabelPaint(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getDefaultItemLabelPaint": "/**\n     * Returns the default item label paint.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setDefaultItemLabelPaint(Paint)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultItemLabelPaint": "/**\n     * Sets the default item label paint and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getDefaultItemLabelPaint()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultItemLabelPaint": "/**\n     * Sets the default item label paint and, if requested, sends a \n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getDefaultItemLabelPaint()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getPositiveItemLabelPosition": "/**\n     * Returns the item label position for positive values.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The item label position (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getSeriesPositiveItemLabelPosition": "/**\n     * Returns the item label position for all positive values in a series.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The item label position.\n     *\n     * @see #setSeriesPositiveItemLabelPosition(int, ItemLabelPosition)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesPositiveItemLabelPosition": "/**\n     * Sets the item label position for all positive values in a series and\n     * sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param position  the position ({@code null} permitted).\n     *\n     * @see #getSeriesPositiveItemLabelPosition(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesPositiveItemLabelPosition": "/**\n     * Sets the item label position for all positive values in a series and (if\n     * requested) sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param position  the position ({@code null} permitted).\n     * @param notify  notify registered listeners?\n     *\n     * @see #getSeriesPositiveItemLabelPosition(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getDefaultPositiveItemLabelPosition": "/**\n     * Returns the default positive item label position.\n     *\n     * @return The position.\n     *\n     * @see #setDefaultPositiveItemLabelPosition(ItemLabelPosition)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultPositiveItemLabelPosition": "/**\n     * Sets the default positive item label position.\n     *\n     * @param position  the position.\n     *\n     * @see #getDefaultPositiveItemLabelPosition()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultPositiveItemLabelPosition": "/**\n     * Sets the default positive item label position and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param position  the position.\n     * @param notify  notify registered listeners?\n     *\n     * @see #getDefaultPositiveItemLabelPosition()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getNegativeItemLabelPosition": "/**\n     * Returns the item label position for negative values.  This method can be\n     * overridden to provide customisation of the item label position for\n     * individual data items.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column (zero-based).\n     *\n     * @return The item label position.\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getSeriesNegativeItemLabelPosition": "/**\n     * Returns the item label position for all negative values in a series.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The item label position.\n     *\n     * @see #setSeriesNegativeItemLabelPosition(int, ItemLabelPosition)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesNegativeItemLabelPosition": "/**\n     * Sets the item label position for negative values in a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param position  the position ({@code null} permitted).\n     *\n     * @see #getSeriesNegativeItemLabelPosition(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesNegativeItemLabelPosition": "/**\n     * Sets the item label position for negative values in a series and (if\n     * requested) sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param position  the position ({@code null} permitted).\n     * @param notify  notify registered listeners?\n     *\n     * @see #getSeriesNegativeItemLabelPosition(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getDefaultNegativeItemLabelPosition": "/**\n     * Returns the default item label position for negative values.\n     *\n     * @return The position.\n     *\n     * @see #setDefaultNegativeItemLabelPosition(ItemLabelPosition)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultNegativeItemLabelPosition": "/**\n     * Sets the default item label position for negative values and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param position  the position.\n     *\n     * @see #getDefaultNegativeItemLabelPosition()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultNegativeItemLabelPosition": "/**\n     * Sets the default negative item label position and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param position  the position.\n     * @param notify  notify registered listeners?\n     *\n     * @see #getDefaultNegativeItemLabelPosition()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getItemCreateEntity": "/**\n     * Returns a flag that determines whether or not an entity is generated\n     * for the specified item.  The standard implementation of this method\n     * will typically return the flag for the series or, if that is \n     * {@code null}, the value returned by {@link #getDefaultCreateEntities()}.\n     * \n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     * \n     * @return A boolean. \n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getSeriesCreateEntities": "/**\n     * Returns a boolean indicating whether or not entities should be created \n     * for the items in a series.\n     * \n     * @param series  the series index (zero-based).\n     * \n     * @return The flag for the series (possibly {@code null}).\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesCreateEntities": "/** \n     * Sets a flag that indicates whether or not entities should be created during\n     * rendering for the items in the specified series, and sends a \n     * {@link RendererChangeEvent} to all registered listeners.\n     * \n     * @param series  the series index (zero-based).\n     * @param create  the new flag value ({@code null} permitted).\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesCreateEntities": "/** \n     * Sets a flag that indicates whether or not entities should be created during\n     * rendering for the items in the specified series, and sends a \n     * {@link RendererChangeEvent} to all registered listeners if requested.\n     * \n     * @param series  the series index (zero-based).\n     * @param create  the new flag value ({@code null} permitted).\n     * @param notify  notify listeners?\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getDefaultCreateEntities": "/**\n     * Returns the default value for the flag that controls whether or not\n     * an entity is created for an item during rendering.  \n     * \n     * @return A boolean. \n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultCreateEntities": "/**\n     * Sets the default value for the flag that controls whether or not an\n     * entity is created for an item during rendering and sends a \n     * {@link RendererChangeEvent} to all registered listeners.\n     * \n     * @param create  the new flag value. \n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultCreateEntities": "/**\n     * Sets the default value for the flag that controls whether or not an\n     * entity is created for an item during rendering and, if requested, sends a \n     * {@link RendererChangeEvent} to all registered listeners.\n     * \n     * @param create  the new flag value. \n     * @param notify  notify listeners?\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getItemURLGenerator": "/**\n     * Returns the URL generator for an item.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The item URL generator.\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getSeriesItemURLGenerator": "/**\n     * Returns the item URL generator for a series.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The URL generator.\n     *\n     * @see #setSeriesItemURLGenerator(int, CategoryURLGenerator)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesItemURLGenerator": "/**\n     * Sets the item URL generator for a series and sends a \n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getSeriesItemURLGenerator(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setSeriesItemURLGenerator": "/**\n     * Sets the item URL generator for a series and, if requested, sends a \n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param generator  the generator ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getSeriesItemURLGenerator(int)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getDefaultItemURLGenerator": "/**\n     * Returns the default item URL generator.\n     *\n     * @return The item URL generator (possibly {@code null}).\n     *\n     * @see #setDefaultItemURLGenerator(CategoryURLGenerator)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultItemURLGenerator": "/**\n     * Sets the default item URL generator and sends a \n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the item URL generator ({@code null} permitted).\n     *\n     * @see #getDefaultItemURLGenerator()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.setDefaultItemURLGenerator": "/**\n     * Sets the default item URL generator and, if requested, sends a \n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the item URL generator ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getDefaultItemURLGenerator()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getLegendItem": "/**\n     * Returns a legend item for a series.  This method can return\n     * {@code null}, in which case the series will have no entry in the\n     * legend.\n     *\n     * @param datasetIndex  the dataset index (zero-based).\n     * @param series  the series (zero-based index).\n     *\n     * @return The legend item (possibly {@code null}).\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.drawBackground": "/**\n     * Draws a background for the data area.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.drawOutline": "/**\n     * Draws an outline for the data area.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.drawItem": "/**\n     * Draws a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  state information for one chart.\n     * @param dataArea  the data plot area.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the data.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.drawDomainGridline": "/**\n     * Draws a grid line against the domain axis.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the area for plotting data.\n     * @param value  the value.\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.drawRangeLine": "/**\n     * Draws a grid line against the range axis.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param axis  the value axis.\n     * @param dataArea  the area for plotting data.\n     * @param value  the value.\n     * @param paint  the paint ({@code null} not permitted).\n     * @param stroke  the line stroke ({@code null} not permitted).\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.drawDomainMarker": "/**\n     * Draws a line (or some other marker) to indicate a particular category on\n     * the domain axis.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param axis  the category axis.\n     * @param marker  the marker.\n     * @param dataArea  the area for plotting data.\n     *\n     * @see #drawRangeMarker(Graphics2D, CategoryPlot, ValueAxis, Marker,\n     *     Rectangle2D)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.drawRangeMarker": "/**\n     * Draws a line (or some other marker) to indicate a particular value on\n     * the range axis.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param axis  the value axis.\n     * @param marker  the marker.\n     * @param dataArea  the area for plotting data.\n     *\n     * @see #drawDomainMarker(Graphics2D, CategoryPlot, CategoryAxis,\n     *     CategoryMarker, Rectangle2D)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRenderer.getItemMiddle": "/**\n     * Returns the Java2D coordinate for the middle of the specified data item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     * @param dataset  the dataset.\n     * @param axis  the axis.\n     * @param area  the data area.\n     * @param edge  the edge along which the axis lies.\n     *\n     * @return The Java2D coordinate for the middle of the item.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.getErrorIndicatorPaint": "/**\n     * Returns the paint used for the error indicators.\n     *\n     * @return The paint used for the error indicators (possibly\n     *         {@code null}).\n     *\n     * @see #setErrorIndicatorPaint(Paint)\n     */\n",
"org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.setErrorIndicatorPaint": "/**\n     * Sets the paint used for the error indicators (if {@code null},\n     * the item paint is used instead) and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getErrorIndicatorPaint()\n     */\n",
"org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.getErrorIndicatorStroke": "/**\n     * Returns the stroke used for the error indicators.\n     *\n     * @return The stroke used for the error indicators (possibly\n     *         {@code null}).\n     *\n     * @see #setErrorIndicatorStroke(Stroke)\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.setErrorIndicatorStroke": "/**\n     * Sets the stroke used for the error indicators (if {@code null},\n     * the item outline stroke is used instead) and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} permitted).\n     *\n     * @see #getErrorIndicatorStroke()\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.findRangeBounds": "/**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range (or {@code null} if the dataset is\n     *         {@code null} or empty).\n     */\n",
"org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.drawItem": "/**\n     * Draw a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area in which the data is drawn.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset (a {@link StatisticalCategoryDataset} is\n     *                 required).\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param pass  the pass.\n     */\n",
"org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.renderer.category.StackedBarRenderer.getRenderAsPercentages": "/**\n     * Returns {@code true} if the renderer displays each item value as\n     * a percentage (so that the stacked bars add to 100%), and\n     * {@code false} otherwise.\n     *\n     * @return A boolean.\n     *\n     * @see #setRenderAsPercentages(boolean)\n     */\n",
"org.jfree.chart.renderer.category.StackedBarRenderer.setRenderAsPercentages": "/**\n     * Sets the flag that controls whether the renderer displays each item\n     * value as a percentage (so that the stacked bars add to 100%), and sends\n     * a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param asPercentages  the flag.\n     *\n     * @see #getRenderAsPercentages()\n     */\n",
"org.jfree.chart.renderer.category.StackedBarRenderer.getPassCount": "/**\n     * Returns the number of passes ({@code 3}) required by this renderer.\n     * The first pass is used to draw the bar shadows, the second pass is used\n     * to draw the bars, and the third pass is used to draw the item labels\n     * (if visible).\n     *\n     * @return The number of passes required by the renderer.\n     */\n",
"org.jfree.chart.renderer.category.StackedBarRenderer.findRangeBounds": "/**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range (or {@code null} if the dataset is empty).\n     */\n",
"org.jfree.chart.renderer.category.StackedBarRenderer.calculateBarWidth": "/**\n     * Calculates the bar width and stores it in the renderer state.\n     *\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     * @param rendererIndex  the renderer index.\n     * @param state  the renderer state.\n     */\n",
"org.jfree.chart.renderer.category.StackedBarRenderer.drawItem": "/**\n     * Draws a stacked bar for a specific item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the plot area.\n     * @param plot  the plot.\n     * @param domainAxis  the domain (category) axis.\n     * @param rangeAxis  the range (value) axis.\n     * @param dataset  the data.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.category.StackedBarRenderer.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.getItemLineVisible": "/**\n     * Returns the flag used to control whether or not the line for an item is\n     * visible.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.getSeriesLinesVisible": "/**\n     * Returns the flag used to control whether or not the lines for a series\n     * are visible.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The flag (possibly {@code null}).\n     *\n     * @see #setSeriesLinesVisible(int, Boolean)\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesLinesVisible": "/**\n     * Sets the 'lines visible' flag for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param flag  the flag ({@code null} permitted).\n     *\n     * @see #getSeriesLinesVisible(int)\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesLinesVisible": "/**\n     * Sets the 'lines visible' flag for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param visible  the flag.\n     *\n     * @see #getSeriesLinesVisible(int)\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.getDefaultLinesVisible": "/**\n     * Returns the default 'lines visible' attribute.\n     *\n     * @return The default flag.\n     *\n     * @see #getDefaultLinesVisible()\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.setDefaultLinesVisible": "/**\n     * Sets the default 'lines visible' flag and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #getDefaultLinesVisible()\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.getItemShapeVisible": "/**\n     * Returns the flag used to control whether or not the shape for an item is\n     * visible.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.getSeriesShapesVisible": "/**\n     * Returns the flag used to control whether or not the shapes for a series\n     * are visible.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return A boolean.\n     *\n     * @see #setSeriesShapesVisible(int, Boolean)\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesShapesVisible": "/**\n     * Sets the 'shapes visible' flag for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param visible  the flag.\n     *\n     * @see #getSeriesShapesVisible(int)\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesShapesVisible": "/**\n     * Sets the 'shapes visible' flag for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param flag  the flag.\n     *\n     * @see #getSeriesShapesVisible(int)\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.getDefaultShapesVisible": "/**\n     * Returns the default 'shape visible' attribute.\n     *\n     * @return The base flag.\n     *\n     * @see #setDefaultShapesVisible(boolean)\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.setDefaultShapesVisible": "/**\n     * Sets the default 'shapes visible' flag and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #getDefaultShapesVisible()\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.getDrawOutlines": "/**\n     * Returns {@code true} if outlines should be drawn for shapes, and\n     * {@code false} otherwise.\n     *\n     * @return A boolean.\n     *\n     * @see #setDrawOutlines(boolean)\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.setDrawOutlines": "/**\n     * Sets the flag that controls whether outlines are drawn for\n     * shapes, and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     * <P>\n     * In some cases, shapes look better if they do NOT have an outline, but\n     * this flag allows you to set your own preference.\n     *\n     * @param flag  the flag.\n     *\n     * @see #getDrawOutlines()\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.getUseOutlinePaint": "/**\n     * Returns the flag that controls whether the outline paint is used for\n     * shape outlines.  If not, the regular series paint is used.\n     *\n     * @return A boolean.\n     *\n     * @see #setUseOutlinePaint(boolean)\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.setUseOutlinePaint": "/**\n     * Sets the flag that controls whether the outline paint is used for shape\n     * outlines, and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param use  the flag.\n     *\n     * @see #getUseOutlinePaint()\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.getItemShapeFilled": "/**\n     * Returns the flag used to control whether or not the shape for an item\n     * is filled. The default implementation passes control to the\n     * {@code getSeriesShapesFilled} method. You can override this method\n     * if you require different behaviour.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.getSeriesShapesFilled": "/**\n     * Returns the flag used to control whether or not the shapes for a series\n     * are filled.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesShapesFilled": "/**\n     * Sets the 'shapes filled' flag for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param filled  the flag.\n     *\n     * @see #getSeriesShapesFilled(int)\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.setSeriesShapesFilled": "/**\n     * Sets the 'shapes filled' flag for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param filled  the flag.\n     *\n     * @see #getSeriesShapesFilled(int)\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.getDefaultShapesFilled": "/**\n     * Returns the default 'shape filled' attribute.\n     *\n     * @return The base flag.\n     *\n     * @see #setDefaultShapesFilled(boolean)\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.setDefaultShapesFilled": "/**\n     * Sets the default 'shapes filled' flag and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #getDefaultShapesFilled()\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.getUseFillPaint": "/**\n     * Returns {@code true} if the renderer should use the fill paint\n     * setting to fill shapes, and {@code false} if it should just\n     * use the regular paint.\n     *\n     * @return A boolean.\n     *\n     * @see #setUseFillPaint(boolean)\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.setUseFillPaint": "/**\n     * Sets the flag that controls whether the fill paint is used to fill\n     * shapes, and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #getUseFillPaint()\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.getUseSeriesOffset": "/**\n     * Returns the flag that controls whether or not the x-position for each\n     * data item is offset within the category according to the series.\n     *\n     * @return A boolean.\n     *\n     * @see #setUseSeriesOffset(boolean)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.setUseSeriesOffset": "/**\n     * Sets the flag that controls whether or not the x-position for each\n     * data item is offset within its category according to the series, and\n     * sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param offset  the offset.\n     *\n     * @see #getUseSeriesOffset()\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.getItemMargin": "/**\n     * Returns the item margin, which is the gap between items within a\n     * category (expressed as a percentage of the overall category width).\n     * This can be used to match the offset alignment with the bars drawn by\n     * a {@link BarRenderer}).\n     *\n     * @return The item margin.\n     *\n     * @see #setItemMargin(double)\n     * @see #getUseSeriesOffset()\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.setItemMargin": "/**\n     * Sets the item margin, which is the gap between items within a category\n     * (expressed as a percentage of the overall category width), and sends\n     * a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param margin  the margin (0.0 &lt;= margin &lt; 1.0).\n     *\n     * @see #getItemMargin()\n     * @see #getUseSeriesOffset()\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.getLegendItem": "/**\n     * Returns a legend item for a series.\n     *\n     * @param datasetIndex  the dataset index (zero-based).\n     * @param series  the series index (zero-based).\n     *\n     * @return The legend item.\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.getPassCount": "/**\n     * This renderer uses two passes to draw the data.\n     *\n     * @return The pass count ({@code 2} for this renderer).\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.drawItem": "/**\n     * Draw a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area in which the data is drawn.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.LineAndShapeRenderer.clone": "/**\n     * Returns an independent copy of the renderer.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  should not happen.\n     */\n",
"org.jfree.chart.renderer.category.IntervalBarRenderer.findRangeBounds": "/**\n     * Returns the range of values from the specified dataset.  For this\n     * renderer, this is equivalent to calling\n     * {@code findRangeBounds(dataset, true)}.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range (or {@code null} if the dataset is\n     *         {@code null} or empty).\n     */\n",
"org.jfree.chart.renderer.category.IntervalBarRenderer.drawItem": "/**\n     * Draws the bar for a single (series, category) data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the data area.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.category.IntervalBarRenderer.drawInterval": "/**\n      * Draws a single interval.\n      *\n      * @param g2  the graphics device.\n      * @param state  the renderer state.\n      * @param dataArea  the data plot area.\n      * @param plot  the plot.\n      * @param domainAxis  the domain axis.\n      * @param rangeAxis  the range axis.\n      * @param dataset  the data.\n      * @param row  the row index (zero-based).\n      * @param column  the column index (zero-based).\n      */\n",
"org.jfree.chart.renderer.category.IntervalBarRenderer.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.CategoryStepRenderer.getStagger": "/**\n     * Returns the flag that controls whether the series steps are staggered.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.CategoryStepRenderer.setStagger": "/**\n     * Sets the flag that controls whether or not the series steps are\n     * staggered and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param shouldStagger  a boolean.\n     */\n",
"org.jfree.chart.renderer.category.CategoryStepRenderer.getLegendItem": "/**\n     * Returns a legend item for a series.\n     *\n     * @param datasetIndex  the dataset index (zero-based).\n     * @param series  the series index (zero-based).\n     *\n     * @return The legend item.\n     */\n",
"org.jfree.chart.renderer.category.CategoryStepRenderer.createState": "/**\n     * Creates a new state instance.  This method is called from\n     * {@link #initialise(Graphics2D, Rectangle2D, CategoryPlot, int,\n     * PlotRenderingInfo)}, and we override it to ensure that the state\n     * contains a working Line2D instance.\n     *\n     * @param info  the plot rendering info ({@code null} is permitted).\n     *\n     * @return A new state instance.\n     */\n",
"org.jfree.chart.renderer.category.CategoryStepRenderer.drawLine": "/**\n     * Draws a line taking into account the specified orientation.\n     * <p>\n     * In version 1.0.5, the signature of this method was changed by the\n     * addition of the 'state' parameter.  This is an incompatible change, but\n     * is considered a low risk because it is unlikely that anyone has\n     * subclassed this renderer.  If this *does* cause trouble for you, please\n     * report it as a bug.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param orientation  the plot orientation.\n     * @param x0  the x-coordinate for the start of the line.\n     * @param y0  the y-coordinate for the start of the line.\n     * @param x1  the x-coordinate for the end of the line.\n     * @param y1  the y-coordinate for the end of the line.\n     */\n",
"org.jfree.chart.renderer.category.CategoryStepRenderer.drawItem": "/**\n     * Draw a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area in which the data is drawn.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.category.CategoryStepRenderer.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.WaterfallBarRenderer.getFirstBarPaint": "/**\n     * Returns the paint used to draw the first bar.\n     *\n     * @return The paint (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.category.WaterfallBarRenderer.setFirstBarPaint": "/**\n     * Sets the paint that will be used to draw the first bar and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     */\n",
"org.jfree.chart.renderer.category.WaterfallBarRenderer.getLastBarPaint": "/**\n     * Returns the paint used to draw the last bar.\n     *\n     * @return The paint (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.category.WaterfallBarRenderer.setLastBarPaint": "/**\n     * Sets the paint that will be used to draw the last bar and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     */\n",
"org.jfree.chart.renderer.category.WaterfallBarRenderer.getPositiveBarPaint": "/**\n     * Returns the paint used to draw bars with positive values.\n     *\n     * @return The paint (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.category.WaterfallBarRenderer.setPositiveBarPaint": "/**\n     * Sets the paint that will be used to draw bars having positive values.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     */\n",
"org.jfree.chart.renderer.category.WaterfallBarRenderer.getNegativeBarPaint": "/**\n     * Returns the paint used to draw bars with negative values.\n     *\n     * @return The paint (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.category.WaterfallBarRenderer.setNegativeBarPaint": "/**\n     * Sets the paint that will be used to draw bars having negative values,\n     * and sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     */\n",
"org.jfree.chart.renderer.category.WaterfallBarRenderer.findRangeBounds": "/**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The range (or {@code null} if the dataset is empty).\n     */\n",
"org.jfree.chart.renderer.category.WaterfallBarRenderer.drawItem": "/**\n     * Draws the bar for a single (series, category) data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the data area.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.category.WaterfallBarRenderer.equals": "/**\n     * Tests an object for equality with this instance.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.WaterfallBarRenderer.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.renderer.category.WaterfallBarRenderer.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRendererState.getBarWidth": "/**\n     * Returns the bar width.\n     *\n     * @return The bar width.\n     *\n     * @see #setBarWidth(double)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRendererState.setBarWidth": "/**\n     * Sets the bar width.  The renderer calculates this value and stores it\n     * here - it is not intended that users can manually set the bar width.\n     *\n     * @param width  the width.\n     *\n     * @see #getBarWidth()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRendererState.getSeriesRunningTotal": "/**\n     * Returns the series running total.\n     *\n     * @return The running total.\n     *\n     * @see #setSeriesRunningTotal(double)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRendererState.setSeriesRunningTotal": "/**\n     * Sets the series running total (this method is intended for the use of\n     * the renderer only).\n     *\n     * @param total  the new total.\n     *\n     * @see #getSeriesRunningTotal()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRendererState.getCrosshairState": "/**\n     * Returns the crosshair state, if any.\n     *\n     * @return The crosshair state (possibly {@code null}).\n     *\n     * @since 1.0.11\n     *\n     * @see #setCrosshairState(CategoryCrosshairState)\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRendererState.setCrosshairState": "/**\n     * Sets the crosshair state.\n     *\n     * @param state  the new state ({@code null} permitted).\n     *\n     * @since 1.0.11\n     *\n     * @see #getCrosshairState()\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRendererState.getVisibleSeriesIndex": "/**\n     * Returns the index of the row relative to the visible rows.  If no\n     * visible rows have been specified, the original row index is returned.\n     * If the row index is not included in the array of visible rows,\n     * -1 is returned.\n     *\n     * @param rowIndex  the row index.\n     *\n     * @return The new row index or -1.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRendererState.getVisibleSeriesCount": "/**\n     * Returns the number of visible series or -1 if no visible series have\n     * been specified.\n     *\n     * @return The number or -1.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRendererState.getVisibleSeriesArray": "/**\n     * Returns a copy of the visible series array.\n     * \n     * @return The visible series array (possibly {@code null}).\n     * \n     * @since 1.0.13\n     */\n",
"org.jfree.chart.renderer.category.CategoryItemRendererState.setVisibleSeriesArray": "/**\n     * Sets an array with the indices of the visible rows.\n     *\n     * @param visibleSeries the array ({@code null} permitted).\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.renderer.category.StandardBarPainter.paintBar": "/**\n     * Paints a single bar instance.\n     *\n     * @param g2  the graphics target.\n     * @param renderer  the renderer.\n     * @param row  the row index.\n     * @param column  the column index.\n     * @param bar  the bar\n     * @param base  indicates which side of the rectangle is the base of the\n     *              bar.\n     */\n",
"org.jfree.chart.renderer.category.StandardBarPainter.paintBarShadow": "/**\n     * Paints a single bar instance.\n     *\n     * @param g2  the graphics target.\n     * @param renderer  the renderer.\n     * @param row  the row index.\n     * @param column  the column index.\n     * @param bar  the bar\n     * @param base  indicates which side of the rectangle is the base of the\n     *              bar.\n     * @param pegShadow  peg the shadow to the base of the bar?\n     */\n",
"org.jfree.chart.renderer.category.StandardBarPainter.createShadow": "/**\n     * Creates a shadow for the bar.\n     *\n     * @param bar  the bar shape.\n     * @param xOffset  the x-offset for the shadow.\n     * @param yOffset  the y-offset for the shadow.\n     * @param base  the edge that is the base of the bar.\n     * @param pegShadow  peg the shadow to the base?\n     *\n     * @return A rectangle for the shadow.\n     */\n",
"org.jfree.chart.renderer.category.StandardBarPainter.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the obj ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.StandardBarPainter.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.renderer.category.LevelRenderer.getItemMargin": "/**\n     * Returns the item margin.\n     *\n     * @return The margin.\n     *\n     * @see #setItemMargin(double)\n     */\n",
"org.jfree.chart.renderer.category.LevelRenderer.setItemMargin": "/**\n     * Sets the item margin and sends a {@link RendererChangeEvent} to all\n     * registered listeners.  The value is expressed as a percentage of the\n     * available width for plotting all the bars, with the resulting amount to\n     * be distributed between all the bars evenly.\n     *\n     * @param percent  the new margin.\n     *\n     * @see #getItemMargin()\n     */\n",
"org.jfree.chart.renderer.category.LevelRenderer.getMaximumItemWidth": "/**\n     * Returns the maximum width, as a percentage of the available drawing\n     * space.\n     *\n     * @return The maximum width.\n     *\n     * @see #setMaximumItemWidth(double)\n     */\n",
"org.jfree.chart.renderer.category.LevelRenderer.setMaximumItemWidth": "/**\n     * Sets the maximum item width, which is specified as a percentage of the\n     * available space for all items, and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param percent  the percent.\n     *\n     * @see #getMaximumItemWidth()\n     */\n",
"org.jfree.chart.renderer.category.LevelRenderer.initialise": "/**\n     * Initialises the renderer and returns a state object that will be passed\n     * to subsequent calls to the drawItem method.\n     * <p>\n     * This method gets called once at the start of the process of drawing a\n     * chart.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area in which the data is to be plotted.\n     * @param plot  the plot.\n     * @param rendererIndex  the renderer index.\n     * @param info  collects chart rendering information for return to caller.\n     *\n     * @return The renderer state.\n     */\n",
"org.jfree.chart.renderer.category.LevelRenderer.calculateItemWidth": "/**\n     * Calculates the bar width and stores it in the renderer state.\n     *\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     * @param rendererIndex  the renderer index.\n     * @param state  the renderer state.\n     */\n",
"org.jfree.chart.renderer.category.LevelRenderer.calculateBarW0": "/**\n     * Calculates the coordinate of the first \"side\" of a bar.  This will be\n     * the minimum x-coordinate for a vertical bar, and the minimum\n     * y-coordinate for a horizontal bar.\n     *\n     * @param plot  the plot.\n     * @param orientation  the plot orientation.\n     * @param dataArea  the data area.\n     * @param domainAxis  the domain axis.\n     * @param state  the renderer state (has the bar width precalculated).\n     * @param row  the row index.\n     * @param column  the column index.\n     *\n     * @return The coordinate.\n     */\n",
"org.jfree.chart.renderer.category.LevelRenderer.drawItem": "/**\n     * Draws the bar for a single (series, category) data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the data area.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.category.LevelRenderer.calculateSeriesWidth": "/**\n     * Calculates the available space for each series.\n     *\n     * @param space  the space along the entire axis (in Java2D units).\n     * @param axis  the category axis.\n     * @param categories  the number of categories.\n     * @param series  the number of series.\n     *\n     * @return The width of one series.\n     */\n",
"org.jfree.chart.renderer.category.LevelRenderer.getItemMiddle": "/**\n     * Returns the Java2D coordinate for the middle of the specified data item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     * @param dataset  the dataset.\n     * @param axis  the axis.\n     * @param area  the drawing area.\n     * @param edge  the edge along which the axis lies.\n     *\n     * @return The Java2D coordinate.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.category.LevelRenderer.equals": "/**\n     * Tests an object for equality with this instance.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.LevelRenderer.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.renderer.category.StatisticalBarRenderer.getErrorIndicatorPaint": "/**\n     * Returns the paint used for the error indicators.\n     *\n     * @return The paint used for the error indicators (possibly\n     *         {@code null}).\n     *\n     * @see #setErrorIndicatorPaint(Paint)\n     */\n",
"org.jfree.chart.renderer.category.StatisticalBarRenderer.setErrorIndicatorPaint": "/**\n     * Sets the paint used for the error indicators (if {@code null},\n     * the item outline paint is used instead) and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getErrorIndicatorPaint()\n     */\n",
"org.jfree.chart.renderer.category.StatisticalBarRenderer.getErrorIndicatorStroke": "/**\n     * Returns the stroke used to draw the error indicators.  If this is\n     * {@code null}, the renderer will use the item outline stroke).\n     *\n     * @return The stroke (possibly {@code null}).\n     *\n     * @see #setErrorIndicatorStroke(Stroke)\n     *\n     * @since 1.0.8\n     */\n",
"org.jfree.chart.renderer.category.StatisticalBarRenderer.setErrorIndicatorStroke": "/**\n     * Sets the stroke used to draw the error indicators, and sends a\n     * {@link RendererChangeEvent} to all registered listeners.  If you set\n     * this to {@code null}, the renderer will use the item outline\n     * stroke.\n     *\n     * @param stroke  the stroke ({@code null} permitted).\n     *\n     * @see #getErrorIndicatorStroke()\n     *\n     * @since 1.0.8\n     */\n",
"org.jfree.chart.renderer.category.StatisticalBarRenderer.findRangeBounds": "/**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset. This takes into account the range\n     * between the min/max values, possibly ignoring invisible series.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range (or {@code null} if the dataset is\n     *         {@code null} or empty).\n     */\n",
"org.jfree.chart.renderer.category.StatisticalBarRenderer.drawItem": "/**\n     * Draws the bar with its standard deviation line range for a single\n     * (series, category) data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the data area.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param data  the data.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.category.StatisticalBarRenderer.drawHorizontalItem": "/**\n     * Draws an item for a plot with a horizontal orientation.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the data area.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the data.\n     * @param visibleRow  the visible row index.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     */\n",
"org.jfree.chart.renderer.category.StatisticalBarRenderer.drawVerticalItem": "/**\n     * Draws an item for a plot with a vertical orientation.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the data area.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the data.\n     * @param visibleRow  the visible row index.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     */\n",
"org.jfree.chart.renderer.category.StatisticalBarRenderer.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.StatisticalBarRenderer.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.renderer.category.StatisticalBarRenderer.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.renderer.category.AreaRenderer.getEndType": "/**\n     * Returns a token that controls how the renderer draws the end points.\n     * The default value is {@link AreaRendererEndType#TAPER}.\n     *\n     * @return The end type (never {@code null}).\n     *\n     * @see #setEndType\n     */\n",
"org.jfree.chart.renderer.category.AreaRenderer.setEndType": "/**\n     * Sets a token that controls how the renderer draws the end points, and\n     * sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param type  the end type ({@code null} not permitted).\n     *\n     * @see #getEndType()\n     */\n",
"org.jfree.chart.renderer.category.AreaRenderer.getLegendItem": "/**\n     * Returns a legend item for a series.\n     *\n     * @param datasetIndex  the dataset index (zero-based).\n     * @param series  the series index (zero-based).\n     *\n     * @return The legend item.\n     */\n",
"org.jfree.chart.renderer.category.AreaRenderer.drawItem": "/**\n     * Draw a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the data plot area.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.category.AreaRenderer.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object to test ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.AreaRenderer.clone": "/**\n     * Returns an independent copy of the renderer.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  should not happen.\n     */\n",
"org.jfree.chart.renderer.category.GradientBarPainter.paintBar": "/**\n     * Paints a single bar instance.\n     *\n     * @param g2  the graphics target.\n     * @param renderer  the renderer.\n     * @param row  the row index.\n     * @param column  the column index.\n     * @param bar  the bar\n     * @param base  indicates which side of the rectangle is the base of the\n     *              bar.\n     */\n",
"org.jfree.chart.renderer.category.GradientBarPainter.paintBarShadow": "/**\n     * Paints a single bar instance.\n     *\n     * @param g2  the graphics target.\n     * @param renderer  the renderer.\n     * @param row  the row index.\n     * @param column  the column index.\n     * @param bar  the bar\n     * @param base  indicates which side of the rectangle is the base of the\n     *              bar.\n     * @param pegShadow  peg the shadow to the base of the bar?\n     */\n",
"org.jfree.chart.renderer.category.GradientBarPainter.createShadow": "/**\n     * Creates a shadow for the bar.\n     *\n     * @param bar  the bar shape.\n     * @param xOffset  the x-offset for the shadow.\n     * @param yOffset  the y-offset for the shadow.\n     * @param base  the edge that is the base of the bar.\n     * @param pegShadow  peg the shadow to the base?\n     *\n     * @return A rectangle for the shadow.\n     */\n",
"org.jfree.chart.renderer.category.GradientBarPainter.splitVerticalBar": "/**\n     * Splits a bar into subregions (elsewhere, these subregions will have\n     * different gradients applied to them).\n     *\n     * @param bar  the bar shape.\n     * @param a  the first division.\n     * @param b  the second division.\n     * @param c  the third division.\n     *\n     * @return An array containing four subregions.\n     */\n",
"org.jfree.chart.renderer.category.GradientBarPainter.splitHorizontalBar": "/**\n     * Splits a bar into subregions (elsewhere, these subregions will have\n     * different gradients applied to them).\n     *\n     * @param bar  the bar shape.\n     * @param a  the first division.\n     * @param b  the second division.\n     * @param c  the third division.\n     *\n     * @return An array containing four subregions.\n     */\n",
"org.jfree.chart.renderer.category.GradientBarPainter.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the obj ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.GradientBarPainter.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.renderer.category.GroupedStackedBarRenderer.setSeriesToGroupMap": "/**\n     * Updates the map used to assign each series to a group, and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param map  the map ({@code null} not permitted).\n     */\n",
"org.jfree.chart.renderer.category.GroupedStackedBarRenderer.findRangeBounds": "/**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range (or {@code null} if the dataset is\n     *         {@code null} or empty).\n     */\n",
"org.jfree.chart.renderer.category.GroupedStackedBarRenderer.calculateBarWidth": "/**\n     * Calculates the bar width and stores it in the renderer state.  We\n     * override the method in the base class to take account of the\n     * series-to-group mapping.\n     *\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     * @param rendererIndex  the renderer index.\n     * @param state  the renderer state.\n     */\n",
"org.jfree.chart.renderer.category.GroupedStackedBarRenderer.calculateBarW0": "/**\n     * Calculates the coordinate of the first \"side\" of a bar.  This will be\n     * the minimum x-coordinate for a vertical bar, and the minimum\n     * y-coordinate for a horizontal bar.\n     *\n     * @param plot  the plot.\n     * @param orientation  the plot orientation.\n     * @param dataArea  the data area.\n     * @param domainAxis  the domain axis.\n     * @param state  the renderer state (has the bar width precalculated).\n     * @param row  the row index.\n     * @param column  the column index.\n     *\n     * @return The coordinate.\n     */\n",
"org.jfree.chart.renderer.category.GroupedStackedBarRenderer.drawItem": "/**\n     * Draws a stacked bar for a specific item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the plot area.\n     * @param plot  the plot.\n     * @param domainAxis  the domain (category) axis.\n     * @param rangeAxis  the range (value) axis.\n     * @param dataset  the data.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.category.GroupedStackedBarRenderer.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getPassCount": "/**\n     * Returns the number of passes through the dataset required by the\n     * renderer.  This method returns {@code 1}, subclasses should\n     * override if they need more passes.\n     *\n     * @return The pass count.\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getPlot": "/**\n     * Returns the plot that the renderer has been assigned to (where\n     * {@code null} indicates that the renderer is not currently assigned\n     * to a plot).\n     *\n     * @return The plot (possibly {@code null}).\n     *\n     * @see #setPlot(CategoryPlot)\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setPlot": "/**\n     * Sets the plot that the renderer has been assigned to.  This method is\n     * usually called by the {@link CategoryPlot}, in normal usage you\n     * shouldn't need to call this method directly.\n     *\n     * @param plot  the plot ({@code null} not permitted).\n     *\n     * @see #getPlot()\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getItemLabelGenerator": "/**\n     * Returns the item label generator for a data item.  This implementation\n     * simply passes control to the {@link #getSeriesItemLabelGenerator(int)}\n     * method.  If, for some reason, you want a different generator for\n     * individual items, you can override this method.\n     *\n     * @param row  the row index (zero based).\n     * @param column  the column index (zero based).\n     *\n     * @return The generator (possibly {@code null}).\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getSeriesItemLabelGenerator": "/**\n     * Returns the item label generator for a series.\n     *\n     * @param series  the series index (zero based).\n     *\n     * @return The generator (possibly {@code null}).\n     *\n     * @see #setSeriesItemLabelGenerator(int, CategoryItemLabelGenerator)\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesItemLabelGenerator": "/**\n     * Sets the item label generator for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero based).\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getSeriesItemLabelGenerator(int)\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesItemLabelGenerator": "/**\n     * Sets the item label generator for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero based).\n     * @param generator  the generator ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getSeriesItemLabelGenerator(int)\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getDefaultItemLabelGenerator": "/**\n     * Returns the default item label generator.\n     *\n     * @return The generator (possibly {@code null}).\n     *\n     * @see #setDefaultItemLabelGenerator(CategoryItemLabelGenerator)\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setDefaultItemLabelGenerator": "/**\n     * Sets the default item label generator and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getDefaultItemLabelGenerator()\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setDefaultItemLabelGenerator": "/**\n     * Sets the default item label generator and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getDefaultItemLabelGenerator()\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getToolTipGenerator": "/**\n     * Returns the tool tip generator that should be used for the specified\n     * item.  This method looks up the generator using the \"three-layer\"\n     * approach outlined in the general description of this interface.  You\n     * can override this method if you want to return a different generator per\n     * item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The generator (possibly {@code null}).\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getSeriesToolTipGenerator": "/**\n     * Returns the tool tip generator for the specified series (a \"layer 1\"\n     * generator).\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The tool tip generator (possibly {@code null}).\n     *\n     * @see #setSeriesToolTipGenerator(int, CategoryToolTipGenerator)\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesToolTipGenerator": "/**\n     * Sets the tool tip generator for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getSeriesToolTipGenerator(int)\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesToolTipGenerator": "/**\n     * Sets the tool tip generator for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param generator  the generator ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getSeriesToolTipGenerator(int)\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getDefaultToolTipGenerator": "/**\n     * Returns the default tool tip generator (the \"layer 2\" generator).\n     *\n     * @return The tool tip generator (possibly {@code null}).\n     *\n     * @see #setDefaultToolTipGenerator(CategoryToolTipGenerator)\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setDefaultToolTipGenerator": "/**\n     * Sets the default tool tip generator and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getDefaultToolTipGenerator()\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setDefaultToolTipGenerator": "/**\n     * Sets the default tool tip generator and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getDefaultToolTipGenerator()\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getItemURLGenerator": "/**\n     * Returns the URL generator for a data item.  This method just calls the\n     * getSeriesItemURLGenerator method, but you can override this behaviour if\n     * you want to.\n     *\n     * @param row  the row index (zero based).\n     * @param column  the column index (zero based).\n     *\n     * @return The URL generator.\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getSeriesItemURLGenerator": "/**\n     * Returns the URL generator for a series.\n     *\n     * @param series  the series index (zero based).\n     *\n     * @return The URL generator for the series.\n     *\n     * @see #setSeriesItemURLGenerator(int, CategoryURLGenerator)\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesItemURLGenerator": "/**\n     * Sets the URL generator for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero based).\n     * @param generator  the generator.\n     *\n     * @see #getSeriesItemURLGenerator(int)\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesItemURLGenerator": "/**\n     * Sets the URL generator for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero based).\n     * @param generator  the generator.\n     * @param notify  notify listeners?\n     *\n     * @see #getSeriesItemURLGenerator(int)\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getDefaultItemURLGenerator": "/**\n     * Returns the default item URL generator.\n     *\n     * @return The item URL generator.\n     *\n     * @see #setDefaultItemURLGenerator(CategoryURLGenerator)\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setDefaultItemURLGenerator": "/**\n     * Sets the default item URL generator and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the item URL generator ({@code null} permitted).\n     *\n     * @see #getDefaultItemURLGenerator()\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setDefaultItemURLGenerator": "/**\n     * Sets the default item URL generator and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the item URL generator ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getDefaultItemURLGenerator()\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getRowCount": "/**\n     * Returns the number of rows in the dataset.  This value is updated in the\n     * {@link AbstractCategoryItemRenderer#initialise} method.\n     *\n     * @return The row count.\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getColumnCount": "/**\n     * Returns the number of columns in the dataset.  This value is updated in\n     * the {@link AbstractCategoryItemRenderer#initialise} method.\n     *\n     * @return The column count.\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.createState": "/**\n     * Creates a new state instance---this method is called from the\n     * {@link #initialise(Graphics2D, Rectangle2D, CategoryPlot, int,\n     * PlotRenderingInfo)} method.  Subclasses can override this method if\n     * they need to use a subclass of {@link CategoryItemRendererState}.\n     *\n     * @param info  collects plot rendering info ({@code null} permitted).\n     *\n     * @return The new state instance (never {@code null}).\n     *\n     * @since 1.0.5\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.initialise": "/**\n     * Initialises the renderer and returns a state object that will be used\n     * for the remainder of the drawing process for a single chart.  The state\n     * object allows for the fact that the renderer may be used simultaneously\n     * by multiple threads (each thread will work with a separate state object).\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param plot  the plot.\n     * @param rendererIndex  the renderer index.\n     * @param info  an object for returning information about the structure of\n     *              the plot ({@code null} permitted).\n     *\n     * @return The renderer state.\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.beginElementGroup": "/**\n     * Adds a {@code KEY_BEGIN_ELEMENT} hint to the graphics target.  This\n     * hint is recognised by <b>JFreeSVG</b> (in theory it could be used by \n     * other {@code Graphics2D} implementations also).\n     * \n     * @param g2  the graphics target ({@code null} not permitted).\n     * @param rowKey  the row key that identifies the element ({@code null} not\n     *     permitted).\n     * @param columnKey  the column key that identifies the element \n     *     ({@code null} not permitted). \n     * \n     * @since 1.0.20\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.findRangeBounds": "/**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return The range (or {@code null} if the dataset is\n     *         {@code null} or empty).\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.findRangeBounds": "/**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     * @param includeInterval  include the y-interval if the dataset has one.\n     *\n     * @return The range ({@code null} if the dataset is {@code null}\n     *         or empty).\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getItemMiddle": "/**\n     * Returns the Java2D coordinate for the middle of the specified data item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     * @param dataset  the dataset.\n     * @param axis  the axis.\n     * @param area  the data area.\n     * @param edge  the edge along which the axis lies.\n     *\n     * @return The Java2D coordinate for the middle of the item.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.drawBackground": "/**\n     * Draws a background for the data area.  The default implementation just\n     * gets the plot to draw the background, but some renderers will override\n     * this behaviour.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.drawOutline": "/**\n     * Draws an outline for the data area.  The default implementation just\n     * gets the plot to draw the outline, but some renderers will override this\n     * behaviour.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.drawDomainGridline": "/**\n     * Draws a grid line against the domain axis.\n     * <P>\n     * Note that this default implementation assumes that the horizontal axis\n     * is the domain axis. If this is not the case, you will need to override\n     * this method.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the area for plotting data.\n     * @param value  the Java2D value at which the grid line should be drawn.\n     *\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.drawRangeLine": "/**\n     * Draws a line perpendicular to the range axis.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param axis  the value axis.\n     * @param dataArea  the area for plotting data.\n     * @param value  the value at which the grid line should be drawn.\n     * @param paint  the paint ({@code null} not permitted).\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.drawDomainMarker": "/**\n     * Draws a marker for the domain axis.\n     *\n     * @param g2  the graphics device (not {@code null}).\n     * @param plot  the plot (not {@code null}).\n     * @param axis  the range axis (not {@code null}).\n     * @param marker  the marker to be drawn (not {@code null}).\n     * @param dataArea  the area inside the axes (not {@code null}).\n     *\n     * @see #drawRangeMarker(Graphics2D, CategoryPlot, ValueAxis, Marker,\n     *     Rectangle2D)\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.drawRangeMarker": "/**\n     * Draws a marker for the range axis.\n     *\n     * @param g2  the graphics device (not {@code null}).\n     * @param plot  the plot (not {@code null}).\n     * @param axis  the range axis (not {@code null}).\n     * @param marker  the marker to be drawn (not {@code null}).\n     * @param dataArea  the area inside the axes (not {@code null}).\n     *\n     * @see #drawDomainMarker(Graphics2D, CategoryPlot, CategoryAxis,\n     *     CategoryMarker, Rectangle2D)\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.calculateDomainMarkerTextAnchorPoint": "/**\n     * Calculates the {@code (x, y)} coordinates for drawing the label for a \n     * marker on the range axis.\n     *\n     * @param g2  the graphics device.\n     * @param orientation  the plot orientation.\n     * @param dataArea  the data area.\n     * @param markerArea  the rectangle surrounding the marker.\n     * @param markerOffset  the marker offset.\n     * @param labelOffsetType  the label offset type.\n     * @param anchor  the label anchor.\n     *\n     * @return The coordinates for drawing the marker label.\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.calculateRangeMarkerTextAnchorPoint": "/**\n     * Calculates the (x, y) coordinates for drawing a marker label.\n     *\n     * @param g2  the graphics device.\n     * @param orientation  the plot orientation.\n     * @param dataArea  the data area.\n     * @param markerArea  the rectangle surrounding the marker.\n     * @param markerOffset  the marker offset.\n     * @param labelOffsetType  the label offset type.\n     * @param anchor  the label anchor.\n     *\n     * @return The coordinates for drawing the marker label.\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getLegendItem": "/**\n     * Returns a legend item for a series.  This default implementation will\n     * return {@code null} if {@link #isSeriesVisible(int)} or\n     * {@link #isSeriesVisibleInLegend(int)} returns {@code false}.\n     *\n     * @param datasetIndex  the dataset index (zero-based).\n     * @param series  the series index (zero-based).\n     *\n     * @return The legend item (possibly {@code null}).\n     *\n     * @see #getLegendItems()\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.equals": "/**\n     * Tests this renderer for equality with another object.\n     *\n     * @param obj  the object.\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.hashCode": "/**\n     * Returns a hash code for the renderer.\n     *\n     * @return The hash code.\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getDrawingSupplier": "/**\n     * Returns the drawing supplier from the plot.\n     *\n     * @return The drawing supplier (possibly {@code null}).\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.updateCrosshairValues": "/**\n     * Considers the current (x, y) coordinate and updates the crosshair point\n     * if it meets the criteria (usually means the (x, y) coordinate is the\n     * closest to the anchor point so far).\n     *\n     * @param crosshairState  the crosshair state ({@code null} permitted,\n     *                        but the method does nothing in that case).\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     * @param value  the data value.\n     * @param datasetIndex  the dataset index.\n     * @param transX  the x-value translated to Java2D space.\n     * @param transY  the y-value translated to Java2D space.\n     * @param orientation  the plot orientation ({@code null} not\n     *                     permitted).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.drawItemLabel": "/**\n     * Draws an item label.\n     *\n     * @param g2  the graphics device.\n     * @param orientation  the orientation.\n     * @param dataset  the dataset.\n     * @param row  the row.\n     * @param column  the column.\n     * @param x  the x coordinate (in Java2D space).\n     * @param y  the y coordinate (in Java2D space).\n     * @param negative  indicates a negative value (which affects the item\n     *                  label position).\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.clone": "/**\n     * Returns an independent copy of the renderer.  The {@code plot}\n     * reference is shallow copied.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  can be thrown if one of the objects\n     *         belonging to the renderer does not support cloning (for example,\n     *         an item label generator).\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getDomainAxis": "/**\n     * Returns a domain axis for a plot.\n     *\n     * @param plot  the plot.\n     * @param index  the axis index.\n     *\n     * @return A domain axis.\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getRangeAxis": "/**\n     * Returns a range axis for a plot.\n     *\n     * @param plot  the plot.\n     * @param index  the axis index.\n     *\n     * @return A range axis.\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getLegendItems": "/**\n     * Returns a (possibly empty) collection of legend items for the series\n     * that this renderer is responsible for drawing.\n     *\n     * @return The legend item collection (never {@code null}).\n     *\n     * @see #getLegendItem(int, int)\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getLegendItemLabelGenerator": "/**\n     * Returns the legend item label generator.\n     *\n     * @return The label generator (never {@code null}).\n     *\n     * @see #setLegendItemLabelGenerator(CategorySeriesLabelGenerator)\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setLegendItemLabelGenerator": "/**\n     * Sets the legend item label generator and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator ({@code null} not permitted).\n     *\n     * @see #getLegendItemLabelGenerator()\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getLegendItemToolTipGenerator": "/**\n     * Returns the legend item tool tip generator.\n     *\n     * @return The tool tip generator (possibly {@code null}).\n     *\n     * @see #setLegendItemToolTipGenerator(CategorySeriesLabelGenerator)\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setLegendItemToolTipGenerator": "/**\n     * Sets the legend item tool tip generator and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #setLegendItemToolTipGenerator(CategorySeriesLabelGenerator)\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getLegendItemURLGenerator": "/**\n     * Returns the legend item URL generator.\n     *\n     * @return The URL generator (possibly {@code null}).\n     *\n     * @see #setLegendItemURLGenerator(CategorySeriesLabelGenerator)\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setLegendItemURLGenerator": "/**\n     * Sets the legend item URL generator and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getLegendItemURLGenerator()\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.addItemEntity": "/**\n     * Adds an entity with the specified hotspot.\n     *\n     * @param entities  the entity collection.\n     * @param dataset  the dataset.\n     * @param row  the row index.\n     * @param column  the column index.\n     * @param hotspot  the hotspot ({@code null} not permitted).\n     */\n",
"org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.addEntity": "/**\n     * Adds an entity to the collection.\n     *\n     * @param entities  the entity collection being populated.\n     * @param hotspot  the entity area (if {@code null} a default will be\n     *              used).\n     * @param dataset  the dataset.\n     * @param row  the series.\n     * @param column  the item.\n     * @param entityX  the entity's center x-coordinate in user space (only\n     *                 used if {@code area} is {@code null}).\n     * @param entityY  the entity's center y-coordinate in user space (only\n     *                 used if {@code area} is {@code null}).\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.getDefaultBarPainter": "/**\n     * Returns the default bar painter.\n     *\n     * @return The default bar painter.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.setDefaultBarPainter": "/**\n     * Sets the default bar painter.\n     *\n     * @param painter  the painter ({@code null} not permitted).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.getDefaultShadowsVisible": "/**\n     * Returns the default value for the {@code shadowsVisible} flag.\n     *\n     * @return A boolean.\n     *\n     * @see #setDefaultShadowsVisible(boolean)\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.setDefaultShadowsVisible": "/**\n     * Sets the default value for the shadows visible flag.\n     *\n     * @param visible  the new value for the default.\n     *\n     * @see #getDefaultShadowsVisible()\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.getBase": "/**\n     * Returns the base value for the bars.  The default value is\n     * {@code 0.0}.\n     *\n     * @return The base value for the bars.\n     *\n     * @see #setBase(double)\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.setBase": "/**\n     * Sets the base value for the bars and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param base  the new base value.\n     *\n     * @see #getBase()\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.getItemMargin": "/**\n     * Returns the item margin as a percentage of the available space for all\n     * bars.\n     *\n     * @return The margin percentage (where 0.10 is ten percent).\n     *\n     * @see #setItemMargin(double)\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.setItemMargin": "/**\n     * Sets the item margin and sends a {@link RendererChangeEvent} to all\n     * registered listeners.  The value is expressed as a percentage of the\n     * available width for plotting all the bars, with the resulting amount to\n     * be distributed between all the bars evenly.\n     *\n     * @param percent  the margin (where 0.10 is ten percent).\n     *\n     * @see #getItemMargin()\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.isDrawBarOutline": "/**\n     * Returns a flag that controls whether or not bar outlines are drawn.\n     *\n     * @return A boolean.\n     *\n     * @see #setDrawBarOutline(boolean)\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.setDrawBarOutline": "/**\n     * Sets the flag that controls whether or not bar outlines are drawn and\n     * sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param draw  the flag.\n     *\n     * @see #isDrawBarOutline()\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.getMaximumBarWidth": "/**\n     * Returns the maximum bar width, as a percentage of the available drawing\n     * space.\n     *\n     * @return The maximum bar width.\n     *\n     * @see #setMaximumBarWidth(double)\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.setMaximumBarWidth": "/**\n     * Sets the maximum bar width, which is specified as a percentage of the\n     * available space for all bars, and sends a {@link RendererChangeEvent} to\n     * all registered listeners.\n     *\n     * @param percent  the percent (where 0.05 is five percent).\n     *\n     * @see #getMaximumBarWidth()\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.getMinimumBarLength": "/**\n     * Returns the minimum bar length (in Java2D units).  The default value is\n     * 0.0.\n     *\n     * @return The minimum bar length.\n     *\n     * @see #setMinimumBarLength(double)\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.setMinimumBarLength": "/**\n     * Sets the minimum bar length and sends a {@link RendererChangeEvent} to\n     * all registered listeners.  The minimum bar length is specified in Java2D\n     * units, and can be used to prevent bars that represent very small data\n     * values from disappearing when drawn on the screen.  Typically you would\n     * set this to (say) 0.5 or 1.0 Java 2D units.  Use this attribute with\n     * caution, however, because setting it to a non-zero value will\n     * artificially increase the length of bars representing small values,\n     * which may misrepresent your data.\n     *\n     * @param min  the minimum bar length (in Java2D units, must be &gt;= 0.0).\n     *\n     * @see #getMinimumBarLength()\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.getGradientPaintTransformer": "/**\n     * Returns the gradient paint transformer (an object used to transform\n     * gradient paint objects to fit each bar).\n     *\n     * @return A transformer ({@code null} possible).\n     *\n     * @see #setGradientPaintTransformer(GradientPaintTransformer)\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.setGradientPaintTransformer": "/**\n     * Sets the gradient paint transformer and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param transformer  the transformer ({@code null} permitted).\n     *\n     * @see #getGradientPaintTransformer()\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.getPositiveItemLabelPositionFallback": "/**\n     * Returns the fallback position for positive item labels that don't fit\n     * within a bar.\n     *\n     * @return The fallback position ({@code null} possible).\n     *\n     * @see #setPositiveItemLabelPositionFallback(ItemLabelPosition)\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.setPositiveItemLabelPositionFallback": "/**\n     * Sets the fallback position for positive item labels that don't fit\n     * within a bar, and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param position  the position ({@code null} permitted).\n     *\n     * @see #getPositiveItemLabelPositionFallback()\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.getNegativeItemLabelPositionFallback": "/**\n     * Returns the fallback position for negative item labels that don't fit\n     * within a bar.\n     *\n     * @return The fallback position ({@code null} possible).\n     *\n     * @see #setPositiveItemLabelPositionFallback(ItemLabelPosition)\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.setNegativeItemLabelPositionFallback": "/**\n     * Sets the fallback position for negative item labels that don't fit\n     * within a bar, and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param position  the position ({@code null} permitted).\n     *\n     * @see #getNegativeItemLabelPositionFallback()\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.getIncludeBaseInRange": "/**\n     * Returns the flag that controls whether or not the base value for the\n     * bars is included in the range calculated by\n     * {@link #findRangeBounds(CategoryDataset)}.\n     *\n     * @return {@code true} if the base is included in the range, and\n     *         {@code false} otherwise.\n     *\n     * @since 1.0.1\n     *\n     * @see #setIncludeBaseInRange(boolean)\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.setIncludeBaseInRange": "/**\n     * Sets the flag that controls whether or not the base value for the bars\n     * is included in the range calculated by\n     * {@link #findRangeBounds(CategoryDataset)}.  If the flag is changed,\n     * a {@link RendererChangeEvent} is sent to all registered listeners.\n     *\n     * @param include  the new value for the flag.\n     *\n     * @since 1.0.1\n     *\n     * @see #getIncludeBaseInRange()\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.getBarPainter": "/**\n     * Returns the bar painter.\n     *\n     * @return The bar painter (never {@code null}).\n     *\n     * @see #setBarPainter(BarPainter)\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.setBarPainter": "/**\n     * Sets the bar painter for this renderer and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param painter  the painter ({@code null} not permitted).\n     *\n     * @see #getBarPainter()\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.getShadowsVisible": "/**\n     * Returns the flag that controls whether or not shadows are drawn for\n     * the bars.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.setShadowVisible": "/**\n     * Sets the flag that controls whether or not shadows are\n     * drawn by the renderer.\n     *\n     * @param visible  the new flag value.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.getShadowPaint": "/**\n     * Returns the shadow paint.\n     *\n     * @return The shadow paint.\n     *\n     * @see #setShadowPaint(Paint)\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.setShadowPaint": "/**\n     * Sets the shadow paint and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getShadowPaint()\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.getShadowXOffset": "/**\n     * Returns the shadow x-offset.\n     *\n     * @return The shadow x-offset.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.setShadowXOffset": "/**\n     * Sets the x-offset for the bar shadow and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param offset  the offset.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.getShadowYOffset": "/**\n     * Returns the shadow y-offset.\n     *\n     * @return The shadow y-offset.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.setShadowYOffset": "/**\n     * Sets the y-offset for the bar shadow and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param offset  the offset.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.getLowerClip": "/**\n     * Returns the lower clip value.  This value is recalculated in the\n     * initialise() method.\n     *\n     * @return The value.\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.getUpperClip": "/**\n     * Returns the upper clip value.  This value is recalculated in the\n     * initialise() method.\n     *\n     * @return The value.\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.initialise": "/**\n     * Initialises the renderer and returns a state object that will be passed\n     * to subsequent calls to the drawItem method.  This method gets called\n     * once at the start of the process of drawing a chart.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area in which the data is to be plotted.\n     * @param plot  the plot.\n     * @param rendererIndex  the renderer index.\n     * @param info  collects chart rendering information for return to caller.\n     *\n     * @return The renderer state.\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.calculateBarWidth": "/**\n     * Calculates the bar width and stores it in the renderer state.\n     *\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     * @param rendererIndex  the renderer index.\n     * @param state  the renderer state.\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.calculateBarW0": "/**\n     * Calculates the coordinate of the first \"side\" of a bar.  This will be\n     * the minimum x-coordinate for a vertical bar, and the minimum\n     * y-coordinate for a horizontal bar.\n     *\n     * @param plot  the plot.\n     * @param orientation  the plot orientation.\n     * @param dataArea  the data area.\n     * @param domainAxis  the domain axis.\n     * @param state  the renderer state (has the bar width precalculated).\n     * @param row  the row index.\n     * @param column  the column index.\n     *\n     * @return The coordinate.\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.calculateBarL0L1": "/**\n     * Calculates the coordinates for the length of a single bar.\n     *\n     * @param value  the value represented by the bar.\n     *\n     * @return The coordinates for each end of the bar (or {@code null} if\n     *         the bar is not visible for the current axis range).\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.findRangeBounds": "/**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset.  This takes into account the range\n     * of values in the dataset, plus the flag that determines whether or not\n     * the base value for the bars should be included in the range.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     * @param includeInterval  include the interval if the dataset has one?\n     *\n     * @return The range (or {@code null} if the dataset is\n     *         {@code null} or empty).\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.getLegendItem": "/**\n     * Returns a legend item for a series.\n     *\n     * @param datasetIndex  the dataset index (zero-based).\n     * @param series  the series index (zero-based).\n     *\n     * @return The legend item (possibly {@code null}).\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.drawItem": "/**\n     * Draws the bar for a single (series, category) data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the data area.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.calculateSeriesWidth": "/**\n     * Calculates the available space for each series.\n     *\n     * @param space  the space along the entire axis (in Java2D units).\n     * @param axis  the category axis.\n     * @param categories  the number of categories.\n     * @param series  the number of series.\n     *\n     * @return The width of one series.\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.drawItemLabel": "/**\n     * Draws an item label.  This method is overridden so that the bar can be\n     * used to calculate the label anchor point.\n     *\n     * @param g2  the graphics device.\n     * @param data  the dataset.\n     * @param row  the row.\n     * @param column  the column.\n     * @param plot  the plot.\n     * @param generator  the label generator.\n     * @param bar  the bar.\n     * @param negative  a flag indicating a negative value.\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.calculateLabelAnchorPoint": "/**\n     * Calculates the item label anchor point.\n     *\n     * @param anchor  the anchor.\n     * @param bar  the bar.\n     * @param orientation  the plot orientation.\n     *\n     * @return The anchor point.\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.isInternalAnchor": "/**\n     * Returns {@code true} if the specified anchor point is inside a bar.\n     *\n     * @param anchor  the anchor point.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.renderer.category.BarRenderer.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.renderer.category.BarPainter.paintBar": "/**\n     * Paints a single bar on behalf of a renderer.\n     *\n     * @param g2  the graphics target.\n     * @param renderer  the renderer.\n     * @param row  the row index for the item.\n     * @param column  the column index for the item.\n     * @param bar  the bounds for the bar.\n     * @param base  the base of the bar.\n     */\n",
"org.jfree.chart.renderer.category.BarPainter.paintBarShadow": "/**\n     * Paints the shadow for a single bar on behalf of a renderer.\n     *\n     * @param g2  the graphics target.\n     * @param renderer  the renderer.\n     * @param row  the row index for the item.\n     * @param column  the column index for the item.\n     * @param bar  the bounds for the bar.\n     * @param base  the base of the bar.\n     * @param pegShadow  peg the shadow to the base of the bar?\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.getArtifactPaint": "/**\n     * Returns the paint used to color the median and average markers.\n     *\n     * @return The paint used to draw the median and average markers (never\n     *     {@code null}).\n     *\n     * @see #setArtifactPaint(Paint)\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.setArtifactPaint": "/**\n     * Sets the paint used to color the median and average markers and sends\n     * a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getArtifactPaint()\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.getFillBox": "/**\n     * Returns the flag that controls whether or not the box is filled.\n     *\n     * @return A boolean.\n     *\n     * @see #setFillBox(boolean)\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.setFillBox": "/**\n     * Sets the flag that controls whether or not the box is filled and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #getFillBox()\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.getItemMargin": "/**\n     * Returns the item margin.  This is a percentage of the available space\n     * that is allocated to the space between items in the chart.\n     *\n     * @return The margin.\n     *\n     * @see #setItemMargin(double)\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.setItemMargin": "/**\n     * Sets the item margin and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param margin  the margin (a percentage).\n     *\n     * @see #getItemMargin()\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.getMaximumBarWidth": "/**\n     * Returns the maximum bar width as a percentage of the available drawing\n     * space.  Take care with the encoding, for example 0.10 is ten percent.\n     *\n     * @return The maximum bar width.\n     *\n     * @see #setMaximumBarWidth(double)\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.setMaximumBarWidth": "/**\n     * Sets the maximum bar width, which is specified as a percentage of the\n     * available space for all bars, and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param percent  the maximum bar width (a percentage, where 0.10 is ten\n     *     percent).\n     *\n     * @see #getMaximumBarWidth()\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.isMeanVisible": "/**\n     * Returns the flag that controls whether or not the mean indicator is\n     * draw for each item.\n     *\n     * @return A boolean.\n     *\n     * @see #setMeanVisible(boolean)\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.setMeanVisible": "/**\n     * Sets the flag that controls whether or not the mean indicator is drawn\n     * for each item, and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param visible  the new flag value.\n     *\n     * @see #isMeanVisible()\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.isMedianVisible": "/**\n     * Returns the flag that controls whether or not the median indicator is\n     * draw for each item.\n     *\n     * @return A boolean.\n     *\n     * @see #setMedianVisible(boolean)\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.setMedianVisible": "/**\n     * Sets the flag that controls whether or not the median indicator is drawn\n     * for each item, and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param visible  the new flag value.\n     *\n     * @see #isMedianVisible()\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.isMinOutlierVisible": "/**\n     * Returns the flag that controls whether or not the minimum outlier is\n     * draw for each item.\n     *\n     * @return A boolean.\n     *\n     * @see #setMinOutlierVisible(boolean)\n     *\n     * @since 1.5.2\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.setMinOutlierVisible": "/**\n     * Sets the flag that controls whether or not the minimum outlier is drawn\n     * for each item, and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param visible  the new flag value.\n     *\n     * @see #isMinOutlierVisible()\n     *\n     * @since 1.5.2\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.isMaxOutlierVisible": "/**\n     * Returns the flag that controls whether or not the maximum outlier is\n     * draw for each item.\n     *\n     * @return A boolean.\n     *\n     * @see #setMaxOutlierVisible(boolean)\n     *\n     * @since 1.5.2\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.setMaxOutlierVisible": "/**\n     * Sets the flag that controls whether or not the maximum outlier is drawn\n     * for each item, and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param visible  the new flag value.\n     *\n     * @see #isMaxOutlierVisible()\n     *\n     * @since 1.5.2\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.getUseOutlinePaintForWhiskers": "/**\n     * Returns the flag that, if {@code true}, causes the whiskers to\n     * be drawn using the series outline paint.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.setUseOutlinePaintForWhiskers": "/**\n     * Sets the flag that, if {@code true}, causes the whiskers to\n     * be drawn using the series outline paint, and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param flag  the new flag value.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.getWhiskerWidth": "/**\n     * Returns the width of the whiskers as fraction of the bar width.\n     *\n     * @return The width of the whiskers.\n     *\n     * @see #setWhiskerWidth(double)\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.setWhiskerWidth": "/**\n     * Sets the width of the whiskers as a fraction of the bar width and sends\n     * a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param width  a value between 0 and 1 indicating how wide the\n     *     whisker is supposed to be compared to the bar.\n     * @see #getWhiskerWidth()\n     * @see CategoryItemRendererState#getBarWidth()\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.getLegendItem": "/**\n     * Returns a legend item for a series.\n     *\n     * @param datasetIndex  the dataset index (zero-based).\n     * @param series  the series index (zero-based).\n     *\n     * @return The legend item (possibly {@code null}).\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.findRangeBounds": "/**\n     * Returns the range of values from the specified dataset that the\n     * renderer will require to display all the data.\n     *\n     * @param dataset  the dataset.\n     *\n     * @return The range.\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.initialise": "/**\n     * Initialises the renderer.  This method gets called once at the start of\n     * the process of drawing a chart.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area in which the data is to be plotted.\n     * @param plot  the plot.\n     * @param rendererIndex  the renderer index.\n     * @param info  collects chart rendering information for return to caller.\n     *\n     * @return The renderer state.\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.drawItem": "/**\n     * Draw a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area in which the data is drawn.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the data (must be an instance of\n     *                 {@link BoxAndWhiskerCategoryDataset}).\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.drawHorizontalItem": "/**\n     * Draws the visual representation of a single data item when the plot has\n     * a horizontal orientation.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area within which the plot is being drawn.\n     * @param plot  the plot (can be used to obtain standard color\n     *              information etc).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset (must be an instance of\n     *                 {@link BoxAndWhiskerCategoryDataset}).\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.drawVerticalItem": "/**\n     * Draws the visual representation of a single data item when the plot has\n     * a vertical orientation.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area within which the plot is being drawn.\n     * @param plot  the plot (can be used to obtain standard color information\n     *              etc).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset (must be an instance of\n     *                 {@link BoxAndWhiskerCategoryDataset}).\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.drawEllipse": "/**\n     * Draws a dot to represent an outlier.\n     *\n     * @param point  the location.\n     * @param oRadius  the radius.\n     * @param g2  the graphics device.\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.drawMultipleEllipse": "/**\n     * Draws two dots to represent the average value of more than one outlier.\n     *\n     * @param point  the location\n     * @param boxWidth  the box width.\n     * @param oRadius  the radius.\n     * @param g2  the graphics device.\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.drawHighFarOut": "/**\n     * Draws a triangle to indicate the presence of far-out values.\n     *\n     * @param aRadius  the radius.\n     * @param g2  the graphics device.\n     * @param xx  the x coordinate.\n     * @param m  the y coordinate.\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.drawLowFarOut": "/**\n     * Draws a triangle to indicate the presence of far-out values.\n     *\n     * @param aRadius  the radius.\n     * @param g2  the graphics device.\n     * @param xx  the x coordinate.\n     * @param m  the y coordinate.\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.equals": "/**\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.renderer.category.LayeredBarRenderer.getSeriesBarWidth": "/**\n     * Returns the bar width for a series, or {@code Double.NaN} if no\n     * width has been set.\n     *\n     * @param series  the series index (zero based).\n     *\n     * @return The width for the series (1.0=100%, it is the maximum).\n     */\n",
"org.jfree.chart.renderer.category.LayeredBarRenderer.setSeriesBarWidth": "/**\n     * Sets the width of the bars of a series.\n     *\n     * @param series  the series index (zero based).\n     * @param width  the width of the series bar in percentage (1.0=100%, it is\n     *               the maximum).\n     */\n",
"org.jfree.chart.renderer.category.LayeredBarRenderer.calculateBarWidth": "/**\n     * Calculates the bar width and stores it in the renderer state.\n     *\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     * @param rendererIndex  the renderer index.\n     * @param state  the renderer state.\n     */\n",
"org.jfree.chart.renderer.category.LayeredBarRenderer.drawItem": "/**\n     * Draws the bar for one item in the dataset.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the plot area.\n     * @param plot  the plot.\n     * @param domainAxis  the domain (category) axis.\n     * @param rangeAxis  the range (value) axis.\n     * @param data  the data.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param pass  the pass index.\n     */\n",
"org.jfree.chart.renderer.category.LayeredBarRenderer.drawHorizontalItem": "/**\n     * Draws the bar for a single (series, category) data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the data area.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     */\n",
"org.jfree.chart.renderer.category.LayeredBarRenderer.drawVerticalItem": "/**\n     * Draws the bar for a single (series, category) data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the data area.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getDrawingSupplier": "/**\n     * Returns the drawing supplier from the plot.\n     *\n     * @return The drawing supplier.\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.beginElementGroup": "/**\n     * Adds a {@code KEY_BEGIN_ELEMENT} hint to the graphics target.  This\n     * hint is recognised by <b>JFreeSVG</b> (in theory it could be used by \n     * other {@code Graphics2D} implementations also).\n     * \n     * @param g2  the graphics target ({@code null} not permitted).\n     * @param key  the key ({@code null} not permitted).\n     * \n     * @see #endElementGroup(java.awt.Graphics2D) \n     * @since 1.0.20\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.endElementGroup": "/**\n     * Adds a {@code KEY_END_ELEMENT} hint to the graphics target.\n     * \n     * @param g2  the graphics target ({@code null} not permitted).\n     * \n     * @see #beginElementGroup(java.awt.Graphics2D, org.jfree.data.ItemKey) \n     * @since 1.0.20\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getItemVisible": "/**\n     * Returns a boolean that indicates whether or not the specified item\n     * should be drawn.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.isSeriesVisible": "/**\n     * Returns a boolean that indicates whether or not the specified series\n     * should be drawn.  In fact this method should be named \n     * lookupSeriesVisible() to be consistent with the other series\n     * attributes and avoid confusion with the getSeriesVisible() method.\n     *\n     * @param series  the series index.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getSeriesVisible": "/**\n     * Returns the flag that controls whether a series is visible.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The flag (possibly {@code null}).\n     *\n     * @see #setSeriesVisible(int, Boolean)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible": "/**\n     * Sets the flag that controls whether a series is visible and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param visible  the flag ({@code null} permitted).\n     *\n     * @see #getSeriesVisible(int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible": "/**\n     * Sets the flag that controls whether a series is visible and, if\n     * requested, sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param series  the series index.\n     * @param visible  the flag ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getSeriesVisible(int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getDefaultSeriesVisible": "/**\n     * Returns the default visibility for all series.\n     *\n     * @return The default visibility.\n     *\n     * @see #setDefaultSeriesVisible(boolean)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultSeriesVisible": "/**\n     * Sets the default series visibility and sends a \n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param visible  the flag.\n     *\n     * @see #getDefaultSeriesVisible()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultSeriesVisible": "/**\n     * Sets the default series visibility and, if requested, sends\n     * a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param visible  the visibility.\n     * @param notify  notify listeners?\n     *\n     * @see #getDefaultSeriesVisible()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.isSeriesVisibleInLegend": "/**\n     * Returns {@code true} if the series should be shown in the legend,\n     * and {@code false} otherwise.\n     *\n     * @param series  the series index.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getSeriesVisibleInLegend": "/**\n     * Returns the flag that controls whether a series is visible in the\n     * legend.  This method returns only the \"per series\" settings - to\n     * incorporate the default settings as well, you need to use the\n     * {@link #isSeriesVisibleInLegend(int)} method.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The flag (possibly {@code null}).\n     *\n     * @see #setSeriesVisibleInLegend(int, Boolean)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesVisibleInLegend": "/**\n     * Sets the flag that controls whether a series is visible in the legend\n     * and sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param visible  the flag ({@code null} permitted).\n     *\n     * @see #getSeriesVisibleInLegend(int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesVisibleInLegend": "/**\n     * Sets the flag that controls whether a series is visible in the legend\n     * and, if requested, sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param series  the series index.\n     * @param visible  the flag ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getSeriesVisibleInLegend(int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getDefaultSeriesVisibleInLegend": "/**\n     * Returns the default visibility in the legend for all series.\n     *\n     * @return The default visibility.\n     *\n     * @see #setDefaultSeriesVisibleInLegend(boolean)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultSeriesVisibleInLegend": "/**\n     * Sets the default visibility in the legend and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param visible  the flag.\n     *\n     * @see #getDefaultSeriesVisibleInLegend()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultSeriesVisibleInLegend": "/**\n     * Sets the default visibility in the legend and, if requested, sends\n     * a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param visible  the visibility.\n     * @param notify  notify listeners?\n     *\n     * @see #getDefaultSeriesVisibleInLegend()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getItemPaint": "/**\n     * Returns the paint used to fill data items as they are drawn.\n     * (this is typically the same for an entire series).\n     * <p>\n     * The default implementation passes control to the\n     * {@code lookupSeriesPaint()} method. You can override this method\n     * if you require different behaviour.\n     *\n     * @param row  the row (or series) index (zero-based).\n     * @param column  the column (or category) index (zero-based).\n     *\n     * @return The paint (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.lookupSeriesPaint": "/**\n     * Returns the paint used to fill an item drawn by the renderer.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getSeriesPaint": "/**\n     * Returns the paint used to fill an item drawn by the renderer.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setSeriesPaint(int, Paint)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesPaint": "/**\n     * Sets the paint used for a series and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getSeriesPaint(int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesPaint": "/**\n     * Sets the paint used for a series and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index.\n     * @param paint  the paint ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getSeriesPaint(int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.clearSeriesPaints": "/**\n     * Clears the series paint settings for this renderer and, if requested,\n     * sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getDefaultPaint": "/**\n     * Returns the default paint.\n     *\n     * @return The default paint (never {@code null}).\n     *\n     * @see #setDefaultPaint(Paint)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultPaint": "/**\n     * Sets the default paint and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getDefaultPaint()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultPaint": "/**\n     * Sets the default paint and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getDefaultPaint()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getAutoPopulateSeriesPaint": "/**\n     * Returns the flag that controls whether or not the series paint list is\n     * automatically populated when {@link #lookupSeriesPaint(int)} is called.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.6\n     *\n     * @see #setAutoPopulateSeriesPaint(boolean)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setAutoPopulateSeriesPaint": "/**\n     * Sets the flag that controls whether or not the series paint list is\n     * automatically populated when {@link #lookupSeriesPaint(int)} is called.\n     *\n     * @param auto  the new flag value.\n     *\n     * @since 1.0.6\n     *\n     * @see #getAutoPopulateSeriesPaint()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getItemFillPaint": "/**\n     * Returns the paint used to fill data items as they are drawn.  The\n     * default implementation passes control to the\n     * {@link #lookupSeriesFillPaint(int)} method - you can override this\n     * method if you require different behaviour.\n     *\n     * @param row  the row (or series) index (zero-based).\n     * @param column  the column (or category) index (zero-based).\n     *\n     * @return The paint (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.lookupSeriesFillPaint": "/**\n     * Returns the paint used to fill an item drawn by the renderer.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getSeriesFillPaint": "/**\n     * Returns the paint used to fill an item drawn by the renderer.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setSeriesFillPaint(int, Paint)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesFillPaint": "/**\n     * Sets the paint used for a series fill and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getSeriesFillPaint(int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesFillPaint": "/**\n     * Sets the paint used to fill a series and, if requested,\n     * sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param paint  the paint ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getSeriesFillPaint(int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getDefaultFillPaint": "/**\n     * Returns the default fill paint.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setDefaultFillPaint(Paint)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultFillPaint": "/**\n     * Sets the default fill paint and sends a {@link RendererChangeEvent} to\n     * all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getDefaultFillPaint()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultFillPaint": "/**\n     * Sets the default fill paint and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getDefaultFillPaint()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getAutoPopulateSeriesFillPaint": "/**\n     * Returns the flag that controls whether or not the series fill paint list\n     * is automatically populated when {@link #lookupSeriesFillPaint(int)} is\n     * called.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.6\n     *\n     * @see #setAutoPopulateSeriesFillPaint(boolean)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setAutoPopulateSeriesFillPaint": "/**\n     * Sets the flag that controls whether or not the series fill paint list is\n     * automatically populated when {@link #lookupSeriesFillPaint(int)} is\n     * called.\n     *\n     * @param auto  the new flag value.\n     *\n     * @since 1.0.6\n     *\n     * @see #getAutoPopulateSeriesFillPaint()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getItemOutlinePaint": "/**\n     * Returns the paint used to outline data items as they are drawn.\n     * (this is typically the same for an entire series).\n     * <p>\n     * The default implementation passes control to the\n     * {@link #lookupSeriesOutlinePaint} method.  You can override this method\n     * if you require different behaviour.\n     *\n     * @param row  the row (or series) index (zero-based).\n     * @param column  the column (or category) index (zero-based).\n     *\n     * @return The paint (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.lookupSeriesOutlinePaint": "/**\n     * Returns the paint used to outline an item drawn by the renderer.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getSeriesOutlinePaint": "/**\n     * Returns the paint used to outline an item drawn by the renderer.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setSeriesOutlinePaint(int, Paint)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesOutlinePaint": "/**\n     * Sets the paint used for a series outline and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getSeriesOutlinePaint(int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesOutlinePaint": "/**\n     * Sets the paint used to draw the outline for a series and, if requested,\n     * sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param paint  the paint ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getSeriesOutlinePaint(int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getDefaultOutlinePaint": "/**\n     * Returns the default outline paint.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setDefaultOutlinePaint(Paint)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultOutlinePaint": "/**\n     * Sets the default outline paint and sends a {@link RendererChangeEvent} to\n     * all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getDefaultOutlinePaint()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultOutlinePaint": "/**\n     * Sets the default outline paint and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getDefaultOutlinePaint()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getAutoPopulateSeriesOutlinePaint": "/**\n     * Returns the flag that controls whether or not the series outline paint\n     * list is automatically populated when\n     * {@link #lookupSeriesOutlinePaint(int)} is called.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.6\n     *\n     * @see #setAutoPopulateSeriesOutlinePaint(boolean)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setAutoPopulateSeriesOutlinePaint": "/**\n     * Sets the flag that controls whether or not the series outline paint list\n     * is automatically populated when {@link #lookupSeriesOutlinePaint(int)}\n     * is called.\n     *\n     * @param auto  the new flag value.\n     *\n     * @since 1.0.6\n     *\n     * @see #getAutoPopulateSeriesOutlinePaint()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getItemStroke": "/**\n     * Returns the stroke used to draw data items.\n     * <p>\n     * The default implementation passes control to the getSeriesStroke method.\n     * You can override this method if you require different behaviour.\n     *\n     * @param row  the row (or series) index (zero-based).\n     * @param column  the column (or category) index (zero-based).\n     *\n     * @return The stroke (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.lookupSeriesStroke": "/**\n     * Returns the stroke used to draw the items in a series.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getSeriesStroke": "/**\n     * Returns the stroke used to draw the items in a series.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The stroke (possibly {@code null}).\n     *\n     * @see #setSeriesStroke(int, Stroke)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesStroke": "/**\n     * Sets the stroke used for a series and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param stroke  the stroke ({@code null} permitted).\n     *\n     * @see #getSeriesStroke(int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesStroke": "/**\n     * Sets the stroke for a series and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param stroke  the stroke ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getSeriesStroke(int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.clearSeriesStrokes": "/**\n     * Clears the series stroke settings for this renderer and, if requested,\n     * sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getDefaultStroke": "/**\n     * Returns the default stroke.\n     *\n     * @return The default stroke (never {@code null}).\n     *\n     * @see #setDefaultStroke(Stroke)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultStroke": "/**\n     * Sets the default stroke and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getDefaultStroke()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultStroke": "/**\n     * Sets the base stroke and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getDefaultStroke()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getAutoPopulateSeriesStroke": "/**\n     * Returns the flag that controls whether or not the series stroke list is\n     * automatically populated when {@link #lookupSeriesStroke(int)} is called.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.6\n     *\n     * @see #setAutoPopulateSeriesStroke(boolean)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setAutoPopulateSeriesStroke": "/**\n     * Sets the flag that controls whether or not the series stroke list is\n     * automatically populated when {@link #lookupSeriesStroke(int)} is called.\n     *\n     * @param auto  the new flag value.\n     *\n     * @since 1.0.6\n     *\n     * @see #getAutoPopulateSeriesStroke()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getItemOutlineStroke": "/**\n     * Returns the stroke used to outline data items.  The default\n     * implementation passes control to the\n     * {@link #lookupSeriesOutlineStroke(int)} method. You can override this\n     * method if you require different behaviour.\n     *\n     * @param row  the row (or series) index (zero-based).\n     * @param column  the column (or category) index (zero-based).\n     *\n     * @return The stroke (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.lookupSeriesOutlineStroke": "/**\n     * Returns the stroke used to outline the items in a series.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getSeriesOutlineStroke": "/**\n     * Returns the stroke used to outline the items in a series.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The stroke (possibly {@code null}).\n     *\n     * @see #setSeriesOutlineStroke(int, Stroke)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesOutlineStroke": "/**\n     * Sets the outline stroke used for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param stroke  the stroke ({@code null} permitted).\n     *\n     * @see #getSeriesOutlineStroke(int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesOutlineStroke": "/**\n     * Sets the outline stroke for a series and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index.\n     * @param stroke  the stroke ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getSeriesOutlineStroke(int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getDefaultOutlineStroke": "/**\n     * Returns the default outline stroke.\n     *\n     * @return The stroke (never {@code null}).\n     *\n     * @see #setDefaultOutlineStroke(Stroke)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultOutlineStroke": "/**\n     * Sets the default outline stroke and sends a {@link RendererChangeEvent} \n     * to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     *\n     * @see #getDefaultOutlineStroke()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultOutlineStroke": "/**\n     * Sets the default outline stroke and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke ({@code null} not permitted).\n     * @param notify  a flag that controls whether or not listeners are\n     *                notified.\n     *\n     * @see #getDefaultOutlineStroke()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getAutoPopulateSeriesOutlineStroke": "/**\n     * Returns the flag that controls whether or not the series outline stroke\n     * list is automatically populated when\n     * {@link #lookupSeriesOutlineStroke(int)} is called.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.6\n     *\n     * @see #setAutoPopulateSeriesOutlineStroke(boolean)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setAutoPopulateSeriesOutlineStroke": "/**\n     * Sets the flag that controls whether or not the series outline stroke list\n     * is automatically populated when {@link #lookupSeriesOutlineStroke(int)}\n     * is called.\n     *\n     * @param auto  the new flag value.\n     *\n     * @since 1.0.6\n     *\n     * @see #getAutoPopulateSeriesOutlineStroke()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getItemShape": "/**\n     * Returns a shape used to represent a data item.\n     * <p>\n     * The default implementation passes control to the \n     * {@link #lookupSeriesShape(int)} method. You can override this method if \n     * you require different behaviour.\n     *\n     * @param row  the row (or series) index (zero-based).\n     * @param column  the column (or category) index (zero-based).\n     *\n     * @return The shape (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.lookupSeriesShape": "/**\n     * Returns a shape used to represent the items in a series.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The shape (never {@code null}).\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getSeriesShape": "/**\n     * Returns a shape used to represent the items in a series.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The shape (possibly {@code null}).\n     *\n     * @see #setSeriesShape(int, Shape)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesShape": "/**\n     * Sets the shape used for a series and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param shape  the shape ({@code null} permitted).\n     *\n     * @see #getSeriesShape(int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesShape": "/**\n     * Sets the shape for a series and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero based).\n     * @param shape  the shape ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getSeriesShape(int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getDefaultShape": "/**\n     * Returns the default shape.\n     *\n     * @return The shape (never {@code null}).\n     *\n     * @see #setDefaultShape(Shape)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultShape": "/**\n     * Sets the default shape and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param shape  the shape ({@code null} not permitted).\n     *\n     * @see #getDefaultShape()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultShape": "/**\n     * Sets the default shape and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param shape  the shape ({@code null} not permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getDefaultShape()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getAutoPopulateSeriesShape": "/**\n     * Returns the flag that controls whether or not the series shape list is\n     * automatically populated when {@link #lookupSeriesShape(int)} is called.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.6\n     *\n     * @see #setAutoPopulateSeriesShape(boolean)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setAutoPopulateSeriesShape": "/**\n     * Sets the flag that controls whether or not the series shape list is\n     * automatically populated when {@link #lookupSeriesShape(int)} is called.\n     *\n     * @param auto  the new flag value.\n     *\n     * @since 1.0.6\n     *\n     * @see #getAutoPopulateSeriesShape()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.isItemLabelVisible": "/**\n     * Returns {@code true} if an item label is visible, and\n     * {@code false} otherwise.\n     *\n     * @param row  the row (or series) index (zero-based).\n     * @param column  the column (or category) index (zero-based).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.isSeriesItemLabelsVisible": "/**\n     * Returns {@code true} if the item labels for a series are visible,\n     * and {@code false} otherwise.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesItemLabelsVisible": "/**\n     * Sets a flag that controls the visibility of the item labels for a series,\n     * and sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param visible  the flag.\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesItemLabelsVisible": "/**\n     * Sets the visibility of the item labels for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param visible  the flag ({@code null} permitted).\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesItemLabelsVisible": "/**\n     * Sets the visibility of item labels for a series and, if requested, sends\n     * a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param visible  the visible flag.\n     * @param notify  a flag that controls whether or not listeners are\n     *                notified.\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getDefaultItemLabelsVisible": "/**\n     * Returns the base setting for item label visibility.  A {@code null}\n     * result should be interpreted as equivalent to {@code Boolean.FALSE}.\n     *\n     * @return A flag (possibly {@code null}).\n     *\n     * @see #setDefaultItemLabelsVisible(boolean)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultItemLabelsVisible": "/**\n     * Sets the base flag that controls whether or not item labels are visible,\n     * and sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param visible  the flag.\n     *\n     * @see #getDefaultItemLabelsVisible()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultItemLabelsVisible": "/**\n     * Sets the base visibility for item labels and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param visible  the flag ({@code null} is permitted, and viewed\n     *     as equivalent to {@code Boolean.FALSE}).\n     * @param notify  a flag that controls whether or not listeners are\n     *                notified.\n     *\n     * @see #getDefaultItemLabelsVisible() \n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getItemLabelFont": "/**\n     * Returns the font for an item label.\n     *\n     * @param row  the row (or series) index (zero-based).\n     * @param column  the column (or category) index (zero-based).\n     *\n     * @return The font (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getSeriesItemLabelFont": "/**\n     * Returns the font for all the item labels in a series.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The font (possibly {@code null}).\n     *\n     * @see #setSeriesItemLabelFont(int, Font)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesItemLabelFont": "/**\n     * Sets the item label font for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param font  the font ({@code null} permitted).\n     *\n     * @see #getSeriesItemLabelFont(int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesItemLabelFont": "/**\n     * Sets the item label font for a series and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero based).\n     * @param font  the font ({@code null} permitted).\n     * @param notify  a flag that controls whether or not listeners are\n     *                notified.\n     *\n     * @see #getSeriesItemLabelFont(int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getDefaultItemLabelFont": "/**\n     * Returns the default item label font (this is used when no other font\n     * setting is available).\n     *\n     * @return The font (never {@code null}).\n     *\n     * @see #setDefaultItemLabelFont(Font)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultItemLabelFont": "/**\n     * Sets the default item label font and sends a {@link RendererChangeEvent} \n     * to all registered listeners.\n     *\n     * @param font  the font ({@code null} not permitted).\n     *\n     * @see #getDefaultItemLabelFont()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultItemLabelFont": "/**\n     * Sets the base item label font and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param font  the font ({@code null} not permitted).\n     * @param notify  a flag that controls whether or not listeners are\n     *                notified.\n     *\n     * @see #getDefaultItemLabelFont()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getItemLabelPaint": "/**\n     * Returns the paint used to draw an item label.\n     *\n     * @param row  the row index (zero based).\n     * @param column  the column index (zero based).\n     *\n     * @return The paint (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getSeriesItemLabelPaint": "/**\n     * Returns the paint used to draw the item labels for a series.\n     *\n     * @param series  the series index (zero based).\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #setSeriesItemLabelPaint(int, Paint)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesItemLabelPaint": "/**\n     * Sets the item label paint for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series (zero based index).\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @see #getSeriesItemLabelPaint(int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesItemLabelPaint": "/**\n     * Sets the item label paint for a series and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero based).\n     * @param paint  the paint ({@code null} permitted).\n     * @param notify  a flag that controls whether or not listeners are\n     *                notified.\n     *\n     * @see #getSeriesItemLabelPaint(int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getDefaultItemLabelPaint": "/**\n     * Returns the default item label paint.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setDefaultItemLabelPaint(Paint)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultItemLabelPaint": "/**\n     * Sets the default item label paint and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getDefaultItemLabelPaint()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultItemLabelPaint": "/**\n     * Sets the default item label paint and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners..\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     * @param notify  a flag that controls whether or not listeners are\n     *                notified.\n     *\n     * @see #getDefaultItemLabelPaint()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getPositiveItemLabelPosition": "/**\n     * Returns the item label position for positive values.\n     *\n     * @param row  the row (or series) index (zero-based).\n     * @param column  the column (or category) index (zero-based).\n     *\n     * @return The item label position (never {@code null}).\n     *\n     * @see #getNegativeItemLabelPosition(int, int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getSeriesPositiveItemLabelPosition": "/**\n     * Returns the item label position for all positive values in a series.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The item label position (never {@code null}).\n     *\n     * @see #setSeriesPositiveItemLabelPosition(int, ItemLabelPosition)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesPositiveItemLabelPosition": "/**\n     * Sets the item label position for all positive values in a series and\n     * sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param position  the position ({@code null} permitted).\n     *\n     * @see #getSeriesPositiveItemLabelPosition(int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesPositiveItemLabelPosition": "/**\n     * Sets the item label position for all positive values in a series and (if\n     * requested) sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param position  the position ({@code null} permitted).\n     * @param notify  notify registered listeners?\n     *\n     * @see #getSeriesPositiveItemLabelPosition(int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getDefaultPositiveItemLabelPosition": "/**\n     * Returns the default positive item label position.\n     *\n     * @return The position (never {@code null}).\n     *\n     * @see #setDefaultPositiveItemLabelPosition(ItemLabelPosition)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultPositiveItemLabelPosition": "/**\n     * Sets the default positive item label position.\n     *\n     * @param position  the position ({@code null} not permitted).\n     *\n     * @see #getDefaultPositiveItemLabelPosition()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultPositiveItemLabelPosition": "/**\n     * Sets the default positive item label position and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param position  the position ({@code null} not permitted).\n     * @param notify  notify registered listeners?\n     *\n     * @see #getDefaultPositiveItemLabelPosition()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getNegativeItemLabelPosition": "/**\n     * Returns the item label position for negative values.  This method can be\n     * overridden to provide customisation of the item label position for\n     * individual data items.\n     *\n     * @param row  the row (or series) index (zero-based).\n     * @param column  the column (or category) index (zero-based).\n     *\n     * @return The item label position (never {@code null}).\n     *\n     * @see #getPositiveItemLabelPosition(int, int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getSeriesNegativeItemLabelPosition": "/**\n     * Returns the item label position for all negative values in a series.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The item label position (never {@code null}).\n     *\n     * @see #setSeriesNegativeItemLabelPosition(int, ItemLabelPosition)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesNegativeItemLabelPosition": "/**\n     * Sets the item label position for negative values in a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param position  the position ({@code null} permitted).\n     *\n     * @see #getSeriesNegativeItemLabelPosition(int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesNegativeItemLabelPosition": "/**\n     * Sets the item label position for negative values in a series and (if\n     * requested) sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param position  the position ({@code null} permitted).\n     * @param notify  notify registered listeners?\n     *\n     * @see #getSeriesNegativeItemLabelPosition(int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getDefaultNegativeItemLabelPosition": "/**\n     * Returns the base item label position for negative values.\n     *\n     * @return The position (never {@code null}).\n     *\n     * @see #setDefaultNegativeItemLabelPosition(ItemLabelPosition)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultNegativeItemLabelPosition": "/**\n     * Sets the default item label position for negative values and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param position  the position ({@code null} not permitted).\n     *\n     * @see #getDefaultNegativeItemLabelPosition()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultNegativeItemLabelPosition": "/**\n     * Sets the default negative item label position and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param position  the position ({@code null} not permitted).\n     * @param notify  notify registered listeners?\n     *\n     * @see #getDefaultNegativeItemLabelPosition()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getItemLabelAnchorOffset": "/**\n     * Returns the item label anchor offset.\n     *\n     * @return The offset.\n     *\n     * @see #setItemLabelAnchorOffset(double)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setItemLabelAnchorOffset": "/**\n     * Sets the item label anchor offset.\n     *\n     * @param offset  the offset.\n     *\n     * @see #getItemLabelAnchorOffset()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getItemCreateEntity": "/**\n     * Returns a boolean that indicates whether or not the specified item\n     * should have a chart entity created for it.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getSeriesCreateEntities": "/**\n     * Returns the flag that controls whether entities are created for a\n     * series.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The flag (possibly {@code null}).\n     *\n     * @see #setSeriesCreateEntities(int, Boolean)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesCreateEntities": "/**\n     * Sets the flag that controls whether entities are created for a series,\n     * and sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param create  the flag ({@code null} permitted).\n     *\n     * @see #getSeriesCreateEntities(int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setSeriesCreateEntities": "/**\n     * Sets the flag that controls whether entities are created for a series\n     * and, if requested, sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param series  the series index.\n     * @param create  the flag ({@code null} permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getSeriesCreateEntities(int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getDefaultCreateEntities": "/**\n     * Returns the default flag for creating entities.\n     *\n     * @return The default flag for creating entities.\n     *\n     * @see #setDefaultCreateEntities(boolean)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultCreateEntities": "/**\n     * Sets the default flag that controls whether entities are created\n     * for a series, and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param create  the flag.\n     *\n     * @see #getDefaultCreateEntities()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultCreateEntities": "/**\n     * Sets the default flag that controls whether entities are created and,\n     * if requested, sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param create  the visibility.\n     * @param notify  notify listeners?\n     *\n     * @see #getDefaultCreateEntities()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getDefaultEntityRadius": "/**\n     * Returns the radius of the circle used for the default entity area\n     * when no area is specified.\n     *\n     * @return A radius.\n     *\n     * @see #setDefaultEntityRadius(int)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultEntityRadius": "/**\n     * Sets the radius of the circle used for the default entity area\n     * when no area is specified.\n     *\n     * @param radius  the radius.\n     *\n     * @see #getDefaultEntityRadius()\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.lookupLegendShape": "/**\n     * Performs a lookup for the legend shape.\n     *\n     * @param series  the series index.\n     *\n     * @return The shape (possibly {@code null}).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getLegendShape": "/**\n     * Returns the legend shape defined for the specified series (possibly\n     * {@code null}).\n     *\n     * @param series  the series index.\n     *\n     * @return The shape (possibly {@code null}).\n     *\n     * @see #lookupLegendShape(int)\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setLegendShape": "/**\n     * Sets the shape used for the legend item for the specified series, and\n     * sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index.\n     * @param shape  the shape ({@code null} permitted).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getDefaultLegendShape": "/**\n     * Returns the default legend shape, which may be {@code null}.\n     *\n     * @return The default legend shape.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultLegendShape": "/**\n     * Sets the default legend shape and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param shape  the shape ({@code null} permitted).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getTreatLegendShapeAsLine": "/**\n     * Returns the flag that controls whether or not the legend shape is\n     * treated as a line when creating legend items.\n     * \n     * @return A boolean.\n     * \n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setTreatLegendShapeAsLine": "/**\n     * Sets the flag that controls whether or not the legend shape is\n     * treated as a line when creating legend items.\n     *\n     * @param treatAsLine  the new flag value.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.lookupLegendTextFont": "/**\n     * Performs a lookup for the legend text font.\n     *\n     * @param series  the series index.\n     *\n     * @return The font (possibly {@code null}).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getLegendTextFont": "/**\n     * Returns the legend text font defined for the specified series (possibly\n     * {@code null}).\n     *\n     * @param series  the series index.\n     *\n     * @return The font (possibly {@code null}).\n     *\n     * @see #lookupLegendTextFont(int)\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setLegendTextFont": "/**\n     * Sets the font used for the legend text for the specified series, and\n     * sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index.\n     * @param font  the font ({@code null} permitted).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getDefaultLegendTextFont": "/**\n     * Returns the default legend text font, which may be {@code null}.\n     *\n     * @return The default legend text font.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultLegendTextFont": "/**\n     * Sets the default legend text font and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param font  the font ({@code null} permitted).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.lookupLegendTextPaint": "/**\n     * Performs a lookup for the legend text paint.\n     *\n     * @param series  the series index.\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getLegendTextPaint": "/**\n     * Returns the legend text paint defined for the specified series (possibly\n     * {@code null}).\n     *\n     * @param series  the series index.\n     *\n     * @return The paint (possibly {@code null}).\n     *\n     * @see #lookupLegendTextPaint(int)\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setLegendTextPaint": "/**\n     * Sets the paint used for the legend text for the specified series, and\n     * sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index.\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getDefaultLegendTextPaint": "/**\n     * Returns the default legend text paint, which may be {@code null}.\n     *\n     * @return The default legend text paint.\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDefaultLegendTextPaint": "/**\n     * Sets the default legend text paint and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint ({@code null} permitted).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.getDataBoundsIncludesVisibleSeriesOnly": "/**\n     * Returns the flag that controls whether or not the data bounds reported\n     * by this renderer will exclude non-visible series.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.setDataBoundsIncludesVisibleSeriesOnly": "/**\n     * Sets the flag that controls whether or not the data bounds reported\n     * by this renderer will exclude non-visible series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param visibleOnly  include only visible series.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.calculateLabelAnchorPoint": "/**\n     * Calculates the item label anchor point.\n     *\n     * @param anchor  the anchor.\n     * @param x  the x coordinate.\n     * @param y  the y coordinate.\n     * @param orientation  the plot orientation.\n     *\n     * @return The anchor point (never {@code null}).\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.addChangeListener": "/**\n     * Registers an object to receive notification of changes to the renderer.\n     *\n     * @param listener  the listener ({@code null} not permitted).\n     *\n     * @see #removeChangeListener(RendererChangeListener)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.removeChangeListener": "/**\n     * Deregisters an object so that it no longer receives\n     * notification of changes to the renderer.\n     *\n     * @param listener  the object ({@code null} not permitted).\n     *\n     * @see #addChangeListener(RendererChangeListener)\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.hasListener": "/**\n     * Returns {@code true} if the specified object is registered with\n     * the dataset as a listener.  Most applications won't need to call this\n     * method, it exists mainly for use by unit testing code.\n     *\n     * @param listener  the listener.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.fireChangeEvent": "/**\n     * Sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @since 1.0.5\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.notifyListeners": "/**\n     * Notifies all registered listeners that the renderer has been modified.\n     *\n     * @param event  information about the change event.\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.equals": "/**\n     * Tests this renderer for equality with another object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.hashCode": "/**\n     * Returns a hashcode for the renderer.\n     *\n     * @return The hashcode.\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.clone": "/**\n     * Returns an independent copy of the renderer.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if some component of the renderer\n     *         does not support cloning.\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.renderer.AbstractRenderer.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.renderer.LookupPaintScale.compareTo": "/**\n         * Compares this item to an arbitrary object.\n         *\n         * @param obj  the object.\n         *\n         * @return An int defining the relative order of the objects.\n         */\n",
"org.jfree.chart.renderer.LookupPaintScale.equals": "/**\n         * Tests this item for equality with an arbitrary object.\n         *\n         * @param obj  the object ({@code null} permitted).\n         *\n         * @return A boolean.\n         */\n",
"org.jfree.chart.renderer.LookupPaintScale.writeObject": "/**\n         * Provides serialization support.\n         *\n         * @param stream  the output stream.\n         *\n         * @throws IOException  if there is an I/O error.\n         */\n",
"org.jfree.chart.renderer.LookupPaintScale.readObject": "/**\n         * Provides serialization support.\n         *\n         * @param stream  the input stream.\n         *\n         * @throws IOException  if there is an I/O error.\n         * @throws ClassNotFoundException  if there is a classpath problem.\n         */\n",
"org.jfree.chart.renderer.LookupPaintScale.getDefaultPaint": "/**\n     * Returns the default paint (never {@code null}).\n     *\n     * @return The default paint.\n     */\n",
"org.jfree.chart.renderer.LookupPaintScale.getLowerBound": "/**\n     * Returns the lower bound.\n     *\n     * @return The lower bound.\n     *\n     * @see #getUpperBound()\n     */\n",
"org.jfree.chart.renderer.LookupPaintScale.getUpperBound": "/**\n     * Returns the upper bound.\n     *\n     * @return The upper bound.\n     *\n     * @see #getLowerBound()\n     */\n",
"org.jfree.chart.renderer.LookupPaintScale.add": "/**\n     * Adds an entry to the lookup table.  Any values from {@code n} up\n     * to but not including the next value in the table take on the specified\n     * {@code Paint}.\n     *\n     * @param value  the data value.\n     * @param paint  the paint.\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.chart.renderer.LookupPaintScale.getPaint": "/**\n     * Returns the paint associated with the specified value.\n     *\n     * @param value  the value.\n     *\n     * @return The paint.\n     *\n     * @see #getDefaultPaint()\n     */\n",
"org.jfree.chart.renderer.LookupPaintScale.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.LookupPaintScale.clone": "/**\n     * Returns a clone of the instance.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning the\n     *     instance.\n     */\n",
"org.jfree.chart.renderer.LookupPaintScale.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.renderer.LookupPaintScale.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.renderer.WaferMapRenderer.isMethodValid": "/**\n     * Verifies that the passed paint index method is valid.\n     *\n     * @param method  the method.\n     *\n     * @return {@code true} or </code>false</code>.\n     */\n",
"org.jfree.chart.renderer.WaferMapRenderer.getDrawingSupplier": "/**\n     * Returns the drawing supplier from the plot.\n     *\n     * @return The drawing supplier.\n     */\n",
"org.jfree.chart.renderer.WaferMapRenderer.getPlot": "/**\n     * Returns the plot.\n     *\n     * @return The plot.\n     */\n",
"org.jfree.chart.renderer.WaferMapRenderer.setPlot": "/**\n     * Sets the plot and build the paint index.\n     *\n     * @param plot  the plot.\n     */\n",
"org.jfree.chart.renderer.WaferMapRenderer.getChipColor": "/**\n     * Returns the paint for a given chip value.\n     *\n     * @param value  the value.\n     *\n     * @return The paint.\n     */\n",
"org.jfree.chart.renderer.WaferMapRenderer.getPaintIndex": "/**\n     * Returns the paint index for a given chip value.\n     *\n     * @param value  the value.\n     *\n     * @return The paint index.\n     */\n",
"org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex": "/**\n     * Builds a map of chip values to paint colors.\n     * paintlimit is the maximum allowed number of colors.\n     */\n",
"org.jfree.chart.renderer.WaferMapRenderer.makePositionIndex": "/**\n     * Builds the paintindex by assigning colors based on the number\n     * of unique values: totalvalues/totalcolors.\n     *\n     * @param uniqueValues  the set of unique values.\n     */\n",
"org.jfree.chart.renderer.WaferMapRenderer.makeValueIndex": "/**\n     * Builds the paintindex by assigning colors evenly across the range\n     * of values:  maxValue-minValue/totalcolors\n     *\n     * @param max  the maximum value.\n     * @param min  the minumum value.\n     * @param uniqueValues  the unique values.\n     */\n",
"org.jfree.chart.renderer.WaferMapRenderer.getLegendCollection": "/**\n     * Builds the list of legend entries.  called by getLegendItems in\n     * WaferMapPlot to populate the plot legend.\n     *\n     * @return The legend items.\n     */\n",
"org.jfree.chart.renderer.WaferMapRenderer.getMinPaintValue": "/**\n     * Returns the minimum chip value assigned to a color\n     * in the paintIndex\n     *\n     * @param index  the index.\n     *\n     * @return The value.\n     */\n",
"org.jfree.chart.renderer.WaferMapRenderer.getMaxPaintValue": "/**\n     * Returns the maximum chip value assigned to a color\n     * in the paintIndex\n     *\n     * @param index  the index.\n     *\n     * @return The value\n     */\n",
"org.jfree.chart.renderer.PolarItemRenderer.drawSeries": "/**\n     * Plots the data for a given series.\n     *\n     * @param g2  the drawing surface.\n     * @param dataArea  the data area.\n     * @param info  collects plot rendering info.\n     * @param plot  the plot.\n     * @param dataset  the dataset.\n     * @param seriesIndex  the series index.\n     */\n",
"org.jfree.chart.renderer.PolarItemRenderer.drawAngularGridLines": "/**\n     * Draw the angular gridlines - the spokes.\n     *\n     * @param g2  the drawing surface.\n     * @param plot  the plot.\n     * @param ticks  the ticks.\n     * @param dataArea  the data area.\n     */\n",
"org.jfree.chart.renderer.PolarItemRenderer.drawRadialGridLines": "/**\n     * Draw the radial gridlines - the rings.\n     *\n     * @param g2  the drawing surface.\n     * @param plot  the plot.\n     * @param radialAxis  the radial axis.\n     * @param ticks  the ticks.\n     * @param dataArea  the data area.\n     */\n",
"org.jfree.chart.renderer.PolarItemRenderer.getLegendItem": "/**\n     * Return the legend for the given series.\n     *\n     * @param series  the series index.\n     *\n     * @return The legend item.\n     */\n",
"org.jfree.chart.renderer.PolarItemRenderer.getPlot": "/**\n     * Returns the plot that this renderer has been assigned to.\n     *\n     * @return The plot.\n     */\n",
"org.jfree.chart.renderer.PolarItemRenderer.setPlot": "/**\n     * Sets the plot that this renderer is assigned to.  This method will be\n     * called by the plot class...you do not need to call it yourself.\n     *\n     * @param plot  the plot.\n     */\n",
"org.jfree.chart.renderer.PolarItemRenderer.addChangeListener": "/**\n     * Adds a change listener.\n     *\n     * @param listener  the listener.\n     */\n",
"org.jfree.chart.renderer.PolarItemRenderer.removeChangeListener": "/**\n     * Removes a change listener.\n     *\n     * @param listener  the listener.\n     */\n",
"org.jfree.chart.renderer.PolarItemRenderer.getToolTipGenerator": "/**\n     * Returns the tool tip generator for a data item.\n     *\n     * @param row  the row index (zero based).\n     * @param column  the column index (zero based).\n     *\n     * @return The generator (possibly {@code null}).\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.PolarItemRenderer.getSeriesToolTipGenerator": "/**\n     * Returns the tool tip generator for a series.\n     *\n     * @param series  the series index (zero based).\n     *\n     * @return The generator (possibly {@code null}).\n     *\n     * @see #setSeriesToolTipGenerator(int, XYToolTipGenerator)\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.PolarItemRenderer.setSeriesToolTipGenerator": "/**\n     * Sets the tool tip generator for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero based).\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getSeriesToolTipGenerator(int)\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.PolarItemRenderer.getBaseToolTipGenerator": "/**\n     * Returns the base tool tip generator.\n     *\n     * @return The generator (possibly {@code null}).\n     *\n     * @see #setBaseToolTipGenerator(XYToolTipGenerator)\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.PolarItemRenderer.setBaseToolTipGenerator": "/**\n     * Sets the base tool tip generator and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param generator  the generator ({@code null} permitted).\n     *\n     * @see #getBaseToolTipGenerator()\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.PolarItemRenderer.getURLGenerator": "/**\n     * Returns the URL generator for HTML image maps.\n     *\n     * @return The URL generator (possibly null).\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.PolarItemRenderer.setURLGenerator": "/**\n     * Sets the URL generator for HTML image maps.\n     *\n     * @param urlGenerator the URL generator (null permitted).\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.chart.renderer.GrayPaintScale.getLowerBound": "/**\n     * Returns the lower bound.\n     *\n     * @return The lower bound.\n     *\n     * @see #getUpperBound()\n     */\n",
"org.jfree.chart.renderer.GrayPaintScale.getUpperBound": "/**\n     * Returns the upper bound.\n     *\n     * @return The upper bound.\n     *\n     * @see #getLowerBound()\n     */\n",
"org.jfree.chart.renderer.GrayPaintScale.getAlpha": "/**\n     * Returns the alpha transparency that was specified in the constructor.\n     * \n     * @return The alpha transparency (in the range 0 to 255).\n     * \n     * @since 1.0.13\n     */\n",
"org.jfree.chart.renderer.GrayPaintScale.getPaint": "/**\n     * Returns a paint for the specified value.\n     *\n     * @param value  the value (must be within the range specified by the\n     *         lower and upper bounds for the scale).\n     *\n     * @return A paint for the specified value.\n     */\n",
"org.jfree.chart.renderer.GrayPaintScale.equals": "/**\n     * Tests this {@code GrayPaintScale} instance for equality with an\n     * arbitrary object.  This method returns {@code true} if and only\n     * if:\n     * <ul>\n     * <li>{@code obj} is not {@code null};</li>\n     * <li>{@code obj} is an instance of {@code GrayPaintScale};</li>\n     * </ul>\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.renderer.GrayPaintScale.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.renderer.GrayPaintScale.clone": "/**\n     * Returns a clone of this {@code GrayPaintScale} instance.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning this\n     *     instance.\n     */\n",
"org.jfree.chart.renderer.OutlierListCollection.isHighFarOut": "/**\n     * A flag to indicate the presence of one or more far out values at the\n     * top end of the range.\n     *\n     * @return A {@code boolean}.\n     */\n",
"org.jfree.chart.renderer.OutlierListCollection.setHighFarOut": "/**\n     * Sets the flag that indicates the presence of one or more far out values\n     * at the top end of the range.\n     *\n     * @param farOut  the flag.\n     */\n",
"org.jfree.chart.renderer.OutlierListCollection.isLowFarOut": "/**\n     * A flag to indicate the presence of one or more far out values at the\n     * bottom end of the range.\n     *\n     * @return A {@code boolean}.\n     */\n",
"org.jfree.chart.renderer.OutlierListCollection.setLowFarOut": "/**\n     * Sets the flag that indicates the presence of one or more far out values\n     * at the bottom end of the range.\n     *\n     * @param farOut  the flag.\n     */\n",
"org.jfree.chart.renderer.OutlierListCollection.add": "/**\n     * Appends the specified element as a new {@code OutlierList} to the\n     * end of this list if it does not overlap an outlier in an existing list.\n     *\n     * If it does overlap, it is appended to the outlier list which it overlaps\n     * and that list is updated.\n     *\n     * @param outlier  element to be appended to this list.\n     *\n     * @return {@code true} (as per the general contract of Collection.add).\n     */\n",
"org.jfree.chart.renderer.OutlierListCollection.iterator": "/**\n     * Returns an iterator for the outlier lists.\n     *\n     * @return An iterator.\n     */\n",
"org.jfree.chart.renderer.OutlierListCollection.updateOutlierList": "/**\n     * Updates the outlier list by adding the outlier to the end of the list and\n     * setting the averaged outlier to the average x and y coordinnate values\n     * of the outliers in the list.\n     *\n     * @param list  the outlier list to be updated.\n     * @param outlier  the outlier to be added\n     *\n     * @return <tt>true</tt> (as per the general contract of Collection.add).\n     */\n",
"org.jfree.chart.renderer.RendererState.getElementHinting": "/**\n     * Returns the flag that controls whether or not the renderer should \n     * add rendering hints to the output that identify chart elements.\n     * \n     * @return A boolean.\n     * \n     * @since 1.0.20\n     */\n",
"org.jfree.chart.renderer.RendererState.setElementHinting": "/**\n     * Sets the elementHinting flag.\n     * \n     * @param hinting  the new flag value.\n     * \n     * @since 1.0.20\n     */\n",
"org.jfree.chart.renderer.RendererState.getInfo": "/**\n     * Returns the plot rendering info.\n     *\n     * @return The info.\n     */\n",
"org.jfree.chart.renderer.RendererState.getEntityCollection": "/**\n     * A convenience method that returns a reference to the entity\n     * collection (may be {@code null}) being used to record\n     * chart entities.\n     *\n     * @return The entity collection (possibly {@code null}).\n     */\n",
"org.jfree.chart.block.LengthConstraintType.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.chart.block.LengthConstraintType.equals": "/**\n     * Returns {@code true} if this object is equal to the specified\n     * object, and {@code false} otherwise.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.block.LengthConstraintType.hashCode": "/**\n     * Returns a hash code value for the object.\n     *\n     * @return The hashcode\n     */\n",
"org.jfree.chart.block.LengthConstraintType.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     *\n     * @return The object.\n     *\n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.chart.block.ColorBlock.getPaint": "/**\n     * Returns the paint.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @since 1.0.5\n     */\n",
"org.jfree.chart.block.ColorBlock.arrange": "/**\n     * Arranges the contents of the block, within the given constraints, and\n     * returns the block size.\n     *\n     * @param g2  the graphics device.\n     * @param constraint  the constraint ({@code null} not permitted).\n     *\n     * @return The block size (in Java2D units, never {@code null}).\n     */\n",
"org.jfree.chart.block.ColorBlock.draw": "/**\n     * Draws the block.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     */\n",
"org.jfree.chart.block.ColorBlock.draw": "/**\n     * Draws the block within the specified area.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     * @param params  ignored ({@code null} permitted).\n     *\n     * @return Always {@code null}.\n     */\n",
"org.jfree.chart.block.ColorBlock.equals": "/**\n     * Tests this block for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.block.ColorBlock.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException if there is an I/O error.\n     */\n",
"org.jfree.chart.block.ColorBlock.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.block.LabelBlock.getFont": "/**\n     * Returns the font.\n     *\n     * @return The font (never {@code null}).\n     *\n     * @see #setFont(Font)\n     */\n",
"org.jfree.chart.block.LabelBlock.setFont": "/**\n     * Sets the font and regenerates the label.\n     *\n     * @param font  the font ({@code null} not permitted).\n     *\n     * @see #getFont()\n     */\n",
"org.jfree.chart.block.LabelBlock.getPaint": "/**\n     * Returns the paint.\n     *\n     * @return The paint (never {@code null}).\n     *\n     * @see #setPaint(Paint)\n     */\n",
"org.jfree.chart.block.LabelBlock.setPaint": "/**\n     * Sets the paint and regenerates the label.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getPaint()\n     */\n",
"org.jfree.chart.block.LabelBlock.getToolTipText": "/**\n     * Returns the tool tip text.\n     *\n     * @return The tool tip text (possibly {@code null}).\n     *\n     * @see #setToolTipText(String)\n     */\n",
"org.jfree.chart.block.LabelBlock.setToolTipText": "/**\n     * Sets the tool tip text.\n     *\n     * @param text  the text ({@code null} permitted).\n     *\n     * @see #getToolTipText()\n     */\n",
"org.jfree.chart.block.LabelBlock.getURLText": "/**\n     * Returns the URL text.\n     *\n     * @return The URL text (possibly {@code null}).\n     *\n     * @see #setURLText(String)\n     */\n",
"org.jfree.chart.block.LabelBlock.setURLText": "/**\n     * Sets the URL text.\n     *\n     * @param text  the text ({@code null} permitted).\n     *\n     * @see #getURLText()\n     */\n",
"org.jfree.chart.block.LabelBlock.getContentAlignmentPoint": "/**\n     * Returns the content alignment point.\n     *\n     * @return The content alignment point (never {@code null}).\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.block.LabelBlock.setContentAlignmentPoint": "/**\n     * Sets the content alignment point.\n     *\n     * @param anchor  the anchor used to determine the alignment point (never\n     *         {@code null}).\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.block.LabelBlock.getTextAnchor": "/**\n     * Returns the text anchor (never {@code null}).\n     *\n     * @return The text anchor.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.block.LabelBlock.setTextAnchor": "/**\n     * Sets the text anchor.\n     *\n     * @param anchor  the anchor ({@code null} not permitted).\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.block.LabelBlock.arrange": "/**\n     * Arranges the contents of the block, within the given constraints, and\n     * returns the block size.\n     *\n     * @param g2  the graphics device.\n     * @param constraint  the constraint ({@code null} not permitted).\n     *\n     * @return The block size (in Java2D units, never {@code null}).\n     */\n",
"org.jfree.chart.block.LabelBlock.draw": "/**\n     * Draws the block.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     */\n",
"org.jfree.chart.block.LabelBlock.draw": "/**\n     * Draws the block within the specified area.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     * @param params  ignored ({@code null} permitted).\n     *\n     * @return Always {@code null}.\n     */\n",
"org.jfree.chart.block.LabelBlock.equals": "/**\n     * Tests this {@code LabelBlock} for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.block.LabelBlock.clone": "/**\n     * Returns a clone of this {@code LabelBlock} instance.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning.\n     */\n",
"org.jfree.chart.block.LabelBlock.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException if there is an I/O error.\n     */\n",
"org.jfree.chart.block.LabelBlock.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.block.BlockParams.getGenerateEntities": "/**\n     * Returns the flag that controls whether or not chart entities are\n     * generated.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.block.BlockParams.setGenerateEntities": "/**\n     * Sets the flag that controls whether or not chart entities are generated.\n     *\n     * @param generate  the flag.\n     */\n",
"org.jfree.chart.block.BlockParams.getTranslateX": "/**\n     * Returns the translation required to convert local x-coordinates back to\n     * the coordinate space of the container.\n     *\n     * @return The x-translation amount.\n     */\n",
"org.jfree.chart.block.BlockParams.setTranslateX": "/**\n     * Sets the translation required to convert local x-coordinates into the\n     * coordinate space of the container.\n     *\n     * @param x  the x-translation amount.\n     */\n",
"org.jfree.chart.block.BlockParams.getTranslateY": "/**\n     * Returns the translation required to convert local y-coordinates back to\n     * the coordinate space of the container.\n     *\n     * @return The y-translation amount.\n     */\n",
"org.jfree.chart.block.BlockParams.setTranslateY": "/**\n     * Sets the translation required to convert local y-coordinates into the\n     * coordinate space of the container.\n     *\n     * @param y  the y-translation amount.\n     */\n",
"org.jfree.chart.block.EntityBlockParams.getGenerateEntities": "/**\n     * Returns a flag that controls whether or not the block should return\n     * entities for the items it draws.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.block.BlockFrame.getInsets": "/**\n     * Returns the space reserved for the border.\n     *\n     * @return The space (never {@code null}).\n     */\n",
"org.jfree.chart.block.BlockFrame.draw": "/**\n     * Draws the border by filling in the reserved space (in black).\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     */\n",
"org.jfree.chart.block.RectangleConstraint.getWidth": "/**\n     * Returns the fixed width.\n     *\n     * @return The width.\n     */\n",
"org.jfree.chart.block.RectangleConstraint.getWidthRange": "/**\n     * Returns the width range.\n     *\n     * @return The range (possibly {@code null}).\n     */\n",
"org.jfree.chart.block.RectangleConstraint.getWidthConstraintType": "/**\n     * Returns the constraint type.\n     *\n     * @return The constraint type (never {@code null}).\n     */\n",
"org.jfree.chart.block.RectangleConstraint.getHeight": "/**\n     * Returns the fixed height.\n     *\n     * @return The height.\n     */\n",
"org.jfree.chart.block.RectangleConstraint.getHeightRange": "/**\n     * Returns the width range.\n     *\n     * @return The range (possibly {@code null}).\n     */\n",
"org.jfree.chart.block.RectangleConstraint.getHeightConstraintType": "/**\n     * Returns the constraint type.\n     *\n     * @return The constraint type (never {@code null}).\n     */\n",
"org.jfree.chart.block.RectangleConstraint.toUnconstrainedWidth": "/**\n     * Returns a constraint that matches this one on the height attributes,\n     * but has no width constraint.\n     *\n     * @return A new constraint.\n     */\n",
"org.jfree.chart.block.RectangleConstraint.toUnconstrainedHeight": "/**\n     * Returns a constraint that matches this one on the width attributes,\n     * but has no height constraint.\n     *\n     * @return A new constraint.\n     */\n",
"org.jfree.chart.block.RectangleConstraint.toFixedWidth": "/**\n     * Returns a constraint that matches this one on the height attributes,\n     * but has a fixed width constraint.\n     *\n     * @param width  the fixed width.\n     *\n     * @return A new constraint.\n     */\n",
"org.jfree.chart.block.RectangleConstraint.toFixedHeight": "/**\n     * Returns a constraint that matches this one on the width attributes,\n     * but has a fixed height constraint.\n     *\n     * @param height  the fixed height.\n     *\n     * @return A new constraint.\n     */\n",
"org.jfree.chart.block.RectangleConstraint.toRangeWidth": "/**\n     * Returns a constraint that matches this one on the height attributes,\n     * but has a range width constraint.\n     *\n     * @param range  the width range ({@code null} not permitted).\n     *\n     * @return A new constraint.\n     */\n",
"org.jfree.chart.block.RectangleConstraint.toRangeHeight": "/**\n     * Returns a constraint that matches this one on the width attributes,\n     * but has a range height constraint.\n     *\n     * @param range  the height range ({@code null} not permitted).\n     *\n     * @return A new constraint.\n     */\n",
"org.jfree.chart.block.RectangleConstraint.toString": "/**\n     * Returns a string representation of this instance, mostly used for\n     * debugging purposes.\n     *\n     * @return A string.\n     */\n",
"org.jfree.chart.block.RectangleConstraint.calculateConstrainedSize": "/**\n     * Returns the new size that reflects the constraints defined by this\n     * instance.\n     *\n     * @param base  the base size.\n     *\n     * @return The constrained size.\n     */\n",
"org.jfree.chart.block.CenterArrangement.add": "/**\n     * Adds a block to be managed by this instance.  This method is usually\n     * called by the {@link BlockContainer}, you shouldn't need to call it\n     * directly.\n     *\n     * @param block  the block.\n     * @param key  a key that controls the position of the block.\n     */\n",
"org.jfree.chart.block.CenterArrangement.arrange": "/**\n     * Calculates and sets the bounds of all the items in the specified\n     * container, subject to the given constraint.  The {@code Graphics2D}\n     * can be used by some items (particularly items containing text) to\n     * calculate sizing parameters.\n     *\n     * @param container  the container whose items are being arranged.\n     * @param g2  the graphics device.\n     * @param constraint  the size constraint.\n     *\n     * @return The size of the container after arrangement of the contents.\n     */\n",
"org.jfree.chart.block.CenterArrangement.arrangeFN": "/**\n     * Arranges the blocks in the container with a fixed width and no height\n     * constraint.\n     *\n     * @param container  the container.\n     * @param g2  the graphics device.\n     * @param constraint  the constraint.\n     *\n     * @return The size.\n     */\n",
"org.jfree.chart.block.CenterArrangement.arrangeFR": "/**\n     * Arranges the blocks in the container with a fixed with and a range\n     * constraint on the height.\n     *\n     * @param container  the container.\n     * @param g2  the graphics device.\n     * @param constraint  the constraint.\n     *\n     * @return The size following the arrangement.\n     */\n",
"org.jfree.chart.block.CenterArrangement.arrangeFF": "/**\n     * Arranges the blocks in the container with the overall height and width\n     * specified as fixed constraints.\n     *\n     * @param container  the container.\n     * @param g2  the graphics device.\n     * @param constraint  the constraint.\n     *\n     * @return The size following the arrangement.\n     */\n",
"org.jfree.chart.block.CenterArrangement.arrangeRR": "/**\n     * Arranges the blocks with the overall width and height to fit within\n     * specified ranges.\n     *\n     * @param container  the container.\n     * @param g2  the graphics device.\n     * @param constraint  the constraint.\n     *\n     * @return The size after the arrangement.\n     */\n",
"org.jfree.chart.block.CenterArrangement.arrangeRF": "/**\n     * Arranges the blocks in the container with a range constraint on the\n     * width and a fixed height.\n     *\n     * @param container  the container.\n     * @param g2  the graphics device.\n     * @param constraint  the constraint.\n     *\n     * @return The size following the arrangement.\n     */\n",
"org.jfree.chart.block.CenterArrangement.arrangeRN": "/**\n     * Arranges the block with a range constraint on the width, and no\n     * constraint on the height.\n     *\n     * @param container  the container.\n     * @param g2  the graphics device.\n     * @param constraint  the constraint.\n     *\n     * @return The size following the arrangement.\n     */\n",
"org.jfree.chart.block.CenterArrangement.arrangeNN": "/**\n     * Arranges the blocks without any constraints.  This puts all blocks\n     * into a single row.\n     *\n     * @param container  the container.\n     * @param g2  the graphics device.\n     *\n     * @return The size after the arrangement.\n     */\n",
"org.jfree.chart.block.CenterArrangement.arrangeNF": "/**\n     * Arranges the blocks with no width constraint and a fixed height\n     * constraint.  This puts all blocks into a single row.\n     *\n     * @param container  the container.\n     * @param g2  the graphics device.\n     * @param constraint  the constraint.\n     *\n     * @return The size after the arrangement.\n     */\n",
"org.jfree.chart.block.CenterArrangement.clear": "/**\n     * Clears any cached information.\n     */\n",
"org.jfree.chart.block.CenterArrangement.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.block.ColumnArrangement.add": "/**\n     * Adds a block to be managed by this instance.  This method is usually\n     * called by the {@link BlockContainer}, you shouldn't need to call it\n     * directly.\n     *\n     * @param block  the block.\n     * @param key  a key that controls the position of the block.\n     */\n",
"org.jfree.chart.block.ColumnArrangement.arrange": "/**\n     * Calculates and sets the bounds of all the items in the specified\n     * container, subject to the given constraint.  The {@code Graphics2D}\n     * can be used by some items (particularly items containing text) to\n     * calculate sizing parameters.\n     *\n     * @param container  the container whose items are being arranged.\n     * @param g2  the graphics device.\n     * @param constraint  the size constraint.\n     *\n     * @return The size of the container after arrangement of the contents.\n     */\n",
"org.jfree.chart.block.ColumnArrangement.arrangeFF": "/**\n     * Calculates and sets the bounds of all the items in the specified\n     * container, subject to the given constraint.  The {@code Graphics2D}\n     * can be used by some items (particularly items containing text) to\n     * calculate sizing parameters.\n     *\n     * @param container  the container whose items are being arranged.\n     * @param g2  the graphics device.\n     * @param constraint  the size constraint.\n     *\n     * @return The container size after the arrangement.\n     */\n",
"org.jfree.chart.block.ColumnArrangement.arrangeNF": "/**\n     * Calculates and sets the bounds of all the items in the specified\n     * container, subject to the given constraint.  The {@code Graphics2D}\n     * can be used by some items (particularly items containing text) to\n     * calculate sizing parameters.\n     *\n     * @param container  the container whose items are being arranged.\n     * @param constraint  the size constraint.\n     * @param g2  the graphics device.\n     *\n     * @return The container size after the arrangement.\n     */\n",
"org.jfree.chart.block.ColumnArrangement.arrangeRR": "/**\n     * Arranges a container with range constraints for both the horizontal\n     * and vertical.\n     *\n     * @param container  the container.\n     * @param g2  the graphics device.\n     * @param constraint  the constraint.\n     *\n     * @return The size of the container.\n     */\n",
"org.jfree.chart.block.ColumnArrangement.arrangeRF": "/**\n     * Arranges the blocks in the container using a fixed height and a\n     * range for the width.\n     *\n     * @param container  the container.\n     * @param g2  the graphics device.\n     * @param constraint  the constraint.\n     *\n     * @return The size of the container after arrangement.\n     */\n",
"org.jfree.chart.block.ColumnArrangement.arrangeNN": "/**\n     * Arranges the blocks without any constraints.  This puts all blocks\n     * into a single column.\n     *\n     * @param container  the container.\n     * @param g2  the graphics device.\n     *\n     * @return The size after the arrangement.\n     */\n",
"org.jfree.chart.block.ColumnArrangement.clear": "/**\n     * Clears any cached information.\n     */\n",
"org.jfree.chart.block.ColumnArrangement.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.block.BlockResult.getEntityCollection": "/**\n     * Returns the collection of entities from the block.\n     *\n     * @return The entities.\n     */\n",
"org.jfree.chart.block.BlockResult.setEntityCollection": "/**\n     * Sets the entities for the block.\n     *\n     * @param entities  the entities.\n     */\n",
"org.jfree.chart.block.BorderArrangement.add": "/**\n     * Adds a block to the arrangement manager at the specified edge.\n     * If the key is not an instance of {@link RectangleEdge} the block will\n     * be added in the center.\n     *\n     * @param block  the block ({@code null} permitted).\n     * @param key  the edge (an instance of {@link RectangleEdge}) or\n     *             {@code null} for the center block.\n     */\n",
"org.jfree.chart.block.BorderArrangement.arrange": "/**\n     * Arranges the items in the specified container, subject to the given\n     * constraint.\n     *\n     * @param container  the container.\n     * @param g2  the graphics device.\n     * @param constraint  the constraint.\n     *\n     * @return The block size.\n     */\n",
"org.jfree.chart.block.BorderArrangement.arrangeNN": "/**\n     * Performs an arrangement without constraints.\n     *\n     * @param container  the container.\n     * @param g2  the graphics device.\n     *\n     * @return The container size after the arrangement.\n     */\n",
"org.jfree.chart.block.BorderArrangement.arrangeFR": "/**\n     * Performs an arrangement with a fixed width and a range for the height.\n     *\n     * @param container  the container.\n     * @param g2  the graphics device.\n     * @param constraint  the constraint.\n     *\n     * @return The container size after the arrangement.\n     */\n",
"org.jfree.chart.block.BorderArrangement.arrangeFN": "/**\n     * Arranges the container width a fixed width and no constraint on the\n     * height.\n     *\n     * @param container  the container.\n     * @param g2  the graphics device.\n     * @param width  the fixed width.\n     *\n     * @return The container size after arranging the contents.\n     */\n",
"org.jfree.chart.block.BorderArrangement.arrangeRR": "/**\n     * Performs an arrangement with range constraints on both the vertical\n     * and horizontal sides.\n     *\n     * @param container  the container.\n     * @param widthRange  the allowable range for the container width.\n     * @param heightRange  the allowable range for the container height.\n     * @param g2  the graphics device.\n     *\n     * @return The container size.\n     */\n",
"org.jfree.chart.block.BorderArrangement.arrangeFF": "/**\n     * Arranges the items within a container.\n     *\n     * @param container  the container.\n     * @param constraint  the constraint.\n     * @param g2  the graphics device.\n     *\n     * @return The container size after the arrangement.\n     */\n",
"org.jfree.chart.block.BorderArrangement.clear": "/**\n     * Clears the layout.\n     */\n",
"org.jfree.chart.block.BorderArrangement.equals": "/**\n     * Tests this arrangement for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.block.EmptyBlock.arrange": "/**\n     * Arranges the contents of the block, within the given constraints, and\n     * returns the block size.\n     *\n     * @param g2  the graphics device.\n     * @param constraint  the constraint ({@code null} not permitted).\n     *\n     * @return The block size (in Java2D units, never {@code null}).\n     */\n",
"org.jfree.chart.block.EmptyBlock.draw": "/**\n     * Draws the block.  Since the block is empty, there is nothing to draw\n     * except the optional border.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     */\n",
"org.jfree.chart.block.EmptyBlock.draw": "/**\n     * Draws the block within the specified area.  Since the block is empty,\n     * there is nothing to draw except the optional border.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     * @param params  ignored ({@code null} permitted).\n     *\n     * @return Always {@code null}.\n     */\n",
"org.jfree.chart.block.EmptyBlock.clone": "/**\n     * Returns a clone of the block.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning.\n     */\n",
"org.jfree.chart.block.BlockContainer.getArrangement": "/**\n     * Returns the arrangement (layout) manager for the container.\n     *\n     * @return The arrangement manager (never {@code null}).\n     */\n",
"org.jfree.chart.block.BlockContainer.setArrangement": "/**\n     * Sets the arrangement (layout) manager.\n     *\n     * @param arrangement  the arrangement ({@code null} not permitted).\n     */\n",
"org.jfree.chart.block.BlockContainer.isEmpty": "/**\n     * Returns {@code true} if there are no blocks in the container, and\n     * {@code false} otherwise.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.block.BlockContainer.getBlocks": "/**\n     * Returns an unmodifiable list of the {@link Block} objects managed by\n     * this arrangement.\n     *\n     * @return A list of blocks.\n     */\n",
"org.jfree.chart.block.BlockContainer.add": "/**\n     * Adds a block to the container.\n     *\n     * @param block  the block ({@code null} permitted).\n     */\n",
"org.jfree.chart.block.BlockContainer.add": "/**\n     * Adds a block to the container.\n     *\n     * @param block  the block ({@code null} permitted).\n     * @param key  the key ({@code null} permitted).\n     */\n",
"org.jfree.chart.block.BlockContainer.clear": "/**\n     * Clears all the blocks from the container.\n     */\n",
"org.jfree.chart.block.BlockContainer.arrange": "/**\n     * Arranges the contents of the block, within the given constraints, and\n     * returns the block size.\n     *\n     * @param g2  the graphics device.\n     * @param constraint  the constraint ({@code null} not permitted).\n     *\n     * @return The block size (in Java2D units, never {@code null}).\n     */\n",
"org.jfree.chart.block.BlockContainer.draw": "/**\n     * Draws the container and all the blocks within it.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     */\n",
"org.jfree.chart.block.BlockContainer.draw": "/**\n     * Draws the block within the specified area.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     * @param params  passed on to blocks within the container\n     *                ({@code null} permitted).\n     *\n     * @return An instance of {@link EntityBlockResult}, or {@code null}.\n     */\n",
"org.jfree.chart.block.BlockContainer.equals": "/**\n     * Tests this container for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.block.BlockContainer.clone": "/**\n     * Returns a clone of the container.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning.\n     */\n",
"org.jfree.chart.block.Block.getID": "/**\n     * Returns an ID for the block.\n     *\n     * @return An ID.\n     */\n",
"org.jfree.chart.block.Block.setID": "/**\n     * Sets the ID for the block.\n     *\n     * @param id  the ID.\n     */\n",
"org.jfree.chart.block.Block.arrange": "/**\n     * Arranges the contents of the block, with no constraints, and returns\n     * the block size.\n     *\n     * @param g2  the graphics device.\n     *\n     * @return The size of the block.\n     */\n",
"org.jfree.chart.block.Block.arrange": "/**\n     * Arranges the contents of the block, within the given constraints, and\n     * returns the block size.\n     *\n     * @param g2  the graphics device.\n     * @param constraint  the constraint ({@code null} not permitted).\n     *\n     * @return The block size (in Java2D units, never {@code null}).\n     */\n",
"org.jfree.chart.block.Block.getBounds": "/**\n     * Returns the current bounds of the block.\n     *\n     * @return The bounds.\n     */\n",
"org.jfree.chart.block.Block.setBounds": "/**\n     * Sets the bounds of the block.\n     *\n     * @param bounds  the bounds.\n     */\n",
"org.jfree.chart.block.Block.draw": "/**\n     * Draws the block within the specified area.  Refer to the documentation\n     * for the implementing class for information about the {@code params}\n     * and return value supported.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     * @param params  optional parameters ({@code null} permitted).\n     *\n     * @return An optional return value (possibly {@code null}).\n     */\n",
"org.jfree.chart.block.LineBorder.getPaint": "/**\n     * Returns the paint.\n     *\n     * @return The paint (never {@code null}).\n     */\n",
"org.jfree.chart.block.LineBorder.getInsets": "/**\n     * Returns the insets.\n     *\n     * @return The insets (never {@code null}).\n     */\n",
"org.jfree.chart.block.LineBorder.getStroke": "/**\n     * Returns the stroke.\n     *\n     * @return The stroke (never {@code null}).\n     */\n",
"org.jfree.chart.block.LineBorder.draw": "/**\n     * Draws the border by filling in the reserved space (in black).\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     */\n",
"org.jfree.chart.block.LineBorder.equals": "/**\n     * Tests this border for equality with an arbitrary instance.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.block.LineBorder.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.block.LineBorder.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.block.AbstractBlock.getID": "/**\n     * Returns the id.\n     *\n     * @return The id (possibly {@code null}).\n     *\n     * @see #setID(String)\n     */\n",
"org.jfree.chart.block.AbstractBlock.setID": "/**\n     * Sets the id for the block.\n     *\n     * @param id  the id ({@code null} permitted).\n     *\n     * @see #getID()\n     */\n",
"org.jfree.chart.block.AbstractBlock.getWidth": "/**\n     * Returns the natural width of the block, if this is known in advance.\n     * The actual width of the block may be overridden if layout constraints\n     * make this necessary.\n     *\n     * @return The width.\n     *\n     * @see #setWidth(double)\n     */\n",
"org.jfree.chart.block.AbstractBlock.setWidth": "/**\n     * Sets the natural width of the block, if this is known in advance.\n     *\n     * @param width  the width (in Java2D units)\n     *\n     * @see #getWidth()\n     */\n",
"org.jfree.chart.block.AbstractBlock.getHeight": "/**\n     * Returns the natural height of the block, if this is known in advance.\n     * The actual height of the block may be overridden if layout constraints\n     * make this necessary.\n     *\n     * @return The height.\n     *\n     * @see #setHeight(double)\n     */\n",
"org.jfree.chart.block.AbstractBlock.setHeight": "/**\n     * Sets the natural width of the block, if this is known in advance.\n     *\n     * @param height  the width (in Java2D units)\n     *\n     * @see #getHeight()\n     */\n",
"org.jfree.chart.block.AbstractBlock.getMargin": "/**\n     * Returns the margin.\n     *\n     * @return The margin (never {@code null}).\n     *\n     * @see #getMargin()\n     */\n",
"org.jfree.chart.block.AbstractBlock.setMargin": "/**\n     * Sets the margin (use {@link RectangleInsets#ZERO_INSETS} for no\n     * padding).\n     *\n     * @param margin  the margin ({@code null} not permitted).\n     *\n     * @see #getMargin()\n     */\n",
"org.jfree.chart.block.AbstractBlock.setMargin": "/**\n     * Sets the margin.\n     *\n     * @param top  the top margin.\n     * @param left  the left margin.\n     * @param bottom  the bottom margin.\n     * @param right  the right margin.\n     *\n     * @see #getMargin()\n     */\n",
"org.jfree.chart.block.AbstractBlock.setBorder": "/**\n     * Sets a black border with the specified line widths.\n     *\n     * @param top  the top border line width.\n     * @param left  the left border line width.\n     * @param bottom  the bottom border line width.\n     * @param right  the right border line width.\n     */\n",
"org.jfree.chart.block.AbstractBlock.getFrame": "/**\n     * Returns the current frame (border).\n     *\n     * @return The frame.\n     *\n     * @since 1.0.5\n     * @see #setFrame(BlockFrame)\n     */\n",
"org.jfree.chart.block.AbstractBlock.setFrame": "/**\n     * Sets the frame (or border).\n     *\n     * @param frame  the frame ({@code null} not permitted).\n     *\n     * @since 1.0.5\n     * @see #getFrame()\n     */\n",
"org.jfree.chart.block.AbstractBlock.getPadding": "/**\n     * Returns the padding.\n     *\n     * @return The padding (never {@code null}).\n     *\n     * @see #setPadding(RectangleInsets)\n     */\n",
"org.jfree.chart.block.AbstractBlock.setPadding": "/**\n     * Sets the padding (use {@link RectangleInsets#ZERO_INSETS} for no\n     * padding).\n     *\n     * @param padding  the padding ({@code null} not permitted).\n     *\n     * @see #getPadding()\n     */\n",
"org.jfree.chart.block.AbstractBlock.setPadding": "/**\n     * Sets the padding.\n     *\n     * @param top  the top padding.\n     * @param left  the left padding.\n     * @param bottom  the bottom padding.\n     * @param right  the right padding.\n     */\n",
"org.jfree.chart.block.AbstractBlock.getContentXOffset": "/**\n     * Returns the x-offset for the content within the block.\n     *\n     * @return The x-offset.\n     *\n     * @see #getContentYOffset()\n     */\n",
"org.jfree.chart.block.AbstractBlock.getContentYOffset": "/**\n     * Returns the y-offset for the content within the block.\n     *\n     * @return The y-offset.\n     *\n     * @see #getContentXOffset()\n     */\n",
"org.jfree.chart.block.AbstractBlock.arrange": "/**\n     * Arranges the contents of the block, with no constraints, and returns\n     * the block size.\n     *\n     * @param g2  the graphics device.\n     *\n     * @return The block size (in Java2D units, never {@code null}).\n     */\n",
"org.jfree.chart.block.AbstractBlock.arrange": "/**\n     * Arranges the contents of the block, within the given constraints, and\n     * returns the block size.\n     *\n     * @param g2  the graphics device.\n     * @param constraint  the constraint ({@code null} not permitted).\n     *\n     * @return The block size (in Java2D units, never {@code null}).\n     */\n",
"org.jfree.chart.block.AbstractBlock.getBounds": "/**\n     * Returns the current bounds of the block.\n     *\n     * @return The bounds.\n     *\n     * @see #setBounds(Rectangle2D)\n     */\n",
"org.jfree.chart.block.AbstractBlock.setBounds": "/**\n     * Sets the bounds of the block.\n     *\n     * @param bounds  the bounds ({@code null} not permitted).\n     *\n     * @see #getBounds()\n     */\n",
"org.jfree.chart.block.AbstractBlock.trimToContentWidth": "/**\n     * Calculate the width available for content after subtracting\n     * the margin, border and padding space from the specified fixed\n     * width.\n     *\n     * @param fixedWidth  the fixed width.\n     *\n     * @return The available space.\n     *\n     * @see #trimToContentHeight(double)\n     */\n",
"org.jfree.chart.block.AbstractBlock.trimToContentHeight": "/**\n     * Calculate the height available for content after subtracting\n     * the margin, border and padding space from the specified fixed\n     * height.\n     *\n     * @param fixedHeight  the fixed height.\n     *\n     * @return The available space.\n     *\n     * @see #trimToContentWidth(double)\n     */\n",
"org.jfree.chart.block.AbstractBlock.toContentConstraint": "/**\n     * Returns a constraint for the content of this block that will result in\n     * the bounds of the block matching the specified constraint.\n     *\n     * @param c  the outer constraint ({@code null} not permitted).\n     *\n     * @return The content constraint.\n     */\n",
"org.jfree.chart.block.AbstractBlock.calculateTotalWidth": "/**\n     * Adds the margin, border and padding to the specified content width.\n     *\n     * @param contentWidth  the content width.\n     *\n     * @return The adjusted width.\n     */\n",
"org.jfree.chart.block.AbstractBlock.calculateTotalHeight": "/**\n     * Adds the margin, border and padding to the specified content height.\n     *\n     * @param contentHeight  the content height.\n     *\n     * @return The adjusted height.\n     */\n",
"org.jfree.chart.block.AbstractBlock.trimMargin": "/**\n     * Reduces the specified area by the amount of space consumed\n     * by the margin.\n     *\n     * @param area  the area ({@code null} not permitted).\n     *\n     * @return The trimmed area.\n     */\n",
"org.jfree.chart.block.AbstractBlock.trimBorder": "/**\n     * Reduces the specified area by the amount of space consumed\n     * by the border.\n     *\n     * @param area  the area ({@code null} not permitted).\n     *\n     * @return The trimmed area.\n     */\n",
"org.jfree.chart.block.AbstractBlock.trimPadding": "/**\n     * Reduces the specified area by the amount of space consumed\n     * by the padding.\n     *\n     * @param area  the area ({@code null} not permitted).\n     *\n     * @return The trimmed area.\n     */\n",
"org.jfree.chart.block.AbstractBlock.drawBorder": "/**\n     * Draws the border around the perimeter of the specified area.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     */\n",
"org.jfree.chart.block.AbstractBlock.equals": "/**\n     * Tests this block for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.block.AbstractBlock.clone": "/**\n     * Returns a clone of this block.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem creating the\n     *         clone.\n     */\n",
"org.jfree.chart.block.AbstractBlock.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException if there is an I/O error.\n     */\n",
"org.jfree.chart.block.AbstractBlock.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.block.Arrangement.add": "/**\n     * Adds a block and a key which can be used to determine the position of\n     * the block in the arrangement.  This method is called by the container\n     * (you don't need to call this method directly) and gives the arrangement\n     * an opportunity to record the details if they are required.\n     *\n     * @param block  the block.\n     * @param key  the key ({@code null} permitted).\n     */\n",
"org.jfree.chart.block.Arrangement.arrange": "/**\n     * Arranges the blocks within the specified container, subject to the given\n     * constraint.\n     *\n     * @param container  the container ({@code null} not permitted).\n     * @param g2  the graphics device.\n     * @param constraint  the constraint.\n     *\n     * @return The container size after the arrangement.\n     */\n",
"org.jfree.chart.block.Arrangement.clear": "/**\n     * Clears any cached layout information retained by the arrangement.\n     */\n",
"org.jfree.chart.block.BlockBorder.getInsets": "/**\n     * Returns the space reserved for the border.\n     *\n     * @return The space (never {@code null}).\n     */\n",
"org.jfree.chart.block.BlockBorder.getPaint": "/**\n     * Returns the paint used to draw the border.\n     *\n     * @return The paint (never {@code null}).\n     */\n",
"org.jfree.chart.block.BlockBorder.draw": "/**\n     * Draws the border by filling in the reserved space.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     */\n",
"org.jfree.chart.block.BlockBorder.equals": "/**\n     * Tests this border for equality with an arbitrary instance.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.block.BlockBorder.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.block.BlockBorder.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.block.GridArrangement.add": "/**\n     * Adds a block and a key which can be used to determine the position of\n     * the block in the arrangement.  This method is called by the container\n     * (you don't need to call this method directly) and gives the arrangement\n     * an opportunity to record the details if they are required.\n     *\n     * @param block  the block.\n     * @param key  the key ({@code null} permitted).\n     */\n",
"org.jfree.chart.block.GridArrangement.arrange": "/**\n     * Arranges the blocks within the specified container, subject to the given\n     * constraint.\n     *\n     * @param container  the container ({@code null} not permitted).\n     * @param constraint  the constraint.\n     * @param g2  the graphics device.\n     *\n     * @return The size following the arrangement.\n     */\n",
"org.jfree.chart.block.GridArrangement.arrangeNN": "/**\n     * Arranges the container with no constraint on the width or height.\n     *\n     * @param container  the container ({@code null} not permitted).\n     * @param g2  the graphics device.\n     *\n     * @return The size.\n     */\n",
"org.jfree.chart.block.GridArrangement.arrangeFF": "/**\n     * Arranges the container with a fixed overall width and height.\n     *\n     * @param container  the container ({@code null} not permitted).\n     * @param g2  the graphics device.\n     * @param constraint  the constraint ({@code null} not permitted).\n     *\n     * @return The size following the arrangement.\n     */\n",
"org.jfree.chart.block.GridArrangement.arrangeFR": "/**\n     * Arrange with a fixed width and a height within a given range.\n     *\n     * @param container  the container.\n     * @param constraint  the constraint.\n     * @param g2  the graphics device.\n     *\n     * @return The size of the arrangement.\n     */\n",
"org.jfree.chart.block.GridArrangement.arrangeRF": "/**\n     * Arrange with a fixed height and a width within a given range.\n     *\n     * @param container  the container.\n     * @param constraint  the constraint.\n     * @param g2  the graphics device.\n     *\n     * @return The size of the arrangement.\n     */\n",
"org.jfree.chart.block.GridArrangement.arrangeRN": "/**\n     * Arrange with a fixed width and no height constraint.\n     *\n     * @param container  the container.\n     * @param constraint  the constraint.\n     * @param g2  the graphics device.\n     *\n     * @return The size of the arrangement.\n     */\n",
"org.jfree.chart.block.GridArrangement.arrangeNR": "/**\n     * Arrange with a fixed height and no width constraint.\n     *\n     * @param container  the container.\n     * @param constraint  the constraint.\n     * @param g2  the graphics device.\n     *\n     * @return The size of the arrangement.\n     */\n",
"org.jfree.chart.block.GridArrangement.arrangeRR": "/**\n     * Arrange with ranges for both the width and height constraints.\n     *\n     * @param container  the container.\n     * @param constraint  the constraint.\n     * @param g2  the graphics device.\n     *\n     * @return The size of the arrangement.\n     */\n",
"org.jfree.chart.block.GridArrangement.arrangeFN": "/**\n     * Arrange with a fixed width and a height within a given range.\n     *\n     * @param container  the container.\n     * @param g2  the graphics device.\n     * @param constraint  the constraint.\n     *\n     * @return The size of the arrangement.\n     */\n",
"org.jfree.chart.block.GridArrangement.arrangeNF": "/**\n     * Arrange with a fixed height and no constraint for the width.\n     *\n     * @param container  the container.\n     * @param g2  the graphics device.\n     * @param constraint  the constraint.\n     *\n     * @return The size of the arrangement.\n     */\n",
"org.jfree.chart.block.GridArrangement.clear": "/**\n     * Clears any cached layout information retained by the arrangement.\n     */\n",
"org.jfree.chart.block.GridArrangement.equals": "/**\n     * Compares this layout manager for equality with an arbitrary object.\n     *\n     * @param obj  the object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.block.FlowArrangement.add": "/**\n     * Adds a block to be managed by this instance.  This method is usually\n     * called by the {@link BlockContainer}, you shouldn't need to call it\n     * directly.\n     *\n     * @param block  the block.\n     * @param key  a key that controls the position of the block.\n     */\n",
"org.jfree.chart.block.FlowArrangement.arrange": "/**\n     * Calculates and sets the bounds of all the items in the specified\n     * container, subject to the given constraint.  The {@code Graphics2D}\n     * can be used by some items (particularly items containing text) to\n     * calculate sizing parameters.\n     *\n     * @param container  the container whose items are being arranged.\n     * @param constraint  the size constraint.\n     * @param g2  the graphics device.\n     *\n     * @return The size of the container after arrangement of the contents.\n     */\n",
"org.jfree.chart.block.FlowArrangement.arrangeFN": "/**\n     * Arranges the blocks in the container with a fixed width and no height\n     * constraint.\n     *\n     * @param container  the container.\n     * @param constraint  the constraint.\n     * @param g2  the graphics device.\n     *\n     * @return The size.\n     */\n",
"org.jfree.chart.block.FlowArrangement.arrangeFR": "/**\n     * Arranges the blocks in the container with a fixed width and a range\n     * constraint on the height.\n     *\n     * @param container  the container.\n     * @param constraint  the constraint.\n     * @param g2  the graphics device.\n     *\n     * @return The size following the arrangement.\n     */\n",
"org.jfree.chart.block.FlowArrangement.arrangeFF": "/**\n     * Arranges the blocks in the container with the overall height and width\n     * specified as fixed constraints.\n     *\n     * @param container  the container.\n     * @param constraint  the constraint.\n     * @param g2  the graphics device.\n     *\n     * @return The size following the arrangement.\n     */\n",
"org.jfree.chart.block.FlowArrangement.arrangeRR": "/**\n     * Arranges the blocks with the overall width and height to fit within\n     * specified ranges.\n     *\n     * @param container  the container.\n     * @param constraint  the constraint.\n     * @param g2  the graphics device.\n     *\n     * @return The size after the arrangement.\n     */\n",
"org.jfree.chart.block.FlowArrangement.arrangeRF": "/**\n     * Arranges the blocks in the container with a range constraint on the\n     * width and a fixed height.\n     *\n     * @param container  the container.\n     * @param constraint  the constraint.\n     * @param g2  the graphics device.\n     *\n     * @return The size following the arrangement.\n     */\n",
"org.jfree.chart.block.FlowArrangement.arrangeRN": "/**\n     * Arranges the block with a range constraint on the width, and no\n     * constraint on the height.\n     *\n     * @param container  the container.\n     * @param constraint  the constraint.\n     * @param g2  the graphics device.\n     *\n     * @return The size following the arrangement.\n     */\n",
"org.jfree.chart.block.FlowArrangement.arrangeNN": "/**\n     * Arranges the blocks without any constraints.  This puts all blocks\n     * into a single row.\n     *\n     * @param container  the container.\n     * @param g2  the graphics device.\n     *\n     * @return The size after the arrangement.\n     */\n",
"org.jfree.chart.block.FlowArrangement.arrangeNF": "/**\n     * Arranges the blocks with no width constraint and a fixed height\n     * constraint.  This puts all blocks into a single row.\n     *\n     * @param container  the container.\n     * @param constraint  the constraint.\n     * @param g2  the graphics device.\n     *\n     * @return The size after the arrangement.\n     */\n",
"org.jfree.chart.block.FlowArrangement.clear": "/**\n     * Clears any cached information.\n     */\n",
"org.jfree.chart.block.FlowArrangement.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.block.EntityBlockResult.getEntityCollection": "/**\n     * Returns the entity collection.\n     *\n     * @return An entity collection (possibly {@code null}).\n     */\n",
"org.jfree.chart.ChartPanel.getChart": "/**\n     * Returns the chart contained in the panel.\n     *\n     * @return The chart (possibly {@code null}).\n     */\n",
"org.jfree.chart.ChartPanel.setChart": "/**\n     * Sets the chart that is displayed in the panel.\n     *\n     * @param chart  the chart ({@code null} permitted).\n     */\n",
"org.jfree.chart.ChartPanel.getMinimumDrawWidth": "/**\n     * Returns the minimum drawing width for charts.\n     * <P>\n     * If the width available on the panel is less than this, then the chart is\n     * drawn at the minimum width then scaled down to fit.\n     *\n     * @return The minimum drawing width.\n     */\n",
"org.jfree.chart.ChartPanel.setMinimumDrawWidth": "/**\n     * Sets the minimum drawing width for the chart on this panel.\n     * <P>\n     * At the time the chart is drawn on the panel, if the available width is\n     * less than this amount, the chart will be drawn using the minimum width\n     * then scaled down to fit the available space.\n     *\n     * @param width  The width.\n     */\n",
"org.jfree.chart.ChartPanel.getMaximumDrawWidth": "/**\n     * Returns the maximum drawing width for charts.\n     * <P>\n     * If the width available on the panel is greater than this, then the chart\n     * is drawn at the maximum width then scaled up to fit.\n     *\n     * @return The maximum drawing width.\n     */\n",
"org.jfree.chart.ChartPanel.setMaximumDrawWidth": "/**\n     * Sets the maximum drawing width for the chart on this panel.\n     * <P>\n     * At the time the chart is drawn on the panel, if the available width is\n     * greater than this amount, the chart will be drawn using the maximum\n     * width then scaled up to fit the available space.\n     *\n     * @param width  The width.\n     */\n",
"org.jfree.chart.ChartPanel.getMinimumDrawHeight": "/**\n     * Returns the minimum drawing height for charts.\n     * <P>\n     * If the height available on the panel is less than this, then the chart\n     * is drawn at the minimum height then scaled down to fit.\n     *\n     * @return The minimum drawing height.\n     */\n",
"org.jfree.chart.ChartPanel.setMinimumDrawHeight": "/**\n     * Sets the minimum drawing height for the chart on this panel.\n     * <P>\n     * At the time the chart is drawn on the panel, if the available height is\n     * less than this amount, the chart will be drawn using the minimum height\n     * then scaled down to fit the available space.\n     *\n     * @param height  The height.\n     */\n",
"org.jfree.chart.ChartPanel.getMaximumDrawHeight": "/**\n     * Returns the maximum drawing height for charts.\n     * <P>\n     * If the height available on the panel is greater than this, then the\n     * chart is drawn at the maximum height then scaled up to fit.\n     *\n     * @return The maximum drawing height.\n     */\n",
"org.jfree.chart.ChartPanel.setMaximumDrawHeight": "/**\n     * Sets the maximum drawing height for the chart on this panel.\n     * <P>\n     * At the time the chart is drawn on the panel, if the available height is\n     * greater than this amount, the chart will be drawn using the maximum\n     * height then scaled up to fit the available space.\n     *\n     * @param height  The height.\n     */\n",
"org.jfree.chart.ChartPanel.getScaleX": "/**\n     * Returns the X scale factor for the chart.  This will be 1.0 if no\n     * scaling has been used.\n     *\n     * @return The scale factor.\n     */\n",
"org.jfree.chart.ChartPanel.getScaleY": "/**\n     * Returns the Y scale factory for the chart.  This will be 1.0 if no\n     * scaling has been used.\n     *\n     * @return The scale factor.\n     */\n",
"org.jfree.chart.ChartPanel.getAnchor": "/**\n     * Returns the anchor point.\n     *\n     * @return The anchor point (possibly {@code null}).\n     */\n",
"org.jfree.chart.ChartPanel.setAnchor": "/**\n     * Sets the anchor point.  This method is provided for the use of\n     * subclasses, not end users.\n     *\n     * @param anchor  the anchor point ({@code null} permitted).\n     */\n",
"org.jfree.chart.ChartPanel.getPopupMenu": "/**\n     * Returns the popup menu.\n     *\n     * @return The popup menu.\n     */\n",
"org.jfree.chart.ChartPanel.setPopupMenu": "/**\n     * Sets the popup menu for the panel.\n     *\n     * @param popup  the popup menu ({@code null} permitted).\n     */\n",
"org.jfree.chart.ChartPanel.getChartRenderingInfo": "/**\n     * Returns the chart rendering info from the most recent chart redraw.\n     *\n     * @return The chart rendering info.\n     */\n",
"org.jfree.chart.ChartPanel.setMouseZoomable": "/**\n     * A convenience method that switches on mouse-based zooming.\n     *\n     * @param flag  {@code true} enables zooming and rectangle fill on\n     *              zoom.\n     */\n",
"org.jfree.chart.ChartPanel.setMouseZoomable": "/**\n     * A convenience method that switches on mouse-based zooming.\n     *\n     * @param flag  {@code true} if zooming enabled\n     * @param fillRectangle  {@code true} if zoom rectangle is filled,\n     *                       false if rectangle is shown as outline only.\n     */\n",
"org.jfree.chart.ChartPanel.isDomainZoomable": "/**\n     * Returns the flag that determines whether or not zooming is enabled for\n     * the domain axis.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.ChartPanel.setDomainZoomable": "/**\n     * Sets the flag that controls whether or not zooming is enabled for the\n     * domain axis.  A check is made to ensure that the current plot supports\n     * zooming for the domain values.\n     *\n     * @param flag  {@code true} enables zooming if possible.\n     */\n",
"org.jfree.chart.ChartPanel.isRangeZoomable": "/**\n     * Returns the flag that determines whether or not zooming is enabled for\n     * the range axis.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.ChartPanel.setRangeZoomable": "/**\n     * A flag that controls mouse-based zooming on the vertical axis.\n     *\n     * @param flag  {@code true} enables zooming.\n     */\n",
"org.jfree.chart.ChartPanel.getFillZoomRectangle": "/**\n     * Returns the flag that controls whether or not the zoom rectangle is\n     * filled when drawn.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.ChartPanel.setFillZoomRectangle": "/**\n     * A flag that controls how the zoom rectangle is drawn.\n     *\n     * @param flag  {@code true} instructs to fill the rectangle on\n     *              zoom, otherwise it will be outlined.\n     */\n",
"org.jfree.chart.ChartPanel.getZoomTriggerDistance": "/**\n     * Returns the zoom trigger distance.  This controls how far the mouse must\n     * move before a zoom action is triggered.\n     *\n     * @return The distance (in Java2D units).\n     */\n",
"org.jfree.chart.ChartPanel.setZoomTriggerDistance": "/**\n     * Sets the zoom trigger distance.  This controls how far the mouse must\n     * move before a zoom action is triggered.\n     *\n     * @param distance  the distance (in Java2D units).\n     */\n",
"org.jfree.chart.ChartPanel.getHorizontalAxisTrace": "/**\n     * Returns the flag that controls whether or not a horizontal axis trace\n     * line is drawn over the plot area at the current mouse location.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.ChartPanel.setHorizontalAxisTrace": "/**\n     * A flag that controls trace lines on the horizontal axis.\n     *\n     * @param flag  {@code true} enables trace lines for the mouse\n     *      pointer on the horizontal axis.\n     */\n",
"org.jfree.chart.ChartPanel.getHorizontalTraceLine": "/**\n     * Returns the horizontal trace line.\n     *\n     * @return The horizontal trace line (possibly {@code null}).\n     */\n",
"org.jfree.chart.ChartPanel.setHorizontalTraceLine": "/**\n     * Sets the horizontal trace line.\n     *\n     * @param line  the line ({@code null} permitted).\n     */\n",
"org.jfree.chart.ChartPanel.getVerticalAxisTrace": "/**\n     * Returns the flag that controls whether or not a vertical axis trace\n     * line is drawn over the plot area at the current mouse location.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.ChartPanel.setVerticalAxisTrace": "/**\n     * A flag that controls trace lines on the vertical axis.\n     *\n     * @param flag  {@code true} enables trace lines for the mouse\n     *              pointer on the vertical axis.\n     */\n",
"org.jfree.chart.ChartPanel.getVerticalTraceLine": "/**\n     * Returns the vertical trace line.\n     *\n     * @return The vertical trace line (possibly {@code null}).\n     */\n",
"org.jfree.chart.ChartPanel.setVerticalTraceLine": "/**\n     * Sets the vertical trace line.\n     *\n     * @param line  the line ({@code null} permitted).\n     */\n",
"org.jfree.chart.ChartPanel.getDefaultDirectoryForSaveAs": "/**\n     * Returns the default directory for the \"save as\" option.\n     *\n     * @return The default directory (possibly {@code null}).\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.ChartPanel.setDefaultDirectoryForSaveAs": "/**\n     * Sets the default directory for the \"save as\" option.  If you set this\n     * to {@code null}, the user's default directory will be used.\n     *\n     * @param directory  the directory ({@code null} permitted).\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.ChartPanel.isEnforceFileExtensions": "/**\n     * Returns {@code true} if file extensions should be enforced, and\n     * {@code false} otherwise.\n     *\n     * @return The flag.\n     *\n     * @see #setEnforceFileExtensions(boolean)\n     */\n",
"org.jfree.chart.ChartPanel.setEnforceFileExtensions": "/**\n     * Sets a flag that controls whether or not file extensions are enforced.\n     *\n     * @param enforce  the new flag value.\n     *\n     * @see #isEnforceFileExtensions()\n     */\n",
"org.jfree.chart.ChartPanel.getZoomAroundAnchor": "/**\n     * Returns the flag that controls whether or not zoom operations are\n     * centered around the current anchor point.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.7\n     *\n     * @see #setZoomAroundAnchor(boolean)\n     */\n",
"org.jfree.chart.ChartPanel.setZoomAroundAnchor": "/**\n     * Sets the flag that controls whether or not zoom operations are\n     * centered around the current anchor point.\n     *\n     * @param zoomAroundAnchor  the new flag value.\n     *\n     * @since 1.0.7\n     *\n     * @see #getZoomAroundAnchor()\n     */\n",
"org.jfree.chart.ChartPanel.getZoomFillPaint": "/**\n     * Returns the zoom rectangle fill paint.\n     *\n     * @return The zoom rectangle fill paint (never {@code null}).\n     *\n     * @see #setZoomFillPaint(java.awt.Paint)\n     * @see #setFillZoomRectangle(boolean)\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.ChartPanel.setZoomFillPaint": "/**\n     * Sets the zoom rectangle fill paint.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getZoomFillPaint()\n     * @see #getFillZoomRectangle()\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.ChartPanel.getZoomOutlinePaint": "/**\n     * Returns the zoom rectangle outline paint.\n     *\n     * @return The zoom rectangle outline paint (never {@code null}).\n     *\n     * @see #setZoomOutlinePaint(java.awt.Paint)\n     * @see #setFillZoomRectangle(boolean)\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.ChartPanel.setZoomOutlinePaint": "/**\n     * Sets the zoom rectangle outline paint.\n     *\n     * @param paint  the paint ({@code null} not permitted).\n     *\n     * @see #getZoomOutlinePaint()\n     * @see #getFillZoomRectangle()\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.ChartPanel.isMouseWheelEnabled": "/**\n     * Returns {@code true} if the mouse wheel handler is enabled, and\n     * {@code false} otherwise.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.ChartPanel.setMouseWheelEnabled": "/**\n     * Enables or disables mouse wheel support for the panel.\n     *\n     * @param flag  a boolean.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.ChartPanel.addOverlay": "/**\n     * Add an overlay to the panel.\n     *\n     * @param overlay  the overlay ({@code null} not permitted).\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.ChartPanel.removeOverlay": "/**\n     * Removes an overlay from the panel.\n     *\n     * @param overlay  the overlay to remove ({@code null} not permitted).\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.ChartPanel.overlayChanged": "/**\n     * Handles a change to an overlay by repainting the panel.\n     *\n     * @param event  the event.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.ChartPanel.setDisplayToolTips": "/**\n     * Switches the display of tooltips for the panel on or off.  Note that\n     * tooltips can only be displayed if the chart has been configured to\n     * generate tooltip items.\n     *\n     * @param flag  {@code true} to enable tooltips, {@code false} to\n     *              disable tooltips.\n     */\n",
"org.jfree.chart.ChartPanel.getToolTipText": "/**\n     * Returns a string for the tooltip.\n     *\n     * @param e  the mouse event.\n     *\n     * @return A tool tip or {@code null} if no tooltip is available.\n     */\n",
"org.jfree.chart.ChartPanel.translateJava2DToScreen": "/**\n     * Translates a Java2D point on the chart to a screen location.\n     *\n     * @param java2DPoint  the Java2D point.\n     *\n     * @return The screen location.\n     */\n",
"org.jfree.chart.ChartPanel.translateScreenToJava2D": "/**\n     * Translates a panel (component) location to a Java2D point.\n     *\n     * @param screenPoint  the screen location ({@code null} not\n     *                     permitted).\n     *\n     * @return The Java2D coordinates.\n     */\n",
"org.jfree.chart.ChartPanel.scale": "/**\n     * Applies any scaling that is in effect for the chart drawing to the\n     * given rectangle.\n     *\n     * @param rect  the rectangle ({@code null} not permitted).\n     *\n     * @return A new scaled rectangle.\n     */\n",
"org.jfree.chart.ChartPanel.getEntityForPoint": "/**\n     * Returns the chart entity at a given point.\n     * <P>\n     * This method will return null if there is (a) no entity at the given\n     * point, or (b) no entity collection has been generated.\n     *\n     * @param viewX  the x-coordinate.\n     * @param viewY  the y-coordinate.\n     *\n     * @return The chart entity (possibly {@code null}).\n     */\n",
"org.jfree.chart.ChartPanel.getRefreshBuffer": "/**\n     * Returns the flag that controls whether or not the offscreen buffer\n     * needs to be refreshed.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.ChartPanel.setRefreshBuffer": "/**\n     * Sets the refresh buffer flag.  This flag is used to avoid unnecessary\n     * redrawing of the chart when the offscreen image buffer is used.\n     *\n     * @param flag  {@code true} indicates that the buffer should be\n     *              refreshed.\n     */\n",
"org.jfree.chart.ChartPanel.paintComponent": "/**\n     * Paints the component by drawing the chart to fill the entire component,\n     * but allowing for the insets (which will be non-zero if a border has been\n     * set for this component).  To increase performance (at the expense of\n     * memory), an off-screen buffer image can be used.\n     *\n     * @param g  the graphics device for drawing on.\n     */\n",
"org.jfree.chart.ChartPanel.chartChanged": "/**\n     * Receives notification of changes to the chart, and redraws the chart.\n     *\n     * @param event  details of the chart change event.\n     */\n",
"org.jfree.chart.ChartPanel.chartProgress": "/**\n     * Receives notification of a chart progress event.\n     *\n     * @param event  the event.\n     */\n",
"org.jfree.chart.ChartPanel.actionPerformed": "/**\n     * Handles action events generated by the popup menu.\n     *\n     * @param event  the event.\n     */\n",
"org.jfree.chart.ChartPanel.mouseEntered": "/**\n     * Handles a 'mouse entered' event. This method changes the tooltip delays\n     * of ToolTipManager.sharedInstance() to the possibly different values set\n     * for this chart panel.\n     *\n     * @param e  the mouse event.\n     */\n",
"org.jfree.chart.ChartPanel.mouseExited": "/**\n     * Handles a 'mouse exited' event. This method resets the tooltip delays of\n     * ToolTipManager.sharedInstance() to their\n     * original values in effect before mouseEntered()\n     *\n     * @param e  the mouse event.\n     */\n",
"org.jfree.chart.ChartPanel.mousePressed": "/**\n     * Handles a 'mouse pressed' event.\n     * <P>\n     * This event is the popup trigger on Unix/Linux.  For Windows, the popup\n     * trigger is the 'mouse released' event.\n     *\n     * @param e  The mouse event.\n     */\n",
"org.jfree.chart.ChartPanel.getPointInRectangle": "/**\n     * Returns a point based on (x, y) but constrained to be within the bounds\n     * of the given rectangle.  This method could be moved to JCommon.\n     *\n     * @param x  the x-coordinate.\n     * @param y  the y-coordinate.\n     * @param area  the rectangle ({@code null} not permitted).\n     *\n     * @return A point within the rectangle.\n     */\n",
"org.jfree.chart.ChartPanel.mouseDragged": "/**\n     * Handles a 'mouse dragged' event.\n     *\n     * @param e  the mouse event.\n     */\n",
"org.jfree.chart.ChartPanel.mouseReleased": "/**\n     * Handles a 'mouse released' event.  On Windows, we need to check if this\n     * is a popup trigger, but only if we haven't already been tracking a zoom\n     * rectangle.\n     *\n     * @param e  information about the event.\n     */\n",
"org.jfree.chart.ChartPanel.mouseClicked": "/**\n     * Receives notification of mouse clicks on the panel. These are\n     * translated and passed on to any registered {@link ChartMouseListener}s.\n     *\n     * @param event  Information about the mouse event.\n     */\n",
"org.jfree.chart.ChartPanel.mouseMoved": "/**\n     * Implementation of the MouseMotionListener's method.\n     *\n     * @param e  the event.\n     */\n",
"org.jfree.chart.ChartPanel.zoomInBoth": "/**\n     * Zooms in on an anchor point (specified in screen coordinate space).\n     *\n     * @param x  the x value (in screen coordinates).\n     * @param y  the y value (in screen coordinates).\n     */\n",
"org.jfree.chart.ChartPanel.zoomInDomain": "/**\n     * Decreases the length of the domain axis, centered about the given\n     * coordinate on the screen.  The length of the domain axis is reduced\n     * by the value of {@link #getZoomInFactor()}.\n     *\n     * @param x  the x coordinate (in screen coordinates).\n     * @param y  the y-coordinate (in screen coordinates).\n     */\n",
"org.jfree.chart.ChartPanel.zoomInRange": "/**\n     * Decreases the length of the range axis, centered about the given\n     * coordinate on the screen.  The length of the range axis is reduced by\n     * the value of {@link #getZoomInFactor()}.\n     *\n     * @param x  the x-coordinate (in screen coordinates).\n     * @param y  the y coordinate (in screen coordinates).\n     */\n",
"org.jfree.chart.ChartPanel.zoomOutBoth": "/**\n     * Zooms out on an anchor point (specified in screen coordinate space).\n     *\n     * @param x  the x value (in screen coordinates).\n     * @param y  the y value (in screen coordinates).\n     */\n",
"org.jfree.chart.ChartPanel.zoomOutDomain": "/**\n     * Increases the length of the domain axis, centered about the given\n     * coordinate on the screen.  The length of the domain axis is increased\n     * by the value of {@link #getZoomOutFactor()}.\n     *\n     * @param x  the x coordinate (in screen coordinates).\n     * @param y  the y-coordinate (in screen coordinates).\n     */\n",
"org.jfree.chart.ChartPanel.zoomOutRange": "/**\n     * Increases the length the range axis, centered about the given\n     * coordinate on the screen.  The length of the range axis is increased\n     * by the value of {@link #getZoomOutFactor()}.\n     *\n     * @param x  the x coordinate (in screen coordinates).\n     * @param y  the y-coordinate (in screen coordinates).\n     */\n",
"org.jfree.chart.ChartPanel.zoom": "/**\n     * Zooms in on a selected region.\n     *\n     * @param selection  the selected region.\n     */\n",
"org.jfree.chart.ChartPanel.restoreAutoBounds": "/**\n     * Restores the auto-range calculation on both axes.\n     */\n",
"org.jfree.chart.ChartPanel.restoreAutoDomainBounds": "/**\n     * Restores the auto-range calculation on the domain axis.\n     */\n",
"org.jfree.chart.ChartPanel.restoreAutoRangeBounds": "/**\n     * Restores the auto-range calculation on the range axis.\n     */\n",
"org.jfree.chart.ChartPanel.getScreenDataArea": "/**\n     * Returns the data area for the chart (the area inside the axes) with the\n     * current scaling applied (that is, the area as it appears on screen).\n     *\n     * @return The scaled data area.\n     */\n",
"org.jfree.chart.ChartPanel.getScreenDataArea": "/**\n     * Returns the data area (the area inside the axes) for the plot or subplot,\n     * with the current scaling applied.\n     *\n     * @param x  the x-coordinate (for subplot selection).\n     * @param y  the y-coordinate (for subplot selection).\n     *\n     * @return The scaled data area.\n     */\n",
"org.jfree.chart.ChartPanel.getInitialDelay": "/**\n     * Returns the initial tooltip delay value used inside this chart panel.\n     *\n     * @return An integer representing the initial delay value, in milliseconds.\n     *\n     * @see javax.swing.ToolTipManager#getInitialDelay()\n     */\n",
"org.jfree.chart.ChartPanel.getReshowDelay": "/**\n     * Returns the reshow tooltip delay value used inside this chart panel.\n     *\n     * @return An integer representing the reshow  delay value, in milliseconds.\n     *\n     * @see javax.swing.ToolTipManager#getReshowDelay()\n     */\n",
"org.jfree.chart.ChartPanel.getDismissDelay": "/**\n     * Returns the dismissal tooltip delay value used inside this chart panel.\n     *\n     * @return An integer representing the dismissal delay value, in\n     *         milliseconds.\n     *\n     * @see javax.swing.ToolTipManager#getDismissDelay()\n     */\n",
"org.jfree.chart.ChartPanel.setInitialDelay": "/**\n     * Specifies the initial delay value for this chart panel.\n     *\n     * @param delay  the number of milliseconds to delay (after the cursor has\n     *               paused) before displaying.\n     *\n     * @see javax.swing.ToolTipManager#setInitialDelay(int)\n     */\n",
"org.jfree.chart.ChartPanel.setReshowDelay": "/**\n     * Specifies the amount of time before the user has to wait initialDelay\n     * milliseconds before a tooltip will be shown.\n     *\n     * @param delay  time in milliseconds\n     *\n     * @see javax.swing.ToolTipManager#setReshowDelay(int)\n     */\n",
"org.jfree.chart.ChartPanel.setDismissDelay": "/**\n     * Specifies the dismissal delay value for this chart panel.\n     *\n     * @param delay the number of milliseconds to delay before taking away the\n     *              tooltip\n     *\n     * @see javax.swing.ToolTipManager#setDismissDelay(int)\n     */\n",
"org.jfree.chart.ChartPanel.getZoomInFactor": "/**\n     * Returns the zoom in factor.\n     *\n     * @return The zoom in factor.\n     *\n     * @see #setZoomInFactor(double)\n     */\n",
"org.jfree.chart.ChartPanel.setZoomInFactor": "/**\n     * Sets the zoom in factor.\n     *\n     * @param factor  the factor.\n     *\n     * @see #getZoomInFactor()\n     */\n",
"org.jfree.chart.ChartPanel.getZoomOutFactor": "/**\n     * Returns the zoom out factor.\n     *\n     * @return The zoom out factor.\n     *\n     * @see #setZoomOutFactor(double)\n     */\n",
"org.jfree.chart.ChartPanel.setZoomOutFactor": "/**\n     * Sets the zoom out factor.\n     *\n     * @param factor  the factor.\n     *\n     * @see #getZoomOutFactor()\n     */\n",
"org.jfree.chart.ChartPanel.drawZoomRectangle": "/**\n     * Draws zoom rectangle (if present).\n     * The drawing is performed in XOR mode, therefore\n     * when this method is called twice in a row,\n     * the second call will completely restore the state\n     * of the canvas.\n     *\n     * @param g2 the graphics device.\n     * @param xor  use XOR for drawing?\n     */\n",
"org.jfree.chart.ChartPanel.drawHorizontalAxisTrace": "/**\n     * Draws a vertical line used to trace the mouse position to the horizontal\n     * axis.\n     *\n     * @param g2 the graphics device.\n     * @param x  the x-coordinate of the trace line.\n     */\n",
"org.jfree.chart.ChartPanel.drawVerticalAxisTrace": "/**\n     * Draws a horizontal line used to trace the mouse position to the vertical\n     * axis.\n     *\n     * @param g2 the graphics device.\n     * @param y  the y-coordinate of the trace line.\n     */\n",
"org.jfree.chart.ChartPanel.doEditChartProperties": "/**\n     * Displays a dialog that allows the user to edit the properties for the\n     * current chart.\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.chart.ChartPanel.doCopy": "/**\n     * Copies the current chart to the system clipboard.\n     * \n     * @since 1.0.13\n     */\n",
"org.jfree.chart.ChartPanel.doSaveAs": "/**\n     * Opens a file chooser and gives the user an opportunity to save the chart\n     * in PNG format.\n     *\n     * @throws IOException if there is an I/O error.\n     */\n",
"org.jfree.chart.ChartPanel.saveAsSVG": "/**\n     * Saves the chart in SVG format (a filechooser will be displayed so that\n     * the user can specify the filename).  Note that this method only works\n     * if the JFreeSVG library is on the classpath...if this library is not \n     * present, the method will fail.\n     */\n",
"org.jfree.chart.ChartPanel.generateSVG": "/**\n     * Generates a string containing a rendering of the chart in SVG format.\n     * This feature is only supported if the JFreeSVG library is included on \n     * the classpath.\n     * \n     * @return A string containing an SVG element for the current chart, or \n     *     {@code null} if there is a problem with the method invocation\n     *     by reflection.\n     */\n",
"org.jfree.chart.ChartPanel.saveAsPDF": "/**\n     * Saves the chart in PDF format (a filechooser will be displayed so that\n     * the user can specify the filename).  Note that this method only works\n     * if the OrsonPDF library is on the classpath...if this library is not\n     * present, the method will fail.\n     */\n",
"org.jfree.chart.ChartPanel.isOrsonPDFAvailable": "/**\n     * Returns {@code true} if OrsonPDF is on the classpath, and \n     * {@code false} otherwise.  The OrsonPDF library can be found at\n     * http://www.object-refinery.com/pdf/\n     * \n     * @return A boolean.\n     */\n",
"org.jfree.chart.ChartPanel.writeAsPDF": "/**\n     * Writes the current chart to the specified file in PDF format.  This \n     * will only work when the OrsonPDF library is found on the classpath.\n     * Reflection is used to ensure there is no compile-time dependency on\n     * OrsonPDF (which is non-free software).\n     * \n     * @param file  the output file ({@code null} not permitted).\n     * @param w  the chart width.\n     * @param h  the chart height.\n     */\n",
"org.jfree.chart.ChartPanel.createChartPrintJob": "/**\n     * Creates a print job for the chart.\n     */\n",
"org.jfree.chart.ChartPanel.print": "/**\n     * Prints the chart on a single page.\n     *\n     * @param g  the graphics context.\n     * @param pf  the page format to use.\n     * @param pageIndex  the index of the page. If not {@code 0}, nothing\n     *                   gets printed.\n     *\n     * @return The result of printing.\n     */\n",
"org.jfree.chart.ChartPanel.addChartMouseListener": "/**\n     * Adds a listener to the list of objects listening for chart mouse events.\n     *\n     * @param listener  the listener ({@code null} not permitted).\n     */\n",
"org.jfree.chart.ChartPanel.removeChartMouseListener": "/**\n     * Removes a listener from the list of objects listening for chart mouse\n     * events.\n     *\n     * @param listener  the listener.\n     */\n",
"org.jfree.chart.ChartPanel.getListeners": "/**\n     * Returns an array of the listeners of the given type registered with the\n     * panel.\n     *\n     * @param listenerType  the listener type.\n     *\n     * @return An array of listeners.\n     */\n",
"org.jfree.chart.ChartPanel.createPopupMenu": "/**\n     * Creates a popup menu for the panel.\n     *\n     * @param properties  include a menu item for the chart property editor.\n     * @param save  include a menu item for saving the chart.\n     * @param print  include a menu item for printing the chart.\n     * @param zoom  include menu items for zooming.\n     *\n     * @return The popup menu.\n     */\n",
"org.jfree.chart.ChartPanel.createPopupMenu": "/**\n     * Creates a popup menu for the panel.\n     *\n     * @param properties  include a menu item for the chart property editor.\n     * @param copy include a menu item for copying to the clipboard.\n     * @param save  include a menu item for saving the chart.\n     * @param print  include a menu item for printing the chart.\n     * @param zoom  include menu items for zooming.\n     *\n     * @return The popup menu.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.ChartPanel.displayPopupMenu": "/**\n     * The idea is to modify the zooming options depending on the type of chart\n     * being displayed by the panel.\n     *\n     * @param x  horizontal position of the popup.\n     * @param y  vertical position of the popup.\n     */\n",
"org.jfree.chart.ChartPanel.updateUI": "/**\n     * Updates the UI for a LookAndFeel change.\n     */\n",
"org.jfree.chart.ChartPanel.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.ChartPanel.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.HashUtils.hashCodeForPaint": "/**\n     * Returns a hash code for a {@code Paint} instance.  If \n     * {@code p} is {@code null}, this method returns zero.\n     * \n     * @param p  the paint ({@code null} permitted).\n     * \n     * @return The hash code.\n     */\n",
"org.jfree.chart.HashUtils.hashCodeForDoubleArray": "/**\n     * Returns a hash code for a {@code double[]} instance.  If the array\n     * is {@code null}, this method returns zero.\n     * \n     * @param a  the array ({@code null} permitted).\n     * \n     * @return The hash code.\n     */\n",
"org.jfree.chart.HashUtils.hashCode": "/**\n     * Returns a hash value based on a seed value and the value of a boolean\n     * primitive.\n     * \n     * @param pre  the seed value.\n     * @param b  the boolean value.\n     * \n     * @return A hash value.\n     * \n     * @since 1.0.7\n     */\n",
"org.jfree.chart.HashUtils.hashCode": "/**\n     * Returns a hash value based on a seed value and the value of an int\n     * primitive.\n     * \n     * @param pre  the seed value.\n     * @param i  the int value.\n     * \n     * @return A hash value.\n     * \n     * @since 1.0.8\n     */\n",
"org.jfree.chart.HashUtils.hashCode": "/**\n     * Returns a hash value based on a seed value and the value of a double\n     * primitive.\n     * \n     * @param pre  the seed value.\n     * @param d  the double value.\n     * \n     * @return A hash value.\n     * \n     * @since 1.0.7\n     */\n",
"org.jfree.chart.HashUtils.hashCode": "/**\n     * Returns a hash value based on a seed value and a paint instance.\n     * \n     * @param pre  the seed value.\n     * @param p  the paint ({@code null} permitted).\n     * \n     * @return A hash value.\n     * \n     * @since 1.0.7\n     */\n",
"org.jfree.chart.HashUtils.hashCode": "/**\n     * Returns a hash value based on a seed value and a stroke instance.\n     * \n     * @param pre  the seed value.\n     * @param s  the stroke ({@code null} permitted).\n     * \n     * @return A hash value.\n     * \n     * @since 1.0.7\n     */\n",
"org.jfree.chart.HashUtils.hashCode": "/**\n     * Returns a hash value based on a seed value and a string instance.\n     * \n     * @param pre  the seed value.\n     * @param s  the string ({@code null} permitted).\n     * \n     * @return A hash value.\n     * \n     * @since 1.0.7\n     */\n",
"org.jfree.chart.HashUtils.hashCode": "/**\n     * Returns a hash value based on a seed value and a {@code Comparable}\n     * instance.\n     * \n     * @param pre  the seed value.\n     * @param c  the comparable ({@code null} permitted).\n     * \n     * @return A hash value.\n     * \n     * @since 1.0.7\n     */\n",
"org.jfree.chart.HashUtils.hashCode": "/**\n     * Returns a hash value based on a seed value and an {@code Object}\n     * instance.\n     * \n     * @param pre  the seed value.\n     * @param obj  the object ({@code null} permitted).\n     * \n     * @return A hash value.\n     * \n     * @since 1.0.8\n     */\n",
"org.jfree.chart.HashUtils.hashCode": "/**\n     * Computes a hash code for a {@link BooleanList}.  In the latest version\n     * of JCommon, the {@link BooleanList} class should implement the hashCode()\n     * method correctly, but we compute it here anyway so that we can work with \n     * older versions of JCommon (back to 1.0.0).\n     * \n     * @param pre  the seed value.\n     * @param list  the list ({@code null} permitted).\n     * \n     * @return The hash code.\n     * \n     * @since 1.0.9\n     */\n",
"org.jfree.chart.HashUtils.hashCode": "/**\n     * Computes a hash code for a {@link PaintList}.  In the latest version\n     * of JCommon, the {@link PaintList} class should implement the hashCode()\n     * method correctly, but we compute it here anyway so that we can work with \n     * older versions of JCommon (back to 1.0.0).\n     * \n     * @param pre  the seed value.\n     * @param list  the list ({@code null} permitted).\n     * \n     * @return The hash code.\n     * \n     * @since 1.0.9\n     */\n",
"org.jfree.chart.HashUtils.hashCode": "/**\n     * Computes a hash code for a {@link StrokeList}.  In the latest version\n     * of JCommon, the {@link StrokeList} class should implement the hashCode()\n     * method correctly, but we compute it here anyway so that we can work with \n     * older versions of JCommon (back to 1.0.0).\n     * \n     * @param pre  the seed value.\n     * @param list  the list ({@code null} permitted).\n     * \n     * @return The hash code.\n     * \n     * @since 1.0.9\n     */\n",
"org.jfree.chart.PaintMap.getPaint": "/**\n     * Returns the paint associated with the specified key, or\n     * {@code null}.\n     *\n     * @param key  the key ({@code null} not permitted).\n     *\n     * @return The paint, or {@code null}.\n     *\n     * @throws IllegalArgumentException if {@code key} is\n     *     {@code null}.\n     */\n",
"org.jfree.chart.PaintMap.containsKey": "/**\n     * Returns {@code true} if the map contains the specified key, and\n     * {@code false} otherwise.\n     *\n     * @param key  the key.\n     *\n     * @return {@code true} if the map contains the specified key, and\n     * {@code false} otherwise.\n     */\n",
"org.jfree.chart.PaintMap.put": "/**\n     * Adds a mapping between the specified {@code key} and\n     * {@code Paint} values.\n     *\n     * @param key  the key ({@code null} not permitted).\n     * @param paint  the paint.\n     *\n     * @throws IllegalArgumentException if {@code key} is\n     *     {@code null}.\n     */\n",
"org.jfree.chart.PaintMap.clear": "/**\n     * Resets the map to empty.\n     */\n",
"org.jfree.chart.PaintMap.equals": "/**\n     * Tests this map for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.PaintMap.clone": "/**\n     * Returns a clone of this {@code PaintMap}.\n     *\n     * @return A clone of this instance.\n     *\n     * @throws CloneNotSupportedException if any key is not cloneable.\n     */\n",
"org.jfree.chart.PaintMap.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.PaintMap.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.PolarChartPanel.setChart": "/**\n     * Sets the chart that is displayed in the panel.\n     *\n     * @param chart  The chart.\n     */\n",
"org.jfree.chart.PolarChartPanel.createPopupMenu": "/**\n     * Creates a popup menu for the panel.\n     *\n     * @param properties  include a menu item for the chart property editor.\n     * @param save  include a menu item for saving the chart.\n     * @param print  include a menu item for printing the chart.\n     * @param zoom  include menu items for zooming.\n     *\n     * @return The popup menu.\n     */\n",
"org.jfree.chart.PolarChartPanel.actionPerformed": "/**\n     * Handles action events generated by the popup menu.\n     *\n     * @param event  the event.\n     */\n",
"org.jfree.chart.PolarChartPanel.checkChart": "/**\n     * Test that the chart is using an xy plot with time as the domain axis.\n     *\n     * @param chart  the chart.\n     */\n",
"org.jfree.chart.PolarChartPanel.getPopupMenuItem": "/**\n     * Returns the index of an item in a popup menu.\n     *\n     * @param menu  the menu.\n     * @param text  the label.\n     *\n     * @return The item index.\n     */\n",
"org.jfree.chart.ChartMouseEvent.getChart": "/**\n     * Returns the chart that the mouse event relates to.\n     *\n     * @return The chart (never {@code null}).\n     */\n",
"org.jfree.chart.ChartMouseEvent.getTrigger": "/**\n     * Returns the mouse event that triggered this event.\n     *\n     * @return The event (never {@code null}).\n     */\n",
"org.jfree.chart.ChartMouseEvent.getEntity": "/**\n     * Returns the chart entity (if any) under the mouse point.\n     *\n     * @return The chart entity (possibly {@code null}).\n     */\n",
"org.jfree.chart.ChartRenderingInfo.getChartArea": "/**\n     * Returns the area in which the chart was drawn.\n     *\n     * @return The area in which the chart was drawn.\n     *\n     * @see #setChartArea(Rectangle2D)\n     */\n",
"org.jfree.chart.ChartRenderingInfo.setChartArea": "/**\n     * Sets the area in which the chart was drawn.\n     *\n     * @param area  the chart area.\n     *\n     * @see #getChartArea()\n     */\n",
"org.jfree.chart.ChartRenderingInfo.getEntityCollection": "/**\n     * Returns the collection of entities maintained by this instance.\n     *\n     * @return The entity collection (possibly {@code null}).\n     *\n     * @see #setEntityCollection(EntityCollection)\n     */\n",
"org.jfree.chart.ChartRenderingInfo.setEntityCollection": "/**\n     * Sets the entity collection.\n     *\n     * @param entities  the entity collection ({@code null} permitted).\n     *\n     * @see #getEntityCollection()\n     */\n",
"org.jfree.chart.ChartRenderingInfo.clear": "/**\n     * Clears the information recorded by this object.\n     */\n",
"org.jfree.chart.ChartRenderingInfo.getPlotInfo": "/**\n     * Returns the rendering info for the chart's plot.\n     *\n     * @return The rendering info for the plot.\n     */\n",
"org.jfree.chart.ChartRenderingInfo.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the object to test against ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.ChartRenderingInfo.clone": "/**\n     * Returns a clone of this object.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if the object cannot be cloned.\n     */\n",
"org.jfree.chart.ChartRenderingInfo.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.ChartRenderingInfo.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.ChartFactory.getChartTheme": "/**\n     * Returns the current chart theme used by the factory.\n     *\n     * @return The chart theme.\n     *\n     * @see #setChartTheme(ChartTheme)\n     * @see ChartUtils#applyCurrentTheme(JFreeChart)\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.ChartFactory.setChartTheme": "/**\n     * Sets the current chart theme.  This will be applied to all new charts\n     * created via methods in this class.\n     *\n     * @param theme  the theme ({@code null} not permitted).\n     *\n     * @see #getChartTheme()\n     * @see ChartUtils#applyCurrentTheme(JFreeChart)\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.ChartFactory.createPieChart": "/**\n     * Creates a pie chart with default settings.\n     * <P>\n     * The chart object returned by this method uses a {@link PiePlot} instance\n     * as the plot.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param legend  a flag specifying whether or not a legend is required.\n     * @param tooltips  configure chart to generate tool tips?\n     * @param locale  the locale ({@code null} not permitted).\n     *\n     * @return A pie chart.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.ChartFactory.createPieChart": "/**\n     * Creates a pie chart with default settings.\n     * <P>\n     * The chart object returned by this method uses a {@link PiePlot} instance\n     * as the plot.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     *\n     * @return A pie chart.\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.ChartFactory.createPieChart": "/**\n     * Creates a pie chart with default settings.\n     * <P>\n     * The chart object returned by this method uses a {@link PiePlot} instance\n     * as the plot.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param legend  a flag specifying whether or not a legend is required.\n     * @param tooltips  configure chart to generate tool tips?\n     * @param urls  configure chart to generate URLs?\n     *\n     * @return A pie chart.\n     */\n",
"org.jfree.chart.ChartFactory.createPieChart": "/**\n     * Creates a pie chart with default settings that compares 2 datasets.\n     * The colour of each section will be determined by the move from the value\n     * for the same key in {@code previousDataset}. ie if value1 &gt; \n     * value2 then the section will be in green (unless \n     * {@code greenForIncrease} is {@code false}, in which case it \n     * would be {@code red}). Each section can have a shade of red or \n     * green as the difference can be tailored between 0% (black) and \n     * percentDiffForMaxScale% (bright red/green).\n     * <p>\n     * For instance if {@code percentDiffForMaxScale} is 10 (10%), a\n     * difference of 5% will have a half shade of red/green, a difference of\n     * 10% or more will have a maximum shade/brightness of red/green.\n     * <P>\n     * The chart object returned by this method uses a {@link PiePlot} instance\n     * as the plot.\n     * <p>\n     * Written by <a href=\"mailto:opensource@objectlab.co.uk\">Benoit\n     * Xhenseval</a>.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param previousDataset  the dataset for the last run, this will be used\n     *                         to compare each key in the dataset\n     * @param percentDiffForMaxScale scale goes from bright red/green to black,\n     *                               percentDiffForMaxScale indicate the change\n     *                               required to reach top scale.\n     * @param greenForIncrease  an increase since previousDataset will be\n     *                          displayed in green (decrease red) if true.\n     * @param legend  a flag specifying whether or not a legend is required.\n     * @param tooltips  configure chart to generate tool tips?\n     * @param locale  the locale ({@code null} not permitted).\n     * @param subTitle displays a subtitle with colour scheme if true\n     * @param showDifference  create a new dataset that will show the %\n     *                        difference between the two datasets.\n     *\n     * @return A pie chart.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.ChartFactory.createPieChart": "/**\n     * Creates a pie chart with default settings that compares 2 datasets.\n     * The colour of each section will be determined by the move from the value\n     * for the same key in {@code previousDataset}. ie if value1 &gt; \n     * value2 then the section will be in green (unless \n     * {@code greenForIncrease} is {@code false}, in which case it \n     * would be {@code red}). Each section can have a shade of red or \n     * green as the difference can be tailored between 0% (black) and \n     * percentDiffForMaxScale% (bright red/green).\n     * <p>\n     * For instance if {@code percentDiffForMaxScale} is 10 (10%), a\n     * difference of 5% will have a half shade of red/green, a difference of\n     * 10% or more will have a maximum shade/brightness of red/green.\n     * <P>\n     * The chart object returned by this method uses a {@link PiePlot} instance\n     * as the plot.\n     * <p>\n     * Written by <a href=\"mailto:opensource@objectlab.co.uk\">Benoit\n     * Xhenseval</a>.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param previousDataset  the dataset for the last run, this will be used\n     *                         to compare each key in the dataset\n     * @param percentDiffForMaxScale scale goes from bright red/green to black,\n     *                               percentDiffForMaxScale indicate the change\n     *                               required to reach top scale.\n     * @param greenForIncrease  an increase since previousDataset will be\n     *                          displayed in green (decrease red) if true.\n     * @param legend  a flag specifying whether or not a legend is required.\n     * @param tooltips  configure chart to generate tool tips?\n     * @param urls  configure chart to generate URLs?\n     * @param subTitle displays a subtitle with colour scheme if true\n     * @param showDifference  create a new dataset that will show the %\n     *                        difference between the two datasets.\n     *\n     * @return A pie chart.\n     */\n",
"org.jfree.chart.ChartFactory.createRingChart": "/**\n     * Creates a ring chart with default settings.\n     * <P>\n     * The chart object returned by this method uses a {@link RingPlot}\n     * instance as the plot.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param legend  a flag specifying whether or not a legend is required.\n     * @param tooltips  configure chart to generate tool tips?\n     * @param locale  the locale ({@code null} not permitted).\n     *\n     * @return A ring chart.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.chart.ChartFactory.createRingChart": "/**\n     * Creates a ring chart with default settings.\n     * <P>\n     * The chart object returned by this method uses a {@link RingPlot}\n     * instance as the plot.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param legend  a flag specifying whether or not a legend is required.\n     * @param tooltips  configure chart to generate tool tips?\n     * @param urls  configure chart to generate URLs?\n     *\n     * @return A ring chart.\n     */\n",
"org.jfree.chart.ChartFactory.createMultiplePieChart": "/**\n     * Creates a chart that displays multiple pie plots.  The chart object\n     * returned by this method uses a {@link MultiplePiePlot} instance as the\n     * plot.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param dataset  the dataset ({@code null} permitted).\n     * @param order  the order that the data is extracted (by row or by column)\n     *               ({@code null} not permitted).\n     * @param legend  include a legend?\n     * @param tooltips  generate tooltips?\n     * @param urls  generate URLs?\n     *\n     * @return A chart.\n     */\n",
"org.jfree.chart.ChartFactory.createPieChart3D": "/**\n     * Creates a 3D pie chart using the specified dataset.  The chart object\n     * returned by this method uses a {@link PiePlot3D} instance as the\n     * plot.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param legend  a flag specifying whether or not a legend is required.\n     * @param tooltips  configure chart to generate tool tips?\n     * @param locale  the locale ({@code null} not permitted).\n     *\n     * @return A pie chart.\n     *\n     * @since 1.0.7\n     * \n     * @deprecated For 3D pie charts, use Orson Charts (https://github.com/jfree/orson-charts).  \n     */\n",
"org.jfree.chart.ChartFactory.createPieChart3D": "/**\n     * Creates a 3D pie chart using the specified dataset.  The chart object\n     * returned by this method uses a {@link PiePlot3D} instance as the\n     * plot.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     *\n     * @return A pie chart.\n     * \n     * @since 1.0.16\n     * @deprecated For 3D pie charts, use Orson Charts (https://github.com/jfree/orson-charts).  \n     */\n",
"org.jfree.chart.ChartFactory.createPieChart3D": "/**\n     * Creates a 3D pie chart using the specified dataset.  The chart object\n     * returned by this method uses a {@link PiePlot3D} instance as the\n     * plot.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param legend  a flag specifying whether or not a legend is required.\n     * @param tooltips  configure chart to generate tool tips?\n     * @param urls  configure chart to generate URLs?\n     *\n     * @return A pie chart.\n     * @deprecated For 3D pie charts, use Orson Charts (https://github.com/jfree/orson-charts).  \n     */\n",
"org.jfree.chart.ChartFactory.createMultiplePieChart3D": "/**\n     * Creates a chart that displays multiple pie plots.  The chart object\n     * returned by this method uses a {@link MultiplePiePlot} instance as the\n     * plot.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param dataset  the dataset ({@code null} permitted).\n     * @param order  the order that the data is extracted (by row or by column)\n     *               ({@code null} not permitted).\n     * @param legend  include a legend?\n     * @param tooltips  generate tooltips?\n     * @param urls  generate URLs?\n     *\n     * @return A chart.\n     */\n",
"org.jfree.chart.ChartFactory.createBarChart": "/**\n     * Creates a bar chart with a vertical orientation.  The chart object\n     * returned by this method uses a {@link CategoryPlot} instance as the\n     * plot, with a {@link CategoryAxis} for the domain axis, a\n     * {@link NumberAxis} as the range axis, and a {@link BarRenderer} as the\n     * renderer.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param categoryAxisLabel  the label for the category axis\n     *                           ({@code null} permitted).\n     * @param valueAxisLabel  the label for the value axis\n     *                        ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     *\n     * @return A bar chart.\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.ChartFactory.createBarChart": "/**\n     * Creates a bar chart.  The chart object returned by this method uses a\n     * {@link CategoryPlot} instance as the plot, with a {@link CategoryAxis}\n     * for the domain axis, a {@link NumberAxis} as the range axis, and a\n     * {@link BarRenderer} as the renderer.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param categoryAxisLabel  the label for the category axis\n     *                           ({@code null} permitted).\n     * @param valueAxisLabel  the label for the value axis\n     *                        ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param orientation  the plot orientation (horizontal or vertical)\n     *                     ({@code null} not permitted).\n     * @param legend  a flag specifying whether or not a legend is required.\n     * @param tooltips  configure chart to generate tool tips?\n     * @param urls  configure chart to generate URLs?\n     *\n     * @return A bar chart.\n     */\n",
"org.jfree.chart.ChartFactory.createStackedBarChart": "/**\n     * Creates a stacked bar chart with default settings.  The chart object\n     * returned by this method uses a {@link CategoryPlot} instance as the\n     * plot, with a {@link CategoryAxis} for the domain axis, a\n     * {@link NumberAxis} as the range axis, and a {@link StackedBarRenderer}\n     * as the renderer.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param domainAxisLabel  the label for the category axis\n     *                         ({@code null} permitted).\n     * @param rangeAxisLabel  the label for the value axis\n     *                        ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     *\n     * @return A stacked bar chart.\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.ChartFactory.createStackedBarChart": "/**\n     * Creates a stacked bar chart with default settings.  The chart object\n     * returned by this method uses a {@link CategoryPlot} instance as the\n     * plot, with a {@link CategoryAxis} for the domain axis, a\n     * {@link NumberAxis} as the range axis, and a {@link StackedBarRenderer}\n     * as the renderer.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param domainAxisLabel  the label for the category axis\n     *                         ({@code null} permitted).\n     * @param rangeAxisLabel  the label for the value axis\n     *                        ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param orientation  the orientation of the chart (horizontal or\n     *                     vertical) ({@code null} not permitted).\n     * @param legend  a flag specifying whether or not a legend is required.\n     * @param tooltips  configure chart to generate tool tips?\n     * @param urls  configure chart to generate URLs?\n     *\n     * @return A stacked bar chart.\n     */\n",
"org.jfree.chart.ChartFactory.createAreaChart": "/**\n     * Creates an area chart with default settings.  The chart object returned\n     * by this method uses a {@link CategoryPlot} instance as the plot, with a\n     * {@link CategoryAxis} for the domain axis, a {@link NumberAxis} as the\n     * range axis, and an {@link AreaRenderer} as the renderer.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param categoryAxisLabel  the label for the category axis\n     *                           ({@code null} permitted).\n     * @param valueAxisLabel  the label for the value axis ({@code null}\n     *                        permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     *\n     * @return An area chart.\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.ChartFactory.createAreaChart": "/**\n     * Creates an area chart with default settings.  The chart object returned\n     * by this method uses a {@link CategoryPlot} instance as the plot, with a\n     * {@link CategoryAxis} for the domain axis, a {@link NumberAxis} as the\n     * range axis, and an {@link AreaRenderer} as the renderer.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param categoryAxisLabel  the label for the category axis\n     *                           ({@code null} permitted).\n     * @param valueAxisLabel  the label for the value axis ({@code null}\n     *                        permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param orientation  the plot orientation ({@code null} not\n     *                     permitted).\n     * @param legend  a flag specifying whether or not a legend is required.\n     * @param tooltips  configure chart to generate tool tips?\n     * @param urls  configure chart to generate URLs?\n     *\n     * @return An area chart.\n     */\n",
"org.jfree.chart.ChartFactory.createStackedAreaChart": "/**\n     * Creates a stacked area chart with default settings.  The chart object\n     * returned by this method uses a {@link CategoryPlot} instance as the\n     * plot, with a {@link CategoryAxis} for the domain axis, a\n     * {@link NumberAxis} as the range axis, and a {@link StackedAreaRenderer}\n     * as the renderer.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param categoryAxisLabel  the label for the category axis\n     *                           ({@code null} permitted).\n     * @param valueAxisLabel  the label for the value axis ({@code null}\n     *                        permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     *\n     * @return A stacked area chart.\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.ChartFactory.createStackedAreaChart": "/**\n     * Creates a stacked area chart with default settings.  The chart object\n     * returned by this method uses a {@link CategoryPlot} instance as the\n     * plot, with a {@link CategoryAxis} for the domain axis, a\n     * {@link NumberAxis} as the range axis, and a {@link StackedAreaRenderer}\n     * as the renderer.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param categoryAxisLabel  the label for the category axis\n     *                           ({@code null} permitted).\n     * @param valueAxisLabel  the label for the value axis ({@code null}\n     *                        permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param orientation  the plot orientation (horizontal or vertical)\n     *                     ({@code null} not permitted).\n     * @param legend  a flag specifying whether or not a legend is required.\n     * @param tooltips  configure chart to generate tool tips?\n     * @param urls  configure chart to generate URLs?\n     *\n     * @return A stacked area chart.\n     */\n",
"org.jfree.chart.ChartFactory.createLineChart": "/**\n     * Creates a line chart with default settings.  The chart object returned\n     * by this method uses a {@link CategoryPlot} instance as the plot, with a\n     * {@link CategoryAxis} for the domain axis, a {@link NumberAxis} as the\n     * range axis, and a {@link LineAndShapeRenderer} as the renderer.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param categoryAxisLabel  the label for the category axis\n     *                           ({@code null} permitted).\n     * @param valueAxisLabel  the label for the value axis ({@code null}\n     *                        permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     *\n     * @return A line chart.\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.ChartFactory.createLineChart": "/**\n     * Creates a line chart with default settings.  The chart object returned\n     * by this method uses a {@link CategoryPlot} instance as the plot, with a\n     * {@link CategoryAxis} for the domain axis, a {@link NumberAxis} as the\n     * range axis, and a {@link LineAndShapeRenderer} as the renderer.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param categoryAxisLabel  the label for the category axis\n     *                           ({@code null} permitted).\n     * @param valueAxisLabel  the label for the value axis ({@code null}\n     *                        permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param orientation  the chart orientation (horizontal or vertical)\n     *                     ({@code null} not permitted).\n     * @param legend  a flag specifying whether or not a legend is required.\n     * @param tooltips  configure chart to generate tool tips?\n     * @param urls  configure chart to generate URLs?\n     *\n     * @return A line chart.\n     */\n",
"org.jfree.chart.ChartFactory.createGanttChart": "/**\n     * Creates a Gantt chart using the supplied attributes plus default values\n     * where required.  The chart object returned by this method uses a\n     * {@link CategoryPlot} instance as the plot, with a {@link CategoryAxis}\n     * for the domain axis, a {@link DateAxis} as the range axis, and a\n     * {@link GanttRenderer} as the renderer.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param categoryAxisLabel  the label for the category axis\n     *                           ({@code null} permitted).\n     * @param dateAxisLabel  the label for the date axis\n     *                       ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     *\n     * @return A Gantt chart.\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.ChartFactory.createGanttChart": "/**\n     * Creates a Gantt chart using the supplied attributes plus default values\n     * where required.  The chart object returned by this method uses a\n     * {@link CategoryPlot} instance as the plot, with a {@link CategoryAxis}\n     * for the domain axis, a {@link DateAxis} as the range axis, and a\n     * {@link GanttRenderer} as the renderer.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param categoryAxisLabel  the label for the category axis\n     *                           ({@code null} permitted).\n     * @param dateAxisLabel  the label for the date axis\n     *                       ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param legend  a flag specifying whether or not a legend is required.\n     * @param tooltips  configure chart to generate tool tips?\n     * @param urls  configure chart to generate URLs?\n     *\n     * @return A Gantt chart.\n     */\n",
"org.jfree.chart.ChartFactory.createWaterfallChart": "/**\n     * Creates a waterfall chart.  The chart object returned by this method\n     * uses a {@link CategoryPlot} instance as the plot, with a\n     * {@link CategoryAxis} for the domain axis, a {@link NumberAxis} as the\n     * range axis, and a {@link WaterfallBarRenderer} as the renderer.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param categoryAxisLabel  the label for the category axis\n     *                           ({@code null} permitted).\n     * @param valueAxisLabel  the label for the value axis ({@code null}\n     *                        permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param orientation  the plot orientation (horizontal or vertical)\n     *                     ({@code null} NOT permitted).\n     * @param legend  a flag specifying whether or not a legend is required.\n     * @param tooltips  configure chart to generate tool tips?\n     * @param urls  configure chart to generate URLs?\n     *\n     * @return A waterfall chart.\n     */\n",
"org.jfree.chart.ChartFactory.createPolarChart": "/**\n     * Creates a polar plot for the specified dataset (x-values interpreted as\n     * angles in degrees).  The chart object returned by this method uses a\n     * {@link PolarPlot} instance as the plot, with a {@link NumberAxis} for\n     * the radial axis.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param dataset  the dataset ({@code null} permitted).\n     * @param legend  legend required?\n     * @param tooltips  tooltips required?\n     * @param urls  URLs required?\n     *\n     * @return A chart.\n     */\n",
"org.jfree.chart.ChartFactory.createScatterPlot": "/**\n     * Creates a scatter plot with default settings.  The chart object\n     * returned by this method uses an {@link XYPlot} instance as the plot,\n     * with a {@link NumberAxis} for the domain axis, a  {@link NumberAxis}\n     * as the range axis, and an {@link XYLineAndShapeRenderer} as the\n     * renderer.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param xAxisLabel  a label for the X-axis ({@code null} permitted).\n     * @param yAxisLabel  a label for the Y-axis ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     *\n     * @return A scatter plot.\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.ChartFactory.createScatterPlot": "/**\n     * Creates a scatter plot with default settings.  The chart object\n     * returned by this method uses an {@link XYPlot} instance as the plot,\n     * with a {@link NumberAxis} for the domain axis, a  {@link NumberAxis}\n     * as the range axis, and an {@link XYLineAndShapeRenderer} as the\n     * renderer.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param xAxisLabel  a label for the X-axis ({@code null} permitted).\n     * @param yAxisLabel  a label for the Y-axis ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param orientation  the plot orientation (horizontal or vertical)\n     *                     ({@code null} NOT permitted).\n     * @param legend  a flag specifying whether or not a legend is required.\n     * @param tooltips  configure chart to generate tool tips?\n     * @param urls  configure chart to generate URLs?\n     *\n     * @return A scatter plot.\n     */\n",
"org.jfree.chart.ChartFactory.createXYBarChart": "/**\n     * Creates and returns a default instance of an XY bar chart.\n     * <P>\n     * The chart object returned by this method uses an {@link XYPlot} instance\n     * as the plot, with a {@link DateAxis} for the domain axis, a\n     * {@link NumberAxis} as the range axis, and a {@link XYBarRenderer} as the\n     * renderer.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param xAxisLabel  a label for the X-axis ({@code null} permitted).\n     * @param dateAxis  make the domain axis display dates?\n     * @param yAxisLabel  a label for the Y-axis ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     *\n     * @return An XY bar chart.\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.ChartFactory.createXYBarChart": "/**\n     * Creates and returns a default instance of an XY bar chart.\n     * <P>\n     * The chart object returned by this method uses an {@link XYPlot} instance\n     * as the plot, with a {@link DateAxis} for the domain axis, a\n     * {@link NumberAxis} as the range axis, and a {@link XYBarRenderer} as the\n     * renderer.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param xAxisLabel  a label for the X-axis ({@code null} permitted).\n     * @param dateAxis  make the domain axis display dates?\n     * @param yAxisLabel  a label for the Y-axis ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param orientation  the orientation (horizontal or vertical)\n     *                     ({@code null} NOT permitted).\n     * @param legend  a flag specifying whether or not a legend is required.\n     * @param tooltips  configure chart to generate tool tips?\n     * @param urls  configure chart to generate URLs?\n     *\n     * @return An XY bar chart.\n     */\n",
"org.jfree.chart.ChartFactory.createXYAreaChart": "/**\n     * Creates an area chart using an {@link XYDataset}.\n     * <P>\n     * The chart object returned by this method uses an {@link XYPlot} instance\n     * as the plot, with a {@link NumberAxis} for the domain axis, a\n     * {@link NumberAxis} as the range axis, and a {@link XYAreaRenderer} as\n     * the renderer.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param xAxisLabel  a label for the X-axis ({@code null} permitted).\n     * @param yAxisLabel  a label for the Y-axis ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     *\n     * @return An XY area chart.\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.ChartFactory.createXYAreaChart": "/**\n     * Creates an area chart using an {@link XYDataset}.\n     * <P>\n     * The chart object returned by this method uses an {@link XYPlot} instance\n     * as the plot, with a {@link NumberAxis} for the domain axis, a\n     * {@link NumberAxis} as the range axis, and a {@link XYAreaRenderer} as\n     * the renderer.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param xAxisLabel  a label for the X-axis ({@code null} permitted).\n     * @param yAxisLabel  a label for the Y-axis ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param orientation  the plot orientation (horizontal or vertical)\n     *                     ({@code null} NOT permitted).\n     * @param legend  a flag specifying whether or not a legend is required.\n     * @param tooltips  configure chart to generate tool tips?\n     * @param urls  configure chart to generate URLs?\n     *\n     * @return An XY area chart.\n     */\n",
"org.jfree.chart.ChartFactory.createStackedXYAreaChart": "/**\n     * Creates a stacked XY area plot.  The chart object returned by this\n     * method uses an {@link XYPlot} instance as the plot, with a\n     * {@link NumberAxis} for the domain axis, a {@link NumberAxis} as the\n     * range axis, and a {@link StackedXYAreaRenderer2} as the renderer.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param xAxisLabel  a label for the X-axis ({@code null} permitted).\n     * @param yAxisLabel  a label for the Y-axis ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     *\n     * @return A stacked XY area chart.\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.ChartFactory.createStackedXYAreaChart": "/**\n     * Creates a stacked XY area plot.  The chart object returned by this\n     * method uses an {@link XYPlot} instance as the plot, with a\n     * {@link NumberAxis} for the domain axis, a {@link NumberAxis} as the\n     * range axis, and a {@link StackedXYAreaRenderer2} as the renderer.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param xAxisLabel  a label for the X-axis ({@code null} permitted).\n     * @param yAxisLabel  a label for the Y-axis ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param orientation  the plot orientation (horizontal or vertical)\n     *                     ({@code null} NOT permitted).\n     * @param legend  a flag specifying whether or not a legend is required.\n     * @param tooltips  configure chart to generate tool tips?\n     * @param urls  configure chart to generate URLs?\n     *\n     * @return A stacked XY area chart.\n     */\n",
"org.jfree.chart.ChartFactory.createXYLineChart": "/**\n     * Creates a line chart (based on an {@link XYDataset}) with default\n     * settings.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param xAxisLabel  a label for the X-axis ({@code null} permitted).\n     * @param yAxisLabel  a label for the Y-axis ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     *\n     * @return The chart.\n     */\n",
"org.jfree.chart.ChartFactory.createXYLineChart": "/**\n     * Creates a line chart (based on an {@link XYDataset}) with default\n     * settings.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param xAxisLabel  a label for the X-axis ({@code null} permitted).\n     * @param yAxisLabel  a label for the Y-axis ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param orientation  the plot orientation (horizontal or vertical)\n     *                     ({@code null} NOT permitted).\n     * @param legend  a flag specifying whether or not a legend is required.\n     * @param tooltips  configure chart to generate tool tips?\n     * @param urls  configure chart to generate URLs?\n     *\n     * @return The chart.\n     */\n",
"org.jfree.chart.ChartFactory.createXYStepChart": "/**\n     * Creates a stepped XY plot with default settings.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param xAxisLabel  a label for the X-axis ({@code null} permitted).\n     * @param yAxisLabel  a label for the Y-axis ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     *\n     * @return A chart.\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.ChartFactory.createXYStepChart": "/**\n     * Creates a stepped XY plot with default settings.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param xAxisLabel  a label for the X-axis ({@code null} permitted).\n     * @param yAxisLabel  a label for the Y-axis ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param orientation  the plot orientation (horizontal or vertical)\n     *                     ({@code null} NOT permitted).\n     * @param legend  a flag specifying whether or not a legend is required.\n     * @param tooltips  configure chart to generate tool tips?\n     * @param urls  configure chart to generate URLs?\n     *\n     * @return A chart.\n     */\n",
"org.jfree.chart.ChartFactory.createXYStepAreaChart": "/**\n     * Creates a filled stepped XY plot with default settings.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param xAxisLabel  a label for the X-axis ({@code null} permitted).\n     * @param yAxisLabel  a label for the Y-axis ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     *\n     * @return A chart.\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.ChartFactory.createXYStepAreaChart": "/**\n     * Creates a filled stepped XY plot with default settings.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param xAxisLabel  a label for the X-axis ({@code null} permitted).\n     * @param yAxisLabel  a label for the Y-axis ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param orientation  the plot orientation (horizontal or vertical)\n     *                     ({@code null} NOT permitted).\n     * @param legend  a flag specifying whether or not a legend is required.\n     * @param tooltips  configure chart to generate tool tips?\n     * @param urls  configure chart to generate URLs?\n     *\n     * @return A chart.\n     */\n",
"org.jfree.chart.ChartFactory.createTimeSeriesChart": "/**\n     * Creates and returns a time series chart.  A time series chart is an\n     * {@link XYPlot} with a {@link DateAxis} for the x-axis and a\n     * {@link NumberAxis} for the y-axis.  The default renderer is an\n     * {@link XYLineAndShapeRenderer}.\n     * <P>\n     * A convenient dataset to use with this chart is a\n     * {@link org.jfree.data.time.TimeSeriesCollection}.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param timeAxisLabel  a label for the time axis ({@code null}\n     *                       permitted).\n     * @param valueAxisLabel  a label for the value axis ({@code null}\n     *                        permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     *\n     * @return A time series chart.\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.ChartFactory.createTimeSeriesChart": "/**\n     * Creates and returns a time series chart.  A time series chart is an\n     * {@link XYPlot} with a {@link DateAxis} for the x-axis and a\n     * {@link NumberAxis} for the y-axis.  The default renderer is an\n     * {@link XYLineAndShapeRenderer}.\n     * <P>\n     * A convenient dataset to use with this chart is a\n     * {@link org.jfree.data.time.TimeSeriesCollection}.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param timeAxisLabel  a label for the time axis ({@code null}\n     *                       permitted).\n     * @param valueAxisLabel  a label for the value axis ({@code null}\n     *                        permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param legend  a flag specifying whether or not a legend is required.\n     * @param tooltips  configure chart to generate tool tips?\n     * @param urls  configure chart to generate URLs?\n     *\n     * @return A time series chart.\n     */\n",
"org.jfree.chart.ChartFactory.createCandlestickChart": "/**\n     * Creates and returns a default instance of a candlesticks chart.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param timeAxisLabel  a label for the time axis ({@code null}\n     *                       permitted).\n     * @param valueAxisLabel  a label for the value axis ({@code null}\n     *                        permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param legend  a flag specifying whether or not a legend is required.\n     *\n     * @return A candlestick chart.\n     */\n",
"org.jfree.chart.ChartFactory.createHighLowChart": "/**\n     * Creates and returns a default instance of a high-low-open-close chart.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param timeAxisLabel  a label for the time axis ({@code null}\n     *                       permitted).\n     * @param valueAxisLabel  a label for the value axis ({@code null}\n     *                        permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param legend  a flag specifying whether or not a legend is required.\n     *\n     * @return A high-low-open-close chart.\n     */\n",
"org.jfree.chart.ChartFactory.createBubbleChart": "/**\n     * Creates a bubble chart with default settings.  The chart is composed of\n     * an {@link XYPlot}, with a {@link NumberAxis} for the domain axis,\n     * a {@link NumberAxis} for the range axis, and an {@link XYBubbleRenderer}\n     * to draw the data items.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param xAxisLabel  a label for the X-axis ({@code null} permitted).\n     * @param yAxisLabel  a label for the Y-axis ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     *\n     * @return A bubble chart.\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.ChartFactory.createBubbleChart": "/**\n     * Creates a bubble chart with default settings.  The chart is composed of\n     * an {@link XYPlot}, with a {@link NumberAxis} for the domain axis,\n     * a {@link NumberAxis} for the range axis, and an {@link XYBubbleRenderer}\n     * to draw the data items.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param xAxisLabel  a label for the X-axis ({@code null} permitted).\n     * @param yAxisLabel  a label for the Y-axis ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param orientation  the orientation (horizontal or vertical)\n     *                     ({@code null} NOT permitted).\n     * @param legend  a flag specifying whether or not a legend is required.\n     * @param tooltips  configure chart to generate tool tips?\n     * @param urls  configure chart to generate URLs?\n     *\n     * @return A bubble chart.\n     */\n",
"org.jfree.chart.ChartFactory.createHistogram": "/**\n     * Creates a histogram chart.  This chart is constructed with an\n     * {@link XYPlot} using an {@link XYBarRenderer}.  The domain and range\n     * axes are {@link NumberAxis} instances.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param xAxisLabel  the x axis label ({@code null} permitted).\n     * @param yAxisLabel  the y axis label ({@code null} permitted).\n     * @param dataset  the dataset ({@code null} permitted).\n     * @return A chart.\n     * \n     * @since 1.0.20\n     */\n",
"org.jfree.chart.ChartFactory.createHistogram": "/**\n     * Creates a histogram chart.  This chart is constructed with an\n     * {@link XYPlot} using an {@link XYBarRenderer}.  The domain and range\n     * axes are {@link NumberAxis} instances.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param xAxisLabel  the x axis label ({@code null} permitted).\n     * @param yAxisLabel  the y axis label ({@code null} permitted).\n     * @param dataset  the dataset ({@code null} permitted).\n     * @param orientation  the orientation (horizontal or vertical)\n     *                     ({@code null} NOT permitted).\n     * @param legend  create a legend?\n     * @param tooltips  display tooltips?\n     * @param urls  generate URLs?\n     *\n     * @return The chart.\n     */\n",
"org.jfree.chart.ChartFactory.createBoxAndWhiskerChart": "/**\n     * Creates and returns a default instance of a box and whisker chart\n     * based on data from a {@link BoxAndWhiskerCategoryDataset}.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param categoryAxisLabel  a label for the category axis\n     *     ({@code null} permitted).\n     * @param valueAxisLabel  a label for the value axis ({@code null}\n     *     permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param legend  a flag specifying whether or not a legend is required.\n     *\n     * @return A box and whisker chart.\n     *\n     * @since 1.0.4\n     */\n",
"org.jfree.chart.ChartFactory.createBoxAndWhiskerChart": "/**\n     * Creates and returns a default instance of a box and whisker chart.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param timeAxisLabel  a label for the time axis ({@code null}\n     *                       permitted).\n     * @param valueAxisLabel  a label for the value axis ({@code null}\n     *                        permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param legend  a flag specifying whether or not a legend is required.\n     *\n     * @return A box and whisker chart.\n     */\n",
"org.jfree.chart.ChartFactory.createWindPlot": "/**\n     * Creates a wind plot with default settings.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param xAxisLabel  a label for the x-axis ({@code null} permitted).\n     * @param yAxisLabel  a label for the y-axis ({@code null} permitted).\n     * @param dataset  the dataset for the chart ({@code null} permitted).\n     * @param legend  a flag that controls whether or not a legend is created.\n     * @param tooltips  configure chart to generate tool tips?\n     * @param urls  configure chart to generate URLs?\n     *\n     * @return A wind plot.\n     *\n     */\n",
"org.jfree.chart.ChartFactory.createWaferMapChart": "/**\n     * Creates a wafer map chart.\n     *\n     * @param title  the chart title ({@code null} permitted).\n     * @param dataset  the dataset ({@code null} permitted).\n     * @param orientation  the plot orientation (horizontal or vertical)\n     *                     ({@code null} NOT permitted.\n     * @param legend  display a legend?\n     * @param tooltips  generate tooltips?\n     * @param urls  generate URLs?\n     *\n     * @return A wafer map chart.\n     */\n",
"org.jfree.chart.LegendItemCollection.add": "/**\n     * Adds a legend item to the collection.\n     *\n     * @param item  the item to add.\n     */\n",
"org.jfree.chart.LegendItemCollection.addAll": "/**\n     * Adds the legend items from another collection to this collection.\n     *\n     * @param collection  the other collection ({@code null} not\n     *     permitted).\n     */\n",
"org.jfree.chart.LegendItemCollection.get": "/**\n     * Returns a legend item from the collection.\n     *\n     * @param index  the legend item index (zero-based).\n     *\n     * @return The legend item.\n     */\n",
"org.jfree.chart.LegendItemCollection.getItemCount": "/**\n     * Returns the number of legend items in the collection.\n     *\n     * @return The item count.\n     */\n",
"org.jfree.chart.LegendItemCollection.iterator": "/**\n     * Returns an iterator that provides access to all the legend items.\n     *\n     * @return An iterator.\n     */\n",
"org.jfree.chart.LegendItemCollection.equals": "/**\n     * Tests this collection for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.LegendItemCollection.clone": "/**\n     * Returns a clone of the collection.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if an item in the collection is not\n     *         cloneable.\n     */\n",
"org.jfree.chart.LegendItemSource.getLegendItems": "/**\n     * Returns a (possibly empty) collection of legend items.\n     *\n     * @return The legend item collection (never {@code null}).\n     */\n",
"org.jfree.chart.util.ObjectList.get": "/**          \n     * Returns the object at the specified index, if there is one, or {@code null}.         \n     *   \n     * @param index  the object index.   \n     *   \n     * @return The object or {@code null}.          \n     */\n",
"org.jfree.chart.util.ObjectList.set": "/**          \n     * Sets an object reference (overwriting any existing object).       \n     *   \n     * @param index  the object index.   \n     * @param object  the object ({@code null} permitted).          \n     */\n",
"org.jfree.chart.util.ObjectList.indexOf": "/**          \n     * Returns the index of the specified object, or -1 if the object is not in the list.        \n     *   \n     * @param object  the object.        \n     *   \n     * @return The index or -1.          \n     */\n",
"org.jfree.chart.util.PaintAlpha.setLegacyAlpha": "/**\n     * Per default {@code PaintAlpha} will try to honour alpha-channel\n     * information.  In the past this was not the case.\n     * If you wish legacy functionality for your application you can request\n     * this here.\n     *\n     * @param legacyAlpha boolean\n     *\n     * @return the previous setting\n     */\n",
"org.jfree.chart.util.PaintAlpha.darker": "/**\n     * Create a new (if possible, darker) {@code Paint} of the same Type.\n     * If the Type is not supported, the original {@code Paint} is returned.\n     * <p>\n     * @param paint a {@code Paint} implementation\n     * (e.g. {@link Color}, {@link GradientPaint}, {@link TexturePaint},..)\n     * <p>\n     * @return a (usually new, see above) {@code Paint}\n     */\n",
"org.jfree.chart.util.PaintAlpha.darker": "/**\n     * Similar to {@link Color#darker()}.\n     * <p>\n     * The essential difference is that this method\n     * maintains the alpha-channel unchanged<br>\n     *\n     * @param paint a {@code Color}\n     *\n     * @return a darker version of the {@code Color}\n     */\n",
"org.jfree.chart.util.PaintAlpha.darker": "/**\n     * Create a new {@code GradientPaint} with its colors darkened.\n     *\n     * @param paint  the gradient paint ({@code null} not permitted).\n     *\n     * @return a darker version of the {@code GradientPaint}\n     */\n",
"org.jfree.chart.util.PaintAlpha.darkerLinearGradientPaint": "/**\n     * Create a new Gradient with its colours darkened.\n     *\n     * @param paint a {@code LinearGradientPaint}\n     *\n     * @return a darker version of the {@code LinearGradientPaint}\n     */\n",
"org.jfree.chart.util.PaintAlpha.darkerRadialGradientPaint": "/**\n     * Create a new Gradient with its colours darkened.\n     *\n     * @param paint a {@code RadialGradientPaint}\n     *\n     * @return a darker version of the {@code RadialGradientPaint}\n     */\n",
"org.jfree.chart.util.PaintAlpha.darkerTexturePaint": "/**\n     * Create a new {@code TexturePaint} with its colors darkened.\n     * <p>\n     * This entails cloning the underlying {@code BufferedImage},\n     * then darkening each color-pixel individually!\n     *\n     * @param paint a {@code TexturePaint}\n     *\n     * @return a darker version of the {@code TexturePaint}\n     */\n",
"org.jfree.chart.util.PaintAlpha.cloneImage": "/**\n     * Clone a {@link BufferedImage}.\n     * <p>\n     * Note: when constructing the clone, the original Color Model Object is\n     * reused.<br>  That keeps things simple and should not be a problem, as all\n     * known Color Models<br>\n     * ({@link java.awt.image.IndexColorModel     IndexColorModel},\n     *  {@link java.awt.image.DirectColorModel    DirectColorModel},\n     *  {@link java.awt.image.ComponentColorModel ComponentColorModel}) are\n     * immutable.\n     *\n     * @param image original BufferedImage to clone\n     *\n     * @return a new BufferedImage reusing the original's Color Model and\n     *         containing a clone of its pixels\n     */\n",
"org.jfree.chart.util.Rotation.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return the string (never {@code null}).\n     */\n",
"org.jfree.chart.util.Rotation.getFactor": "/**\n     * Returns the rotation factor, which is -1.0 for {@code CLOCKWISE}\n     * and 1.0 for {@code ANTICLOCKWISE}.\n     *\n     * @return the rotation factor.\n     */\n",
"org.jfree.chart.util.AbstractObjectList.get": "/**\n     * Returns the object at the specified index, if there is one, or \n     * {@code null}.\n     *\n     * @param index  the object index.\n     *\n     * @return The object or {@code null}.\n     */\n",
"org.jfree.chart.util.AbstractObjectList.set": "/**\n     * Sets an object reference (overwriting any existing object).\n     *\n     * @param index  the object index.\n     * @param object  the object ({@code null} permitted).\n     */\n",
"org.jfree.chart.util.AbstractObjectList.clear": "/**\n     * Clears the list.\n     */\n",
"org.jfree.chart.util.AbstractObjectList.size": "/**\n     * Returns the size of the list.\n     *\n     * @return The size of the list.\n     */\n",
"org.jfree.chart.util.AbstractObjectList.indexOf": "/**\n     * Returns the index of the specified object, or -1 if the object is not in\n     * the list.\n     *\n     * @param object  the object.\n     *\n     * @return The index or -1.\n     */\n",
"org.jfree.chart.util.AbstractObjectList.equals": "/**\n     * Tests this list for equality with another object.\n     *\n     * @param obj  the object to test.\n     * \n     * @return A boolean.\n     */\n",
"org.jfree.chart.util.AbstractObjectList.hashCode": "/**\n     * Returns a hash code value for the object.\n     *\n     * @return the hashcode\n     */\n",
"org.jfree.chart.util.AbstractObjectList.clone": "/**\n     * Clones the list of objects.  The objects in the list are not cloned, so \n     * this is method makes a 'shallow' copy of the list.\n     *\n     * @return A clone.\n     * \n     * @throws CloneNotSupportedException if an item in the list does not \n     *         support cloning.\n     */\n",
"org.jfree.chart.util.AbstractObjectList.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.util.AbstractObjectList.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.util.ShapeList.getShape": "/**\n     * Returns a {@link Shape} object from the list.\n     *\n     * @param index the index (zero-based).\n     *\n     * @return The object.\n     */\n",
"org.jfree.chart.util.ShapeList.setShape": "/**\n     * Sets the {@link Shape} for an item in the list.  The list is expanded\n     * if necessary.\n     *\n     * @param index  the index (zero-based).\n     * @param shape  the {@link Shape}.\n     */\n",
"org.jfree.chart.util.ShapeList.clone": "/**\n     * Returns an independent copy of the list.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if an item in the list does not\n     *         support cloning.\n     */\n",
"org.jfree.chart.util.ShapeList.equals": "/**\n     * Tests the list for equality with another object (typically also a list).\n     *\n     * @param obj  the other object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.util.ShapeList.hashCode": "/**\n     * Returns a hash code value for the object.\n     *\n     * @return the hashcode\n     */\n",
"org.jfree.chart.util.ShapeList.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.util.ShapeList.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.util.Args.nullNotPermitted": "/**\n     * Throws an {@code IllegalArgumentException} if the supplied \n     * {@code param} is {@code null}.\n     *\n     * @param param  the parameter to check ({@code null} permitted).\n     * @param name  the name of the parameter (to use in the exception message\n     *     if {@code param} is {@code null}).\n     *\n     * @throws IllegalArgumentException  if {@code param} is \n     *     {@code null}.\n     */\n",
"org.jfree.chart.util.Args.requireNonNegative": "/**\n     * Throws an {@code IllegalArgumentException} if {@code value} is negative.\n     * \n     * @param value  the value.\n     * @param name  the parameter name (for use in the exception message).\n     */\n",
"org.jfree.chart.util.Args.requireNonNegative": "/**\n     * Throws an {@code IllegalArgumentException} if {@code value} is negative.\n     * \n     * @param value  the value.\n     * @param name  the parameter name (for use in the exception message).\n     */\n",
"org.jfree.chart.util.Args.requireInRange": "/**\n     * Checks that the value falls within the specified range and, if it does\n     * not, throws an {@code IllegalArgumentException}.\n     * \n     * @param value  the value.\n     * @param name  the parameter name.\n     * @param lowerBound  the lower bound of the permitted range.\n     * @param upperBound  the upper bound fo the permitted range.\n     */\n",
"org.jfree.chart.util.PaintUtils.equal": "/**\n     * Returns {@code true} if the two {@code Paint} objects are equal \n     * OR both {@code null}.  This method handles\n     * {@code GradientPaint}, {@code LinearGradientPaint} and \n     * {@code RadialGradientPaint} as a special cases, since those classes do\n     * not override the {@code equals()} method.\n     *\n     * @param p1  paint 1 ({@code null} permitted).\n     * @param p2  paint 2 ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.util.PaintUtils.colorToString": "/**\n     * Converts a color into a string. If the color is equal to one of the\n     * defined constant colors, that name is returned instead. Otherwise the\n     * color is returned as hex-string.\n     *\n     * @param c the color.\n     * @return the string for this color.\n     */\n",
"org.jfree.chart.util.PaintUtils.stringToColor": "/**\n     * Converts a given string into a color.\n     *\n     * @param value the string, either a name or a hex-string.\n     * @return the color.\n     */\n",
"org.jfree.chart.util.ObjectUtils.equal": "/**\n     * Returns {@code true} if the two objects are equal OR both\n     * {@code null}.\n     *\n     * @param o1 object 1 ({@code null} permitted).\n     * @param o2 object 2 ({@code null} permitted).\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.chart.util.ObjectUtils.hashCode": "/**\n     * Returns a hash code for an object, or zero if the object is\n     * {@code null}.\n     *\n     * @param object the object ({@code null} permitted).\n     * @return The object's hash code (or zero if the object is\n     *         {@code null}).\n     */\n",
"org.jfree.chart.util.ObjectUtils.clone": "/**\n     * Returns a clone of the specified object, if it can be cloned, otherwise\n     * throws a CloneNotSupportedException.\n     *\n     * @param object the object to clone ({@code null} not permitted).\n     * @return A clone of the specified object.\n     * @throws CloneNotSupportedException if the object cannot be cloned.\n     */\n",
"org.jfree.chart.util.ObjectUtils.deepClone": "/**\n     * Returns a new collection containing clones of all the items in the\n     * specified collection.\n     *\n     * @param collection the collection ({@code null} not permitted).\n     * @return A new collection containing clones of all the items in the\n     *         specified collection.\n     * @throws CloneNotSupportedException if any of the items in the collection\n     *                                    cannot be cloned.\n     */\n",
"org.jfree.chart.util.ResourceBundleWrapper.removeCodeBase": "/**\n     * Instantiate a {@link URLClassLoader} for resource lookups where the\n     * codeBase URL is removed.  This method is typically called from an\n     * applet's init() method.  If this method is never called, the\n     * {@code getBundle()} methods map to the standard\n     * {@link ResourceBundle} lookup methods.\n     *\n     * @param codeBase  the codeBase URL.\n     * @param urlClassLoader  the class loader.\n     */\n",
"org.jfree.chart.util.ResourceBundleWrapper.getBundle": "/**\n     * Finds and returns the specified resource bundle.\n     *\n     * @param baseName  the base name.\n     *\n     * @return The resource bundle.\n     */\n",
"org.jfree.chart.util.ResourceBundleWrapper.getBundle": "/**\n     * Finds and returns the specified resource bundle.\n     *\n     * @param baseName  the base name.\n     * @param locale  the locale.\n     *\n     * @return The resource bundle.\n     */\n",
"org.jfree.chart.util.ResourceBundleWrapper.getBundle": "/**\n     * Maps directly to {@code ResourceBundle.getBundle(baseName, locale,\n     * loader)}.\n     *\n     * @param baseName  the base name.\n     * @param locale  the locale.\n     * @param loader  the class loader.\n     *\n     * @return The resource bundle.\n     */\n",
"org.jfree.chart.util.HexNumberFormat.getNumberOfDigits": "/**\n     * Returns the number of digits.\n     *\n     * @return The number of digits.\n     */\n",
"org.jfree.chart.util.HexNumberFormat.setNumberOfDigits": "/**\n     * Sets the number of digits.\n     *\n     * @param digits  the number of digits.\n     */\n",
"org.jfree.chart.util.HexNumberFormat.format": "/**\n     * Formats the specified number as a hexadecimal string.  The decimal\n     * fraction is ignored.\n     *\n     * @param number  the number to format.\n     * @param toAppendTo  the buffer to append to (ignored here).\n     * @param pos  the field position (ignored here).\n     *\n     * @return The string buffer.\n     */\n",
"org.jfree.chart.util.HexNumberFormat.format": "/**\n     * Formats the specified number as a hexadecimal string.  The decimal\n     * fraction is ignored.\n     *\n     * @param number  the number to format.\n     * @param toAppendTo  the buffer to append to (ignored here).\n     * @param pos  the field position (ignored here).\n     *\n     * @return The string buffer.\n     */\n",
"org.jfree.chart.util.HexNumberFormat.parse": "/**\n     * Parsing is not implemented, so this method always returns\n     * {@code null}.\n     *\n     * @param source  ignored.\n     * @param parsePosition  ignored.\n     *\n     * @return Always {@code null}.\n     */\n",
"org.jfree.chart.util.LineUtils.clipLine": "/**\n     * Clips the specified line to the given rectangle.\n     *\n     * @param line  the line ({@code null} not permitted).\n     * @param rect  the clipping rectangle ({@code null} not permitted).\n     *\n     * @return {@code true} if the clipped line is visible, and\n     *     {@code false} otherwise.\n     */\n",
"org.jfree.chart.util.LineUtils.extendLine": "/**\n     * Creates a new line by extending an existing line.\n     *\n     * @param line  the line ({@code null} not permitted).\n     * @param startPercent  the amount to extend the line at the start point\n     *                      end.\n     * @param endPercent  the amount to extend the line at the end point end.\n     *\n     * @return A new line.\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.chart.util.DefaultShadowGenerator.getShadowSize": "/**\n     * Returns the shadow size.\n     *\n     * @return The shadow size.\n     */\n",
"org.jfree.chart.util.DefaultShadowGenerator.getShadowColor": "/**\n     * Returns the shadow color.\n     *\n     * @return The shadow color (never {@code null}).\n     */\n",
"org.jfree.chart.util.DefaultShadowGenerator.getShadowOpacity": "/**\n     * Returns the shadow opacity.\n     *\n     * @return The shadow opacity.\n     */\n",
"org.jfree.chart.util.DefaultShadowGenerator.getDistance": "/**\n     * Returns the shadow offset distance.\n     *\n     * @return The shadow offset distance (in Java2D units).\n     */\n",
"org.jfree.chart.util.DefaultShadowGenerator.getAngle": "/**\n     * Returns the shadow offset angle (in radians).\n     *\n     * @return The angle (in radians).\n     */\n",
"org.jfree.chart.util.DefaultShadowGenerator.calculateOffsetX": "/**\n     * Calculates the x-offset for drawing the shadow image relative to the\n     * source.\n     *\n     * @return The x-offset.\n     */\n",
"org.jfree.chart.util.DefaultShadowGenerator.calculateOffsetY": "/**\n     * Calculates the y-offset for drawing the shadow image relative to the\n     * source.\n     *\n     * @return The y-offset.\n     */\n",
"org.jfree.chart.util.DefaultShadowGenerator.createDropShadow": "/**\n     * Creates and returns an image containing the drop shadow for the\n     * specified source image.\n     *\n     * @param source  the source image.\n     *\n     * @return A new image containing the shadow.\n     */\n",
"org.jfree.chart.util.DefaultShadowGenerator.applyShadow": "/**\n     * Applies a shadow to the image.\n     *\n     * @param image  the image.\n     */\n",
"org.jfree.chart.util.DefaultShadowGenerator.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     * \n     * @param obj  the object ({@code null} permitted).\n     * \n     * @return The object.\n     */\n",
"org.jfree.chart.util.DefaultShadowGenerator.hashCode": "/**\n     * Returns a hash code for this instance.\n     * \n     * @return The hash code.\n     */\n",
"org.jfree.chart.util.DirectionalGradientPaintTransformer.transform": "/**\n     * Transforms a {@code GradientPaint} instance to fit some target \n     * shape.\n     * \n     * @param paint  the original paint (not {@code null}).\n     * @param target  the reference area (not {@code null}).\n     * \n     * @return A transformed paint.\n     */\n",
"org.jfree.chart.util.UnitType.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.chart.util.StringUtils.startsWithIgnoreCase": "/**\n     * Helper functions to query a strings start portion. The comparison is case insensitive.\n     *\n     * @param base  the base string.\n     * @param start  the starting text.\n     *\n     * @return true, if the string starts with the given starting text.\n     */\n",
"org.jfree.chart.util.StringUtils.endsWithIgnoreCase": "/**\n     * Helper functions to query a strings end portion. The comparison is case insensitive.\n     *\n     * @param base  the base string.\n     * @param end  the ending text.\n     *\n     * @return true, if the string ends with the given ending text.\n     */\n",
"org.jfree.chart.util.StringUtils.getLineSeparator": "/**\n     * Queries the system properties for the line separator. If access\n     * to the System properties is forbidden, the UNIX default is returned.\n     *\n     * @return the line separator.\n     */\n",
"org.jfree.chart.util.AttrStringUtils.getTextBounds": "/**\n     * Returns the bounds for the attributed string.\n     * \n     * @param text  the attributed string ({@code null} not permitted).\n     * @param g2  the graphics target ({@code null} not permitted).\n     * \n     * @return The bounds (never {@code null}).\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.chart.util.AttrStringUtils.drawRotatedString": "/**\n     * Draws the attributed string at {@code (x, y)}, rotated by the \n     * specified angle about {@code (x, y)}.\n     * \n     * @param text  the attributed string ({@code null} not permitted).\n     * @param g2  the graphics output target.\n     * @param angle  the angle.\n     * @param x  the x-coordinate.\n     * @param y  the y-coordinate.\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.util.AttrStringUtils.drawRotatedString": "/**\n     * Draws the attributed string at {@code (textX, textY)}, rotated by \n     * the specified angle about {@code (rotateX, rotateY)}.\n     * \n     * @param text  the attributed string ({@code null} not permitted).\n     * @param g2  the graphics output target.\n     * @param textX  the x-coordinate for the text.\n     * @param textY  the y-coordinate for the text.\n     * @param angle  the rotation angle (in radians).\n     * @param rotateX  the x-coordinate for the rotation point.\n     * @param rotateY  the y-coordinate for the rotation point.\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.util.AttrStringUtils.drawRotatedString": "/**\n     * Draws the string anchored to {@code (x, y)}, rotated by the \n     * specified angle about {@code (rotationX, rotationY)}.\n     * \n     * @param text  the text ({@code null} not permitted).\n     * @param g2  the graphics target.\n     * @param x  the x-coordinate for the text location.\n     * @param y  the y-coordinate for the text location.\n     * @param textAnchor  the text anchor point.\n     * @param angle  the rotation (in radians).\n     * @param rotationX  the x-coordinate for the rotation point.\n     * @param rotationY  the y-coordinate for the rotation point.\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.util.AttrStringUtils.drawRotatedString": "/**\n     * Draws a rotated string.\n     * \n     * @param text  the text to draw.\n     * @param g2  the graphics target.\n     * @param x  the x-coordinate for the text location.\n     * @param y  the y-coordinate for the text location.\n     * @param textAnchor  the text anchor point.\n     * @param angle  the rotation (in radians).\n     * @param rotationAnchor  the rotation anchor point.\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.chart.util.AttrStringUtils.deriveRotationAnchorOffsets": "/**\n     * A utility method that calculates the rotation anchor offsets for a\n     * string.  These offsets are relative to the text starting coordinate\n     * (BASELINE_LEFT).\n     *\n     * @param g2  the graphics device.\n     * @param text  the text.\n     * @param anchor  the anchor point.\n     *\n     * @return  The offsets.\n     */\n",
"org.jfree.chart.util.PublicCloneable.clone": "/**\n     * Returns a clone of the object.\n     * \n     * @return A clone.\n     * \n     * @throws CloneNotSupportedException if cloning is not supported for some reason.\n     */\n",
"org.jfree.chart.util.PaintList.getPaint": "/**\n     * Returns a {@link Paint} object from the list.\n     *\n     * @param index the index (zero-based).\n     *\n     * @return The object.\n     */\n",
"org.jfree.chart.util.PaintList.setPaint": "/**\n     * Sets the {@link Paint} for an item in the list.  The list is expanded if necessary.\n     *\n     * @param index  the index (zero-based).\n     * @param paint  the {@link Paint}.\n     */\n",
"org.jfree.chart.util.PaintList.equals": "/**\n     * Tests the list for equality with another object (typically also a list).\n     *\n     * @param obj  the other object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.util.PaintList.hashCode": "/**\n     * Returns a hash code value for the object.\n     *\n     * @return the hashcode\n     */\n",
"org.jfree.chart.util.PaintList.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.util.PaintList.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.util.StrokeList.getStroke": "/**\n     * Returns a {@link Stroke} object from the list.\n     *\n     * @param index the index (zero-based).\n     *\n     * @return The object.\n     */\n",
"org.jfree.chart.util.StrokeList.setStroke": "/**\n     * Sets the {@link Stroke} for an item in the list.  The list is expanded if necessary.\n     *\n     * @param index  the index (zero-based).\n     * @param stroke  the {@link Stroke}.\n     */\n",
"org.jfree.chart.util.StrokeList.clone": "/**\n     * Returns an independent copy of the list.\n     * \n     * @return A clone.\n     * \n     * @throws CloneNotSupportedException if an item in the list cannot be cloned.\n     */\n",
"org.jfree.chart.util.StrokeList.equals": "/**\n     * Tests the list for equality with another object (typically also a list).\n     *\n     * @param o  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.util.StrokeList.hashCode": "/**\n     * Returns a hash code value for the object.\n     *\n     * @return the hashcode\n     */\n",
"org.jfree.chart.util.StrokeList.writeObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n",
"org.jfree.chart.util.StrokeList.readObject": "/**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n",
"org.jfree.chart.util.SerialUtils.isSerializable": "/**\n     * Returns {@code true} if a class implements {@code Serializable}\n     * and {@code false} otherwise.\n     *\n     * @param c  the class.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.util.SerialUtils.readPaint": "/**\n     * Reads a {@code Paint} object that has been serialised by the\n     * {@link #writePaint(Paint, ObjectOutputStream)} method.\n     *\n     * @param stream  the input stream ({@code null} not permitted).\n     *\n     * @return The paint object (possibly {@code null}).\n     *\n     * @throws IOException  if there is an I/O problem.\n     * @throws ClassNotFoundException  if there is a problem loading a class.\n     */\n",
"org.jfree.chart.util.SerialUtils.writePaint": "/**\n     * Serialises a {@code Paint} object.\n     *\n     * @param paint  the paint object ({@code null} permitted).\n     * @param stream  the output stream ({@code null} not permitted).\n     *\n     * @throws IOException if there is an I/O error.\n     */\n",
"org.jfree.chart.util.SerialUtils.readStroke": "/**\n     * Reads a {@code Stroke} object that has been serialised by the\n     * {@link #writeStroke(Stroke, ObjectOutputStream)} method.\n     *\n     * @param stream  the input stream ({@code null} not permitted).\n     *\n     * @return The stroke object (possibly {@code null}).\n     *\n     * @throws IOException  if there is an I/O problem.\n     * @throws ClassNotFoundException  if there is a problem loading a class.\n     */\n",
"org.jfree.chart.util.SerialUtils.writeStroke": "/**\n     * Serialises a {@code Stroke} object.  This code handles the\n     * {@code BasicStroke} class which is the only {@code Stroke}\n     * implementation provided by the JDK (and isn't directly\n     * {@code Serializable}).\n     *\n     * @param stroke  the stroke object ({@code null} permitted).\n     * @param stream  the output stream ({@code null} not permitted).\n     *\n     * @throws IOException if there is an I/O error.\n     */\n",
"org.jfree.chart.util.SerialUtils.readComposite": "/**\n     * Reads a {@code Composite} object that has been serialised by the\n     * {@link #writeComposite(Composite, ObjectOutputStream)}\n     * method.\n     *\n     * @param stream  the input stream ({@code null} not permitted).\n     *\n     * @return The composite object (possibly {@code null}).\n     *\n     * @throws IOException  if there is an I/O problem.\n     * @throws ClassNotFoundException  if there is a problem loading a class.\n     * \n     * @since 1.0.17\n     */\n",
"org.jfree.chart.util.SerialUtils.writeComposite": "/**\n     * Serialises a {@code Composite} object.\n     *\n     * @param composite  the composite object ({@code null} permitted).\n     * @param stream  the output stream ({@code null} not permitted).\n     *\n     * @throws IOException if there is an I/O error.\n     * \n     * @since 1.0.17\n     */\n",
"org.jfree.chart.util.SerialUtils.readShape": "/**\n     * Reads a {@code Shape} object that has been serialised by the\n     * {@link #writeShape(Shape, ObjectOutputStream)} method.\n     *\n     * @param stream  the input stream ({@code null} not permitted).\n     *\n     * @return The shape object (possibly {@code null}).\n     *\n     * @throws IOException  if there is an I/O problem.\n     * @throws ClassNotFoundException  if there is a problem loading a class.\n     */\n",
"org.jfree.chart.util.SerialUtils.writeShape": "/**\n     * Serialises a {@code Shape} object.\n     *\n     * @param shape  the shape object ({@code null} permitted).\n     * @param stream  the output stream ({@code null} not permitted).\n     *\n     * @throws IOException if there is an I/O error.\n     */\n",
"org.jfree.chart.util.SerialUtils.readPoint2D": "/**\n     * Reads a {@code Point2D} object that has been serialised by the\n     * {@link #writePoint2D(Point2D, ObjectOutputStream)} method.\n     *\n     * @param stream  the input stream ({@code null} not permitted).\n     *\n     * @return The point object (possibly {@code null}).\n     *\n     * @throws IOException  if there is an I/O problem.\n     */\n",
"org.jfree.chart.util.SerialUtils.writePoint2D": "/**\n     * Serialises a {@code Point2D} object.\n     *\n     * @param p  the point object ({@code null} permitted).\n     * @param stream  the output stream ({@code null} not permitted).\n     *\n     * @throws IOException if there is an I/O error.\n     */\n",
"org.jfree.chart.util.SerialUtils.readAttributedString": "/**\n     * Reads a {@code AttributedString} object that has been serialised by\n     * the {@link #writeAttributedString(AttributedString,\n     * ObjectOutputStream)} method.\n     *\n     * @param stream  the input stream ({@code null} not permitted).\n     *\n     * @return The attributed string object (possibly {@code null}).\n     *\n     * @throws IOException  if there is an I/O problem.\n     * @throws ClassNotFoundException  if there is a problem loading a class.\n     */\n",
"org.jfree.chart.util.SerialUtils.writeAttributedString": "/**\n     * Serialises an {@code AttributedString} object.\n     *\n     * @param as  the attributed string object ({@code null} permitted).\n     * @param stream  the output stream ({@code null} not permitted).\n     *\n     * @throws IOException if there is an I/O error.\n     */\n",
"org.jfree.chart.util.CloneUtils.cloneList": "/**\n     * Returns a list containing cloned copies of the items in the source\n     * list.\n     * \n     * @param source  the source list ({@code null} not permitted).\n     * \n     * @return A new list. \n     */\n",
"org.jfree.chart.util.CloneUtils.cloneMapValues": "/**\n     * Returns a new map that contains the same keys and cloned copied of the\n     * values.\n     * \n     * @param source  the source map ({@code null} not permitted).\n     * \n     * @return A new map. \n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.chart.util.ExportUtils.isJFreeSVGAvailable": "/**\n     * Returns {@code true} if JFreeSVG is on the classpath, and \n     * {@code false} otherwise.  The JFreeSVG library can be found at\n     * http://www.jfree.org/jfreesvg/\n     * \n     * @return A boolean.\n     */\n",
"org.jfree.chart.util.ExportUtils.isOrsonPDFAvailable": "/**\n     * Returns {@code true} if OrsonPDF is on the classpath, and \n     * {@code false} otherwise.  The OrsonPDF library can be found at\n     * http://www.object-refinery.com/orsonpdf/\n     * \n     * @return A boolean.\n     */\n",
"org.jfree.chart.util.ExportUtils.writeAsSVG": "/**\n     * Writes the current content to the specified file in SVG format.  This \n     * will only work when the JFreeSVG library is found on the classpath.\n     * Reflection is used to ensure there is no compile-time dependency on\n     * JFreeSVG.\n     * \n     * @param drawable  the drawable ({@code null} not permitted).\n     * @param w  the chart width.\n     * @param h  the chart height.\n     * @param file  the output file ({@code null} not permitted).\n     */\n",
"org.jfree.chart.util.ExportUtils.writeAsPDF": "/**\n     * Writes a {@link Drawable} to the specified file in PDF format.  This \n     * will only work when the OrsonPDF library is found on the classpath.\n     * Reflection is used to ensure there is no compile-time dependency on\n     * OrsonPDF.\n     * \n     * @param drawable  the drawable ({@code null} not permitted).\n     * @param w  the chart width.\n     * @param h  the chart height.\n     * @param file  the output file ({@code null} not permitted).\n     */\n",
"org.jfree.chart.util.ExportUtils.writeAsPNG": "/**\n     * Writes the current content to the specified file in PNG format.\n     * \n     * @param drawable  the drawable ({@code null} not permitted).\n     * @param w  the chart width.\n     * @param h  the chart height.\n     * @param file  the output file ({@code null} not permitted).\n     * \n     * @throws FileNotFoundException if the file is not found.\n     * @throws IOException if there is an I/O problem.\n     */\n",
"org.jfree.chart.util.ExportUtils.writeAsJPEG": "/**\n     * Writes the current content to the specified file in JPEG format.\n     * \n     * @param drawable  the drawable ({@code null} not permitted).\n     * @param w  the chart width.\n     * @param h  the chart height.\n     * @param file  the output file ({@code null} not permitted).\n     * \n     * @throws FileNotFoundException if the file is not found.\n     * @throws IOException if there is an I/O problem.\n     */\n",
"org.jfree.chart.util.LogFormat.getExponentFormat": "/**\n     * Returns the number format used for the exponent.\n     *\n     * @return The number format (never {@code null}).\n     *\n     * @since 1.0.13.\n     */\n",
"org.jfree.chart.util.LogFormat.setExponentFormat": "/**\n     * Sets the number format used for the exponent.\n     *\n     * @param format  the formatter ({@code null} not permitted).\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.chart.util.LogFormat.calculateLog": "/**\n     * Calculates the log of a given value.\n     *\n     * @param value  the value.\n     *\n     * @return The log of the value.\n     */\n",
"org.jfree.chart.util.LogFormat.format": "/**\n     * Returns a formatted representation of the specified number.\n     *\n     * @param number  the number.\n     * @param toAppendTo  the string buffer to append to.\n     * @param pos  the position.\n     *\n     * @return A string buffer containing the formatted value.\n     */\n",
"org.jfree.chart.util.LogFormat.format": "/**\n     * Formats the specified number as a hexadecimal string.  The decimal\n     * fraction is ignored.\n     *\n     * @param number  the number to format.\n     * @param toAppendTo  the buffer to append to (ignored here).\n     * @param pos  the field position (ignored here).\n     *\n     * @return The string buffer.\n     */\n",
"org.jfree.chart.util.LogFormat.parse": "/**\n     * Parsing is not implemented, so this method always returns\n     * {@code null}.\n     *\n     * @param source  ignored.\n     * @param parsePosition  ignored.\n     *\n     * @return Always {@code null}.\n     */\n",
"org.jfree.chart.util.LogFormat.equals": "/**\n     * Tests this formatter for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.util.LogFormat.clone": "/**\n     * Returns a clone of this instance.\n     *\n     * @return A clone.\n     */\n",
"org.jfree.chart.util.HMSNumberFormat.format": "/**\n     * Formats the specified number as a string of the form HH:MM:SS.  The \n     * decimal fraction is ignored.\n     *\n     * @param number  the number to format.\n     * @param toAppendTo  the buffer to append to (ignored here).\n     * @param pos  the field position (ignored here).\n     *\n     * @return The string buffer.\n     */\n",
"org.jfree.chart.util.HMSNumberFormat.format": "/**\n     * Formats the specified number as a string of the form HH:MM:SS.\n     *\n     * @param number  the number to format.\n     * @param toAppendTo  the buffer to append to (ignored here).\n     * @param pos  the field position (ignored here).\n     *\n     * @return The string buffer.\n     */\n",
"org.jfree.chart.util.HMSNumberFormat.parse": "/**\n     * Parsing is not implemented, so this method always returns\n     * {@code null}.\n     *\n     * @param source  ignored.\n     * @param parsePosition  ignored.\n     *\n     * @return Always {@code null}.\n     */\n",
"org.jfree.chart.util.TableOrder.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.chart.util.BooleanList.getBoolean": "/**\n     * Returns a {@link Boolean} from the list.\n     *\n     * @param index the index (zero-based).\n     *\n     * @return a {@link Boolean} from the list.\n     */\n",
"org.jfree.chart.util.BooleanList.setBoolean": "/**\n     * Sets the value for an item in the list.  The list is expanded if \n     * necessary.\n     *\n     * @param index  the index (zero-based).\n     * @param b  the boolean.\n     */\n",
"org.jfree.chart.util.BooleanList.equals": "/**\n     * Tests the list for equality with another object (typically also a list).\n     *\n     * @param o  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.util.BooleanList.hashCode": "/**\n     * Returns a hash code value for the object.\n     *\n     * @return the hashcode\n     */\n",
"org.jfree.chart.util.ShadowGenerator.createDropShadow": "/**\n     * Creates and returns an image containing the drop shadow for the\n     * specified source image.\n     *\n     * @param source  the source image.\n     *\n     * @return A new image containing the shadow.\n     */\n",
"org.jfree.chart.util.ShadowGenerator.calculateOffsetX": "/**\n     * Calculates the x-offset for drawing the shadow image relative to the\n     * source.\n     *\n     * @return The x-offset.\n     */\n",
"org.jfree.chart.util.ShadowGenerator.calculateOffsetY": "/**\n     * Calculates the y-offset for drawing the shadow image relative to the\n     * source.\n     *\n     * @return The y-offset.\n     */\n",
"org.jfree.chart.util.XYCoordinateType.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.chart.util.XYCoordinateType.equals": "/**\n     * Returns {@code true} if this object is equal to the specified\n     * object, and {@code false} otherwise.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.util.XYCoordinateType.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     *\n     * @return The object.\n     *\n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.chart.util.SortOrder.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.chart.util.ShapeUtils.clone": "/**\n     * Returns a clone of the specified shape, or {@code null}.  At the\n     * current time, this method supports cloning for instances of\n     * {@code Line2D}, {@code RectangularShape}, {@code Area}\n     * and {@code GeneralPath}.\n     * <p>\n     * {@code RectangularShape} includes {@code Arc2D},\n     * {@code Ellipse2D}, {@code Rectangle2D},\n     * {@code RoundRectangle2D}.\n     *\n     * @param shape  the shape to clone ({@code null} permitted,\n     *               returns {@code null}).\n     *\n     * @return A clone or {@code null}.\n     */\n",
"org.jfree.chart.util.ShapeUtils.equal": "/**\n     * Tests two shapes for equality.  If both shapes are {@code null},\n     * this method will return {@code true}.\n     * <p>\n     * In the current implementation, the following shapes are supported:\n     * {@code Ellipse2D}, {@code Line2D} and {@code Rectangle2D}\n     * (implicit).\n     *\n     * @param s1  the first shape ({@code null} permitted).\n     * @param s2  the second shape ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.util.ShapeUtils.equal": "/**\n     * Compares two lines are returns {@code true} if they are equal or\n     * both {@code null}.\n     *\n     * @param l1  the first line ({@code null} permitted).\n     * @param l2  the second line ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.util.ShapeUtils.equal": "/**\n     * Compares two ellipses and returns {@code true} if they are equal or\n     * both {@code null}.\n     *\n     * @param e1  the first ellipse ({@code null} permitted).\n     * @param e2  the second ellipse ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.util.ShapeUtils.equal": "/**\n     * Compares two arcs and returns {@code true} if they are equal or\n     * both {@code null}.\n     *\n     * @param a1  the first arc ({@code null} permitted).\n     * @param a2  the second arc ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.util.ShapeUtils.equal": "/**\n     * Tests two polygons for equality.  If both are {@code null} this\n     * method returns {@code true}.\n     *\n     * @param p1  polygon 1 ({@code null} permitted).\n     * @param p2  polygon 2 ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.util.ShapeUtils.equal": "/**\n     * Tests two polygons for equality.  If both are {@code null} this\n     * method returns {@code true}.\n     *\n     * @param p1  path 1 ({@code null} permitted).\n     * @param p2  path 2 ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.util.ShapeUtils.createTranslatedShape": "/**\n     * Creates and returns a translated shape.\n     *\n     * @param shape  the shape ({@code null} not permitted).\n     * @param transX  the x translation (in Java2D space).\n     * @param transY  the y translation (in Java2D space).\n     *\n     * @return The translated shape.\n     */\n",
"org.jfree.chart.util.ShapeUtils.createTranslatedShape": "/**\n     * Translates a shape to a new location such that the anchor point\n     * (relative to the rectangular bounds of the shape) aligns with the\n     * specified (x, y) coordinate in Java2D space.\n     *\n     * @param shape  the shape ({@code null} not permitted).\n     * @param anchor  the anchor ({@code null} not permitted).\n     * @param locationX  the x-coordinate (in Java2D space).\n     * @param locationY  the y-coordinate (in Java2D space).\n     *\n     * @return A new and translated shape.\n     */\n",
"org.jfree.chart.util.ShapeUtils.rotateShape": "/**\n     * Rotates a shape about the specified coordinates.\n     *\n     * @param base  the shape ({@code null} permitted, returns\n     *              {@code null}).\n     * @param angle  the angle (in radians).\n     * @param x  the x coordinate for the rotation point (in Java2D space).\n     * @param y  the y coordinate for the rotation point (in Java2D space).\n     *\n     * @return the rotated shape.\n     */\n",
"org.jfree.chart.util.ShapeUtils.drawRotatedShape": "/**\n     * Draws a shape with the specified rotation about {@code (x, y)}.\n     *\n     * @param g2  the graphics device ({@code null} not permitted).\n     * @param shape  the shape ({@code null} not permitted).\n     * @param angle  the angle (in radians).\n     * @param x  the x coordinate for the rotation point.\n     * @param y  the y coordinate for the rotation point.\n     */\n",
"org.jfree.chart.util.ShapeUtils.createDiagonalCross": "/**\n     * Creates a diagonal cross shape.\n     *\n     * @param l  the length of each 'arm'.\n     * @param t  the thickness.\n     *\n     * @return A diagonal cross shape.\n     */\n",
"org.jfree.chart.util.ShapeUtils.createRegularCross": "/**\n     * Creates a diagonal cross shape.\n     *\n     * @param l  the length of each 'arm'.\n     * @param t  the thickness.\n     *\n     * @return A diagonal cross shape.\n     */\n",
"org.jfree.chart.util.ShapeUtils.createDiamond": "/**\n     * Creates a diamond shape.\n     *\n     * @param s  the size factor (equal to half the height of the diamond).\n     *\n     * @return A diamond shape.\n     */\n",
"org.jfree.chart.util.ShapeUtils.createUpTriangle": "/**\n     * Creates a triangle shape that points upwards.\n     *\n     * @param s  the size factor (equal to half the height of the triangle).\n     *\n     * @return A triangle shape.\n     */\n",
"org.jfree.chart.util.ShapeUtils.createDownTriangle": "/**\n     * Creates a triangle shape that points downwards.\n     *\n     * @param s  the size factor (equal to half the height of the triangle).\n     *\n     * @return A triangle shape.\n     */\n",
"org.jfree.chart.util.ShapeUtils.createLineRegion": "/**\n     * Creates a region surrounding a line segment by 'widening' the line\n     * segment.  A typical use for this method is the creation of a\n     * 'clickable' region for a line that is displayed on-screen.\n     *\n     * @param line  the line ({@code null} not permitted).\n     * @param width  the width of the region.\n     *\n     * @return A region that surrounds the line.\n     */\n",
"org.jfree.chart.util.ShapeUtils.getPointInRectangle": "/**\n     * Returns a point based on (x, y) but constrained to be within the bounds\n     * of a given rectangle.\n     *\n     * @param x  the x-coordinate.\n     * @param y  the y-coordinate.\n     * @param area  the constraining rectangle ({@code null} not\n     *              permitted).\n     *\n     * @return A point within the rectangle.\n     *\n     * @throws NullPointerException if {@code area} is {@code null}.\n     */\n",
"org.jfree.chart.util.ShapeUtils.contains": "/**\n     * Checks, whether the given rectangle1 fully contains rectangle 2\n     * (even if rectangle 2 has a height or width of zero!).\n     *\n     * @param rect1  the first rectangle.\n     * @param rect2  the second rectangle.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.util.ShapeUtils.intersects": "/**\n     * Checks, whether the given rectangle1 fully contains rectangle 2\n     * (even if rectangle 2 has a height or width of zero!).\n     *\n     * @param rect1  the first rectangle.\n     * @param rect2  the second rectangle.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.util.ShapeUtils.isPointInRect": "/**\n     * Returns {@code true} if the specified point (x, y) falls within or\n     * on the boundary of the specified rectangle.\n     *\n     * @param rect  the rectangle ({@code null} not permitted).\n     * @param x  the x-coordinate.\n     * @param y  the y-coordinate.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.util.ArrayUtils.clone": "/**\n     * Clones a two dimensional array of floats.\n     *\n     * @param array  the array.\n     *\n     * @return A clone of the array.\n     */\n",
"org.jfree.chart.util.ArrayUtils.equalReferencesInArrays": "/**\n     * Returns {@code true} if all the references in {@code array1}\n     * are equal to all the references in {@code array2} (two\n     * {@code null} references are considered equal for this test).\n     *\n     * @param array1  the first array ({@code null} permitted).\n     * @param array2  the second array ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.util.ArrayUtils.equal": "/**\n     * Tests two float arrays for equality.\n     *\n     * @param array1  the first array ({@code null} permitted).\n     * @param array2  the second arrray ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.util.ArrayUtils.hasDuplicateItems": "/**\n     * Returns {@code true} if any two items in the array are equal to\n     * one another.  Any {@code null} values in the array are ignored.\n     *\n     * @param array  the array to check.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.util.ArrayUtils.compareVersionArrays": "/**\n     * Compares the initial elements of two arrays.\n     *\n     * @param a1  array 1.\n     * @param a2  array 2.\n     *\n     * @return An integer showing the relative ordering.\n     */\n",
"org.jfree.chart.util.RelativeDateFormat.getBaseMillis": "/**\n     * Returns the base date/time used to calculate the elapsed time for\n     * display.\n     *\n     * @return The base date/time in milliseconds since 1-Jan-1970.\n     *\n     * @see #setBaseMillis(long)\n     */\n",
"org.jfree.chart.util.RelativeDateFormat.setBaseMillis": "/**\n     * Sets the base date/time used to calculate the elapsed time for display.\n     * This should be specified in milliseconds using the same encoding as\n     * {@code java.util.Date}.\n     *\n     * @param baseMillis  the base date/time in milliseconds.\n     *\n     * @see #getBaseMillis()\n     */\n",
"org.jfree.chart.util.RelativeDateFormat.getShowZeroDays": "/**\n     * Returns the flag that controls whether or not zero day counts are\n     * shown in the formatted output.\n     *\n     * @return The flag.\n     *\n     * @see #setShowZeroDays(boolean)\n     */\n",
"org.jfree.chart.util.RelativeDateFormat.setShowZeroDays": "/**\n     * Sets the flag that controls whether or not zero day counts are shown\n     * in the formatted output.\n     *\n     * @param show  the flag.\n     *\n     * @see #getShowZeroDays()\n     */\n",
"org.jfree.chart.util.RelativeDateFormat.getShowZeroHours": "/**\n     * Returns the flag that controls whether or not zero hour counts are\n     * shown in the formatted output.\n     *\n     * @return The flag.\n     *\n     * @see #setShowZeroHours(boolean)\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.util.RelativeDateFormat.setShowZeroHours": "/**\n     * Sets the flag that controls whether or not zero hour counts are shown\n     * in the formatted output.\n     *\n     * @param show  the flag.\n     *\n     * @see #getShowZeroHours()\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.util.RelativeDateFormat.getPositivePrefix": "/**\n     * Returns the string that is prepended to the format if the relative time\n     * is positive.\n     *\n     * @return The string (never {@code null}).\n     *\n     * @see #setPositivePrefix(String)\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.util.RelativeDateFormat.setPositivePrefix": "/**\n     * Sets the string that is prepended to the format if the relative time is\n     * positive.\n     *\n     * @param prefix  the prefix ({@code null} not permitted).\n     *\n     * @see #getPositivePrefix()\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.chart.util.RelativeDateFormat.setDayFormatter": "/**\n     * Sets the formatter for the days.\n     *\n     * @param formatter  the formatter ({@code null} not permitted).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.util.RelativeDateFormat.getDaySuffix": "/**\n     * Returns the string that is appended to the day count.\n     *\n     * @return The string.\n     *\n     * @see #setDaySuffix(String)\n     */\n",
"org.jfree.chart.util.RelativeDateFormat.setDaySuffix": "/**\n     * Sets the string that is appended to the day count.\n     *\n     * @param suffix  the suffix ({@code null} not permitted).\n     *\n     * @see #getDaySuffix()\n     */\n",
"org.jfree.chart.util.RelativeDateFormat.setHourFormatter": "/**\n     * Sets the formatter for the hours.\n     *\n     * @param formatter  the formatter ({@code null} not permitted).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.util.RelativeDateFormat.getHourSuffix": "/**\n     * Returns the string that is appended to the hour count.\n     *\n     * @return The string.\n     *\n     * @see #setHourSuffix(String)\n     */\n",
"org.jfree.chart.util.RelativeDateFormat.setHourSuffix": "/**\n     * Sets the string that is appended to the hour count.\n     *\n     * @param suffix  the suffix ({@code null} not permitted).\n     *\n     * @see #getHourSuffix()\n     */\n",
"org.jfree.chart.util.RelativeDateFormat.setMinuteFormatter": "/**\n     * Sets the formatter for the minutes.\n     *\n     * @param formatter  the formatter ({@code null} not permitted).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.chart.util.RelativeDateFormat.getMinuteSuffix": "/**\n     * Returns the string that is appended to the minute count.\n     *\n     * @return The string.\n     *\n     * @see #setMinuteSuffix(String)\n     */\n",
"org.jfree.chart.util.RelativeDateFormat.setMinuteSuffix": "/**\n     * Sets the string that is appended to the minute count.\n     *\n     * @param suffix  the suffix ({@code null} not permitted).\n     *\n     * @see #getMinuteSuffix()\n     */\n",
"org.jfree.chart.util.RelativeDateFormat.getSecondSuffix": "/**\n     * Returns the string that is appended to the second count.\n     *\n     * @return The string.\n     *\n     * @see #setSecondSuffix(String)\n     */\n",
"org.jfree.chart.util.RelativeDateFormat.setSecondSuffix": "/**\n     * Sets the string that is appended to the second count.\n     *\n     * @param suffix  the suffix ({@code null} not permitted).\n     *\n     * @see #getSecondSuffix()\n     */\n",
"org.jfree.chart.util.RelativeDateFormat.setSecondFormatter": "/**\n     * Sets the formatter for the seconds and milliseconds.\n     *\n     * @param formatter  the formatter ({@code null} not permitted).\n     */\n",
"org.jfree.chart.util.RelativeDateFormat.format": "/**\n     * Formats the given date as the amount of elapsed time (relative to the\n     * base date specified in the constructor).\n     *\n     * @param date  the date.\n     * @param toAppendTo  the string buffer.\n     * @param fieldPosition  the field position.\n     *\n     * @return The formatted date.\n     */\n",
"org.jfree.chart.util.RelativeDateFormat.parse": "/**\n     * Parses the given string (not implemented).\n     *\n     * @param source  the date string.\n     * @param pos  the parse position.\n     *\n     * @return {@code null}, as this method has not been implemented.\n     */\n",
"org.jfree.chart.util.RelativeDateFormat.equals": "/**\n     * Tests this formatter for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.util.RelativeDateFormat.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.chart.util.RelativeDateFormat.clone": "/**\n     * Returns a clone of this instance.\n     *\n     * @return A clone.\n     */\n",
"org.jfree.chart.date.SerialDate.isValidWeekdayCode": "/**\n     * Returns {@code true} if the supplied integer code represents a \n     * valid day-of-the-week, and {@code false} otherwise.\n     *\n     * @param code  the code being checked for validity.\n     *\n     * @return {@code true} if the supplied integer code represents a \n     *         valid day-of-the-week, and {@code false} otherwise.\n     */\n",
"org.jfree.chart.date.SerialDate.stringToWeekdayCode": "/**\n     * Converts the supplied string to a day of the week.\n     *\n     * @param s  a string representing the day of the week.\n     *\n     * @return {@code -1} if the string is not convertable, the day of \n     *         the week otherwise.\n     */\n",
"org.jfree.chart.date.SerialDate.weekdayCodeToString": "/**\n     * Returns a string representing the supplied day-of-the-week.\n     * <P>\n     * Need to find a better approach.\n     *\n     * @param weekday  the day of the week.\n     *\n     * @return a string representing the supplied day-of-the-week.\n     */\n",
"org.jfree.chart.date.SerialDate.getMonths": "/**\n     * Returns an array of month names.\n     *\n     * @return an array of month names.\n     */\n",
"org.jfree.chart.date.SerialDate.getMonths": "/**\n     * Returns an array of month names.\n     *\n     * @param shortened  a flag indicating that shortened month names should \n     *                   be returned.\n     *\n     * @return an array of month names.\n     */\n",
"org.jfree.chart.date.SerialDate.isValidMonthCode": "/**\n     * Returns true if the supplied integer code represents a valid month.\n     *\n     * @param code  the code being checked for validity.\n     *\n     * @return {@code true} if the supplied integer code represents a \n     *         valid month.\n     */\n",
"org.jfree.chart.date.SerialDate.monthCodeToQuarter": "/**\n     * Returns the quarter for the specified month.\n     *\n     * @param code  the month code (1-12).\n     *\n     * @return the quarter that the month belongs to.\n     */\n",
"org.jfree.chart.date.SerialDate.monthCodeToString": "/**\n     * Returns a string representing the supplied month.\n     * <P>\n     * The string returned is the long form of the month name taken from the \n     * default locale.\n     *\n     * @param month  the month.\n     *\n     * @return a string representing the supplied month.\n     */\n",
"org.jfree.chart.date.SerialDate.monthCodeToString": "/**\n     * Returns a string representing the supplied month.\n     * <P>\n     * The string returned is the long or short form of the month name taken \n     * from the default locale.\n     *\n     * @param month  the month.\n     * @param shortened  if {@code true} return the abbreviation of the month.\n     *\n     * @return a string representing the supplied month.\n     */\n",
"org.jfree.chart.date.SerialDate.stringToMonthCode": "/**\n     * Converts a string to a month code.\n     * <P>\n     * This method will return one of the constants JANUARY, FEBRUARY, ..., \n     * DECEMBER that corresponds to the string.  If the string is not \n     * recognised, this method returns -1.\n     *\n     * @param s  the string to parse.\n     *\n     * @return {@code -1} if the string is not parseable, the month of the\n     *         year otherwise.\n     */\n",
"org.jfree.chart.date.SerialDate.isValidWeekInMonthCode": "/**\n     * Returns true if the supplied integer code represents a valid \n     * week-in-the-month, and false otherwise.\n     *\n     * @param code  the code being checked for validity.\n     * @return {@code true} if the supplied integer code represents a \n     *         valid week-in-the-month.\n     */\n",
"org.jfree.chart.date.SerialDate.isLeapYear": "/**\n     * Determines whether or not the specified year is a leap year.\n     *\n     * @param yyyy  the year (in the range 1900 to 9999).\n     *\n     * @return {@code true} if the specified year is a leap year.\n     */\n",
"org.jfree.chart.date.SerialDate.leapYearCount": "/**\n     * Returns the number of leap years from 1900 to the specified year \n     * INCLUSIVE.\n     * <P>\n     * Note that 1900 is not a leap year.\n     *\n     * @param yyyy  the year (in the range 1900 to 9999).\n     *\n     * @return the number of leap years from 1900 to the specified year.\n     */\n",
"org.jfree.chart.date.SerialDate.lastDayOfMonth": "/**\n     * Returns the number of the last day of the month, taking into account \n     * leap years.\n     *\n     * @param month  the month.\n     * @param yyyy  the year (in the range 1900 to 9999).\n     *\n     * @return the number of the last day of the month.\n     */\n",
"org.jfree.chart.date.SerialDate.addDays": "/**\n     * Creates a new date by adding the specified number of days to the base \n     * date.\n     *\n     * @param days  the number of days to add (can be negative).\n     * @param base  the base date.\n     *\n     * @return a new date.\n     */\n",
"org.jfree.chart.date.SerialDate.addMonths": "/**\n     * Creates a new date by adding the specified number of months to the base \n     * date.\n     * <P>\n     * If the base date is close to the end of the month, the day on the result\n     * may be adjusted slightly:  31 May + 1 month = 30 June.\n     *\n     * @param months  the number of months to add (can be negative).\n     * @param base  the base date.\n     *\n     * @return a new date.\n     */\n",
"org.jfree.chart.date.SerialDate.addYears": "/**\n     * Creates a new date by adding the specified number of years to the base \n     * date.\n     *\n     * @param years  the number of years to add (can be negative).\n     * @param base  the base date.\n     *\n     * @return A new date.\n     */\n",
"org.jfree.chart.date.SerialDate.getPreviousDayOfWeek": "/**\n     * Returns the latest date that falls on the specified day-of-the-week and \n     * is BEFORE the base date.\n     *\n     * @param targetWeekday  a code for the target day-of-the-week.\n     * @param base  the base date.\n     *\n     * @return the latest date that falls on the specified day-of-the-week and \n     *         is BEFORE the base date.\n     */\n",
"org.jfree.chart.date.SerialDate.getFollowingDayOfWeek": "/**\n     * Returns the earliest date that falls on the specified day-of-the-week\n     * and is AFTER the base date.\n     *\n     * @param targetWeekday  a code for the target day-of-the-week.\n     * @param base  the base date.\n     *\n     * @return the earliest date that falls on the specified day-of-the-week \n     *         and is AFTER the base date.\n     */\n",
"org.jfree.chart.date.SerialDate.getNearestDayOfWeek": "/**\n     * Returns the date that falls on the specified day-of-the-week and is\n     * CLOSEST to the base date.\n     *\n     * @param targetDOW  a code for the target day-of-the-week.\n     * @param base  the base date.\n     *\n     * @return the date that falls on the specified day-of-the-week and is \n     *         CLOSEST to the base date.\n     */\n",
"org.jfree.chart.date.SerialDate.getEndOfCurrentMonth": "/**\n     * Rolls the date forward to the last day of the month.\n     *\n     * @param base  the base date.\n     *\n     * @return a new serial date.\n     */\n",
"org.jfree.chart.date.SerialDate.weekInMonthToString": "/**\n     * Returns a string corresponding to the week-in-the-month code.\n     * <P>\n     * Need to find a better approach.\n     *\n     * @param count  an integer code representing the week-in-the-month.\n     *\n     * @return a string corresponding to the week-in-the-month code.\n     */\n",
"org.jfree.chart.date.SerialDate.relativeToString": "/**\n     * Returns a string representing the supplied 'relative'.\n     * <P>\n     * Need to find a better approach.\n     *\n     * @param relative  a constant representing the 'relative'.\n     *\n     * @return a string representing the supplied 'relative'.\n     */\n",
"org.jfree.chart.date.SerialDate.createInstance": "/**\n     * Factory method that returns an instance of some concrete subclass of \n     * {@link SerialDate}.\n     *\n     * @param day  the day (1-31).\n     * @param month  the month (1-12).\n     * @param yyyy  the year (in the range 1900 to 9999).\n     *\n     * @return An instance of {@link SerialDate}.\n     */\n",
"org.jfree.chart.date.SerialDate.createInstance": "/**\n     * Factory method that returns an instance of some concrete subclass of \n     * {@link SerialDate}.\n     *\n     * @param serial  the serial number for the day (1 January 1900 = 2).\n     *\n     * @return a instance of SerialDate.\n     */\n",
"org.jfree.chart.date.SerialDate.createInstance": "/**\n     * Factory method that returns an instance of a subclass of SerialDate.\n     *\n     * @param date  A Java date object.\n     *\n     * @return a instance of SerialDate.\n     */\n",
"org.jfree.chart.date.SerialDate.toSerial": "/**\n     * Returns the serial number for the date, where 1 January 1900 = 2 (this\n     * corresponds, almost, to the numbering system used in Microsoft Excel for\n     * Windows and Lotus 1-2-3).\n     *\n     * @return the serial number for the date.\n     */\n",
"org.jfree.chart.date.SerialDate.toDate": "/**\n     * Returns a java.util.Date.  Since java.util.Date has more precision than\n     * SerialDate, we need to define a convention for the 'time of day'.\n     *\n     * @return this as {@code java.util.Date}.\n     */\n",
"org.jfree.chart.date.SerialDate.getDescription": "/**\n     * Returns the description that is attached to the date.  It is not \n     * required that a date have a description, but for some applications it \n     * is useful.\n     *\n     * @return The description (possibly {@code null}).\n     */\n",
"org.jfree.chart.date.SerialDate.setDescription": "/**\n     * Sets the description for the date.\n     *\n     * @param description  the description for this date ({@code null}\n     *                     permitted).\n     */\n",
"org.jfree.chart.date.SerialDate.toString": "/**\n     * Converts the date to a string.\n     *\n     * @return  a string representation of the date.\n     */\n",
"org.jfree.chart.date.SerialDate.getYYYY": "/**\n     * Returns the year (assume a valid range of 1900 to 9999).\n     *\n     * @return the year.\n     */\n",
"org.jfree.chart.date.SerialDate.getMonth": "/**\n     * Returns the month (January = 1, February = 2, March = 3).\n     *\n     * @return the month of the year.\n     */\n",
"org.jfree.chart.date.SerialDate.getDayOfMonth": "/**\n     * Returns the day of the month.\n     *\n     * @return the day of the month.\n     */\n",
"org.jfree.chart.date.SerialDate.getDayOfWeek": "/**\n     * Returns the day of the week.\n     *\n     * @return the day of the week.\n     */\n",
"org.jfree.chart.date.SerialDate.compare": "/**\n     * Returns the difference (in days) between this date and the specified \n     * 'other' date.\n     * <P>\n     * The result is positive if this date is after the 'other' date and\n     * negative if it is before the 'other' date.\n     *\n     * @param other  the date being compared to.\n     *\n     * @return the difference between this and the other date.\n     */\n",
"org.jfree.chart.date.SerialDate.isOn": "/**\n     * Returns true if this SerialDate represents the same date as the \n     * specified SerialDate.\n     *\n     * @param other  the date being compared to.\n     *\n     * @return {@code true} if this SerialDate represents the same date as \n     *         the specified SerialDate.\n     */\n",
"org.jfree.chart.date.SerialDate.isBefore": "/**\n     * Returns true if this SerialDate represents an earlier date compared to\n     * the specified SerialDate.\n     *\n     * @param other  The date being compared to.\n     *\n     * @return {@code true} if this SerialDate represents an earlier date \n     *         compared to the specified SerialDate.\n     */\n",
"org.jfree.chart.date.SerialDate.isOnOrBefore": "/**\n     * Returns true if this SerialDate represents the same date as the \n     * specified SerialDate.\n     *\n     * @param other  the date being compared to.\n     *\n     * @return {@code true} if this SerialDate represents the same date\n     *         as the specified SerialDate.\n     */\n",
"org.jfree.chart.date.SerialDate.isAfter": "/**\n     * Returns true if this SerialDate represents the same date as the \n     * specified SerialDate.\n     *\n     * @param other  the date being compared to.\n     *\n     * @return {@code true} if this SerialDate represents the same date\n     *         as the specified SerialDate.\n     */\n",
"org.jfree.chart.date.SerialDate.isOnOrAfter": "/**\n     * Returns true if this SerialDate represents the same date as the \n     * specified SerialDate.\n     *\n     * @param other  the date being compared to.\n     *\n     * @return {@code true} if this SerialDate represents the same date\n     *         as the specified SerialDate.\n     */\n",
"org.jfree.chart.date.SerialDate.isInRange": "/**\n     * Returns {@code true} if this {@link SerialDate} is within the \n     * specified range (INCLUSIVE).  The date order of d1 and d2 is not \n     * important.\n     *\n     * @param d1  a boundary date for the range.\n     * @param d2  the other boundary date for the range.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.date.SerialDate.isInRange": "/**\n     * Returns {@code true} if this {@link SerialDate} is within the \n     * specified range (caller specifies whether or not the end-points are \n     * included).  The date order of d1 and d2 is not important.\n     *\n     * @param d1  a boundary date for the range.\n     * @param d2  the other boundary date for the range.\n     * @param include  a code that controls whether or not the start and end \n     *                 dates are included in the range.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.date.SerialDate.getPreviousDayOfWeek": "/**\n     * Returns the latest date that falls on the specified day-of-the-week and\n     * is BEFORE this date.\n     *\n     * @param targetDOW  a code for the target day-of-the-week.\n     *\n     * @return the latest date that falls on the specified day-of-the-week and\n     *         is BEFORE this date.\n     */\n",
"org.jfree.chart.date.SerialDate.getFollowingDayOfWeek": "/**\n     * Returns the earliest date that falls on the specified day-of-the-week\n     * and is AFTER this date.\n     *\n     * @param targetDOW  a code for the target day-of-the-week.\n     *\n     * @return the earliest date that falls on the specified day-of-the-week\n     *         and is AFTER this date.\n     */\n",
"org.jfree.chart.date.SerialDate.getNearestDayOfWeek": "/**\n     * Returns the nearest date that falls on the specified day-of-the-week.\n     *\n     * @param targetDOW  a code for the target day-of-the-week.\n     *\n     * @return the nearest date that falls on the specified day-of-the-week.\n     */\n",
"org.jfree.chart.date.SpreadsheetDate.toSerial": "/**\n     * Returns the serial number for the date, where 1 January 1900 = 2\n     * (this corresponds, almost, to the numbering system used in Microsoft\n     * Excel for Windows and Lotus 1-2-3).\n     *\n     * @return The serial number of this date.\n     */\n",
"org.jfree.chart.date.SpreadsheetDate.toDate": "/**\n     * Returns a {@code java.util.Date} equivalent to this date.\n     *\n     * @return The date.\n     */\n",
"org.jfree.chart.date.SpreadsheetDate.getYYYY": "/**\n     * Returns the year (assume a valid range of 1900 to 9999).\n     *\n     * @return The year.\n     */\n",
"org.jfree.chart.date.SpreadsheetDate.getMonth": "/**\n     * Returns the month (January = 1, February = 2, March = 3).\n     *\n     * @return The month of the year.\n     */\n",
"org.jfree.chart.date.SpreadsheetDate.getDayOfMonth": "/**\n     * Returns the day of the month.\n     *\n     * @return The day of the month.\n     */\n",
"org.jfree.chart.date.SpreadsheetDate.getDayOfWeek": "/**\n     * Returns a code representing the day of the week.\n     * <P>\n     * The codes are defined in the {@link SerialDate} class as: \n     * {@code SUNDAY}, {@code MONDAY}, {@code TUESDAY}, \n     * {@code WEDNESDAY}, {@code THURSDAY}, {@code FRIDAY}, and \n     * {@code SATURDAY}.\n     *\n     * @return A code representing the day of the week.\n     */\n",
"org.jfree.chart.date.SpreadsheetDate.equals": "/**\n     * Tests the equality of this date with an arbitrary object.\n     * <P>\n     * This method will return true ONLY if the object is an instance of the\n     * {@link SerialDate} base class, and it represents the same day as this\n     * {@link SpreadsheetDate}.\n     *\n     * @param object  the object to compare ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.date.SpreadsheetDate.hashCode": "/**\n     * Returns a hash code for this object instance.\n     * \n     * @return A hash code.\n     */\n",
"org.jfree.chart.date.SpreadsheetDate.compare": "/**\n     * Returns the difference (in days) between this date and the specified \n     * 'other' date.\n     *\n     * @param other  the date being compared to.\n     *\n     * @return The difference (in days) between this date and the specified \n     *         'other' date.\n     */\n",
"org.jfree.chart.date.SpreadsheetDate.compareTo": "/**\n     * Implements the method required by the Comparable interface.\n     * \n     * @param other  the other object (usually another SerialDate).\n     * \n     * @return A negative integer, zero, or a positive integer as this object \n     *         is less than, equal to, or greater than the specified object.\n     */\n",
"org.jfree.chart.date.SpreadsheetDate.isOn": "/**\n     * Returns true if this SerialDate represents the same date as the\n     * specified SerialDate.\n     *\n     * @param other  the date being compared to.\n     *\n     * @return {@code true} if this SerialDate represents the same date as\n     *         the specified SerialDate.\n     */\n",
"org.jfree.chart.date.SpreadsheetDate.isBefore": "/**\n     * Returns true if this SerialDate represents an earlier date compared to\n     * the specified SerialDate.\n     *\n     * @param other  the date being compared to.\n     *\n     * @return {@code true} if this SerialDate represents an earlier date\n     *         compared to the specified SerialDate.\n     */\n",
"org.jfree.chart.date.SpreadsheetDate.isOnOrBefore": "/**\n     * Returns true if this SerialDate represents the same date as the\n     * specified SerialDate.\n     *\n     * @param other  the date being compared to.\n     *\n     * @return {@code true} if this SerialDate represents the same date\n     *         as the specified SerialDate.\n     */\n",
"org.jfree.chart.date.SpreadsheetDate.isAfter": "/**\n     * Returns true if this SerialDate represents the same date as the\n     * specified SerialDate.\n     *\n     * @param other  the date being compared to.\n     *\n     * @return {@code true} if this SerialDate represents the same date\n     *         as the specified SerialDate.\n     */\n",
"org.jfree.chart.date.SpreadsheetDate.isOnOrAfter": "/**\n     * Returns true if this SerialDate represents the same date as the\n     * specified SerialDate.\n     *\n     * @param other  the date being compared to.\n     *\n     * @return {@code true} if this SerialDate represents the same date as\n     *         the specified SerialDate.\n     */\n",
"org.jfree.chart.date.SpreadsheetDate.isInRange": "/**\n     * Returns {@code true} if this {@link SerialDate} is within the \n     * specified range (INCLUSIVE).  The date order of d1 and d2 is not \n     * important.\n     *\n     * @param d1  a boundary date for the range.\n     * @param d2  the other boundary date for the range.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.chart.date.SpreadsheetDate.isInRange": "/**\n     * Returns true if this SerialDate is within the specified range (caller\n     * specifies whether or not the end-points are included).  The order of d1\n     * and d2 is not important.\n     *\n     * @param d1  one boundary date for the range.\n     * @param d2  a second boundary date for the range.\n     * @param include  a code that controls whether or not the start and end \n     *                 dates are included in the range.\n     *\n     * @return {@code true} if this SerialDate is within the specified \n     *         range.\n     */\n",
"org.jfree.chart.date.SpreadsheetDate.calcSerial": "/**\n     * Calculate the serial number from the day, month and year.\n     * <P>\n     * 1-Jan-1900 = 2.\n     *\n     * @param d  the day.\n     * @param m  the month.\n     * @param y  the year.\n     *\n     * @return the serial number from the day, month and year.\n     */\n",
"org.jfree.data.DefaultKeyedValues2D.getRowCount": "/**\n     * Returns the row count.\n     *\n     * @return The row count.\n     *\n     * @see #getColumnCount()\n     */\n",
"org.jfree.data.DefaultKeyedValues2D.getColumnCount": "/**\n     * Returns the column count.\n     *\n     * @return The column count.\n     *\n     * @see #getRowCount()\n     */\n",
"org.jfree.data.DefaultKeyedValues2D.getValue": "/**\n     * Returns the value for a given row and column.\n     *\n     * @param row  the row index.\n     * @param column  the column index.\n     *\n     * @return The value.\n     *\n     * @see #getValue(Comparable, Comparable)\n     */\n",
"org.jfree.data.DefaultKeyedValues2D.getRowKey": "/**\n     * Returns the key for a given row.\n     *\n     * @param row  the row index (in the range 0 to {@link #getRowCount()} - 1).\n     *\n     * @return The row key.\n     *\n     * @see #getRowIndex(Comparable)\n     * @see #getColumnKey(int)\n     */\n",
"org.jfree.data.DefaultKeyedValues2D.getRowIndex": "/**\n     * Returns the row index for a given key.\n     *\n     * @param key  the key ({@code null} not permitted).\n     *\n     * @return The row index.\n     *\n     * @see #getRowKey(int)\n     * @see #getColumnIndex(Comparable)\n     */\n",
"org.jfree.data.DefaultKeyedValues2D.getRowKeys": "/**\n     * Returns the row keys in an unmodifiable list.\n     *\n     * @return The row keys.\n     *\n     * @see #getColumnKeys()\n     */\n",
"org.jfree.data.DefaultKeyedValues2D.getColumnKey": "/**\n     * Returns the key for a given column.\n     *\n     * @param column  the column (in the range 0 to {@link #getColumnCount()}\n     *     - 1).\n     *\n     * @return The key.\n     *\n     * @see #getColumnIndex(Comparable)\n     * @see #getRowKey(int)\n     */\n",
"org.jfree.data.DefaultKeyedValues2D.getColumnIndex": "/**\n     * Returns the column index for a given key.\n     *\n     * @param key  the key ({@code null} not permitted).\n     *\n     * @return The column index.\n     *\n     * @see #getColumnKey(int)\n     * @see #getRowIndex(Comparable)\n     */\n",
"org.jfree.data.DefaultKeyedValues2D.getColumnKeys": "/**\n     * Returns the column keys in an unmodifiable list.\n     *\n     * @return The column keys.\n     *\n     * @see #getRowKeys()\n     */\n",
"org.jfree.data.DefaultKeyedValues2D.getValue": "/**\n     * Returns the value for the given row and column keys.  This method will\n     * throw an {@link UnknownKeyException} if either key is not defined in the\n     * data structure.\n     *\n     * @param rowKey  the row key ({@code null} not permitted).\n     * @param columnKey  the column key ({@code null} not permitted).\n     *\n     * @return The value (possibly {@code null}).\n     *\n     * @see #addValue(Number, Comparable, Comparable)\n     * @see #removeValue(Comparable, Comparable)\n     */\n",
"org.jfree.data.DefaultKeyedValues2D.addValue": "/**\n     * Adds a value to the table.  Performs the same function as\n     * #setValue(Number, Comparable, Comparable).\n     *\n     * @param value  the value ({@code null} permitted).\n     * @param rowKey  the row key ({@code null} not permitted).\n     * @param columnKey  the column key ({@code null} not permitted).\n     *\n     * @see #setValue(Number, Comparable, Comparable)\n     * @see #removeValue(Comparable, Comparable)\n     */\n",
"org.jfree.data.DefaultKeyedValues2D.setValue": "/**\n     * Adds or updates a value.\n     *\n     * @param value  the value ({@code null} permitted).\n     * @param rowKey  the row key ({@code null} not permitted).\n     * @param columnKey  the column key ({@code null} not permitted).\n     *\n     * @see #addValue(Number, Comparable, Comparable)\n     * @see #removeValue(Comparable, Comparable)\n     */\n",
"org.jfree.data.DefaultKeyedValues2D.removeValue": "/**\n     * Removes a value from the table by setting it to {@code null}.  If\n     * all the values in the specified row and/or column are now\n     * {@code null}, the row and/or column is removed from the table.\n     *\n     * @param rowKey  the row key ({@code null} not permitted).\n     * @param columnKey  the column key ({@code null} not permitted).\n     *\n     * @see #addValue(Number, Comparable, Comparable)\n     */\n",
"org.jfree.data.DefaultKeyedValues2D.removeRow": "/**\n     * Removes a row.\n     *\n     * @param rowIndex  the row index.\n     *\n     * @see #removeRow(Comparable)\n     * @see #removeColumn(int)\n     */\n",
"org.jfree.data.DefaultKeyedValues2D.removeRow": "/**\n     * Removes a row from the table.\n     *\n     * @param rowKey  the row key ({@code null} not permitted).\n     *\n     * @see #removeRow(int)\n     * @see #removeColumn(Comparable)\n     *\n     * @throws UnknownKeyException if {@code rowKey} is not defined in the\n     *         table.\n     */\n",
"org.jfree.data.DefaultKeyedValues2D.removeColumn": "/**\n     * Removes a column.\n     *\n     * @param columnIndex  the column index.\n     *\n     * @see #removeColumn(Comparable)\n     * @see #removeRow(int)\n     */\n",
"org.jfree.data.DefaultKeyedValues2D.removeColumn": "/**\n     * Removes a column from the table.\n     *\n     * @param columnKey  the column key ({@code null} not permitted).\n     *\n     * @throws UnknownKeyException if the table does not contain a column with\n     *     the specified key.\n     * @throws IllegalArgumentException if {@code columnKey} is\n     *     {@code null}.\n     *\n     * @see #removeColumn(int)\n     * @see #removeRow(Comparable)\n     */\n",
"org.jfree.data.DefaultKeyedValues2D.clear": "/**\n     * Clears all the data and associated keys.\n     */\n",
"org.jfree.data.DefaultKeyedValues2D.equals": "/**\n     * Tests if this object is equal to another.\n     *\n     * @param o  the other object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.DefaultKeyedValues2D.hashCode": "/**\n     * Returns a hash code.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.DefaultKeyedValues2D.clone": "/**\n     * Returns a clone.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  this class will not throw this\n     *         exception, but subclasses (if any) might.\n     */\n",
"org.jfree.data.function.Function2D.getValue": "/**\n     * Returns the value of the function ('y') for a given input ('x').\n     *\n     * @param x  the x-value.\n     *\n     * @return The function value.\n     */\n",
"org.jfree.data.function.NormalDistributionFunction2D.getMean": "/**\n     * Returns the mean for the function.\n     *\n     * @return The mean.\n     */\n",
"org.jfree.data.function.NormalDistributionFunction2D.getStandardDeviation": "/**\n     * Returns the standard deviation for the function.\n     *\n     * @return The standard deviation.\n     */\n",
"org.jfree.data.function.NormalDistributionFunction2D.getValue": "/**\n     * Returns the function value.\n     *\n     * @param x  the x-value.\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.function.NormalDistributionFunction2D.equals": "/**\n     * Tests this function for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.function.NormalDistributionFunction2D.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.function.PolynomialFunction2D.getCoefficients": "/**\n     * Returns a copy of the coefficients array that was specified in the\n     * constructor.\n     *\n     * @return The coefficients array.\n     */\n",
"org.jfree.data.function.PolynomialFunction2D.getOrder": "/**\n     * Returns the order of the polynomial.\n     *\n     * @return The order.\n     */\n",
"org.jfree.data.function.PolynomialFunction2D.getValue": "/**\n     * Returns the function value.\n     *\n     * @param x  the x-value.\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.function.PolynomialFunction2D.equals": "/**\n     * Tests this function for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.function.PolynomialFunction2D.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.function.LineFunction2D.getIntercept": "/**\n     * Returns the 'a' coefficient that was specified in the constructor.\n     *\n     * @return The 'a' coefficient.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.data.function.LineFunction2D.getSlope": "/**\n     * Returns the 'b' coefficient that was specified in the constructor.\n     *\n     * @return The 'b' coefficient.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.data.function.LineFunction2D.getValue": "/**\n     * Returns the function value.\n     *\n     * @param x  the x-value.\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.function.LineFunction2D.equals": "/**\n     * Tests this function for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.function.LineFunction2D.hashCode": "/**\n     * Returns a hash code for this instance.\n     * \n     * @return A hash code.\n     */\n",
"org.jfree.data.function.PowerFunction2D.getA": "/**\n     * Returns the 'a' coefficient that was specified in the constructor.\n     *\n     * @return The 'a' coefficient.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.data.function.PowerFunction2D.getB": "/**\n     * Returns the 'b' coefficient that was specified in the constructor.\n     *\n     * @return The 'b' coefficient.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.data.function.PowerFunction2D.getValue": "/**\n     * Returns the value of the function for a given input ('x').\n     *\n     * @param x  the x-value.\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.function.PowerFunction2D.equals": "/**\n     * Tests this function for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.function.PowerFunction2D.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.ItemKey.toJSONString": "/**\n     * Returns a JSON formatted string representing the key.\n     * \n     * @return A JSON formatted string.\n     */\n",
"org.jfree.data.KeyedObjects2D.getRowCount": "/**\n     * Returns the row count.\n     *\n     * @return The row count.\n     *\n     * @see #getColumnCount()\n     */\n",
"org.jfree.data.KeyedObjects2D.getColumnCount": "/**\n     * Returns the column count.\n     *\n     * @return The column count.\n     *\n     * @see #getRowCount()\n     */\n",
"org.jfree.data.KeyedObjects2D.getObject": "/**\n     * Returns the object for a given row and column.\n     *\n     * @param row  the row index (in the range 0 to getRowCount() - 1).\n     * @param column  the column index (in the range 0 to getColumnCount() - 1).\n     *\n     * @return The object (possibly {@code null}).\n     *\n     * @see #getObject(Comparable, Comparable)\n     */\n",
"org.jfree.data.KeyedObjects2D.getRowKey": "/**\n     * Returns the key for a given row.\n     *\n     * @param row  the row index (zero based).\n     *\n     * @return The row index.\n     *\n     * @see #getRowIndex(Comparable)\n     */\n",
"org.jfree.data.KeyedObjects2D.getRowIndex": "/**\n     * Returns the row index for a given key, or {@code -1} if the key\n     * is not recognised.\n     *\n     * @param key  the key ({@code null} not permitted).\n     *\n     * @return The row index.\n     *\n     * @see #getRowKey(int)\n     */\n",
"org.jfree.data.KeyedObjects2D.getRowKeys": "/**\n     * Returns the row keys.\n     *\n     * @return The row keys (never {@code null}).\n     *\n     * @see #getRowKeys()\n     */\n",
"org.jfree.data.KeyedObjects2D.getColumnKey": "/**\n     * Returns the key for a given column.\n     *\n     * @param column  the column.\n     *\n     * @return The key.\n     *\n     * @see #getColumnIndex(Comparable)\n     */\n",
"org.jfree.data.KeyedObjects2D.getColumnIndex": "/**\n     * Returns the column index for a given key, or {@code -1} if the key\n     * is not recognised.\n     *\n     * @param key  the key ({@code null} not permitted).\n     *\n     * @return The column index.\n     *\n     * @see #getColumnKey(int)\n     */\n",
"org.jfree.data.KeyedObjects2D.getColumnKeys": "/**\n     * Returns the column keys.\n     *\n     * @return The column keys (never {@code null}).\n     *\n     * @see #getRowKeys()\n     */\n",
"org.jfree.data.KeyedObjects2D.getObject": "/**\n     * Returns the object for the given row and column keys.\n     *\n     * @param rowKey  the row key ({@code null} not permitted).\n     * @param columnKey  the column key ({@code null} not permitted).\n     *\n     * @return The object (possibly {@code null}).\n     *\n     * @throws IllegalArgumentException if {@code rowKey} or\n     *         {@code columnKey} is {@code null}.\n     * @throws UnknownKeyException if {@code rowKey} or\n     *         {@code columnKey} is not recognised.\n     */\n",
"org.jfree.data.KeyedObjects2D.addObject": "/**\n     * Adds an object to the table.  Performs the same function as setObject().\n     *\n     * @param object  the object.\n     * @param rowKey  the row key ({@code null} not permitted).\n     * @param columnKey  the column key ({@code null} not permitted).\n     */\n",
"org.jfree.data.KeyedObjects2D.setObject": "/**\n     * Adds or updates an object.\n     *\n     * @param object  the object.\n     * @param rowKey  the row key ({@code null} not permitted).\n     * @param columnKey  the column key ({@code null} not permitted).\n     */\n",
"org.jfree.data.KeyedObjects2D.removeObject": "/**\n     * Removes an object from the table by setting it to {@code null}.  If\n     * all the objects in the specified row and/or column are now\n     * {@code null}, the row and/or column is removed from the table.\n     *\n     * @param rowKey  the row key ({@code null} not permitted).\n     * @param columnKey  the column key ({@code null} not permitted).\n     *\n     * @see #addObject(Object, Comparable, Comparable)\n     */\n",
"org.jfree.data.KeyedObjects2D.removeRow": "/**\n     * Removes an entire row from the table.\n     *\n     * @param rowIndex  the row index.\n     *\n     * @see #removeColumn(int)\n     */\n",
"org.jfree.data.KeyedObjects2D.removeRow": "/**\n     * Removes an entire row from the table.\n     *\n     * @param rowKey  the row key ({@code null} not permitted).\n     *\n     * @throws UnknownKeyException if {@code rowKey} is not recognised.\n     *\n     * @see #removeColumn(Comparable)\n     */\n",
"org.jfree.data.KeyedObjects2D.removeColumn": "/**\n     * Removes an entire column from the table.\n     *\n     * @param columnIndex  the column index.\n     *\n     * @see #removeRow(int)\n     */\n",
"org.jfree.data.KeyedObjects2D.removeColumn": "/**\n     * Removes an entire column from the table.\n     *\n     * @param columnKey  the column key ({@code null} not permitted).\n     *\n     * @throws UnknownKeyException if {@code rowKey} is not recognised.\n     *\n     * @see #removeRow(Comparable)\n     */\n",
"org.jfree.data.KeyedObjects2D.clear": "/**\n     * Clears all the data and associated keys.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.data.KeyedObjects2D.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the object to test ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.KeyedObjects2D.hashCode": "/**\n     * Returns a hashcode for this object.\n     *\n     * @return A hashcode.\n     */\n",
"org.jfree.data.KeyedObjects2D.clone": "/**\n     * Returns a clone.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  this class will not throw this\n     *         exception, but subclasses (if any) might.\n     */\n",
"org.jfree.data.general.DatasetGroup.getID": "/**\n     * Returns the identification string for this group.\n     *\n     * @return The identification string.\n     */\n",
"org.jfree.data.general.DatasetGroup.clone": "/**\n     * Clones the group.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException not by this class.\n     */\n",
"org.jfree.data.general.DatasetGroup.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.general.WaferMapDataset.addValue": "/**\n     * Sets a value in the dataset.\n     *\n     * @param value  the value.\n     * @param chipx  the x-index for the chip.\n     * @param chipy  the y-index for the chip.\n     */\n",
"org.jfree.data.general.WaferMapDataset.addValue": "/**\n     * Adds a value to the dataset.\n     *\n     * @param v  the value.\n     * @param x  the x-index.\n     * @param y  the y-index.\n     */\n",
"org.jfree.data.general.WaferMapDataset.setValue": "/**\n     * Sets a value in the dataset and updates min and max value entries.\n     *\n     * @param value  the value.\n     * @param chipx  the x-index.\n     * @param chipy  the y-index.\n     */\n",
"org.jfree.data.general.WaferMapDataset.getUniqueValueCount": "/**\n     * Returns the number of unique values.\n     *\n     * @return The number of unique values.\n     */\n",
"org.jfree.data.general.WaferMapDataset.getUniqueValues": "/**\n     * Returns the set of unique values.\n     *\n     * @return The set of unique values.\n     */\n",
"org.jfree.data.general.WaferMapDataset.getChipValue": "/**\n     * Returns the data value for a chip.\n     *\n     * @param chipx  the x-index.\n     * @param chipy  the y-index.\n     *\n     * @return The data value.\n     */\n",
"org.jfree.data.general.WaferMapDataset.getChipValue": "/**\n     * Returns the value for a given chip x and y or null.\n     *\n     * @param chipx  the x-index.\n     * @param chipy  the y-index.\n     *\n     * @return The data value.\n     */\n",
"org.jfree.data.general.WaferMapDataset.isMaxValue": "/**\n     * Tests to see if the passed value is larger than the stored maxvalue.\n     *\n     * @param check  the number to check.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.general.WaferMapDataset.isMinValue": "/**\n     * Tests to see if the passed value is smaller than the stored minvalue.\n     *\n     * @param check  the number to check.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.general.WaferMapDataset.getMaxValue": "/**\n     * Returns the maximum value stored in the dataset.\n     *\n     * @return The maximum value.\n     */\n",
"org.jfree.data.general.WaferMapDataset.getMinValue": "/**\n     * Returns the minimum value stored in the dataset.\n     *\n     * @return The minimum value.\n     */\n",
"org.jfree.data.general.WaferMapDataset.getMaxChipX": "/**\n     * Returns the wafer x-dimension.\n     *\n     * @return The number of chips in the x-dimension.\n     */\n",
"org.jfree.data.general.WaferMapDataset.setMaxChipX": "/**\n     * Sets wafer x dimension.\n     *\n     * @param maxChipX  the number of chips in the x-dimension.\n     */\n",
"org.jfree.data.general.WaferMapDataset.getMaxChipY": "/**\n     * Returns the number of chips in the y-dimension.\n     *\n     * @return The number of chips.\n     */\n",
"org.jfree.data.general.WaferMapDataset.setMaxChipY": "/**\n     * Sets the number of chips in the y-dimension.\n     *\n     * @param maxChipY  the number of chips.\n     */\n",
"org.jfree.data.general.WaferMapDataset.getChipSpace": "/**\n     * Returns the space to draw between chips.\n     *\n     * @return The space.\n     */\n",
"org.jfree.data.general.WaferMapDataset.setChipSpace": "/**\n     * Sets the space to draw between chips.\n     *\n     * @param space  the space.\n     */\n",
"org.jfree.data.general.SeriesChangeListener.seriesChanged": "/**\n     * Called when an observed series changes in some way.\n     *\n     * @param event  information about the change.\n     */\n",
"org.jfree.data.general.DefaultPieDataset.getItemCount": "/**\n     * Returns the number of items in the dataset.\n     *\n     * @return The item count.\n     */\n",
"org.jfree.data.general.DefaultPieDataset.getKeys": "/**\n     * Returns the categories in the dataset.  The returned list is\n     * unmodifiable.\n     *\n     * @return The categories in the dataset.\n     */\n",
"org.jfree.data.general.DefaultPieDataset.getKey": "/**\n     * Returns the key for the specified item, or {@code null}.\n     *\n     * @param item  the item index (in the range {@code 0} to\n     *     {@code getItemCount() - 1}).\n     *\n     * @return The key, or {@code null}.\n     *\n     * @throws IndexOutOfBoundsException if {@code item} is not in the\n     *     specified range.\n     */\n",
"org.jfree.data.general.DefaultPieDataset.getIndex": "/**\n     * Returns the index for a key, or -1 if the key is not recognised.\n     *\n     * @param key  the key ({@code null} not permitted).\n     *\n     * @return The index, or {@code -1} if the key is unrecognised.\n     *\n     * @throws IllegalArgumentException if {@code key} is\n     *     {@code null}.\n     */\n",
"org.jfree.data.general.DefaultPieDataset.getValue": "/**\n     * Returns a value.\n     *\n     * @param item  the value index.\n     *\n     * @return The value (possibly {@code null}).\n     */\n",
"org.jfree.data.general.DefaultPieDataset.getValue": "/**\n     * Returns the data value associated with a key.\n     *\n     * @param key  the key ({@code null} not permitted).\n     *\n     * @return The value (possibly {@code null}).\n     *\n     * @throws UnknownKeyException if the key is not recognised.\n     */\n",
"org.jfree.data.general.DefaultPieDataset.setValue": "/**\n     * Sets the data value for a key and sends a {@link DatasetChangeEvent} to\n     * all registered listeners.\n     *\n     * @param key  the key ({@code null} not permitted).\n     * @param value  the value.\n     *\n     * @throws IllegalArgumentException if {@code key} is\n     *     {@code null}.\n     */\n",
"org.jfree.data.general.DefaultPieDataset.setValue": "/**\n     * Sets the data value for a key and sends a {@link DatasetChangeEvent} to\n     * all registered listeners.\n     *\n     * @param key  the key ({@code null} not permitted).\n     * @param value  the value.\n     *\n     * @throws IllegalArgumentException if {@code key} is\n     *     {@code null}.\n     */\n",
"org.jfree.data.general.DefaultPieDataset.insertValue": "/**\n     * Inserts a new value at the specified position in the dataset or, if\n     * there is an existing item with the specified key, updates the value\n     * for that item and moves it to the specified position.  After the change\n     * is made, this methods sends a {@link DatasetChangeEvent} to all\n     * registered listeners.\n     *\n     * @param position  the position (in the range 0 to getItemCount()).\n     * @param key  the key ({@code null} not permitted).\n     * @param value  the value ({@code null} permitted).\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.data.general.DefaultPieDataset.insertValue": "/**\n     * Inserts a new value at the specified position in the dataset or, if\n     * there is an existing item with the specified key, updates the value\n     * for that item and moves it to the specified position.  After the change\n     * is made, this methods sends a {@link DatasetChangeEvent} to all\n     * registered listeners.\n     *\n     * @param position  the position (in the range 0 to getItemCount()).\n     * @param key  the key ({@code null} not permitted).\n     * @param value  the value ({@code null} permitted).\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.data.general.DefaultPieDataset.remove": "/**\n     * Removes an item from the dataset and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param key  the key ({@code null} not permitted).\n     *\n     * @throws IllegalArgumentException if {@code key} is\n     *     {@code null}.\n     */\n",
"org.jfree.data.general.DefaultPieDataset.clear": "/**\n     * Clears all data from this dataset and sends a {@link DatasetChangeEvent}\n     * to all registered listeners (unless the dataset was already empty).\n     *\n     * @since 1.0.2\n     */\n",
"org.jfree.data.general.DefaultPieDataset.sortByKeys": "/**\n     * Sorts the dataset's items by key and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param order  the sort order ({@code null} not permitted).\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.data.general.DefaultPieDataset.sortByValues": "/**\n     * Sorts the dataset's items by value and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param order  the sort order ({@code null} not permitted).\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.data.general.DefaultPieDataset.equals": "/**\n     * Tests if this object is equal to another.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.general.DefaultPieDataset.hashCode": "/**\n     * Returns a hash code.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.general.DefaultPieDataset.clone": "/**\n     * Returns a clone of the dataset.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException This class will not throw this\n     *         exception, but subclasses (if any) might.\n     */\n",
"org.jfree.data.general.DefaultValueDataset.getValue": "/**\n     * Returns the value.\n     *\n     * @return The value (possibly {@code null}).\n     */\n",
"org.jfree.data.general.DefaultValueDataset.setValue": "/**\n     * Sets the value and sends a {@link DatasetChangeEvent} to all registered\n     * listeners.\n     *\n     * @param value  the new value ({@code null} permitted).\n     */\n",
"org.jfree.data.general.DefaultValueDataset.equals": "/**\n     * Tests this dataset for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.general.DefaultValueDataset.hashCode": "/**\n     * Returns a hash code.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.general.DatasetChangeListener.datasetChanged": "/**\n     * Receives notification of an dataset change event.\n     *\n     * @param event  information about the event.\n     */\n",
"org.jfree.data.general.DatasetChangeEvent.getDataset": "/**\n     * Returns the dataset that generated the event.  Note that the dataset\n     * may be {@code null} since adding a {@code null} dataset to a\n     * plot will generated a change event.\n     *\n     * @return The dataset (possibly {@code null}).\n     */\n",
"org.jfree.data.general.HeatMapUtils.extractRowFromHeatMapDataset": "/**\n     * Returns a dataset containing one series that holds a copy of the (x, z)\n     * data from one row (y-index) of the specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param row  the row (y) index.\n     * @param seriesName  the series name/key ({@code null} not permitted).\n     *\n     * @return The dataset.\n     */\n",
"org.jfree.data.general.HeatMapUtils.extractColumnFromHeatMapDataset": "/**\n     * Returns a dataset containing one series that holds a copy of the (y, z)\n     * data from one column (x-index) of the specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param column  the column (x) index.\n     * @param seriesName  the series name ({@code null} not permitted).\n     *\n     * @return The dataset.\n     */\n",
"org.jfree.data.general.HeatMapUtils.createHeatMapImage": "/**\n     * Creates an image that displays the values from the specified dataset.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param paintScale  the paint scale for the z-values ({@code null}\n     *         not permitted).\n     *\n     * @return A buffered image.\n     */\n",
"org.jfree.data.general.Dataset.addChangeListener": "/**\n     * Registers an object for notification of changes to the dataset.\n     *\n     * @param listener  the object to register.\n     */\n",
"org.jfree.data.general.Dataset.removeChangeListener": "/**\n     * Deregisters an object for notification of changes to the dataset.\n     *\n     * @param listener  the object to deregister.\n     */\n",
"org.jfree.data.general.Dataset.getGroup": "/**\n     * Returns the dataset group.\n     *\n     * @return The dataset group.\n     */\n",
"org.jfree.data.general.Dataset.setGroup": "/**\n     * Sets the dataset group.\n     *\n     * @param group  the dataset group.\n     */\n",
"org.jfree.data.general.DefaultKeyedValueDataset.getKey": "/**\n     * Returns the key associated with the value, or {@code null} if the\n     * dataset has no data item.\n     *\n     * @return The key.\n     */\n",
"org.jfree.data.general.DefaultKeyedValueDataset.getValue": "/**\n     * Returns the value.\n     *\n     * @return The value (possibly {@code null}).\n     */\n",
"org.jfree.data.general.DefaultKeyedValueDataset.updateValue": "/**\n     * Updates the value.\n     *\n     * @param value  the new value ({@code null} permitted).\n     */\n",
"org.jfree.data.general.DefaultKeyedValueDataset.setValue": "/**\n     * Sets the value for the dataset and sends a {@link DatasetChangeEvent} to\n     * all registered listeners.\n     *\n     * @param key  the key.\n     * @param value  the value ({@code null} permitted).\n     */\n",
"org.jfree.data.general.DefaultKeyedValueDataset.equals": "/**\n     * Tests this dataset for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.general.DefaultKeyedValueDataset.hashCode": "/**\n     * Returns a hash code.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.general.DefaultKeyedValueDataset.clone": "/**\n     * Creates a clone of the dataset.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException This class will not throw this\n     *         exception, but subclasses (if any) might.\n     */\n",
"org.jfree.data.general.AbstractDataset.getGroup": "/**\n     * Returns the dataset group for the dataset.\n     *\n     * @return The group (never {@code null}).\n     *\n     * @see #setGroup(DatasetGroup)\n     */\n",
"org.jfree.data.general.AbstractDataset.setGroup": "/**\n     * Sets the dataset group for the dataset.\n     *\n     * @param group  the group ({@code null} not permitted).\n     *\n     * @see #getGroup()\n     */\n",
"org.jfree.data.general.AbstractDataset.getNotify": "/**\n     * Returns the value of the notify flag.  The default value is \n     * {@code true}.  If this is {@code false}, calls to the \n     * {@link #fireDatasetChanged()} method will NOT trigger a dataset\n     * change event.\n     * \n     * @return A boolean.\n     * \n     * @since 1.0.17\n     */\n",
"org.jfree.data.general.AbstractDataset.setNotify": "/**\n     * Sets the notify flag, which controls whether or not the {@link #fireDatasetChanged()}\n     * method notifies listeners.  Setting this flag to {@code true} will\n     * trigger a {@code DatasetChangeEvent} because there may be \n     * queued up changes.\n     * \n     * @param notify  the new flag value.\n     * \n     * @since 1.0.17\n     */\n",
"org.jfree.data.general.AbstractDataset.addChangeListener": "/**\n     * Registers an object to receive notification of changes to the dataset.\n     *\n     * @param listener  the object to register.\n     *\n     * @see #removeChangeListener(DatasetChangeListener)\n     */\n",
"org.jfree.data.general.AbstractDataset.removeChangeListener": "/**\n     * Deregisters an object so that it no longer receives notification of\n     * changes to the dataset.\n     *\n     * @param listener  the object to deregister.\n     *\n     * @see #addChangeListener(DatasetChangeListener)\n     */\n",
"org.jfree.data.general.AbstractDataset.hasListener": "/**\n     * Returns {@code true} if the specified object is registered with\n     * the dataset as a listener.  Most applications won't need to call this\n     * method, it exists mainly for use by unit testing code.\n     *\n     * @param listener  the listener.\n     *\n     * @return A boolean.\n     *\n     * @see #addChangeListener(DatasetChangeListener)\n     * @see #removeChangeListener(DatasetChangeListener)\n     */\n",
"org.jfree.data.general.AbstractDataset.fireDatasetChanged": "/**\n     * Notifies all registered listeners that the dataset has changed, \n     * provided that the {@code notify} flag has not been set to \n     * {@code false}.\n     *\n     * @see #addChangeListener(DatasetChangeListener)\n     */\n",
"org.jfree.data.general.AbstractDataset.notifyListeners": "/**\n     * Notifies all registered listeners that the dataset has changed.\n     *\n     * @param event  contains information about the event that triggered the\n     *               notification.\n     *\n     * @see #addChangeListener(DatasetChangeListener)\n     * @see #removeChangeListener(DatasetChangeListener)\n     */\n",
"org.jfree.data.general.AbstractDataset.clone": "/**\n     * Returns a clone of the dataset. The cloned dataset will NOT include the\n     * {@link DatasetChangeListener} references that have been registered with\n     * this dataset.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the dataset does not support\n     *                                     cloning.\n     */\n",
"org.jfree.data.general.AbstractDataset.writeObject": "/**\n     * Handles serialization.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException if there is an I/O problem.\n     */\n",
"org.jfree.data.general.AbstractDataset.readObject": "/**\n     * Restores a serialized object.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException if there is an I/O problem.\n     * @throws ClassNotFoundException if there is a problem loading a class.\n     */\n",
"org.jfree.data.general.AbstractDataset.validateObject": "/**\n     * Validates the object. We use this opportunity to call listeners who have\n     * registered during the deserialization process, as listeners are not\n     * serialized. This method is called by the serialization system after the\n     * entire graph is read.\n     *\n     * This object has registered itself to the system with a priority of 10.\n     * Other callbacks may register with a higher priority number to be called\n     * before this object, or with a lower priority number to be called after\n     * the listeners were notified.\n     *\n     * All listeners are supposed to have register by now, either in their\n     * readObject or validateObject methods. Notify them that this dataset has\n     * changed.\n     *\n     * @exception InvalidObjectException If the object cannot validate itself.\n     */\n",
"org.jfree.data.general.Series.getKey": "/**\n     * Returns the key for the series.\n     *\n     * @return The series key (never {@code null}).\n     *\n     * @see #setKey(Comparable)\n     */\n",
"org.jfree.data.general.Series.setKey": "/**\n     * Sets the key for the series and sends a {@code VetoableChangeEvent}\n     * (with the property name \"Key\") to all registered listeners.  For \n     * backwards compatibility, this method also fires a regular \n     * {@code PropertyChangeEvent}.  If the key change is vetoed this \n     * method will throw an IllegalArgumentException.\n     *\n     * @param key  the key ({@code null} not permitted).\n     *\n     * @see #getKey()\n     */\n",
"org.jfree.data.general.Series.getDescription": "/**\n     * Returns a description of the series.\n     *\n     * @return The series description (possibly {@code null}).\n     *\n     * @see #setDescription(String)\n     */\n",
"org.jfree.data.general.Series.setDescription": "/**\n     * Sets the description of the series and sends a\n     * {@code PropertyChangeEvent} to all registered listeners.\n     *\n     * @param description  the description ({@code null} permitted).\n     *\n     * @see #getDescription()\n     */\n",
"org.jfree.data.general.Series.getNotify": "/**\n     * Returns the flag that controls whether or not change events are sent to\n     * registered listeners.\n     *\n     * @return A boolean.\n     *\n     * @see #setNotify(boolean)\n     */\n",
"org.jfree.data.general.Series.setNotify": "/**\n     * Sets the flag that controls whether or not change events are sent to\n     * registered listeners.\n     *\n     * @param notify  the new value of the flag.\n     *\n     * @see #getNotify()\n     */\n",
"org.jfree.data.general.Series.isEmpty": "/**\n     * Returns {@code true} if the series contains no data items, and\n     * {@code false} otherwise.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.data.general.Series.getItemCount": "/**\n     * Returns the number of data items in the series.\n     *\n     * @return The number of data items in the series.\n     */\n",
"org.jfree.data.general.Series.clone": "/**\n     * Returns a clone of the series.\n     * <P>\n     * Notes:\n     * <ul>\n     * <li>No need to clone the name or description, since String object is\n     * immutable.</li>\n     * <li>We set the listener list to empty, since the listeners did not\n     * register with the clone.</li>\n     * <li>Same applies to the PropertyChangeSupport instance.</li>\n     * </ul>\n     *\n     * @return A clone of the series.\n     *\n     * @throws CloneNotSupportedException  not thrown by this class, but\n     *         subclasses may differ.\n     */\n",
"org.jfree.data.general.Series.equals": "/**\n     * Tests the series for equality with another object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.data.general.Series.hashCode": "/**\n     * Returns a hash code.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.general.Series.addChangeListener": "/**\n     * Registers an object with this series, to receive notification whenever\n     * the series changes.\n     * <P>\n     * Objects being registered must implement the {@link SeriesChangeListener}\n     * interface.\n     *\n     * @param listener  the listener to register.\n     */\n",
"org.jfree.data.general.Series.removeChangeListener": "/**\n     * Deregisters an object, so that it not longer receives notification\n     * whenever the series changes.\n     *\n     * @param listener  the listener to deregister.\n     */\n",
"org.jfree.data.general.Series.fireSeriesChanged": "/**\n     * General method for signalling to registered listeners that the series\n     * has been changed.\n     */\n",
"org.jfree.data.general.Series.notifyListeners": "/**\n     * Sends a change event to all registered listeners.\n     *\n     * @param event  contains information about the event that triggered the\n     *               notification.\n     */\n",
"org.jfree.data.general.Series.addPropertyChangeListener": "/**\n     * Adds a property change listener to the series.\n     *\n     * @param listener  the listener.\n     */\n",
"org.jfree.data.general.Series.removePropertyChangeListener": "/**\n     * Removes a property change listener from the series.\n     *\n     * @param listener  the listener.\n     */\n",
"org.jfree.data.general.Series.firePropertyChange": "/**\n     * Fires a property change event.\n     *\n     * @param property  the property key.\n     * @param oldValue  the old value.\n     * @param newValue  the new value.\n     */\n",
"org.jfree.data.general.Series.addVetoableChangeListener": "/**\n     * Adds a vetoable property change listener to the series.\n     *\n     * @param listener  the listener.\n     * \n     * @since 1.0.14\n     */\n",
"org.jfree.data.general.Series.removeVetoableChangeListener": "/**\n     * Removes a vetoable property change listener from the series.\n     *\n     * @param listener  the listener.\n     * \n     * @since 1.0.14 \n     */\n",
"org.jfree.data.general.Series.fireVetoableChange": "/**\n     * Fires a vetoable property change event.\n     *\n     * @param property  the property key.\n     * @param oldValue  the old value.\n     * @param newValue  the new value.\n     * \n     * @throws PropertyVetoException if the change was vetoed.\n     */\n",
"org.jfree.data.general.SeriesDataset.getSeriesCount": "/**\n     * Returns the number of series in the dataset.\n     *\n     * @return The series count.\n     */\n",
"org.jfree.data.general.SeriesDataset.getSeriesKey": "/**\n     * Returns the key for a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     *\n     * @return The key for the series.\n     */\n",
"org.jfree.data.general.SeriesDataset.indexOf": "/**\n     * Returns the index of the series with the specified key, or -1 if there\n     * is no such series in the dataset.\n     *\n     * @param seriesKey  the series key ({@code null} permitted).\n     *\n     * @return The index, or -1.\n     */\n",
"org.jfree.data.general.HeatMapDataset.getXSampleCount": "/**\n     * Returns the number of x values across the width of the dataset.  The\n     * values are evenly spaced between {@link #getMinimumXValue()} and\n     * {@link #getMaximumXValue()}.\n     * \n     * @return The number of x-values (always &gt; 0).\n     */\n",
"org.jfree.data.general.HeatMapDataset.getYSampleCount": "/**\n     * Returns the number of y values (or samples) for the dataset.  The\n     * values are evenly spaced between {@link #getMinimumYValue()} and\n     * {@link #getMaximumYValue()}.\n     *\n     * @return The number of y-values (always &gt; 0).\n     */\n",
"org.jfree.data.general.HeatMapDataset.getMinimumXValue": "/**\n     * Returns the lowest x-value represented in this dataset.  A requirement\n     * of this interface is that this method must never return infinite or\n     * Double.NAN values.\n     *\n     * @return The lowest x-value represented in this dataset.\n     */\n",
"org.jfree.data.general.HeatMapDataset.getMaximumXValue": "/**\n     * Returns the highest x-value represented in this dataset.  A requirement\n     * of this interface is that this method must never return infinite or\n     * Double.NAN values.\n     *\n     * @return The highest x-value represented in this dataset.\n     */\n",
"org.jfree.data.general.HeatMapDataset.getMinimumYValue": "/**\n     * Returns the lowest y-value represented in this dataset.  A requirement\n     * of this interface is that this method must never return infinite or\n     * Double.NAN values.\n     *\n     * @return The lowest y-value represented in this dataset.\n     */\n",
"org.jfree.data.general.HeatMapDataset.getMaximumYValue": "/**\n     * Returns the highest y-value represented in this dataset.  A requirement\n     * of this interface is that this method must never return infinite or\n     * Double.NAN values.\n     *\n     * @return The highest y-value represented in this dataset.\n     */\n",
"org.jfree.data.general.HeatMapDataset.getXValue": "/**\n     * A convenience method that returns the x-value for the given index.\n     * \n     * @param xIndex  the xIndex.\n     * \n     * @return The x-value.\n     */\n",
"org.jfree.data.general.HeatMapDataset.getYValue": "/**\n     * A convenience method that returns the y-value for the given index.\n     * \n     * @param yIndex  the yIndex.\n     * \n     * @return The y-value.\n     */\n",
"org.jfree.data.general.HeatMapDataset.getZValue": "/**\n     * Returns the z-value at the specified sample position in the dataset.\n     * For a missing or unknown value, this method should return Double.NAN.\n     *\n     * @param xIndex  the position of the x sample in the dataset.\n     * @param yIndex  the position of the y sample in the dataset.\n     *\n     * @return The z-value.\n     */\n",
"org.jfree.data.general.HeatMapDataset.getZ": "/**\n     * Returns the z-value at the specified sample position in the dataset.\n     * This method can return {@code null} to indicate a missing/unknown\n     * value.\n     * <br><br>\n     * Bear in mind that the class implementing this interface may\n     * store its data using primitives rather than objects, so calling this\n     * method may require a new {@code Number} object to be allocated...\n     * for this reason, it is generally preferable to use the\n     * {@link #getZValue(int, int)} method unless you *know* that the dataset\n     * implementation stores the z-values using objects.\n     *\n     * @param xIndex  the position of the x sample in the dataset.\n     * @param yIndex  the position of the y sample in the dataset.\n     *\n     * @return The z-value (possibly {@code null}).\n     */\n",
"org.jfree.data.general.DatasetUtils.calculatePieDatasetTotal": "/**\n     * Calculates the total of all the values in a {@link PieDataset}.  If\n     * the dataset contains negative or {@code null} values, they are\n     * ignored.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The total.\n     */\n",
"org.jfree.data.general.DatasetUtils.createPieDatasetForRow": "/**\n     * Creates a pie dataset from a table dataset by taking all the values\n     * for a single row.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param rowKey  the row key.\n     *\n     * @return A pie dataset.\n     */\n",
"org.jfree.data.general.DatasetUtils.createPieDatasetForRow": "/**\n     * Creates a pie dataset from a table dataset by taking all the values\n     * for a single row.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param row  the row (zero-based index).\n     *\n     * @return A pie dataset.\n     */\n",
"org.jfree.data.general.DatasetUtils.createPieDatasetForColumn": "/**\n     * Creates a pie dataset from a table dataset by taking all the values\n     * for a single column.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param columnKey  the column key.\n     *\n     * @return A pie dataset.\n     */\n",
"org.jfree.data.general.DatasetUtils.createPieDatasetForColumn": "/**\n     * Creates a pie dataset from a {@link CategoryDataset} by taking all the\n     * values for a single column.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param column  the column (zero-based index).\n     *\n     * @return A pie dataset.\n     */\n",
"org.jfree.data.general.DatasetUtils.createConsolidatedPieDataset": "/**\n     * Creates a new pie dataset based on the supplied dataset, but modified\n     * by aggregating all the low value items (those whose value is lower\n     * than the {@code percentThreshold}) into a single item with the\n     * key \"Other\".\n     *\n     * @param source  the source dataset ({@code null} not permitted).\n     * @param key  a new key for the aggregated items ({@code null} not\n     *             permitted).\n     * @param minimumPercent  the percent threshold.\n     *\n     * @return The pie dataset with (possibly) aggregated items.\n     */\n",
"org.jfree.data.general.DatasetUtils.createConsolidatedPieDataset": "/**\n     * Creates a new pie dataset based on the supplied dataset, but modified\n     * by aggregating all the low value items (those whose value is lower\n     * than the {@code percentThreshold}) into a single item.  The\n     * aggregated items are assigned the specified key.  Aggregation only\n     * occurs if there are at least {@code minItems} items to aggregate.\n     *\n     * @param source  the source dataset ({@code null} not permitted).\n     * @param key  the key to represent the aggregated items.\n     * @param minimumPercent  the percent threshold (ten percent is 0.10).\n     * @param minItems  only aggregate low values if there are at least this\n     *                  many.\n     *\n     * @return The pie dataset with (possibly) aggregated items.\n     */\n",
"org.jfree.data.general.DatasetUtils.createCategoryDataset": "/**\n     * Creates a {@link CategoryDataset} that contains a copy of the data in an\n     * array (instances of {@code double} are created to represent the\n     * data items).\n     * <p>\n     * Row and column keys are created by appending 0, 1, 2, ... to the\n     * supplied prefixes.\n     *\n     * @param rowKeyPrefix  the row key prefix.\n     * @param columnKeyPrefix  the column key prefix.\n     * @param data  the data.\n     *\n     * @return The dataset.\n     */\n",
"org.jfree.data.general.DatasetUtils.createCategoryDataset": "/**\n     * Creates a {@link CategoryDataset} that contains a copy of the data in\n     * an array.\n     * <p>\n     * Row and column keys are created by appending 0, 1, 2, ... to the\n     * supplied prefixes.\n     *\n     * @param rowKeyPrefix  the row key prefix.\n     * @param columnKeyPrefix  the column key prefix.\n     * @param data  the data.\n     *\n     * @return The dataset.\n     */\n",
"org.jfree.data.general.DatasetUtils.createCategoryDataset": "/**\n     * Creates a {@link CategoryDataset} that contains a copy of the data in\n     * an array (instances of {@code double} are created to represent the\n     * data items).\n     * <p>\n     * Row and column keys are taken from the supplied arrays.\n     *\n     * @param rowKeys  the row keys ({@code null} not permitted).\n     * @param columnKeys  the column keys ({@code null} not permitted).\n     * @param data  the data.\n     *\n     * @return The dataset.\n     */\n",
"org.jfree.data.general.DatasetUtils.createCategoryDataset": "/**\n     * Creates a {@link CategoryDataset} by copying the data from the supplied\n     * {@link KeyedValues} instance.\n     *\n     * @param rowKey  the row key ({@code null} not permitted).\n     * @param rowData  the row data ({@code null} not permitted).\n     *\n     * @return A dataset.\n     */\n",
"org.jfree.data.general.DatasetUtils.sampleFunction2D": "/**\n     * Creates an {@link XYDataset} by sampling the specified function over a\n     * fixed range.\n     *\n     * @param f  the function ({@code null} not permitted).\n     * @param start  the start value for the range.\n     * @param end  the end value for the range.\n     * @param samples  the number of sample points (must be &gt; 1).\n     * @param seriesKey  the key to give the resulting series ({@code null} not\n     *     permitted).\n     *\n     * @return A dataset.\n     */\n",
"org.jfree.data.general.DatasetUtils.sampleFunction2DToSeries": "/**\n     * Creates an {@link XYSeries} by sampling the specified function over a\n     * fixed range.\n     *\n     * @param f  the function ({@code null} not permitted).\n     * @param start  the start value for the range.\n     * @param end  the end value for the range.\n     * @param samples  the number of sample points (must be &gt; 1).\n     * @param seriesKey  the key to give the resulting series\n     *                   ({@code null} not permitted).\n     *\n     * @return A series.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.data.general.DatasetUtils.isEmptyOrNull": "/**\n     * Returns {@code true} if the dataset is empty (or {@code null}),\n     * and {@code false} otherwise.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.general.DatasetUtils.isEmptyOrNull": "/**\n     * Returns {@code true} if the dataset is empty (or {@code null}),\n     * and {@code false} otherwise.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.general.DatasetUtils.isEmptyOrNull": "/**\n     * Returns {@code true} if the dataset is empty (or {@code null}),\n     * and {@code false} otherwise.\n     *\n     * @param dataset  the dataset ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.general.DatasetUtils.findDomainBounds": "/**\n     * Returns the range of values in the domain (x-values) of a dataset.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The range of values (possibly {@code null}).\n     */\n",
"org.jfree.data.general.DatasetUtils.findDomainBounds": "/**\n     * Returns the range of values in the domain (x-values) of a dataset.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param includeInterval  determines whether or not the x-interval is taken\n     *                         into account (only applies if the dataset is an\n     *                         {@link IntervalXYDataset}).\n     *\n     * @return The range of values (possibly {@code null}).\n     */\n",
"org.jfree.data.general.DatasetUtils.findDomainBounds": "/**\n     * Returns the bounds of the x-values in the specified {@code dataset}\n     * taking into account only the visible series and including any x-interval\n     * if requested.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param visibleSeriesKeys  the visible series keys ({@code null}\n     *     not permitted).\n     * @param includeInterval  include the x-interval (if any)?\n     *\n     * @return The bounds (or {@code null} if the dataset contains no\n     *     values.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.data.general.DatasetUtils.iterateDomainBounds": "/**\n     * Iterates over the items in an {@link XYDataset} to find\n     * the range of x-values.  If the dataset is an instance of\n     * {@link IntervalXYDataset}, the starting and ending x-values\n     * will be used for the bounds calculation.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The range (possibly {@code null}).\n     */\n",
"org.jfree.data.general.DatasetUtils.iterateDomainBounds": "/**\n     * Iterates over the items in an {@link XYDataset} to find\n     * the range of x-values.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param includeInterval  a flag that determines, for an\n     *          {@link IntervalXYDataset}, whether the x-interval or just the\n     *          x-value is used to determine the overall range.\n     *\n     * @return The range (possibly {@code null}).\n     */\n",
"org.jfree.data.general.DatasetUtils.findRangeBounds": "/**\n     * Returns the range of values in the range for the dataset.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The range (possibly {@code null}).\n     */\n",
"org.jfree.data.general.DatasetUtils.findRangeBounds": "/**\n     * Returns the range of values in the range for the dataset.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     *\n     * @return The range (possibly {@code null}).\n     */\n",
"org.jfree.data.general.DatasetUtils.findRangeBounds": "/**\n     * Finds the bounds of the y-values in the specified dataset, including\n     * only those series that are listed in visibleSeriesKeys.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param visibleSeriesKeys  the keys for the visible series\n     *     ({@code null} not permitted).\n     * @param includeInterval  include the y-interval (if the dataset has a\n     *     y-interval).\n     *\n     * @return The data bounds.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.data.general.DatasetUtils.findRangeBounds": "/**\n     * Returns the range of values in the range for the dataset.  This method\n     * is the partner for the {@link #findDomainBounds(XYDataset)} method.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The range (possibly {@code null}).\n     */\n",
"org.jfree.data.general.DatasetUtils.findRangeBounds": "/**\n     * Returns the range of values in the range for the dataset.  This method\n     * is the partner for the {@link #findDomainBounds(XYDataset, boolean)}\n     * method.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     *\n     * @return The range (possibly {@code null}).\n     */\n",
"org.jfree.data.general.DatasetUtils.findRangeBounds": "/**\n     * Finds the bounds of the y-values in the specified dataset, including\n     * only those series that are listed in visibleSeriesKeys, and those items\n     * whose x-values fall within the specified range.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param visibleSeriesKeys  the keys for the visible series\n     *     ({@code null} not permitted).\n     * @param xRange  the x-range ({@code null} not permitted).\n     * @param includeInterval  include the y-interval (if the dataset has a\n     *     y-interval).\n     *\n     * @return The data bounds.\n     * \n     * @since 1.0.13\n     */\n",
"org.jfree.data.general.DatasetUtils.iterateRangeBounds": "/**\n     * Iterates over the data item of the category dataset to find\n     * the range bounds.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The range (possibly {@code null}).\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.data.general.DatasetUtils.iterateRangeBounds": "/**\n     * Iterates over the data item of the category dataset to find\n     * the range bounds.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     *\n     * @return The range (possibly {@code null}).\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.data.general.DatasetUtils.iterateToFindRangeBounds": "/**\n     * Iterates over the data item of the category dataset to find\n     * the range bounds.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     * @param visibleSeriesKeys  the visible series keys.\n     *\n     * @return The range (possibly {@code null}).\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.data.general.DatasetUtils.iterateRangeBounds": "/**\n     * Iterates over the data item of the xy dataset to find\n     * the range bounds.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The range (possibly {@code null}).\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.data.general.DatasetUtils.iterateRangeBounds": "/**\n     * Iterates over the data items of the xy dataset to find\n     * the range bounds.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param includeInterval  a flag that determines, for an\n     *          {@link IntervalXYDataset}, whether the y-interval or just the\n     *          y-value is used to determine the overall range.\n     *\n     * @return The range (possibly {@code null}).\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.data.general.DatasetUtils.findZBounds": "/**\n     * Returns the range of values in the z-dimension for the dataset. This\n     * method is the partner for the {@link #findRangeBounds(XYDataset)}\n     * and {@link #findDomainBounds(XYDataset)} methods.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The range (possibly {@code null}).\n     */\n",
"org.jfree.data.general.DatasetUtils.findZBounds": "/**\n     * Returns the range of values in the z-dimension for the dataset.  This\n     * method is the partner for the\n     * {@link #findRangeBounds(XYDataset, boolean)} and\n     * {@link #findDomainBounds(XYDataset, boolean)} methods.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param includeInterval  a flag that determines whether or not the\n     *                         z-interval is taken into account.\n     *\n     * @return The range (possibly {@code null}).\n     */\n",
"org.jfree.data.general.DatasetUtils.findZBounds": "/**\n     * Finds the bounds of the z-values in the specified dataset, including\n     * only those series that are listed in visibleSeriesKeys, and those items\n     * whose x-values fall within the specified range.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param visibleSeriesKeys  the keys for the visible series\n     *     ({@code null} not permitted).\n     * @param xRange  the x-range ({@code null} not permitted).\n     * @param includeInterval  include the z-interval (if the dataset has a\n     *     z-interval).\n     *\n     * @return The data bounds.\n     */\n",
"org.jfree.data.general.DatasetUtils.iterateZBounds": "/**\n     * Iterates over the data item of the xyz dataset to find\n     * the z-dimension bounds.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The range (possibly {@code null}).\n     */\n",
"org.jfree.data.general.DatasetUtils.iterateZBounds": "/**\n     * Iterates over the data items of the xyz dataset to find\n     * the z-dimension bounds.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param includeInterval  include the z-interval (if the dataset has a\n     *     z-interval.\n     *\n     * @return The range (possibly {@code null}).\n     */\n",
"org.jfree.data.general.DatasetUtils.iterateToFindDomainBounds": "/**\n     * Returns the range of x-values in the specified dataset for the\n     * data items belonging to the visible series.\n     * \n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param visibleSeriesKeys  the visible series keys ({@code null} not\n     *     permitted).\n     * @param includeInterval  a flag that determines whether or not the\n     *     y-interval for the dataset is included (this only applies if the\n     *     dataset is an instance of IntervalXYDataset).\n     * \n     * @return The x-range (possibly {@code null}).\n     * \n     * @since 1.0.13\n     */\n",
"org.jfree.data.general.DatasetUtils.iterateToFindRangeBounds": "/**\n     * Returns the range of y-values in the specified dataset for the\n     * data items belonging to the visible series and with x-values in the\n     * given range.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param visibleSeriesKeys  the visible series keys ({@code null} not\n     *     permitted).\n     * @param xRange  the x-range ({@code null} not permitted).\n     * @param includeInterval  a flag that determines whether or not the\n     *     y-interval for the dataset is included (this only applies if the\n     *     dataset is an instance of IntervalXYDataset).\n     *\n     * @return The y-range (possibly {@code null}).\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.data.general.DatasetUtils.iterateToFindZBounds": "/**\n     * Returns the range of z-values in the specified dataset for the\n     * data items belonging to the visible series and with x-values in the\n     * given range.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param visibleSeriesKeys  the visible series keys ({@code null} not\n     *     permitted).\n     * @param xRange  the x-range ({@code null} not permitted).\n     * @param includeInterval  a flag that determines whether or not the\n     *     z-interval for the dataset is included (this only applies if the\n     *     dataset has an interval, which is currently not supported).\n     *\n     * @return The y-range (possibly {@code null}).\n     */\n",
"org.jfree.data.general.DatasetUtils.findMinimumDomainValue": "/**\n     * Finds the minimum domain (or X) value for the specified dataset.  This\n     * is easy if the dataset implements the {@link DomainInfo} interface (a\n     * good idea if there is an efficient way to determine the minimum value).\n     * Otherwise, it involves iterating over the entire data-set.\n     * <p>\n     * Returns {@code null} if all the data values in the dataset are\n     * {@code null}.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The minimum value (possibly {@code null}).\n     */\n",
"org.jfree.data.general.DatasetUtils.findMaximumDomainValue": "/**\n     * Returns the maximum domain value for the specified dataset.  This is\n     * easy if the dataset implements the {@link DomainInfo} interface (a good\n     * idea if there is an efficient way to determine the maximum value).\n     * Otherwise, it involves iterating over the entire data-set.  Returns\n     * {@code null} if all the data values in the dataset are\n     * {@code null}.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The maximum value (possibly {@code null}).\n     */\n",
"org.jfree.data.general.DatasetUtils.findMinimumRangeValue": "/**\n     * Returns the minimum range value for the specified dataset.  This is\n     * easy if the dataset implements the {@link RangeInfo} interface (a good\n     * idea if there is an efficient way to determine the minimum value).\n     * Otherwise, it involves iterating over the entire data-set.  Returns\n     * {@code null} if all the data values in the dataset are\n     * {@code null}.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The minimum value (possibly {@code null}).\n     */\n",
"org.jfree.data.general.DatasetUtils.findMinimumRangeValue": "/**\n     * Returns the minimum range value for the specified dataset.  This is\n     * easy if the dataset implements the {@link RangeInfo} interface (a good\n     * idea if there is an efficient way to determine the minimum value).\n     * Otherwise, it involves iterating over the entire data-set.  Returns\n     * {@code null} if all the data values in the dataset are\n     * {@code null}.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The minimum value (possibly {@code null}).\n     */\n",
"org.jfree.data.general.DatasetUtils.findMaximumRangeValue": "/**\n     * Returns the maximum range value for the specified dataset.  This is easy\n     * if the dataset implements the {@link RangeInfo} interface (a good idea\n     * if there is an efficient way to determine the maximum value).\n     * Otherwise, it involves iterating over the entire data-set.  Returns\n     * {@code null} if all the data values are {@code null}.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The maximum value (possibly {@code null}).\n     */\n",
"org.jfree.data.general.DatasetUtils.findMaximumRangeValue": "/**\n     * Returns the maximum range value for the specified dataset.  This is\n     * easy if the dataset implements the {@link RangeInfo} interface (a good\n     * idea if there is an efficient way to determine the maximum value).\n     * Otherwise, it involves iterating over the entire data-set.  Returns\n     * {@code null} if all the data values are {@code null}.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The maximum value (possibly {@code null}).\n     */\n",
"org.jfree.data.general.DatasetUtils.findStackedRangeBounds": "/**\n     * Returns the minimum and maximum values for the dataset's range\n     * (y-values), assuming that the series in one category are stacked.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The range ({@code null} if the dataset contains no values).\n     */\n",
"org.jfree.data.general.DatasetUtils.findStackedRangeBounds": "/**\n     * Returns the minimum and maximum values for the dataset's range\n     * (y-values), assuming that the series in one category are stacked.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param base  the base value for the bars.\n     *\n     * @return The range ({@code null} if the dataset contains no values).\n     */\n",
"org.jfree.data.general.DatasetUtils.findStackedRangeBounds": "/**\n     * Returns the minimum and maximum values for the dataset's range\n     * (y-values), assuming that the series in one category are stacked.\n     *\n     * @param dataset  the dataset.\n     * @param map  a structure that maps series to groups.\n     *\n     * @return The value range ({@code null} if the dataset contains no\n     *         values).\n     */\n",
"org.jfree.data.general.DatasetUtils.findMinimumStackedRangeValue": "/**\n     * Returns the minimum value in the dataset range, assuming that values in\n     * each category are \"stacked\".\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The minimum value.\n     *\n     * @see #findMaximumStackedRangeValue(CategoryDataset)\n     */\n",
"org.jfree.data.general.DatasetUtils.findMaximumStackedRangeValue": "/**\n     * Returns the maximum value in the dataset range, assuming that values in\n     * each category are \"stacked\".\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The maximum value (possibly {@code null}).\n     *\n     * @see #findMinimumStackedRangeValue(CategoryDataset)\n     */\n",
"org.jfree.data.general.DatasetUtils.findStackedRangeBounds": "/**\n     * Returns the minimum and maximum values for the dataset's range,\n     * assuming that the series are stacked.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The range ([0.0, 0.0] if the dataset contains no values).\n     */\n",
"org.jfree.data.general.DatasetUtils.findStackedRangeBounds": "/**\n     * Returns the minimum and maximum values for the dataset's range,\n     * assuming that the series are stacked, using the specified base value.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param base  the base value.\n     *\n     * @return The range ({@code null} if the dataset contains no values).\n     */\n",
"org.jfree.data.general.DatasetUtils.calculateStackTotal": "/**\n     * Calculates the total for the y-values in all series for a given item\n     * index.\n     *\n     * @param dataset  the dataset.\n     * @param item  the item index.\n     *\n     * @return The total.\n     *\n     * @since 1.0.5\n     */\n",
"org.jfree.data.general.DatasetUtils.findCumulativeRangeBounds": "/**\n     * Calculates the range of values for a dataset where each item is the\n     * running total of the items for the current series.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The range.\n     *\n     * @see #findRangeBounds(CategoryDataset)\n     */\n",
"org.jfree.data.general.DatasetUtils.findYValue": "/**\n     * Returns the interpolated value of y that corresponds to the specified\n     * x-value in the given series.  If the x-value falls outside the range of\n     * x-values for the dataset, this method returns {@code Double.NaN}.\n     * \n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series index.\n     * @param x  the x-value.\n     * \n     * @return The y value.\n     * \n     * @since 1.0.16\n     */\n",
"org.jfree.data.general.DatasetUtils.findItemIndicesForX": "/**\n     * Finds the indices of the the items in the dataset that span the \n     * specified x-value.  There are three cases for the return value:\n     * <ul>\n     * <li>there is an exact match for the x-value at index i \n     * (returns {@code int[] {i, i}});</li>\n     * <li>the x-value falls between two (adjacent) items at index i and i+1 \n     * (returns {@code int[] {i, i+1}});</li>\n     * <li>the x-value falls outside the domain bounds, in which case the \n     *    method returns {@code int[] {-1, -1}}.</li>\n     * </ul>\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series index.\n     * @param x  the x-value.\n     *\n     * @return The indices of the two items that span the x-value.\n     *\n     * @since 1.0.16\n     * \n     * @see #findYValue(org.jfree.data.xy.XYDataset, int, double) \n     */\n",
"org.jfree.data.general.DefaultHeatMapDataset.getXSampleCount": "/**\n     * Returns the number of x values across the width of the dataset.  The\n     * values are evenly spaced between {@link #getMinimumXValue()} and\n     * {@link #getMaximumXValue()}.\n     *\n     * @return The number of x-values (always &gt; 0).\n     */\n",
"org.jfree.data.general.DefaultHeatMapDataset.getYSampleCount": "/**\n     * Returns the number of y values (or samples) for the dataset.  The\n     * values are evenly spaced between {@link #getMinimumYValue()} and\n     * {@link #getMaximumYValue()}.\n     *\n     * @return The number of y-values (always &gt; 0).\n     */\n",
"org.jfree.data.general.DefaultHeatMapDataset.getMinimumXValue": "/**\n     * Returns the lowest x-value represented in this dataset.  A requirement\n     * of this interface is that this method must never return infinite or\n     * Double.NAN values.\n     *\n     * @return The lowest x-value represented in this dataset.\n     */\n",
"org.jfree.data.general.DefaultHeatMapDataset.getMaximumXValue": "/**\n     * Returns the highest x-value represented in this dataset.  A requirement\n     * of this interface is that this method must never return infinite or\n     * Double.NAN values.\n     *\n     * @return The highest x-value represented in this dataset.\n     */\n",
"org.jfree.data.general.DefaultHeatMapDataset.getMinimumYValue": "/**\n     * Returns the lowest y-value represented in this dataset.  A requirement\n     * of this interface is that this method must never return infinite or\n     * Double.NAN values.\n     *\n     * @return The lowest y-value represented in this dataset.\n     */\n",
"org.jfree.data.general.DefaultHeatMapDataset.getMaximumYValue": "/**\n     * Returns the highest y-value represented in this dataset.  A requirement\n     * of this interface is that this method must never return infinite or\n     * Double.NAN values.\n     *\n     * @return The highest y-value represented in this dataset.\n     */\n",
"org.jfree.data.general.DefaultHeatMapDataset.getXValue": "/**\n     * A convenience method that returns the x-value for the given index.\n     *\n     * @param xIndex  the xIndex.\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.general.DefaultHeatMapDataset.getYValue": "/**\n     * A convenience method that returns the y-value for the given index.\n     *\n     * @param yIndex  the yIndex.\n     *\n     * @return The y-value.\n     */\n",
"org.jfree.data.general.DefaultHeatMapDataset.getZValue": "/**\n     * Returns the z-value at the specified sample position in the dataset.\n     * For a missing or unknown value, this method should return Double.NAN.\n     *\n     * @param xIndex  the position of the x sample in the dataset.\n     * @param yIndex  the position of the y sample in the dataset.\n     *\n     * @return The z-value.\n     */\n",
"org.jfree.data.general.DefaultHeatMapDataset.getZ": "/**\n     * Returns the z-value at the specified sample position in the dataset.\n     * In this implementation, where the underlying values are stored in an\n     * array of double primitives, you should avoid using this method and\n     * use {@link #getZValue(int, int)} instead.\n     *\n     * @param xIndex  the position of the x sample in the dataset.\n     * @param yIndex  the position of the y sample in the dataset.\n     *\n     * @return The z-value.\n     */\n",
"org.jfree.data.general.DefaultHeatMapDataset.setZValue": "/**\n     * Updates a z-value in the dataset and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param xIndex  the x-index.\n     * @param yIndex  the y-index.\n     * @param z  the new z-value.\n     */\n",
"org.jfree.data.general.DefaultHeatMapDataset.setZValue": "/**\n     * Updates a z-value in the dataset and, if requested, sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param xIndex  the x-index.\n     * @param yIndex  the y-index.\n     * @param z  the new z-value.\n     * @param notify  notify listeners?\n     */\n",
"org.jfree.data.general.DefaultHeatMapDataset.equals": "/**\n     * Tests this dataset for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.general.DefaultHeatMapDataset.clone": "/**\n     * Returns an independent copy of this dataset.\n     *\n     * @return A clone.\n     *\n     * @throws java.lang.CloneNotSupportedException if there is a problem \n     *         cloning.\n     */\n",
"org.jfree.data.general.AbstractSeriesDataset.getSeriesCount": "/**\n     * Returns the number of series in the dataset.\n     *\n     * @return The series count.\n     */\n",
"org.jfree.data.general.AbstractSeriesDataset.getSeriesKey": "/**\n     * Returns the key for a series.\n     * <p>\n     * If {@code series} is not within the specified range, the\n     * implementing method should throw an {@link IndexOutOfBoundsException}\n     * (preferred) or an {@link IllegalArgumentException}.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     *\n     * @return The series key.\n     */\n",
"org.jfree.data.general.AbstractSeriesDataset.indexOf": "/**\n     * Returns the index of the named series, or -1.\n     *\n     * @param seriesKey  the series key ({@code null} permitted).\n     *\n     * @return The index.\n     */\n",
"org.jfree.data.general.AbstractSeriesDataset.seriesChanged": "/**\n     * Called when a series belonging to the dataset changes.\n     *\n     * @param event  information about the change.\n     */\n",
"org.jfree.data.KeyedValues2D.getRowKey": "/**\n     * Returns the row key for a given index.\n     *\n     * @param row  the row index (zero-based).\n     *\n     * @return The row key.\n     *\n     * @throws IndexOutOfBoundsException if {@code row} is out of bounds.\n     */\n",
"org.jfree.data.KeyedValues2D.getRowIndex": "/**\n     * Returns the row index for a given key.\n     *\n     * @param key  the row key.\n     *\n     * @return The row index, or {@code -1} if the key is unrecognised.\n     */\n",
"org.jfree.data.KeyedValues2D.getRowKeys": "/**\n     * Returns the row keys.\n     *\n     * @return The keys.\n     */\n",
"org.jfree.data.KeyedValues2D.getColumnKey": "/**\n     * Returns the column key for a given index.\n     *\n     * @param column  the column index (zero-based).\n     *\n     * @return The column key.\n     *\n     * @throws IndexOutOfBoundsException if {@code row} is out of bounds.\n     */\n",
"org.jfree.data.KeyedValues2D.getColumnIndex": "/**\n     * Returns the column index for a given key.\n     *\n     * @param key  the column key.\n     *\n     * @return The column index, or {@code -1} if the key is unrecognised.\n     */\n",
"org.jfree.data.KeyedValues2D.getColumnKeys": "/**\n     * Returns the column keys.\n     *\n     * @return The keys.\n     */\n",
"org.jfree.data.KeyedValues2D.getValue": "/**\n     * Returns the value associated with the specified keys.\n     *\n     * @param rowKey  the row key ({@code null} not permitted).\n     * @param columnKey  the column key ({@code null} not permitted).\n     *\n     * @return The value.\n     *\n     * @throws UnknownKeyException if either key is not recognised.\n     */\n",
"org.jfree.data.KeyedValues2DItemKey.getRowKey": "/**\n     * Returns the row key.\n     * \n     * @return The row key (never {@code null}).\n     */\n",
"org.jfree.data.KeyedValues2DItemKey.getColumnKey": "/**\n     * Returns the column key.\n     * \n     * @return The column key (never {@code null}).\n     */\n",
"org.jfree.data.KeyedValues2DItemKey.equals": "/**\n     * Tests this key for equality with an arbitrary object.\n     * \n     * @param obj  the object ({@code null} permitted).\n     * \n     * @return A boolean. \n     */\n",
"org.jfree.data.DefaultKeyedValues.getItemCount": "/**\n     * Returns the number of items (values) in the collection.\n     *\n     * @return The item count.\n     */\n",
"org.jfree.data.DefaultKeyedValues.getValue": "/**\n     * Returns a value.\n     *\n     * @param item  the item of interest (zero-based index).\n     *\n     * @return The value (possibly {@code null}).\n     *\n     * @throws IndexOutOfBoundsException if {@code item} is out of bounds.\n     */\n",
"org.jfree.data.DefaultKeyedValues.getKey": "/**\n     * Returns a key.\n     *\n     * @param index  the item index (zero-based).\n     *\n     * @return The row key.\n     *\n     * @throws IndexOutOfBoundsException if {@code item} is out of bounds.\n     */\n",
"org.jfree.data.DefaultKeyedValues.getIndex": "/**\n     * Returns the index for a given key.\n     *\n     * @param key  the key ({@code null} not permitted).\n     *\n     * @return The index, or {@code -1} if the key is not recognised.\n     *\n     * @throws IllegalArgumentException if {@code key} is\n     *     {@code null}.\n     */\n",
"org.jfree.data.DefaultKeyedValues.getKeys": "/**\n     * Returns the keys for the values in the collection.\n     *\n     * @return The keys (never {@code null}).\n     */\n",
"org.jfree.data.DefaultKeyedValues.getValue": "/**\n     * Returns the value for a given key.\n     *\n     * @param key  the key ({@code null} not permitted).\n     *\n     * @return The value (possibly {@code null}).\n     *\n     * @throws UnknownKeyException if the key is not recognised.\n     *\n     * @see #getValue(int)\n     */\n",
"org.jfree.data.DefaultKeyedValues.addValue": "/**\n     * Updates an existing value, or adds a new value to the collection.\n     *\n     * @param key  the key ({@code null} not permitted).\n     * @param value  the value.\n     *\n     * @see #addValue(Comparable, Number)\n     */\n",
"org.jfree.data.DefaultKeyedValues.addValue": "/**\n     * Adds a new value to the collection, or updates an existing value.\n     * This method passes control directly to the\n     * {@link #setValue(Comparable, Number)} method.\n     *\n     * @param key  the key ({@code null} not permitted).\n     * @param value  the value ({@code null} permitted).\n     */\n",
"org.jfree.data.DefaultKeyedValues.setValue": "/**\n     * Updates an existing value, or adds a new value to the collection.\n     *\n     * @param key  the key ({@code null} not permitted).\n     * @param value  the value.\n     */\n",
"org.jfree.data.DefaultKeyedValues.setValue": "/**\n     * Updates an existing value, or adds a new value to the collection.\n     *\n     * @param key  the key ({@code null} not permitted).\n     * @param value  the value ({@code null} permitted).\n     */\n",
"org.jfree.data.DefaultKeyedValues.insertValue": "/**\n     * Inserts a new value at the specified position in the dataset or, if\n     * there is an existing item with the specified key, updates the value\n     * for that item and moves it to the specified position.\n     *\n     * @param position  the position (in the range 0 to getItemCount()).\n     * @param key  the key ({@code null} not permitted).\n     * @param value  the value.\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.data.DefaultKeyedValues.insertValue": "/**\n     * Inserts a new value at the specified position in the dataset or, if\n     * there is an existing item with the specified key, updates the value\n     * for that item and moves it to the specified position.\n     *\n     * @param position  the position (in the range 0 to getItemCount()).\n     * @param key  the key ({@code null} not permitted).\n     * @param value  the value ({@code null} permitted).\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.data.DefaultKeyedValues.rebuildIndex": "/**\n     * Rebuilds the key to indexed-position mapping after an positioned insert\n     * or a remove operation.\n     */\n",
"org.jfree.data.DefaultKeyedValues.removeValue": "/**\n     * Removes a value from the collection.\n     *\n     * @param index  the index of the item to remove (in the range\n     *     {@code 0} to {@code getItemCount() -1}).\n     *\n     * @throws IndexOutOfBoundsException if {@code index} is not within\n     *     the specified range.\n     */\n",
"org.jfree.data.DefaultKeyedValues.removeValue": "/**\n     * Removes a value from the collection.\n     *\n     * @param key  the item key ({@code null} not permitted).\n     *\n     * @throws IllegalArgumentException if {@code key} is\n     *     {@code null}.\n     * @throws UnknownKeyException if {@code key} is not recognised.\n     */\n",
"org.jfree.data.DefaultKeyedValues.clear": "/**\n     * Clears all values from the collection.\n     *\n     * @since 1.0.2\n     */\n",
"org.jfree.data.DefaultKeyedValues.sortByKeys": "/**\n     * Sorts the items in the list by key.\n     *\n     * @param order  the sort order ({@code null} not permitted).\n     */\n",
"org.jfree.data.DefaultKeyedValues.sortByValues": "/**\n     * Sorts the items in the list by value.  If the list contains\n     * {@code null} values, they will sort to the end of the list,\n     * irrespective of the sort order.\n     *\n     * @param order  the sort order ({@code null} not permitted).\n     */\n",
"org.jfree.data.DefaultKeyedValues.equals": "/**\n     * Tests if this object is equal to another.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.DefaultKeyedValues.hashCode": "/**\n     * Returns a hash code.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.DefaultKeyedValues.clone": "/**\n     * Returns a clone.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  this class will not throw this\n     *         exception, but subclasses might.\n     */\n",
"org.jfree.data.Values2D.getRowCount": "/**\n     * Returns the number of rows in the table.\n     *\n     * @return The row count.\n     */\n",
"org.jfree.data.Values2D.getColumnCount": "/**\n     * Returns the number of columns in the table.\n     *\n     * @return The column count.\n     */\n",
"org.jfree.data.Values2D.getValue": "/**\n     * Returns a value from the table.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The value (possibly {@code null}).\n     *\n     * @throws IndexOutOfBoundsException if the {@code row}\n     *         or {@code column} is out of bounds.\n     */\n",
"org.jfree.data.KeyedValuesItemKey.getKey": "/**\n     * Returns the key.\n     * \n     * @return The key (never {@code null}). \n     */\n",
"org.jfree.data.KeyedValuesItemKey.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     * \n     * @param obj  the object ({@code null} not permitted).\n     * \n     * @return A boolean.\n     */\n",
"org.jfree.data.ComparableObjectSeries.getAutoSort": "/**\n     * Returns the flag that controls whether the items in the series are\n     * automatically sorted.  There is no setter for this flag, it must be\n     * defined in the series constructor.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.ComparableObjectSeries.getAllowDuplicateXValues": "/**\n     * Returns a flag that controls whether duplicate x-values are allowed.\n     * This flag can only be set in the constructor.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.ComparableObjectSeries.getItemCount": "/**\n     * Returns the number of items in the series.\n     *\n     * @return The item count.\n     */\n",
"org.jfree.data.ComparableObjectSeries.getMaximumItemCount": "/**\n     * Returns the maximum number of items that will be retained in the series.\n     * The default value is {@code Integer.MAX_VALUE}.\n     *\n     * @return The maximum item count.\n     * @see #setMaximumItemCount(int)\n     */\n",
"org.jfree.data.ComparableObjectSeries.setMaximumItemCount": "/**\n     * Sets the maximum number of items that will be retained in the series.\n     * If you add a new item to the series such that the number of items will\n     * exceed the maximum item count, then the first element in the series is\n     * automatically removed, ensuring that the maximum item count is not\n     * exceeded.\n     * <p>\n     * Typically this value is set before the series is populated with data,\n     * but if it is applied later, it may cause some items to be removed from\n     * the series (in which case a {@link SeriesChangeEvent} will be sent to\n     * all registered listeners.\n     *\n     * @param maximum  the maximum number of items for the series.\n     */\n",
"org.jfree.data.ComparableObjectSeries.add": "/**\n     * Adds new data to the series and sends a {@link SeriesChangeEvent} to\n     * all registered listeners.\n     * <P>\n     * Throws an exception if the x-value is a duplicate AND the\n     * allowDuplicateXValues flag is false.\n     *\n     * @param x  the x-value ({@code null} not permitted).\n     * @param y  the y-value ({@code null} permitted).\n     */\n",
"org.jfree.data.ComparableObjectSeries.add": "/**\n     * Adds new data to the series and, if requested, sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     * <P>\n     * Throws an exception if the x-value is a duplicate AND the\n     * allowDuplicateXValues flag is false.\n     *\n     * @param x  the x-value ({@code null} not permitted).\n     * @param y  the y-value ({@code null} permitted).\n     * @param notify  a flag the controls whether or not a\n     *                {@link SeriesChangeEvent} is sent to all registered\n     *                listeners.\n     */\n",
"org.jfree.data.ComparableObjectSeries.add": "/**\n     * Adds a data item to the series and, if requested, sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param item  the (x, y) item ({@code null} not permitted).\n     * @param notify  a flag that controls whether or not a\n     *                {@link SeriesChangeEvent} is sent to all registered\n     *                listeners.\n     */\n",
"org.jfree.data.ComparableObjectSeries.indexOf": "/**\n     * Returns the index of the item with the specified x-value, or a negative\n     * index if the series does not contain an item with that x-value.  Be\n     * aware that for an unsorted series, the index is found by iterating\n     * through all items in the series.\n     *\n     * @param x  the x-value ({@code null} not permitted).\n     *\n     * @return The index.\n     */\n",
"org.jfree.data.ComparableObjectSeries.update": "/**\n     * Updates an item in the series.\n     *\n     * @param x  the x-value ({@code null} not permitted).\n     * @param y  the y-value ({@code null} permitted).\n     *\n     * @throws SeriesException if there is no existing item with the specified\n     *         x-value.\n     */\n",
"org.jfree.data.ComparableObjectSeries.updateByIndex": "/**\n     * Updates the value of an item in the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param index  the item (zero based index).\n     * @param y  the new value ({@code null} permitted).\n     */\n",
"org.jfree.data.ComparableObjectSeries.getDataItem": "/**\n     * Return the data item with the specified index.\n     *\n     * @param index  the index.\n     *\n     * @return The data item with the specified index.\n     */\n",
"org.jfree.data.ComparableObjectSeries.delete": "/**\n     * Deletes a range of items from the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param start  the start index (zero-based).\n     * @param end  the end index (zero-based).\n     */\n",
"org.jfree.data.ComparableObjectSeries.clear": "/**\n     * Removes all data items from the series and, unless the series is\n     * already empty, sends a {@link SeriesChangeEvent} to all registered\n     * listeners.\n     */\n",
"org.jfree.data.ComparableObjectSeries.remove": "/**\n     * Removes the item at the specified index and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param index  the index.\n     *\n     * @return The item removed.\n     */\n",
"org.jfree.data.ComparableObjectSeries.remove": "/**\n     * Removes the item with the specified x-value and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param x  the x-value.\n\n     * @return The item removed.\n     */\n",
"org.jfree.data.ComparableObjectSeries.equals": "/**\n     * Tests this series for equality with an arbitrary object.\n     *\n     * @param obj  the object to test against for equality\n     *             ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.ComparableObjectSeries.hashCode": "/**\n     * Returns a hash code.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.KeyedValueComparator.getType": "/**\n     * Returns the type.\n     *\n     * @return The type (never {@code null}).\n     */\n",
"org.jfree.data.KeyedValueComparator.getOrder": "/**\n     * Returns the sort order.\n     *\n     * @return The sort order (never {@code null}).\n     */\n",
"org.jfree.data.KeyedValueComparator.compare": "/**\n     * Compares two {@link KeyedValue} instances and returns an\n     * {@code int} that indicates the relative order of the two objects.\n     *\n     * @param o1  object 1.\n     * @param o2  object 2.\n     *\n     * @return An int indicating the relative order of the objects.\n     */\n",
"org.jfree.data.xy.DefaultIntervalXYDataset.getSeriesCount": "/**\n     * Returns the number of series in the dataset.\n     *\n     * @return The series count.\n     */\n",
"org.jfree.data.xy.DefaultIntervalXYDataset.getSeriesKey": "/**\n     * Returns the key for a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     *\n     * @return The key for the series.\n     *\n     * @throws IllegalArgumentException if {@code series} is not in the\n     *     specified range.\n     */\n",
"org.jfree.data.xy.DefaultIntervalXYDataset.getItemCount": "/**\n     * Returns the number of items in the specified series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     *\n     * @return The item count.\n     *\n     * @throws IllegalArgumentException if {@code series} is not in the\n     *     specified range.\n     */\n",
"org.jfree.data.xy.DefaultIntervalXYDataset.getXValue": "/**\n     * Returns the x-value for an item within a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (in the range {@code 0} to\n     *     {@code getItemCount(series)}).\n     *\n     * @return The x-value.\n     *\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\n     *     within the specified range.\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\n     *     within the specified range.\n     *\n     * @see #getX(int, int)\n     */\n",
"org.jfree.data.xy.DefaultIntervalXYDataset.getYValue": "/**\n     * Returns the y-value for an item within a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (in the range {@code 0} to\n     *     {@code getItemCount(series)}).\n     *\n     * @return The y-value.\n     *\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\n     *     within the specified range.\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\n     *     within the specified range.\n     *\n     * @see #getY(int, int)\n     */\n",
"org.jfree.data.xy.DefaultIntervalXYDataset.getStartXValue": "/**\n     * Returns the starting x-value for an item within a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (in the range {@code 0} to\n     *     {@code getItemCount(series)}).\n     *\n     * @return The starting x-value.\n     *\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\n     *     within the specified range.\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\n     *     within the specified range.\n     *\n     * @see #getStartX(int, int)\n     */\n",
"org.jfree.data.xy.DefaultIntervalXYDataset.getEndXValue": "/**\n     * Returns the ending x-value for an item within a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (in the range {@code 0} to\n     *     {@code getItemCount(series)}).\n     *\n     * @return The ending x-value.\n     *\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\n     *     within the specified range.\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\n     *     within the specified range.\n     *\n     * @see #getEndX(int, int)\n     */\n",
"org.jfree.data.xy.DefaultIntervalXYDataset.getStartYValue": "/**\n     * Returns the starting y-value for an item within a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (in the range {@code 0} to\n     *     {@code getItemCount(series)}).\n     *\n     * @return The starting y-value.\n     *\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\n     *     within the specified range.\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\n     *     within the specified range.\n     *\n     * @see #getStartY(int, int)\n     */\n",
"org.jfree.data.xy.DefaultIntervalXYDataset.getEndYValue": "/**\n     * Returns the ending y-value for an item within a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (in the range {@code 0} to\n     *     {@code getItemCount(series)}).\n     *\n     * @return The ending y-value.\n     *\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\n     *     within the specified range.\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\n     *     within the specified range.\n     *\n     * @see #getEndY(int, int)\n     */\n",
"org.jfree.data.xy.DefaultIntervalXYDataset.getEndX": "/**\n     * Returns the ending x-value for an item within a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (in the range {@code 0} to\n     *     {@code getItemCount(series)}).\n     *\n     * @return The ending x-value.\n     *\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\n     *     within the specified range.\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\n     *     within the specified range.\n     *\n     * @see #getEndXValue(int, int)\n     */\n",
"org.jfree.data.xy.DefaultIntervalXYDataset.getEndY": "/**\n     * Returns the ending y-value for an item within a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (in the range {@code 0} to\n     *     {@code getItemCount(series)}).\n     *\n     * @return The ending y-value.\n     *\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\n     *     within the specified range.\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\n     *     within the specified range.\n     *\n     * @see #getEndYValue(int, int)\n     */\n",
"org.jfree.data.xy.DefaultIntervalXYDataset.getStartX": "/**\n     * Returns the starting x-value for an item within a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (in the range {@code 0} to\n     *     {@code getItemCount(series)}).\n     *\n     * @return The starting x-value.\n     *\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\n     *     within the specified range.\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\n     *     within the specified range.\n     *\n     * @see #getStartXValue(int, int)\n     */\n",
"org.jfree.data.xy.DefaultIntervalXYDataset.getStartY": "/**\n     * Returns the starting y-value for an item within a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (in the range {@code 0} to\n     *     {@code getItemCount(series)}).\n     *\n     * @return The starting y-value.\n     *\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\n     *     within the specified range.\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\n     *     within the specified range.\n     *\n     * @see #getStartYValue(int, int)\n     */\n",
"org.jfree.data.xy.DefaultIntervalXYDataset.getX": "/**\n     * Returns the x-value for an item within a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (in the range {@code 0} to\n     *     {@code getItemCount(series)}).\n     *\n     * @return The x-value.\n     *\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\n     *     within the specified range.\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\n     *     within the specified range.\n     *\n     * @see #getXValue(int, int)\n     */\n",
"org.jfree.data.xy.DefaultIntervalXYDataset.getY": "/**\n     * Returns the y-value for an item within a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (in the range {@code 0} to\n     *     {@code getItemCount(series)}).\n     *\n     * @return The y-value.\n     *\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\n     *     within the specified range.\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\n     *     within the specified range.\n     *\n     * @see #getYValue(int, int)\n     */\n",
"org.jfree.data.xy.DefaultIntervalXYDataset.addSeries": "/**\n     * Adds a series or if a series with the same key already exists replaces\n     * the data for that series, then sends a {@link DatasetChangeEvent} to\n     * all registered listeners.\n     *\n     * @param seriesKey  the series key ({@code null} not permitted).\n     * @param data  the data (must be an array with length 6, containing six\n     *     arrays of equal length, the first three containing the x-values\n     *     (x, xLow and xHigh) and the last three containing the y-values\n     *     (y, yLow and yHigh)).\n     */\n",
"org.jfree.data.xy.DefaultIntervalXYDataset.equals": "/**\n     * Tests this {@code DefaultIntervalXYDataset} instance for equality\n     * with an arbitrary object.  This method returns {@code true} if and\n     * only if:\n     * <ul>\n     * <li>{@code obj} is not {@code null};</li>\n     * <li>{@code obj} is an instance of {@code DefaultIntervalXYDataset};</li>\n     * <li>both datasets have the same number of series, each containing\n     *         exactly the same values.</li>\n     * </ul>\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.DefaultIntervalXYDataset.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.xy.DefaultIntervalXYDataset.clone": "/**\n     * Returns a clone of this dataset.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if the dataset contains a series with\n     *         a key that cannot be cloned.\n     */\n",
"org.jfree.data.xy.XYRangeInfo.getRangeBounds": "/**\n     * Returns the range of the values in this dataset's range.\n     *\n     * @param visibleSeriesKeys  the keys of the visible series.\n     * @param xRange  the x-range ({@code null} not permitted).\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     *\n     * @return The range (or {@code null} if the dataset contains no\n     *     values).\n     */\n",
"org.jfree.data.xy.Vector.getX": "/**\n     * Returns the x-value.\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.xy.Vector.getY": "/**\n     * Returns the y-value.\n     *\n     * @return The y-value.\n     */\n",
"org.jfree.data.xy.Vector.getLength": "/**\n     * Returns the length of the vector.\n     *\n     * @return The vector length.\n     */\n",
"org.jfree.data.xy.Vector.getAngle": "/**\n     * Returns the angle of the vector.\n     *\n     * @return The angle of the vector.\n     */\n",
"org.jfree.data.xy.Vector.equals": "/**\n     * Tests this vector for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} not permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.Vector.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.xy.XYCoordinate.getX": "/**\n     * Returns the x-coordinate.\n     *\n     * @return The x-coordinate.\n     */\n",
"org.jfree.data.xy.XYCoordinate.getY": "/**\n     * Returns the y-coordinate.\n     *\n     * @return The y-coordinate.\n     */\n",
"org.jfree.data.xy.XYCoordinate.equals": "/**\n     * Tests this coordinate for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.XYCoordinate.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.xy.XYCoordinate.toString": "/**\n     * Returns a string representation of this instance, primarily for\n     * debugging purposes.\n     *\n     * @return A string.\n     */\n",
"org.jfree.data.xy.XYCoordinate.compareTo": "/**\n     * Compares this instance against an arbitrary object.\n     *\n     * @param obj  the object ({@code null} not permitted).\n     *\n     * @return An integer indicating the relative order of the items.\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.getDomainOrder": "/**\n     * Returns the order of the domain (X) values, if this is known.\n     *\n     * @return The domain order.\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.addSeries": "/**\n     * Adds a series to the collection and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param series  the series ({@code null} not permitted).\n     * \n     * @throws IllegalArgumentException if the key for the series is null or\n     *     not unique within the dataset.\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.removeSeries": "/**\n     * Removes a series from the collection and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.removeSeries": "/**\n     * Removes a series from the collection and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param series  the series ({@code null} not permitted).\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.removeAllSeries": "/**\n     * Removes all the series from the collection and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.getSeriesCount": "/**\n     * Returns the number of series in the collection.\n     *\n     * @return The series count.\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.getSeries": "/**\n     * Returns a list of all the series in the collection.\n     *\n     * @return The list (which is unmodifiable).\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.indexOf": "/**\n     * Returns the index of the specified series, or -1 if that series is not\n     * present in the dataset.\n     *\n     * @param series  the series ({@code null} not permitted).\n     *\n     * @return The series index.\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.getSeries": "/**\n     * Returns a series from the collection.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The series.\n     *\n     * @throws IllegalArgumentException if {@code series} is not in the\n     *     range {@code 0} to {@code getSeriesCount() - 1}.\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.getSeries": "/**\n     * Returns a series from the collection.\n     *\n     * @param key  the key ({@code null} not permitted).\n     *\n     * @return The series with the specified key.\n     *\n     * @throws UnknownKeyException if {@code key} is not found in the\n     *         collection.\n     *\n     * @since 1.0.9\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.getSeriesKey": "/**\n     * Returns the key for a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     *\n     * @return The key for a series.\n     *\n     * @throws IllegalArgumentException if {@code series} is not in the\n     *     specified range.\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.getSeriesIndex": "/**\n     * Returns the index of the series with the specified key, or -1 if no\n     * series has that key.\n     * \n     * @param key  the key ({@code null} not permitted).\n     * \n     * @return The index.\n     * \n     * @since 1.0.14\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.getItemCount": "/**\n     * Returns the number of items in the specified series.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The item count.\n     *\n     * @throws IllegalArgumentException if {@code series} is not in the\n     *     range {@code 0} to {@code getSeriesCount() - 1}.\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.getX": "/**\n     * Returns the x-value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.getStartX": "/**\n     * Returns the starting X value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The starting X value.\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.getEndX": "/**\n     * Returns the ending X value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The ending X value.\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.getY": "/**\n     * Returns the y-value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param index  the index of the item of interest (zero-based).\n     *\n     * @return The value (possibly {@code null}).\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.getStartY": "/**\n     * Returns the starting Y value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The starting Y value.\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.getEndY": "/**\n     * Returns the ending Y value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The ending Y value.\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.equals": "/**\n     * Tests this collection for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.clone": "/**\n     * Returns a clone of this instance.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem.\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.hashCode": "/**\n     * Returns a hash code.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.getDomainLowerBound": "/**\n     * Returns the minimum x-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         x-interval is taken into account.\n     *\n     * @return The minimum value.\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.getDomainUpperBound": "/**\n     * Returns the maximum x-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         x-interval is taken into account.\n     *\n     * @return The maximum value.\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.getDomainBounds": "/**\n     * Returns the range of the values in this dataset's domain.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         x-interval is taken into account.\n     *\n     * @return The range (or {@code null} if the dataset contains no\n     *     values).\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.getIntervalWidth": "/**\n     * Returns the interval width. This is used to calculate the start and end\n     * x-values, if/when the dataset is used as an {@link IntervalXYDataset}.\n     *\n     * @return The interval width.\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.setIntervalWidth": "/**\n     * Sets the interval width and sends a {@link DatasetChangeEvent} to all\n     * registered listeners.\n     *\n     * @param width  the width (negative values not permitted).\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.getIntervalPositionFactor": "/**\n     * Returns the interval position factor.\n     *\n     * @return The interval position factor.\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.setIntervalPositionFactor": "/**\n     * Sets the interval position factor. This controls where the x-value is in\n     * relation to the interval surrounding the x-value (0.0 means the x-value\n     * will be positioned at the start, 0.5 in the middle, and 1.0 at the end).\n     *\n     * @param factor  the factor.\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.isAutoWidth": "/**\n     * Returns whether the interval width is automatically calculated or not.\n     *\n     * @return Whether the width is automatically calculated or not.\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.setAutoWidth": "/**\n     * Sets the flag that indicates whether the interval width is automatically\n     * calculated or not.\n     *\n     * @param b  a boolean.\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.getRangeBounds": "/**\n     * Returns the range of the values in this dataset's range.\n     *\n     * @param includeInterval  ignored.\n     *\n     * @return The range (or {@code null} if the dataset contains no\n     *     values).\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.getRangeLowerBound": "/**\n     * Returns the minimum y-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     *\n     * @return The minimum value.\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound": "/**\n     * Returns the maximum y-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     *\n     * @return The maximum value.\n     */\n",
"org.jfree.data.xy.XYSeriesCollection.vetoableChange": "/**\n     * Receives notification that the key for one of the series in the \n     * collection has changed, and vetos it if the key is already present in \n     * the collection.\n     * \n     * @param e  the event.\n     * \n     * @since 1.0.14\n     */\n",
"org.jfree.data.xy.MatrixSeries.getColumnsCount": "/**\n     * Returns the number of columns in this matrix series.\n     *\n     * @return The number of columns in this matrix series.\n     */\n",
"org.jfree.data.xy.MatrixSeries.getItem": "/**\n     * Return the matrix item at the specified index.  Note that this method\n     * creates a new {@code double} instance every time it is called.\n     *\n     * @param itemIndex item index.\n     *\n     * @return The matrix item at the specified index.\n     *\n     * @see #get(int, int)\n     */\n",
"org.jfree.data.xy.MatrixSeries.getItemColumn": "/**\n     * Returns the column of the specified item.\n     *\n     * @param itemIndex the index of the item.\n     *\n     * @return The column of the specified item.\n     */\n",
"org.jfree.data.xy.MatrixSeries.getItemCount": "/**\n     * Returns the number of items in the series.\n     *\n     * @return The item count.\n     */\n",
"org.jfree.data.xy.MatrixSeries.getItemRow": "/**\n     * Returns the row of the specified item.\n     *\n     * @param itemIndex the index of the item.\n     *\n     * @return The row of the specified item.\n     */\n",
"org.jfree.data.xy.MatrixSeries.getRowCount": "/**\n     * Returns the number of rows in this matrix series.\n     *\n     * @return The number of rows in this matrix series.\n     */\n",
"org.jfree.data.xy.MatrixSeries.get": "/**\n     * Returns the value of the specified item in this matrix series.\n     *\n     * @param i the row of the item.\n     * @param j the column of the item.\n     *\n     * @return The value of the specified item in this matrix series.\n     *\n     * @see #getItem(int)\n     * @see #update(int, int, double)\n     */\n",
"org.jfree.data.xy.MatrixSeries.update": "/**\n     * Updates the value of the specified item in this matrix series.\n     *\n     * @param i the row of the item.\n     * @param j the column of the item.\n     * @param mij the new value for the item.\n     *\n     * @see #get(int, int)\n     */\n",
"org.jfree.data.xy.MatrixSeries.zeroAll": "/**\n     * Sets all matrix values to zero and sends a\n     * {@link org.jfree.data.general.SeriesChangeEvent} to all registered\n     * listeners.\n     */\n",
"org.jfree.data.xy.MatrixSeries.equals": "/**\n     * Tests this object instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.YIntervalSeries.add": "/**\n     * Adds a data item to the series and sends a {@link SeriesChangeEvent} to \n     * all registered listeners.\n     *\n     * @param x  the x-value.\n     * @param y  the y-value.\n     * @param yLow  the lower bound of the y-interval.\n     * @param yHigh  the upper bound of the y-interval.\n     */\n",
"org.jfree.data.xy.YIntervalSeries.add": "/**\n     * Adds a data item to the series and, if requested, sends a \n     * {@link SeriesChangeEvent} to all registered listeners.\n     * \n     * @param item  the data item ({@code null} not permitted).\n     * @param notify  notify listeners?\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.data.xy.YIntervalSeries.getX": "/**\n     * Returns the x-value for the specified item.\n     *\n     * @param index  the item index.\n     *\n     * @return The x-value (never {@code null}).\n     */\n",
"org.jfree.data.xy.YIntervalSeries.getYValue": "/**\n     * Returns the y-value for the specified item.\n     *\n     * @param index  the item index.\n     *\n     * @return The y-value.\n     */\n",
"org.jfree.data.xy.YIntervalSeries.getYLowValue": "/**\n     * Returns the lower bound of the Y-interval for the specified item in the\n     * series.\n     *\n     * @param index  the item index.\n     *\n     * @return The lower bound of the Y-interval.\n     *\n     * @since 1.0.5\n     */\n",
"org.jfree.data.xy.YIntervalSeries.getYHighValue": "/**\n     * Returns the upper bound of the y-interval for the specified item in the\n     * series.\n     *\n     * @param index  the item index.\n     *\n     * @return The upper bound of the y-interval.\n     *\n     * @since 1.0.5\n     */\n",
"org.jfree.data.xy.YIntervalSeries.getDataItem": "/**\n     * Returns the data item at the specified index.\n     *\n     * @param index  the item index.\n     *\n     * @return The data item.\n     */\n",
"org.jfree.data.xy.XIntervalSeriesCollection.addSeries": "/**\n     * Adds a series to the collection and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param series  the series ({@code null} not permitted).\n     */\n",
"org.jfree.data.xy.XIntervalSeriesCollection.getSeriesCount": "/**\n     * Returns the number of series in the collection.\n     *\n     * @return The series count.\n     */\n",
"org.jfree.data.xy.XIntervalSeriesCollection.getSeries": "/**\n     * Returns a series from the collection.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The series.\n     *\n     * @throws IllegalArgumentException if {@code series} is not in the\n     *     range {@code 0} to {@code getSeriesCount() - 1}.\n     */\n",
"org.jfree.data.xy.XIntervalSeriesCollection.getSeriesKey": "/**\n     * Returns the key for a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     *\n     * @return The key for a series.\n     *\n     * @throws IllegalArgumentException if {@code series} is not in the\n     *     specified range.\n     */\n",
"org.jfree.data.xy.XIntervalSeriesCollection.getItemCount": "/**\n     * Returns the number of items in the specified series.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The item count.\n     *\n     * @throws IllegalArgumentException if {@code series} is not in the\n     *     range {@code 0} to {@code getSeriesCount() - 1}.\n     */\n",
"org.jfree.data.xy.XIntervalSeriesCollection.getX": "/**\n     * Returns the x-value for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.xy.XIntervalSeriesCollection.getStartXValue": "/**\n     * Returns the start x-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xy.XIntervalSeriesCollection.getEndXValue": "/**\n     * Returns the end x-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xy.XIntervalSeriesCollection.getYValue": "/**\n     * Returns the y-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xy.XIntervalSeriesCollection.getY": "/**\n     * Returns the y-value for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The y-value.\n     */\n",
"org.jfree.data.xy.XIntervalSeriesCollection.getStartX": "/**\n     * Returns the start x-value for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.xy.XIntervalSeriesCollection.getEndX": "/**\n     * Returns the end x-value for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.xy.XIntervalSeriesCollection.getStartY": "/**\n     * Returns the start y-value for an item within a series.  This method\n     * maps directly to {@link #getY(int, int)}.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The start y-value.\n     */\n",
"org.jfree.data.xy.XIntervalSeriesCollection.getEndY": "/**\n     * Returns the end y-value for an item within a series.  This method\n     * maps directly to {@link #getY(int, int)}.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The end y-value.\n     */\n",
"org.jfree.data.xy.XIntervalSeriesCollection.removeSeries": "/**\n     * Removes a series from the collection and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.data.xy.XIntervalSeriesCollection.removeSeries": "/**\n     * Removes a series from the collection and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param series  the series ({@code null} not permitted).\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.data.xy.XIntervalSeriesCollection.removeAllSeries": "/**\n     * Removes all the series from the collection and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.data.xy.XIntervalSeriesCollection.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.XIntervalSeriesCollection.clone": "/**\n     * Returns a clone of this instance.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem.\n     */\n",
"org.jfree.data.xy.XYZDataset.getZ": "/**\n     * Returns the z-value for the specified series and item.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The z-value (possibly {@code null}).\n     */\n",
"org.jfree.data.xy.XYZDataset.getZValue": "/**\n     * Returns the z-value (as a double primitive) for an item within a series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The z-value.\n     */\n",
"org.jfree.data.xy.MatrixSeriesCollection.getItemCount": "/**\n     * Returns the number of items in the specified series.\n     *\n     * @param seriesIndex zero-based series index.\n     *\n     * @return The number of items in the specified series.\n     */\n",
"org.jfree.data.xy.MatrixSeriesCollection.getSeries": "/**\n     * Returns the series having the specified index.\n     *\n     * @param seriesIndex zero-based series index.\n     *\n     * @return The series.\n     */\n",
"org.jfree.data.xy.MatrixSeriesCollection.getSeriesCount": "/**\n     * Returns the number of series in the collection.\n     *\n     * @return The number of series in the collection.\n     */\n",
"org.jfree.data.xy.MatrixSeriesCollection.getSeriesKey": "/**\n     * Returns the key for a series.\n     *\n     * @param seriesIndex zero-based series index.\n     *\n     * @return The key for a series.\n     */\n",
"org.jfree.data.xy.MatrixSeriesCollection.getX": "/**\n     * Returns the j index value of the specified Mij matrix item in the\n     * specified matrix series.\n     *\n     * @param seriesIndex zero-based series index.\n     * @param itemIndex zero-based item index.\n     *\n     * @return The j index value for the specified matrix item.\n     *\n     * @see org.jfree.data.xy.XYDataset#getXValue(int, int)\n     */\n",
"org.jfree.data.xy.MatrixSeriesCollection.getY": "/**\n     * Returns the i index value of the specified Mij matrix item in the\n     * specified matrix series.\n     *\n     * @param seriesIndex zero-based series index.\n     * @param itemIndex zero-based item index.\n     *\n     * @return The i index value for the specified matrix item.\n     *\n     * @see org.jfree.data.xy.XYDataset#getYValue(int, int)\n     */\n",
"org.jfree.data.xy.MatrixSeriesCollection.getZ": "/**\n     * Returns the Mij item value of the specified Mij matrix item in the\n     * specified matrix series.\n     *\n     * @param seriesIndex the series (zero-based index).\n     * @param itemIndex zero-based item index.\n     *\n     * @return The Mij item value for the specified matrix item.\n     *\n     * @see org.jfree.data.xy.XYZDataset#getZValue(int, int)\n     */\n",
"org.jfree.data.xy.MatrixSeriesCollection.addSeries": "/**\n     * Adds a series to the collection.\n     * <P>\n     * Notifies all registered listeners that the dataset has changed.\n     * </p>\n     *\n     * @param series the series ({@code null} not permitted).\n     */\n",
"org.jfree.data.xy.MatrixSeriesCollection.equals": "/**\n     * Tests this collection for equality with an arbitrary object.\n     *\n     * @param obj the object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.MatrixSeriesCollection.hashCode": "/**\n     * Returns a hash code.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.xy.MatrixSeriesCollection.clone": "/**\n     * Returns a clone of this instance.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem.\n     */\n",
"org.jfree.data.xy.MatrixSeriesCollection.removeAllSeries": "/**\n     * Removes all the series from the collection.\n     * <P>\n     * Notifies all registered listeners that the dataset has changed.\n     * </p>\n     */\n",
"org.jfree.data.xy.MatrixSeriesCollection.removeSeries": "/**\n     * Removes a series from the collection.\n     * <P>\n     * Notifies all registered listeners that the dataset has changed.\n     * </p>\n     *\n     * @param series the series ({@code null}).\n     */\n",
"org.jfree.data.xy.MatrixSeriesCollection.removeSeries": "/**\n     * Removes a series from the collection.\n     * <P>\n     * Notifies all registered listeners that the dataset has changed.\n     *\n     * @param seriesIndex the series (zero based index).\n     */\n",
"org.jfree.data.xy.IntervalXYDataset.getStartX": "/**\n     * Returns the lower bound of the x-interval for the specified series and\n     * item.  If this lower bound is specified, it should be less than or\n     * equal to the upper bound of the interval (if one is specified).\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The lower bound of the x-interval ({@code null} permitted).\n     */\n",
"org.jfree.data.xy.IntervalXYDataset.getStartXValue": "/**\n     * Returns the lower bound of the x-interval (as a double primitive) for\n     * the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The lower bound of the x-interval.\n     *\n     * @see #getStartX(int, int)\n     */\n",
"org.jfree.data.xy.IntervalXYDataset.getEndX": "/**\n     * Returns the upper bound of the x-interval for the specified series and\n     * item.  If this upper bound is specified, it should be greater than or\n     * equal to the lower bound of the interval (if one is specified).\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The upper bound of the x-interval ({@code null} permitted).\n     */\n",
"org.jfree.data.xy.IntervalXYDataset.getEndXValue": "/**\n     * Returns the upper bound of the x-interval (as a double primitive) for\n     * the specified series and item.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The upper bound of the x-interval.\n     *\n     * @see #getEndX(int, int)\n     */\n",
"org.jfree.data.xy.IntervalXYDataset.getStartY": "/**\n     * Returns the lower bound of the y-interval for the specified series and\n     * item.  If this lower bound is specified, it should be less than or\n     * equal to the upper bound of the interval (if one is specified).\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The lower bound of the y-interval ({@code null} permitted).\n     */\n",
"org.jfree.data.xy.IntervalXYDataset.getStartYValue": "/**\n     * Returns the lower bound of the y-interval (as a double primitive) for\n     * the specified series and item.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The lower bound of the y-interval.\n     *\n     * @see #getStartY(int, int)\n     */\n",
"org.jfree.data.xy.IntervalXYDataset.getEndY": "/**\n     * Returns the upper bound of the y-interval for the specified series and\n     * item.  If this upper bound is specified, it should be greater than or\n     * equal to the lower bound of the interval (if one is specified).\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The upper bound of the y-interval ({@code null} permitted).\n     */\n",
"org.jfree.data.xy.IntervalXYDataset.getEndYValue": "/**\n     * Returns the upper bound of the y-interval (as a double primitive) for\n     * the specified series and item.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The upper bound of the y-interval.\n     *\n     * @see #getEndY(int, int)\n     */\n",
"org.jfree.data.xy.XYIntervalSeries.add": "/**\n     * Adds a data item to the series and sends a {@link SeriesChangeEvent} to \n     * all registered listeners.\n     *\n     * @param x  the x-value.\n     * @param xLow  the lower bound of the x-interval.\n     * @param xHigh  the upper bound of the x-interval.\n     * @param y  the y-value.\n     * @param yLow  the lower bound of the y-interval.\n     * @param yHigh  the upper bound of the y-interval.\n     */\n",
"org.jfree.data.xy.XYIntervalSeries.add": "/**\n     * Adds a data item to the series and, if requested, sends a \n     * {@link SeriesChangeEvent} to all registered listeners.\n     * \n     * @param item  the data item ({@code null} not permitted).\n     * @param notify  notify listeners?\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.data.xy.XYIntervalSeries.getX": "/**\n     * Returns the x-value for the specified item.\n     *\n     * @param index  the item index.\n     *\n     * @return The x-value (never {@code null}).\n     */\n",
"org.jfree.data.xy.XYIntervalSeries.getXLowValue": "/**\n     * Returns the lower bound of the x-interval for the specified item in the\n     * series.\n     *\n     * @param index  the item index.\n     *\n     * @return The lower bound of the x-interval.\n     *\n     * @since 1.0.5\n     */\n",
"org.jfree.data.xy.XYIntervalSeries.getXHighValue": "/**\n     * Returns the upper bound of the x-interval for the specified item in the\n     * series.\n     *\n     * @param index  the item index.\n     *\n     * @return The upper bound of the x-interval.\n     *\n     * @since 1.0.5\n     */\n",
"org.jfree.data.xy.XYIntervalSeries.getYValue": "/**\n     * Returns the y-value for the specified item.\n     *\n     * @param index  the item index.\n     *\n     * @return The y-value.\n     */\n",
"org.jfree.data.xy.XYIntervalSeries.getYLowValue": "/**\n     * Returns the lower bound of the Y-interval for the specified item in the\n     * series.\n     *\n     * @param index  the item index.\n     *\n     * @return The lower bound of the Y-interval.\n     *\n     * @since 1.0.5\n     */\n",
"org.jfree.data.xy.XYIntervalSeries.getYHighValue": "/**\n     * Returns the upper bound of the y-interval for the specified item in the\n     * series.\n     *\n     * @param index  the item index.\n     *\n     * @return The upper bound of the y-interval.\n     *\n     * @since 1.0.5\n     */\n",
"org.jfree.data.xy.XYIntervalSeries.getDataItem": "/**\n     * Returns the data item at the specified index.\n     *\n     * @param index  the item index.\n     *\n     * @return The data item.\n     */\n",
"org.jfree.data.xy.XYIntervalSeriesCollection.addSeries": "/**\n     * Adds a series to the collection and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param series  the series ({@code null} not permitted).\n     */\n",
"org.jfree.data.xy.XYIntervalSeriesCollection.getSeriesCount": "/**\n     * Returns the number of series in the collection.\n     *\n     * @return The series count.\n     */\n",
"org.jfree.data.xy.XYIntervalSeriesCollection.getSeries": "/**\n     * Returns a series from the collection.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The series.\n     *\n     * @throws IllegalArgumentException if {@code series} is not in the\n     *     range {@code 0} to {@code getSeriesCount() - 1}.\n     */\n",
"org.jfree.data.xy.XYIntervalSeriesCollection.getSeriesKey": "/**\n     * Returns the key for a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     *\n     * @return The key for a series.\n     *\n     * @throws IllegalArgumentException if {@code series} is not in the\n     *     specified range.\n     */\n",
"org.jfree.data.xy.XYIntervalSeriesCollection.getItemCount": "/**\n     * Returns the number of items in the specified series.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The item count.\n     *\n     * @throws IllegalArgumentException if {@code series} is not in the\n     *     range {@code 0} to {@code getSeriesCount() - 1}.\n     */\n",
"org.jfree.data.xy.XYIntervalSeriesCollection.getX": "/**\n     * Returns the x-value for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.xy.XYIntervalSeriesCollection.getStartXValue": "/**\n     * Returns the start x-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xy.XYIntervalSeriesCollection.getEndXValue": "/**\n     * Returns the end x-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xy.XYIntervalSeriesCollection.getYValue": "/**\n     * Returns the y-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xy.XYIntervalSeriesCollection.getStartYValue": "/**\n     * Returns the start y-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xy.XYIntervalSeriesCollection.getEndYValue": "/**\n     * Returns the end y-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xy.XYIntervalSeriesCollection.getY": "/**\n     * Returns the y-value for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The y-value.\n     */\n",
"org.jfree.data.xy.XYIntervalSeriesCollection.getStartX": "/**\n     * Returns the start x-value for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.xy.XYIntervalSeriesCollection.getEndX": "/**\n     * Returns the end x-value for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.xy.XYIntervalSeriesCollection.getStartY": "/**\n     * Returns the start y-value for an item within a series.  This method\n     * maps directly to {@link #getY(int, int)}.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The start y-value.\n     */\n",
"org.jfree.data.xy.XYIntervalSeriesCollection.getEndY": "/**\n     * Returns the end y-value for an item within a series.  This method\n     * maps directly to {@link #getY(int, int)}.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The end y-value.\n     */\n",
"org.jfree.data.xy.XYIntervalSeriesCollection.removeSeries": "/**\n     * Removes a series from the collection and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.data.xy.XYIntervalSeriesCollection.removeSeries": "/**\n     * Removes a series from the collection and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param series  the series ({@code null} not permitted).\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.data.xy.XYIntervalSeriesCollection.removeAllSeries": "/**\n     * Removes all the series from the collection and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.data.xy.XYIntervalSeriesCollection.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.XYIntervalSeriesCollection.clone": "/**\n     * Returns a clone of this dataset.\n     *\n     * @return A clone of this dataset.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning.\n     */\n",
"org.jfree.data.xy.XisSymbolic.getXSymbolicValues": "/**\n     * Returns the list of symbolic values.\n     *\n     * @return An array of symbolic values.\n     */\n",
"org.jfree.data.xy.XisSymbolic.getXSymbolicValue": "/**\n     * Returns the symbolic value of the data set specified by\n     * {@code series} and {@code item} parameters.\n     *\n     * @param series  value of the serie.\n     * @param item  value of the item.\n     *\n     * @return The symbolic value.\n     */\n",
"org.jfree.data.xy.XisSymbolic.getXSymbolicValue": "/**\n     * Returns the symbolic value linked with the specified {@code Integer}.\n     *\n     * @param val  value of the integer linked with the symbolic value.\n     *\n     * @return The symbolic value.\n     */\n",
"org.jfree.data.xy.WindDataset.getWindDirection": "/**\n     * Returns the wind direction (should be in the range 0 to 12,\n     * corresponding to the positions on an upside-down clock face).\n     *\n     * @param series  the series (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item (in the range {@code 0} to\n     *     {@code getItemCount(series) - 1}).\n     *\n     * @return The wind direction.\n     */\n",
"org.jfree.data.xy.WindDataset.getWindForce": "/**\n     * Returns the wind force on the Beaufort scale (0 to 12).  See:\n     * <p>\n     * http://en.wikipedia.org/wiki/Beaufort_scale\n     *\n     * @param series  the series (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item (in the range {@code 0} to\n     *     {@code getItemCount(series) - 1}).\n     *\n     * @return The wind force.\n     */\n",
"org.jfree.data.xy.YIntervalDataItem.getX": "/**\n     * Returns the x-value.\n     *\n     * @return The x-value (never {@code null}).\n     */\n",
"org.jfree.data.xy.YIntervalDataItem.getYValue": "/**\n     * Returns the y-value.\n     *\n     * @return The y-value.\n     */\n",
"org.jfree.data.xy.YIntervalDataItem.getYLowValue": "/**\n     * Returns the lower bound of the y-interval.\n     *\n     * @return The lower bound of the y-interval.\n     */\n",
"org.jfree.data.xy.YIntervalDataItem.getYHighValue": "/**\n     * Returns the upper bound of the y-interval.\n     *\n     * @return The upper bound of the y-interval.\n     */\n",
"org.jfree.data.xy.DefaultXYDataset.getSeriesCount": "/**\n     * Returns the number of series in the dataset.\n     *\n     * @return The series count.\n     */\n",
"org.jfree.data.xy.DefaultXYDataset.getSeriesKey": "/**\n     * Returns the key for a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     *\n     * @return The key for the series.\n     *\n     * @throws IllegalArgumentException if {@code series} is not in the\n     *     specified range.\n     */\n",
"org.jfree.data.xy.DefaultXYDataset.indexOf": "/**\n     * Returns the index of the series with the specified key, or -1 if there\n     * is no such series in the dataset.\n     *\n     * @param seriesKey  the series key ({@code null} permitted).\n     *\n     * @return The index, or -1.\n     */\n",
"org.jfree.data.xy.DefaultXYDataset.getDomainOrder": "/**\n     * Returns the order of the domain (x-) values in the dataset.  In this\n     * implementation, we cannot guarantee that the x-values are ordered, so\n     * this method returns {@code DomainOrder.NONE}.\n     *\n     * @return {@code DomainOrder.NONE}.\n     */\n",
"org.jfree.data.xy.DefaultXYDataset.getItemCount": "/**\n     * Returns the number of items in the specified series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     *\n     * @return The item count.\n     *\n     * @throws IllegalArgumentException if {@code series} is not in the\n     *     specified range.\n     */\n",
"org.jfree.data.xy.DefaultXYDataset.getXValue": "/**\n     * Returns the x-value for an item within a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (in the range {@code 0} to\n     *     {@code getItemCount(series)}).\n     *\n     * @return The x-value.\n     *\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\n     *     within the specified range.\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\n     *     within the specified range.\n     *\n     * @see #getX(int, int)\n     */\n",
"org.jfree.data.xy.DefaultXYDataset.getX": "/**\n     * Returns the x-value for an item within a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (in the range {@code 0} to\n     *     {@code getItemCount(series)}).\n     *\n     * @return The x-value.\n     *\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\n     *     within the specified range.\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\n     *     within the specified range.\n     *\n     * @see #getXValue(int, int)\n     */\n",
"org.jfree.data.xy.DefaultXYDataset.getYValue": "/**\n     * Returns the y-value for an item within a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (in the range {@code 0} to\n     *     {@code getItemCount(series)}).\n     *\n     * @return The y-value.\n     *\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\n     *     within the specified range.\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\n     *     within the specified range.\n     *\n     * @see #getY(int, int)\n     */\n",
"org.jfree.data.xy.DefaultXYDataset.getY": "/**\n     * Returns the y-value for an item within a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (in the range {@code 0} to\n     *     {@code getItemCount(series)}).\n     *\n     * @return The y-value.\n     *\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\n     *     within the specified range.\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\n     *     within the specified range.\n     *\n     * @see #getX(int, int)\n     */\n",
"org.jfree.data.xy.DefaultXYDataset.addSeries": "/**\n     * Adds a series or if a series with the same key already exists replaces\n     * the data for that series, then sends a {@link DatasetChangeEvent} to\n     * all registered listeners.\n     *\n     * @param seriesKey  the series key ({@code null} not permitted).\n     * @param data  the data (must be an array with length 2, containing two\n     *     arrays of equal length, the first containing the x-values and the\n     *     second containing the y-values).\n     */\n",
"org.jfree.data.xy.DefaultXYDataset.removeSeries": "/**\n     * Removes a series from the dataset, then sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param seriesKey  the series key ({@code null} not permitted).\n     *\n     */\n",
"org.jfree.data.xy.DefaultXYDataset.equals": "/**\n     * Tests this {@code DefaultXYDataset} instance for equality with an\n     * arbitrary object.  This method returns {@code true} if and only if:\n     * <ul>\n     * <li>{@code obj} is not {@code null};</li>\n     * <li>{@code obj} is an instance of {@code DefaultXYDataset};</li>\n     * <li>both datasets have the same number of series, each containing\n     *         exactly the same values.</li>\n     * </ul>\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.DefaultXYDataset.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.xy.DefaultXYDataset.clone": "/**\n     * Creates an independent copy of this dataset.\n     *\n     * @return The cloned dataset.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning the\n     *     dataset (for instance, if a non-cloneable object is used for a\n     *     series key).\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.isAutoPrune": "/**\n     * Returns the flag that controls whether or not x-values are removed from\n     * the dataset when the corresponding y-values are all {@code null}.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.addSeries": "/**\n     * Adds a series to the collection and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.  The series should be configured to NOT\n     * allow duplicate x-values.\n     *\n     * @param series  the series ({@code null} not permitted).\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.updateXPoints": "/**\n     * Adds any unique x-values from 'series' to the dataset, and also adds any\n     * x-values that are in the dataset but not in 'series' to the series.\n     *\n     * @param series  the series ({@code null} not permitted).\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.updateXPoints": "/**\n     * Updates the x-values for all the series in the dataset.\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.getSeriesCount": "/**\n     * Returns the number of series in the collection.\n     *\n     * @return The series count.\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.getItemCount": "/**\n     * Returns the number of x values in the dataset.\n     *\n     * @return The number of x values in the dataset.\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.getSeries": "/**\n     * Returns a series.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The series (never {@code null}).\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.getSeriesKey": "/**\n     * Returns the key for a series.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The key for a series.\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.getItemCount": "/**\n     * Returns the number of items in the specified series.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The number of items in the specified series.\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.getX": "/**\n     * Returns the x-value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The x-value for the specified series and item.\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.getStartX": "/**\n     * Returns the starting X value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The starting X value.\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.getEndX": "/**\n     * Returns the ending X value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The ending X value.\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.getY": "/**\n     * Returns the y-value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param index  the index of the item of interest (zero-based).\n     *\n     * @return The y-value for the specified series and item (possibly\n     *         {@code null}).\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.getStartY": "/**\n     * Returns the starting Y value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The starting Y value.\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.getEndY": "/**\n     * Returns the ending Y value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The ending Y value.\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.removeAllSeries": "/**\n     * Removes all the series from the collection and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.removeSeries": "/**\n     * Removes a series from the collection and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param series  the series ({@code null} not permitted).\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.removeSeries": "/**\n     * Removes a series from the collection and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param series  the series (zero based index).\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.removeAllValuesForX": "/**\n     * Removes the items from all series for a given x value.\n     *\n     * @param x  the x-value.\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.canPrune": "/**\n     * Returns {@code true} if all the y-values for the specified x-value\n     * are {@code null} and {@code false} otherwise.\n     *\n     * @param x  the x-value.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.prune": "/**\n     * Removes all x-values for which all the y-values are {@code null}.\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.seriesChanged": "/**\n     * This method receives notification when a series belonging to the dataset\n     * changes.  It responds by updating the x-points for the entire dataset\n     * and sending a {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param event  information about the change.\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.equals": "/**\n     * Tests this collection for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.hashCode": "/**\n     * Returns a hash code.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.clone": "/**\n     * Returns an independent copy of this dataset.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is some reason that cloning\n     *     cannot be performed.\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.getDomainLowerBound": "/**\n     * Returns the minimum x-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         x-interval is taken into account.\n     *\n     * @return The minimum value.\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.getDomainUpperBound": "/**\n     * Returns the maximum x-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         x-interval is taken into account.\n     *\n     * @return The maximum value.\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.getDomainBounds": "/**\n     * Returns the range of the values in this dataset's domain.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         x-interval is taken into account.\n     *\n     * @return The range.\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.getIntervalPositionFactor": "/**\n     * Returns the interval position factor.\n     *\n     * @return The interval position factor.\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.setIntervalPositionFactor": "/**\n     * Sets the interval position factor. Must be between 0.0 and 1.0 inclusive.\n     * If the factor is 0.5, the gap is in the middle of the x values. If it\n     * is lesser than 0.5, the gap is farther to the left and if greater than\n     * 0.5 it gets farther to the right.\n     *\n     * @param d the new interval position factor.\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.getIntervalWidth": "/**\n     * returns the full interval width.\n     *\n     * @return The interval width to use.\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.setIntervalWidth": "/**\n     * Sets the interval width to a fixed value, and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param d  the new interval width (must be &gt; 0).\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.isAutoWidth": "/**\n     * Returns whether the interval width is automatically calculated or not.\n     *\n     * @return A flag that determines whether or not the interval width is\n     *         automatically calculated.\n     */\n",
"org.jfree.data.xy.DefaultTableXYDataset.setAutoWidth": "/**\n     * Sets the flag that indicates whether the interval width is automatically\n     * calculated or not.\n     *\n     * @param b  a boolean.\n     */\n",
"org.jfree.data.xy.XIntervalSeries.add": "/**\n     * Adds a data item to the series and sends a {@link SeriesChangeEvent} to \n     * all registered listeners.\n     *\n     * @param x  the x-value.\n     * @param y  the y-value.\n     * @param xLow  the lower bound of the y-interval.\n     * @param xHigh  the upper bound of the y-interval.\n     */\n",
"org.jfree.data.xy.XIntervalSeries.add": "/**\n     * Adds a data item to the series and, if requested, sends a \n     * {@link SeriesChangeEvent} to all registered listeners.\n     * \n     * @param item the data item ({@code null} not permitted).\n     * @param notify  notify listeners?\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.data.xy.XIntervalSeries.getX": "/**\n     * Returns the x-value for the specified item.\n     *\n     * @param index  the item index.\n     *\n     * @return The x-value (never {@code null}).\n     */\n",
"org.jfree.data.xy.XIntervalSeries.getXLowValue": "/**\n     * Returns the lower bound of the x-interval for the specified item.\n     *\n     * @param index  the item index.\n     *\n     * @return The lower bound of the x-interval.\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.data.xy.XIntervalSeries.getXHighValue": "/**\n     * Returns the upper bound of the x-interval for the specified item.\n     *\n     * @param index  the item index.\n     *\n     * @return The upper bound of the x-interval.\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.data.xy.XIntervalSeries.getYValue": "/**\n     * Returns the y-value for the specified item.\n     *\n     * @param index  the item index.\n     *\n     * @return The y-value.\n     */\n",
"org.jfree.data.xy.XIntervalSeries.getDataItem": "/**\n     * Returns the data item at the specified index.\n     *\n     * @param index  the item index.\n     *\n     * @return The data item.\n     */\n",
"org.jfree.data.xy.YIntervalSeriesCollection.addSeries": "/**\n     * Adds a series to the collection and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param series  the series ({@code null} not permitted).\n     */\n",
"org.jfree.data.xy.YIntervalSeriesCollection.getSeriesCount": "/**\n     * Returns the number of series in the collection.\n     *\n     * @return The series count.\n     */\n",
"org.jfree.data.xy.YIntervalSeriesCollection.getSeries": "/**\n     * Returns a series from the collection.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The series.\n     *\n     * @throws IllegalArgumentException if {@code series} is not in the\n     *     range {@code 0} to {@code getSeriesCount() - 1}.\n     */\n",
"org.jfree.data.xy.YIntervalSeriesCollection.getSeriesKey": "/**\n     * Returns the key for a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     *\n     * @return The key for a series.\n     *\n     * @throws IllegalArgumentException if {@code series} is not in the\n     *     specified range.\n     */\n",
"org.jfree.data.xy.YIntervalSeriesCollection.getItemCount": "/**\n     * Returns the number of items in the specified series.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The item count.\n     *\n     * @throws IllegalArgumentException if {@code series} is not in the\n     *     range {@code 0} to {@code getSeriesCount() - 1}.\n     */\n",
"org.jfree.data.xy.YIntervalSeriesCollection.getX": "/**\n     * Returns the x-value for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.xy.YIntervalSeriesCollection.getYValue": "/**\n     * Returns the y-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xy.YIntervalSeriesCollection.getStartYValue": "/**\n     * Returns the start y-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xy.YIntervalSeriesCollection.getEndYValue": "/**\n     * Returns the end y-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xy.YIntervalSeriesCollection.getY": "/**\n     * Returns the y-value for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The y-value.\n     */\n",
"org.jfree.data.xy.YIntervalSeriesCollection.getStartX": "/**\n     * Returns the start x-value for an item within a series.  This method\n     * maps directly to {@link #getX(int, int)}.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.xy.YIntervalSeriesCollection.getEndX": "/**\n     * Returns the end x-value for an item within a series.  This method\n     * maps directly to {@link #getX(int, int)}.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.xy.YIntervalSeriesCollection.getStartY": "/**\n     * Returns the start y-value for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The start y-value.\n     */\n",
"org.jfree.data.xy.YIntervalSeriesCollection.getEndY": "/**\n     * Returns the end y-value for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The end y-value.\n     */\n",
"org.jfree.data.xy.YIntervalSeriesCollection.removeSeries": "/**\n     * Removes a series from the collection and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.data.xy.YIntervalSeriesCollection.removeSeries": "/**\n     * Removes a series from the collection and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param series  the series ({@code null} not permitted).\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.data.xy.YIntervalSeriesCollection.removeAllSeries": "/**\n     * Removes all the series from the collection and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.data.xy.YIntervalSeriesCollection.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.YIntervalSeriesCollection.clone": "/**\n     * Returns a clone of this instance.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem.\n     */\n",
"org.jfree.data.xy.XIntervalDataItem.getX": "/**\n     * Returns the x-value.\n     *\n     * @return The x-value (never {@code null}).\n     */\n",
"org.jfree.data.xy.XIntervalDataItem.getYValue": "/**\n     * Returns the y-value.\n     *\n     * @return The y-value.\n     */\n",
"org.jfree.data.xy.XIntervalDataItem.getXLowValue": "/**\n     * Returns the lower bound of the x-interval.\n     *\n     * @return The lower bound of the x-interval.\n     */\n",
"org.jfree.data.xy.XIntervalDataItem.getXHighValue": "/**\n     * Returns the upper bound of the x-interval.\n     *\n     * @return The upper bound of the x-interval.\n     */\n",
"org.jfree.data.xy.XYSeries.getMinX": "/**\n     * Returns the smallest x-value in the series, ignoring any Double.NaN\n     * values.  This method returns Double.NaN if there is no smallest x-value\n     * (for example, when the series is empty).\n     *\n     * @return The smallest x-value.\n     *\n     * @see #getMaxX()\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.data.xy.XYSeries.getMaxX": "/**\n     * Returns the largest x-value in the series, ignoring any Double.NaN\n     * values.  This method returns Double.NaN if there is no largest x-value\n     * (for example, when the series is empty).\n     *\n     * @return The largest x-value.\n     *\n     * @see #getMinX()\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.data.xy.XYSeries.getMinY": "/**\n     * Returns the smallest y-value in the series, ignoring any null and\n     * Double.NaN values.  This method returns Double.NaN if there is no\n     * smallest y-value (for example, when the series is empty).\n     *\n     * @return The smallest y-value.\n     *\n     * @see #getMaxY()\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.data.xy.XYSeries.getMaxY": "/**\n     * Returns the largest y-value in the series, ignoring any Double.NaN\n     * values.  This method returns Double.NaN if there is no largest y-value\n     * (for example, when the series is empty).\n     *\n     * @return The largest y-value.\n     *\n     * @see #getMinY()\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.data.xy.XYSeries.updateBoundsForAddedItem": "/**\n     * Updates the cached values for the minimum and maximum data values.\n     *\n     * @param item  the item added ({@code null} not permitted).\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.data.xy.XYSeries.updateBoundsForRemovedItem": "/**\n     * Updates the cached values for the minimum and maximum data values on\n     * the basis that the specified item has just been removed.\n     *\n     * @param item  the item added ({@code null} not permitted).\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.data.xy.XYSeries.findBoundsByIteration": "/**\n     * Finds the bounds of the x and y values for the series, by iterating\n     * through all the data items.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.data.xy.XYSeries.getAutoSort": "/**\n     * Returns the flag that controls whether the items in the series are\n     * automatically sorted.  There is no setter for this flag, it must be\n     * defined in the series constructor.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.XYSeries.getAllowDuplicateXValues": "/**\n     * Returns a flag that controls whether duplicate x-values are allowed.\n     * This flag can only be set in the constructor.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.XYSeries.getItemCount": "/**\n     * Returns the number of items in the series.\n     *\n     * @return The item count.\n     *\n     * @see #getItems()\n     */\n",
"org.jfree.data.xy.XYSeries.getItems": "/**\n     * Returns the list of data items for the series (the list contains\n     * {@link XYDataItem} objects and is unmodifiable).\n     *\n     * @return The list of data items.\n     */\n",
"org.jfree.data.xy.XYSeries.getMaximumItemCount": "/**\n     * Returns the maximum number of items that will be retained in the series.\n     * The default value is {@code Integer.MAX_VALUE}.\n     *\n     * @return The maximum item count.\n     *\n     * @see #setMaximumItemCount(int)\n     */\n",
"org.jfree.data.xy.XYSeries.setMaximumItemCount": "/**\n     * Sets the maximum number of items that will be retained in the series.\n     * If you add a new item to the series such that the number of items will\n     * exceed the maximum item count, then the first element in the series is\n     * automatically removed, ensuring that the maximum item count is not\n     * exceeded.\n     * <p>\n     * Typically this value is set before the series is populated with data,\n     * but if it is applied later, it may cause some items to be removed from\n     * the series (in which case a {@link SeriesChangeEvent} will be sent to\n     * all registered listeners).\n     *\n     * @param maximum  the maximum number of items for the series.\n     */\n",
"org.jfree.data.xy.XYSeries.add": "/**\n     * Adds a data item to the series and sends a {@link SeriesChangeEvent} to\n     * all registered listeners.\n     *\n     * @param item  the (x, y) item ({@code null} not permitted).\n     */\n",
"org.jfree.data.xy.XYSeries.add": "/**\n     * Adds a data item to the series and sends a {@link SeriesChangeEvent} to\n     * all registered listeners.\n     *\n     * @param x  the x value.\n     * @param y  the y value.\n     */\n",
"org.jfree.data.xy.XYSeries.add": "/**\n     * Adds a data item to the series and, if requested, sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param x  the x value.\n     * @param y  the y value.\n     * @param notify  a flag that controls whether or not a\n     *                {@link SeriesChangeEvent} is sent to all registered\n     *                listeners.\n     */\n",
"org.jfree.data.xy.XYSeries.add": "/**\n     * Adds a data item to the series and sends a {@link SeriesChangeEvent} to\n     * all registered listeners.  The unusual pairing of parameter types is to\n     * make it easier to add {@code null} y-values.\n     *\n     * @param x  the x value.\n     * @param y  the y value ({@code null} permitted).\n     */\n",
"org.jfree.data.xy.XYSeries.add": "/**\n     * Adds a data item to the series and, if requested, sends a\n     * {@link SeriesChangeEvent} to all registered listeners.  The unusual\n     * pairing of parameter types is to make it easier to add null y-values.\n     *\n     * @param x  the x value.\n     * @param y  the y value ({@code null} permitted).\n     * @param notify  a flag that controls whether or not a\n     *                {@link SeriesChangeEvent} is sent to all registered\n     *                listeners.\n     */\n",
"org.jfree.data.xy.XYSeries.add": "/**\n     * Adds a new data item to the series (in the correct position if the\n     * {@code autoSort} flag is set for the series) and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     * <P>\n     * Throws an exception if the x-value is a duplicate AND the\n     * allowDuplicateXValues flag is false.\n     *\n     * @param x  the x-value ({@code null} not permitted).\n     * @param y  the y-value ({@code null} permitted).\n     *\n     * @throws SeriesException if the x-value is a duplicate and the\n     *     {@code allowDuplicateXValues} flag is not set for this series.\n     */\n",
"org.jfree.data.xy.XYSeries.add": "/**\n     * Adds new data to the series and, if requested, sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     * <P>\n     * Throws an exception if the x-value is a duplicate AND the\n     * allowDuplicateXValues flag is false.\n     *\n     * @param x  the x-value ({@code null} not permitted).\n     * @param y  the y-value ({@code null} permitted).\n     * @param notify  a flag the controls whether or not a\n     *                {@link SeriesChangeEvent} is sent to all registered\n     *                listeners.\n     */\n",
"org.jfree.data.xy.XYSeries.add": "/**\n     * Adds a data item to the series and, if requested, sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param item  the (x, y) item ({@code null} not permitted).\n     * @param notify  a flag that controls whether or not a\n     *                {@link SeriesChangeEvent} is sent to all registered\n     *                listeners.\n     */\n",
"org.jfree.data.xy.XYSeries.delete": "/**\n     * Deletes a range of items from the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param start  the start index (zero-based).\n     * @param end  the end index (zero-based).\n     */\n",
"org.jfree.data.xy.XYSeries.remove": "/**\n     * Removes the item at the specified index and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param index  the index.\n     *\n     * @return The item removed.\n     */\n",
"org.jfree.data.xy.XYSeries.remove": "/**\n     * Removes an item with the specified x-value and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.  Note that when\n     * a series permits multiple items with the same x-value, this method\n     * could remove any one of the items with that x-value.\n     *\n     * @param x  the x-value.\n\n     * @return The item removed.\n     */\n",
"org.jfree.data.xy.XYSeries.clear": "/**\n     * Removes all data items from the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     */\n",
"org.jfree.data.xy.XYSeries.getDataItem": "/**\n     * Return the data item with the specified index.\n     *\n     * @param index  the index.\n     *\n     * @return The data item with the specified index.\n     */\n",
"org.jfree.data.xy.XYSeries.getRawDataItem": "/**\n     * Return the data item with the specified index.\n     *\n     * @param index  the index.\n     *\n     * @return The data item with the specified index.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.data.xy.XYSeries.getX": "/**\n     * Returns the x-value at the specified index.\n     *\n     * @param index  the index (zero-based).\n     *\n     * @return The x-value (never {@code null}).\n     */\n",
"org.jfree.data.xy.XYSeries.getY": "/**\n     * Returns the y-value at the specified index.\n     *\n     * @param index  the index (zero-based).\n     *\n     * @return The y-value (possibly {@code null}).\n     */\n",
"org.jfree.data.xy.XYSeries.minIgnoreNaN": "/**\n     * A function to find the minimum of two values, but ignoring any\n     * Double.NaN values.\n     *\n     * @param a  the first value.\n     * @param b  the second value.\n     *\n     * @return The minimum of the two values.\n     */\n",
"org.jfree.data.xy.XYSeries.maxIgnoreNaN": "/**\n     * A function to find the maximum of two values, but ignoring any\n     * Double.NaN values.\n     *\n     * @param a  the first value.\n     * @param b  the second value.\n     *\n     * @return The maximum of the two values.\n     */\n",
"org.jfree.data.xy.XYSeries.updateByIndex": "/**\n     * Updates the value of an item in the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param index  the item (zero based index).\n     * @param y  the new value ({@code null} permitted).\n     *\n     * @since 1.0.1\n     */\n",
"org.jfree.data.xy.XYSeries.update": "/**\n     * Updates an item in the series.\n     *\n     * @param x  the x-value ({@code null} not permitted).\n     * @param y  the y-value ({@code null} permitted).\n     *\n     * @throws SeriesException if there is no existing item with the specified\n     *         x-value.\n     */\n",
"org.jfree.data.xy.XYSeries.addOrUpdate": "/**\n     * Adds or updates an item in the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param x  the x-value.\n     * @param y  the y-value.\n     *\n     * @return The item that was overwritten, if any.\n     *\n     * @since 1.0.10\n     */\n",
"org.jfree.data.xy.XYSeries.addOrUpdate": "/**\n     * Adds or updates an item in the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param x  the x-value ({@code null} not permitted).\n     * @param y  the y-value ({@code null} permitted).\n     *\n     * @return A copy of the overwritten data item, or {@code null} if no\n     *         item was overwritten.\n     */\n",
"org.jfree.data.xy.XYSeries.addOrUpdate": "/**\n     * Adds or updates an item in the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param item  the data item ({@code null} not permitted).\n     *\n     * @return A copy of the overwritten data item, or {@code null} if no\n     *         item was overwritten.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.data.xy.XYSeries.indexOf": "/**\n     * Returns the index of the item with the specified x-value, or a negative\n     * index if the series does not contain an item with that x-value.  Be\n     * aware that for an unsorted series, the index is found by iterating\n     * through all items in the series.\n     *\n     * @param x  the x-value ({@code null} not permitted).\n     *\n     * @return The index.\n     */\n",
"org.jfree.data.xy.XYSeries.toArray": "/**\n     * Returns a new array containing the x and y values from this series.\n     *\n     * @return A new array containing the x and y values from this series.\n     *\n     * @since 1.0.4\n     */\n",
"org.jfree.data.xy.XYSeries.clone": "/**\n     * Returns a clone of the series.\n     *\n     * @return A clone of the series.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n",
"org.jfree.data.xy.XYSeries.createCopy": "/**\n     * Creates a new series by copying a subset of the data in this time series.\n     *\n     * @param start  the index of the first item to copy.\n     * @param end  the index of the last item to copy.\n     *\n     * @return A series containing a copy of this series from start until end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n",
"org.jfree.data.xy.XYSeries.equals": "/**\n     * Tests this series for equality with an arbitrary object.\n     *\n     * @param obj  the object to test against for equality\n     *             ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.XYSeries.hashCode": "/**\n     * Returns a hash code.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.xy.OHLCDataItem.getDate": "/**\n     * Returns the date that the data item relates to.\n     *\n     * @return The date (never {@code null}).\n     */\n",
"org.jfree.data.xy.OHLCDataItem.getOpen": "/**\n     * Returns the open value.\n     *\n     * @return The open value (never {@code null}).\n     */\n",
"org.jfree.data.xy.OHLCDataItem.getHigh": "/**\n     * Returns the high value.\n     *\n     * @return The high value (never {@code null}).\n     */\n",
"org.jfree.data.xy.OHLCDataItem.getLow": "/**\n     * Returns the low value.\n     *\n     * @return The low value (never {@code null}).\n     */\n",
"org.jfree.data.xy.OHLCDataItem.getClose": "/**\n     * Returns the close value.\n     *\n     * @return The close value (never {@code null}).\n     */\n",
"org.jfree.data.xy.OHLCDataItem.getVolume": "/**\n     * Returns the volume.\n     *\n     * @return The volume (never {@code null}).\n     */\n",
"org.jfree.data.xy.OHLCDataItem.equals": "/**\n     * Checks this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.OHLCDataItem.compareTo": "/**\n     * Compares this object with the specified object for order. Returns a\n     * negative integer, zero, or a positive integer as this object is less\n     * than, equal to, or greater than the specified object.\n     *\n     * @param object  the object to compare to.\n     *\n     * @return A negative integer, zero, or a positive integer as this object\n     *         is less than, equal to, or greater than the specified object.\n     */\n",
"org.jfree.data.xy.XYDomainInfo.getDomainBounds": "/**\n     * Returns the range of the values in this dataset's domain.\n     *\n     * @param visibleSeriesKeys  the keys of the visible series.\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     *\n     * @return The range (or {@code null} if the dataset contains no\n     *     values).\n     */\n",
"org.jfree.data.xy.NormalizedMatrixSeries.getItem": "/**\n     * Returns an item.\n     *\n     * @param itemIndex  the index.\n     *\n     * @return The value.\n     *\n     * @see org.jfree.data.xy.MatrixSeries#getItem(int)\n     */\n",
"org.jfree.data.xy.NormalizedMatrixSeries.setScaleFactor": "/**\n     * Sets the factor that multiplies each item in this series when observed\n     * using getItem mehtod.\n     *\n     * @param factor new factor to set.\n     *\n     * @see #DEFAULT_SCALE_FACTOR\n     */\n",
"org.jfree.data.xy.NormalizedMatrixSeries.getScaleFactor": "/**\n     * Returns the factor that multiplies each item in this series when\n     * observed using getItem mehtod.\n     *\n     * @return The factor\n     */\n",
"org.jfree.data.xy.NormalizedMatrixSeries.update": "/**\n     * Updates the value of the specified item in this matrix series.\n     *\n     * @param i the row of the item.\n     * @param j the column of the item.\n     * @param mij the new value for the item.\n     *\n     * @see #get(int, int)\n     */\n",
"org.jfree.data.xy.NormalizedMatrixSeries.zeroAll": "/**\n     * @see org.jfree.data.xy.MatrixSeries#zeroAll()\n     */\n",
"org.jfree.data.xy.XYIntervalDataItem.getX": "/**\n     * Returns the x-value.\n     *\n     * @return The x-value (never {@code null}).\n     */\n",
"org.jfree.data.xy.XYIntervalDataItem.getYValue": "/**\n     * Returns the y-value.\n     *\n     * @return The y-value.\n     */\n",
"org.jfree.data.xy.XYIntervalDataItem.getXLowValue": "/**\n     * Returns the lower bound of the x-interval.\n     *\n     * @return The lower bound of the x-interval.\n     */\n",
"org.jfree.data.xy.XYIntervalDataItem.getXHighValue": "/**\n     * Returns the upper bound of the x-interval.\n     *\n     * @return The upper bound of the x-interval.\n     */\n",
"org.jfree.data.xy.XYIntervalDataItem.getYLowValue": "/**\n     * Returns the lower bound of the y-interval.\n     *\n     * @return The lower bound of the y-interval.\n     */\n",
"org.jfree.data.xy.XYIntervalDataItem.getYHighValue": "/**\n     * Returns the upper bound of the y-interval.\n     *\n     * @return The upper bound of the y-interval.\n     */\n",
"org.jfree.data.xy.DefaultXYZDataset.getSeriesCount": "/**\n     * Returns the number of series in the dataset.\n     *\n     * @return The series count.\n     */\n",
"org.jfree.data.xy.DefaultXYZDataset.getSeriesKey": "/**\n     * Returns the key for a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     *\n     * @return The key for the series.\n     *\n     * @throws IllegalArgumentException if {@code series} is not in the\n     *     specified range.\n     */\n",
"org.jfree.data.xy.DefaultXYZDataset.indexOf": "/**\n     * Returns the index of the series with the specified key, or -1 if there\n     * is no such series in the dataset.\n     *\n     * @param seriesKey  the series key ({@code null} permitted).\n     *\n     * @return The index, or -1.\n     */\n",
"org.jfree.data.xy.DefaultXYZDataset.getDomainOrder": "/**\n     * Returns the order of the domain (x-) values in the dataset.  In this\n     * implementation, we cannot guarantee that the x-values are ordered, so\n     * this method returns {@code DomainOrder.NONE}.\n     *\n     * @return {@code DomainOrder.NONE}.\n     */\n",
"org.jfree.data.xy.DefaultXYZDataset.getItemCount": "/**\n     * Returns the number of items in the specified series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     *\n     * @return The item count.\n     *\n     * @throws IllegalArgumentException if {@code series} is not in the\n     *     specified range.\n     */\n",
"org.jfree.data.xy.DefaultXYZDataset.getXValue": "/**\n     * Returns the x-value for an item within a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (in the range {@code 0} to\n     *     {@code getItemCount(series)}).\n     *\n     * @return The x-value.\n     *\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\n     *     within the specified range.\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\n     *     within the specified range.\n     *\n     * @see #getX(int, int)\n     */\n",
"org.jfree.data.xy.DefaultXYZDataset.getX": "/**\n     * Returns the x-value for an item within a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (in the range {@code 0} to\n     *     {@code getItemCount(series)}).\n     *\n     * @return The x-value.\n     *\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\n     *     within the specified range.\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\n     *     within the specified range.\n     *\n     * @see #getXValue(int, int)\n     */\n",
"org.jfree.data.xy.DefaultXYZDataset.getYValue": "/**\n     * Returns the y-value for an item within a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (in the range {@code 0} to\n     *     {@code getItemCount(series)}).\n     *\n     * @return The y-value.\n     *\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\n     *     within the specified range.\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\n     *     within the specified range.\n     *\n     * @see #getY(int, int)\n     */\n",
"org.jfree.data.xy.DefaultXYZDataset.getY": "/**\n     * Returns the y-value for an item within a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (in the range {@code 0} to\n     *     {@code getItemCount(series)}).\n     *\n     * @return The y-value.\n     *\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\n     *     within the specified range.\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\n     *     within the specified range.\n     *\n     * @see #getX(int, int)\n     */\n",
"org.jfree.data.xy.DefaultXYZDataset.getZValue": "/**\n     * Returns the z-value for an item within a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (in the range {@code 0} to\n     *     {@code getItemCount(series)}).\n     *\n     * @return The z-value.\n     *\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\n     *     within the specified range.\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\n     *     within the specified range.\n     *\n     * @see #getZ(int, int)\n     */\n",
"org.jfree.data.xy.DefaultXYZDataset.getZ": "/**\n     * Returns the z-value for an item within a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (in the range {@code 0} to\n     *     {@code getItemCount(series)}).\n     *\n     * @return The z-value.\n     *\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\n     *     within the specified range.\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\n     *     within the specified range.\n     *\n     * @see #getZ(int, int)\n     */\n",
"org.jfree.data.xy.DefaultXYZDataset.addSeries": "/**\n     * Adds a series or if a series with the same key already exists replaces\n     * the data for that series, then sends a {@link DatasetChangeEvent} to\n     * all registered listeners.\n     *\n     * @param seriesKey  the series key ({@code null} not permitted).\n     * @param data  the data (must be an array with length 3, containing three\n     *     arrays of equal length, the first containing the x-values, the\n     *     second containing the y-values and the third containing the\n     *     z-values).\n     */\n",
"org.jfree.data.xy.DefaultXYZDataset.removeSeries": "/**\n     * Removes a series from the dataset, then sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param seriesKey  the series key ({@code null} not permitted).\n     *\n     */\n",
"org.jfree.data.xy.DefaultXYZDataset.equals": "/**\n     * Tests this {@code DefaultXYZDataset} instance for equality with an\n     * arbitrary object.  This method returns {@code true} if and only if:\n     * <ul>\n     * <li>{@code obj} is not {@code null};</li>\n     * <li>{@code obj} is an instance of {@code DefaultXYDataset};</li>\n     * <li>both datasets have the same number of series, each containing\n     *         exactly the same values.</li>\n     * </ul>\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.DefaultXYZDataset.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.xy.DefaultXYZDataset.clone": "/**\n     * Creates an independent copy of this dataset.\n     *\n     * @return The cloned dataset.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning the\n     *     dataset (for instance, if a non-cloneable object is used for a\n     *     series key).\n     */\n",
"org.jfree.data.xy.YWithXInterval.getY": "/**\n     * Returns the y-value.\n     *\n     * @return The y-value.\n     */\n",
"org.jfree.data.xy.YWithXInterval.getXLow": "/**\n     * Returns the lower bound of the x-interval.\n     *\n     * @return The lower bound of the x-interval.\n     */\n",
"org.jfree.data.xy.YWithXInterval.getXHigh": "/**\n     * Returns the upper bound of the x-interval.\n     *\n     * @return The upper bound of the x-interval.\n     */\n",
"org.jfree.data.xy.YWithXInterval.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.YInterval.getY": "/**\n     * Returns the y-value.\n     *\n     * @return The y-value.\n     */\n",
"org.jfree.data.xy.YInterval.getYLow": "/**\n     * Returns the lower bound of the y-interval.\n     *\n     * @return The lower bound of the y-interval.\n     */\n",
"org.jfree.data.xy.YInterval.getYHigh": "/**\n     * Returns the upper bound of the y-interval.\n     *\n     * @return The upper bound of the y-interval.\n     */\n",
"org.jfree.data.xy.YInterval.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.DefaultOHLCDataset.getSeriesKey": "/**\n     * Returns the series key.\n     *\n     * @param series  the series index (ignored).\n     *\n     * @return The series key.\n     */\n",
"org.jfree.data.xy.DefaultOHLCDataset.getX": "/**\n     * Returns the x-value for a data item.\n     *\n     * @param series  the series index (ignored).\n     * @param item  the item index (zero-based).\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.xy.DefaultOHLCDataset.getXDate": "/**\n     * Returns the x-value for a data item as a date.\n     *\n     * @param series  the series index (ignored).\n     * @param item  the item index (zero-based).\n     *\n     * @return The x-value as a date.\n     */\n",
"org.jfree.data.xy.DefaultOHLCDataset.getY": "/**\n     * Returns the y-value.\n     *\n     * @param series  the series index (ignored).\n     * @param item  the item index (zero-based).\n     *\n     * @return The y value.\n     */\n",
"org.jfree.data.xy.DefaultOHLCDataset.getHigh": "/**\n     * Returns the high value.\n     *\n     * @param series  the series index (ignored).\n     * @param item  the item index (zero-based).\n     *\n     * @return The high value.\n     */\n",
"org.jfree.data.xy.DefaultOHLCDataset.getHighValue": "/**\n     * Returns the high-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The high-value.\n     */\n",
"org.jfree.data.xy.DefaultOHLCDataset.getLow": "/**\n     * Returns the low value.\n     *\n     * @param series  the series index (ignored).\n     * @param item  the item index (zero-based).\n     *\n     * @return The low value.\n     */\n",
"org.jfree.data.xy.DefaultOHLCDataset.getLowValue": "/**\n     * Returns the low-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The low-value.\n     */\n",
"org.jfree.data.xy.DefaultOHLCDataset.getOpen": "/**\n     * Returns the open value.\n     *\n     * @param series  the series index (ignored).\n     * @param item  the item index (zero-based).\n     *\n     * @return The open value.\n     */\n",
"org.jfree.data.xy.DefaultOHLCDataset.getOpenValue": "/**\n     * Returns the open-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The open-value.\n     */\n",
"org.jfree.data.xy.DefaultOHLCDataset.getClose": "/**\n     * Returns the close value.\n     *\n     * @param series  the series index (ignored).\n     * @param item  the item index (zero-based).\n     *\n     * @return The close value.\n     */\n",
"org.jfree.data.xy.DefaultOHLCDataset.getCloseValue": "/**\n     * Returns the close-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The close-value.\n     */\n",
"org.jfree.data.xy.DefaultOHLCDataset.getVolume": "/**\n     * Returns the trading volume.\n     *\n     * @param series  the series index (ignored).\n     * @param item  the item index (zero-based).\n     *\n     * @return The trading volume.\n     */\n",
"org.jfree.data.xy.DefaultOHLCDataset.getVolumeValue": "/**\n     * Returns the volume-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The volume-value.\n     */\n",
"org.jfree.data.xy.DefaultOHLCDataset.getSeriesCount": "/**\n     * Returns the series count.\n     *\n     * @return 1.\n     */\n",
"org.jfree.data.xy.DefaultOHLCDataset.getItemCount": "/**\n     * Returns the item count for the specified series.\n     *\n     * @param series  the series index (ignored).\n     *\n     * @return The item count.\n     */\n",
"org.jfree.data.xy.DefaultOHLCDataset.sortDataByDate": "/**\n     * Sorts the data into ascending order by date.\n     */\n",
"org.jfree.data.xy.DefaultOHLCDataset.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.DefaultOHLCDataset.clone": "/**\n     * Returns an independent copy of this dataset.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n",
"org.jfree.data.xy.XYDataset.getDomainOrder": "/**\n     * Returns the order of the domain (or X) values returned by the dataset.\n     *\n     * @return The order (never {@code null}).\n     */\n",
"org.jfree.data.xy.XYDataset.getItemCount": "/**\n     * Returns the number of items in a series.\n     * <br><br>\n     * It is recommended that classes that implement this method should throw\n     * an {@code IllegalArgumentException} if the {@code series}\n     * argument is outside the specified range.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     *\n     * @return The item count.\n     */\n",
"org.jfree.data.xy.XYDataset.getX": "/**\n     * Returns the x-value for an item within a series.  The x-values may or\n     * may not be returned in ascending order, that is up to the class\n     * implementing the interface.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (in the range {@code 0} to\n     *     {@code getItemCount(series)}).\n     *\n     * @return The x-value (never {@code null}).\n     */\n",
"org.jfree.data.xy.XYDataset.getXValue": "/**\n     * Returns the x-value for an item within a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (in the range {@code 0} to\n     *     {@code getItemCount(series)}).\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.xy.XYDataset.getY": "/**\n     * Returns the y-value for an item within a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (in the range {@code 0} to\n     *     {@code getItemCount(series)}).\n     *\n     * @return The y-value (possibly {@code null}).\n     */\n",
"org.jfree.data.xy.XYDataset.getYValue": "/**\n     * Returns the y-value (as a double primitive) for an item within a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (in the range {@code 0} to\n     *     {@code getItemCount(series)}).\n     *\n     * @return The y-value.\n     */\n",
"org.jfree.data.xy.CategoryTableXYDataset.add": "/**\n     * Adds a data item to this dataset and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param x  the x value.\n     * @param y  the y value.\n     * @param seriesName  the name of the series to add the data item.\n     */\n",
"org.jfree.data.xy.CategoryTableXYDataset.add": "/**\n     * Adds a data item to this dataset and, if requested, sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param x  the x value.\n     * @param y  the y value.\n     * @param seriesName  the name of the series to add the data item.\n     * @param notify  notify listeners?\n     */\n",
"org.jfree.data.xy.CategoryTableXYDataset.remove": "/**\n     * Removes a value from the dataset.\n     *\n     * @param x  the x-value.\n     * @param seriesName  the series name.\n     */\n",
"org.jfree.data.xy.CategoryTableXYDataset.remove": "/**\n     * Removes an item from the dataset.\n     *\n     * @param x  the x-value.\n     * @param seriesName  the series name.\n     * @param notify  notify listeners?\n     */\n",
"org.jfree.data.xy.CategoryTableXYDataset.clear": "/**\n     * Clears all data from the dataset and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     * \n     * @since 1.0.14\n     */\n",
"org.jfree.data.xy.CategoryTableXYDataset.getSeriesCount": "/**\n     * Returns the number of series in the collection.\n     *\n     * @return The series count.\n     */\n",
"org.jfree.data.xy.CategoryTableXYDataset.getSeriesKey": "/**\n     * Returns the key for a series.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The key for a series.\n     */\n",
"org.jfree.data.xy.CategoryTableXYDataset.getItemCount": "/**\n     * Returns the number of x values in the dataset.\n     *\n     * @return The item count.\n     */\n",
"org.jfree.data.xy.CategoryTableXYDataset.getItemCount": "/**\n     * Returns the number of items in the specified series.\n     * Returns the same as {@link CategoryTableXYDataset#getItemCount()}.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The item count.\n     */\n",
"org.jfree.data.xy.CategoryTableXYDataset.getX": "/**\n     * Returns the x-value for the specified series and item.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xy.CategoryTableXYDataset.getStartX": "/**\n     * Returns the starting X value for the specified series and item.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The starting X value.\n     */\n",
"org.jfree.data.xy.CategoryTableXYDataset.getEndX": "/**\n     * Returns the ending X value for the specified series and item.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The ending X value.\n     */\n",
"org.jfree.data.xy.CategoryTableXYDataset.getY": "/**\n     * Returns the y-value for the specified series and item.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The y value (possibly {@code null}).\n     */\n",
"org.jfree.data.xy.CategoryTableXYDataset.getStartY": "/**\n     * Returns the starting Y value for the specified series and item.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The starting Y value.\n     */\n",
"org.jfree.data.xy.CategoryTableXYDataset.getEndY": "/**\n     * Returns the ending Y value for the specified series and item.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The ending Y value.\n     */\n",
"org.jfree.data.xy.CategoryTableXYDataset.getDomainLowerBound": "/**\n     * Returns the minimum x-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         x-interval is taken into account.\n     *\n     * @return The minimum value.\n     */\n",
"org.jfree.data.xy.CategoryTableXYDataset.getDomainUpperBound": "/**\n     * Returns the maximum x-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         x-interval is taken into account.\n     *\n     * @return The maximum value.\n     */\n",
"org.jfree.data.xy.CategoryTableXYDataset.getDomainBounds": "/**\n     * Returns the range of the values in this dataset's domain.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         x-interval is taken into account.\n     *\n     * @return The range.\n     */\n",
"org.jfree.data.xy.CategoryTableXYDataset.getIntervalPositionFactor": "/**\n     * Returns the interval position factor.\n     *\n     * @return The interval position factor.\n     */\n",
"org.jfree.data.xy.CategoryTableXYDataset.setIntervalPositionFactor": "/**\n     * Sets the interval position factor. Must be between 0.0 and 1.0 inclusive.\n     * If the factor is 0.5, the gap is in the middle of the x values. If it\n     * is lesser than 0.5, the gap is farther to the left and if greater than\n     * 0.5 it gets farther to the right.\n     *\n     * @param d  the new interval position factor.\n     */\n",
"org.jfree.data.xy.CategoryTableXYDataset.getIntervalWidth": "/**\n     * Returns the full interval width.\n     *\n     * @return The interval width to use.\n     */\n",
"org.jfree.data.xy.CategoryTableXYDataset.setIntervalWidth": "/**\n     * Sets the interval width to a fixed value, and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param d  the new interval width (must be &gt; 0).\n     */\n",
"org.jfree.data.xy.CategoryTableXYDataset.isAutoWidth": "/**\n     * Returns whether the interval width is automatically calculated or not.\n     *\n     * @return whether the width is automatically calculated or not.\n     */\n",
"org.jfree.data.xy.CategoryTableXYDataset.setAutoWidth": "/**\n     * Sets the flag that indicates whether the interval width is automatically\n     * calculated or not.\n     *\n     * @param b  the flag.\n     */\n",
"org.jfree.data.xy.CategoryTableXYDataset.equals": "/**\n     * Tests this dataset for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.CategoryTableXYDataset.clone": "/**\n     * Returns an independent copy of this dataset.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is some reason that cloning\n     *     cannot be performed.\n     */\n",
"org.jfree.data.xy.XYDatasetTableModel.setModel": "/**\n     * Sets the model (dataset).\n     *\n     * @param dataset  the dataset.\n     */\n",
"org.jfree.data.xy.XYDatasetTableModel.getRowCount": "/**\n     * Returns the number of rows.\n     *\n     * @return The row count.\n     */\n",
"org.jfree.data.xy.XYDatasetTableModel.getColumnCount": "/**\n     * Gets the number of columns in the model.\n     *\n     * @return The number of columns in the model.\n     */\n",
"org.jfree.data.xy.XYDatasetTableModel.getColumnName": "/**\n     * Returns the column name.\n     *\n     * @param column  the column index.\n     *\n     * @return The column name.\n     */\n",
"org.jfree.data.xy.XYDatasetTableModel.getValueAt": "/**\n     * Returns a value of the specified cell.\n     * Column 0 is the X axis, Columns 1 and over are the Y axis\n     *\n     * @param row  the row number.\n     * @param column  the column number.\n     *\n     * @return The value of the specified cell.\n     */\n",
"org.jfree.data.xy.XYDatasetTableModel.datasetChanged": "/**\n     * Receives notification that the underlying dataset has changed.\n    *\n     * @param event  the event\n     *\n     * @see DatasetChangeListener\n     */\n",
"org.jfree.data.xy.XYDatasetTableModel.isCellEditable": "/**\n     * Returns a flag indicating whether or not the specified cell is editable.\n     *\n     * @param row  the row number.\n     * @param column  the column number.\n     *\n     * @return {@code true} if the specified cell is editable.\n     */\n",
"org.jfree.data.xy.XYDatasetTableModel.setValueAt": "/**\n     * Updates the {@link XYDataset} if allowed.\n     *\n     * @param value  the new value.\n     * @param row  the row.\n     * @param column  the column.\n     */\n",
"org.jfree.data.xy.IntervalXYZDataset.getStartXValue": "/**\n     * Returns the starting X value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item within a series (zero-based index).\n     *\n     * @return The starting X value for the specified series and item.\n     */\n",
"org.jfree.data.xy.IntervalXYZDataset.getEndXValue": "/**\n     * Returns the ending X value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item within a series (zero-based index).\n     *\n     * @return The ending X value for the specified series and item.\n     */\n",
"org.jfree.data.xy.IntervalXYZDataset.getStartYValue": "/**\n     * Returns the starting Y value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item within a series (zero-based index).\n     *\n     * @return The starting Y value for the specified series and item.\n     */\n",
"org.jfree.data.xy.IntervalXYZDataset.getEndYValue": "/**\n     * Returns the ending Y value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item within a series (zero-based index).\n     *\n     * @return The ending Y value for the specified series and item.\n     */\n",
"org.jfree.data.xy.IntervalXYZDataset.getStartZValue": "/**\n     * Returns the starting Z value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item within a series (zero-based index).\n     *\n     * @return The starting Z value for the specified series and item.\n     */\n",
"org.jfree.data.xy.IntervalXYZDataset.getEndZValue": "/**\n     * Returns the ending Z value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item within a series (zero-based index).\n     *\n     * @return The ending Z value for the specified series and item.\n     */\n",
"org.jfree.data.xy.AbstractIntervalXYDataset.getStartXValue": "/**\n     * Returns the start x-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xy.AbstractIntervalXYDataset.getEndXValue": "/**\n     * Returns the end x-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xy.AbstractIntervalXYDataset.getStartYValue": "/**\n     * Returns the start y-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xy.AbstractIntervalXYDataset.getEndYValue": "/**\n     * Returns the end y-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xy.TableXYDataset.getItemCount": "/**\n     * Returns the number of items every series.\n     *\n     * @return The item count.\n     */\n",
"org.jfree.data.xy.YisSymbolic.getYSymbolicValues": "/**\n     * Returns the list of symbolic values.\n     *\n     * @return The symbolic values.\n     */\n",
"org.jfree.data.xy.YisSymbolic.getYSymbolicValue": "/**\n     * Returns the symbolic value of the data set specified by\n     * {@code series} and {@code item} parameters.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The symbolic value.\n     */\n",
"org.jfree.data.xy.YisSymbolic.getYSymbolicValue": "/**\n     * Returns the symbolic value linked with the specified {@code Integer}.\n     *\n     * @param val  value of the integer linked with the symbolic value.\n     *\n     * @return The symbolic value.\n     */\n",
"org.jfree.data.xy.OHLCDataset.getHigh": "/**\n     * Returns the high-value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xy.OHLCDataset.getHighValue": "/**\n     * Returns the high-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The high-value.\n     */\n",
"org.jfree.data.xy.OHLCDataset.getLow": "/**\n     * Returns the low-value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xy.OHLCDataset.getLowValue": "/**\n     * Returns the low-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The low-value.\n     */\n",
"org.jfree.data.xy.OHLCDataset.getOpen": "/**\n     * Returns the open-value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xy.OHLCDataset.getOpenValue": "/**\n     * Returns the open-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The open-value.\n     */\n",
"org.jfree.data.xy.OHLCDataset.getClose": "/**\n     * Returns the y-value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xy.OHLCDataset.getCloseValue": "/**\n     * Returns the close-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The close-value.\n     */\n",
"org.jfree.data.xy.OHLCDataset.getVolume": "/**\n     * Returns the volume for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xy.OHLCDataset.getVolumeValue": "/**\n     * Returns the volume-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The volume-value.\n     */\n",
"org.jfree.data.xy.XYBarDataset.getUnderlyingDataset": "/**\n     * Returns the underlying dataset that was specified via the constructor.\n     *\n     * @return The underlying dataset (never {@code null}).\n     *\n     * @since 1.0.4\n     */\n",
"org.jfree.data.xy.XYBarDataset.getBarWidth": "/**\n     * Returns the bar width.\n     *\n     * @return The bar width.\n     *\n     * @see #setBarWidth(double)\n     * @since 1.0.4\n     */\n",
"org.jfree.data.xy.XYBarDataset.setBarWidth": "/**\n     * Sets the bar width and sends a {@link DatasetChangeEvent} to all\n     * registered listeners.\n     *\n     * @param barWidth  the bar width.\n     *\n     * @see #getBarWidth()\n     * @since 1.0.4\n     */\n",
"org.jfree.data.xy.XYBarDataset.getSeriesCount": "/**\n     * Returns the number of series in the dataset.\n     *\n     * @return The series count.\n     */\n",
"org.jfree.data.xy.XYBarDataset.getSeriesKey": "/**\n     * Returns the key for a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     *\n     * @return The series key.\n     */\n",
"org.jfree.data.xy.XYBarDataset.getItemCount": "/**\n     * Returns the number of items in a series.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The item count.\n     */\n",
"org.jfree.data.xy.XYBarDataset.getX": "/**\n     * Returns the x-value for an item within a series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The x-value.\n     *\n     * @see #getXValue(int, int)\n     */\n",
"org.jfree.data.xy.XYBarDataset.getXValue": "/**\n     * Returns the x-value (as a double primitive) for an item within a series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     *\n     * @see #getX(int, int)\n     */\n",
"org.jfree.data.xy.XYBarDataset.getY": "/**\n     * Returns the y-value for an item within a series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The y-value (possibly {@code null}).\n     *\n     * @see #getYValue(int, int)\n     */\n",
"org.jfree.data.xy.XYBarDataset.getYValue": "/**\n     * Returns the y-value (as a double primitive) for an item within a series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     *\n     * @see #getY(int, int)\n     */\n",
"org.jfree.data.xy.XYBarDataset.getStartX": "/**\n     * Returns the starting X value for the specified series and item.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xy.XYBarDataset.getStartXValue": "/**\n     * Returns the starting x-value (as a double primitive) for an item within\n     * a series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     *\n     * @see #getXValue(int, int)\n     */\n",
"org.jfree.data.xy.XYBarDataset.getEndX": "/**\n     * Returns the ending X value for the specified series and item.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xy.XYBarDataset.getEndXValue": "/**\n     * Returns the ending x-value (as a double primitive) for an item within\n     * a series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     *\n     * @see #getXValue(int, int)\n     */\n",
"org.jfree.data.xy.XYBarDataset.getStartY": "/**\n     * Returns the starting Y value for the specified series and item.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xy.XYBarDataset.getStartYValue": "/**\n     * Returns the starting y-value (as a double primitive) for an item within\n     * a series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     *\n     * @see #getYValue(int, int)\n     */\n",
"org.jfree.data.xy.XYBarDataset.getEndY": "/**\n     * Returns the ending Y value for the specified series and item.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xy.XYBarDataset.getEndYValue": "/**\n     * Returns the ending y-value (as a double primitive) for an item within\n     * a series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     *\n     * @see #getYValue(int, int)\n     */\n",
"org.jfree.data.xy.XYBarDataset.datasetChanged": "/**\n     * Receives notification of an dataset change event.\n     *\n     * @param event  information about the event.\n     */\n",
"org.jfree.data.xy.XYBarDataset.equals": "/**\n     * Tests this dataset for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.XYBarDataset.clone": "/**\n     * Returns an independent copy of the dataset.  Note that:\n     * <ul>\n     * <li>the underlying dataset is only cloned if it implements the\n     * {@link PublicCloneable} interface;</li>\n     * <li>the listeners registered with this dataset are not carried over to\n     * the cloned dataset.</li>\n     * </ul>\n     *\n     * @return An independent copy of the dataset.\n     *\n     * @throws CloneNotSupportedException if the dataset cannot be cloned for\n     *         any reason.\n     */\n",
"org.jfree.data.xy.XYInterval.getXLow": "/**\n     * Returns the lower bound of the x-interval.\n     *\n     * @return The lower bound of the x-interval.\n     */\n",
"org.jfree.data.xy.XYInterval.getXHigh": "/**\n     * Returns the upper bound of the x-interval.\n     *\n     * @return The upper bound of the x-interval.\n     */\n",
"org.jfree.data.xy.XYInterval.getY": "/**\n     * Returns the y-value.\n     *\n     * @return The y-value.\n     */\n",
"org.jfree.data.xy.XYInterval.getYLow": "/**\n     * Returns the lower bound of the y-interval.\n     *\n     * @return The lower bound of the y-interval.\n     */\n",
"org.jfree.data.xy.XYInterval.getYHigh": "/**\n     * Returns the upper bound of the y-interval.\n     *\n     * @return The upper bound of the y-interval.\n     */\n",
"org.jfree.data.xy.XYInterval.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.XYItemKey.getSeriesKey": "/**\n     * Returns the series key.\n     * \n     * @return The series key (never {@code null}). \n     */\n",
"org.jfree.data.xy.XYItemKey.getItemIndex": "/**\n     * Returns the item index.\n     * \n     * @return The item index.\n     */\n",
"org.jfree.data.xy.XYItemKey.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     * \n     * @param obj  the object to test ({@code null} permitted).\n     * \n     * @return A boolean. \n     */\n",
"org.jfree.data.xy.DefaultHighLowDataset.getSeriesKey": "/**\n     * Returns the key for the series stored in this dataset.\n     *\n     * @param series  the index of the series (ignored, this dataset supports\n     *     only one series and this method always returns the key for series 0).\n     *\n     * @return The series key (never {@code null}).\n     */\n",
"org.jfree.data.xy.DefaultHighLowDataset.getX": "/**\n     * Returns the x-value for one item in a series.  The value returned is a\n     * {@code Long} instance generated from the underlying\n     * {@code Date} object.  To avoid generating a new object instance,\n     * you might prefer to call {@link #getXValue(int, int)}.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The x-value.\n     *\n     * @see #getXValue(int, int)\n     * @see #getXDate(int, int)\n     */\n",
"org.jfree.data.xy.DefaultHighLowDataset.getXDate": "/**\n     * Returns the x-value for one item in a series, as a Date.\n     * <p>\n     * This method is provided for convenience only.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The x-value as a Date.\n     *\n     * @see #getX(int, int)\n     */\n",
"org.jfree.data.xy.DefaultHighLowDataset.getY": "/**\n     * Returns the y-value for one item in a series.\n     * <p>\n     * This method (from the {@link XYDataset} interface) is mapped to the\n     * {@link #getCloseValue(int, int)} method.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The y-value.\n     *\n     * @see #getYValue(int, int)\n     */\n",
"org.jfree.data.xy.DefaultHighLowDataset.getHigh": "/**\n     * Returns the high-value for one item in a series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The high-value.\n     *\n     * @see #getHighValue(int, int)\n     */\n",
"org.jfree.data.xy.DefaultHighLowDataset.getHighValue": "/**\n     * Returns the high-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The high-value.\n     *\n     * @see #getHigh(int, int)\n     */\n",
"org.jfree.data.xy.DefaultHighLowDataset.getLow": "/**\n     * Returns the low-value for one item in a series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The low-value.\n     *\n     * @see #getLowValue(int, int)\n     */\n",
"org.jfree.data.xy.DefaultHighLowDataset.getLowValue": "/**\n     * Returns the low-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The low-value.\n     *\n     * @see #getLow(int, int)\n     */\n",
"org.jfree.data.xy.DefaultHighLowDataset.getOpen": "/**\n     * Returns the open-value for one item in a series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The open-value.\n     *\n     * @see #getOpenValue(int, int)\n     */\n",
"org.jfree.data.xy.DefaultHighLowDataset.getOpenValue": "/**\n     * Returns the open-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The open-value.\n     *\n     * @see #getOpen(int, int)\n     */\n",
"org.jfree.data.xy.DefaultHighLowDataset.getClose": "/**\n     * Returns the close-value for one item in a series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The close-value.\n     *\n     * @see #getCloseValue(int, int)\n     */\n",
"org.jfree.data.xy.DefaultHighLowDataset.getCloseValue": "/**\n     * Returns the close-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The close-value.\n     *\n     * @see #getClose(int, int)\n     */\n",
"org.jfree.data.xy.DefaultHighLowDataset.getVolume": "/**\n     * Returns the volume-value for one item in a series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The volume-value.\n     *\n     * @see #getVolumeValue(int, int)\n     */\n",
"org.jfree.data.xy.DefaultHighLowDataset.getVolumeValue": "/**\n     * Returns the volume-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The volume-value.\n     *\n     * @see #getVolume(int, int)\n     */\n",
"org.jfree.data.xy.DefaultHighLowDataset.getSeriesCount": "/**\n     * Returns the number of series in the dataset.\n     * <p>\n     * This implementation only allows one series.\n     *\n     * @return The number of series.\n     */\n",
"org.jfree.data.xy.DefaultHighLowDataset.getItemCount": "/**\n     * Returns the number of items in the specified series.\n     *\n     * @param series  the index (zero-based) of the series.\n     *\n     * @return The number of items in the specified series.\n     */\n",
"org.jfree.data.xy.DefaultHighLowDataset.equals": "/**\n     * Tests this dataset for equality with an arbitrary instance.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.DefaultHighLowDataset.createNumberArray": "/**\n     * Constructs an array of Number objects from an array of doubles.\n     *\n     * @param data  the double values to convert ({@code null} not\n     *     permitted).\n     *\n     * @return The data as an array of Number objects.\n     */\n",
"org.jfree.data.xy.IntervalXYDelegate.isAutoWidth": "/**\n     * Returns {@code true} if the interval width is automatically\n     * calculated, and {@code false} otherwise.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.IntervalXYDelegate.setAutoWidth": "/**\n     * Sets the flag that indicates whether the interval width is automatically\n     * calculated.  If the flag is set to {@code true}, the interval is\n     * recalculated.\n     * <p>\n     * Note: recalculating the interval amounts to changing the data values\n     * represented by the dataset.  The calling dataset must fire an\n     * appropriate {@link DatasetChangeEvent}.\n     *\n     * @param b  a boolean.\n     */\n",
"org.jfree.data.xy.IntervalXYDelegate.getIntervalPositionFactor": "/**\n     * Returns the interval position factor.\n     *\n     * @return The interval position factor.\n     */\n",
"org.jfree.data.xy.IntervalXYDelegate.setIntervalPositionFactor": "/**\n     * Sets the interval position factor.  This controls how the interval is\n     * aligned to the x-value.  For a value of 0.5, the interval is aligned\n     * with the x-value in the center.  For a value of 0.0, the interval is\n     * aligned with the x-value at the lower end of the interval, and for a\n     * value of 1.0, the interval is aligned with the x-value at the upper\n     * end of the interval.\n     * <br><br>\n     * Note that changing the interval position factor amounts to changing the\n     * data values represented by the dataset.  Therefore, the dataset that is\n     * using this delegate is responsible for generating the\n     * appropriate {@link DatasetChangeEvent}.\n     *\n     * @param d  the new interval position factor (in the range\n     *           {@code 0.0} to {@code 1.0} inclusive).\n     */\n",
"org.jfree.data.xy.IntervalXYDelegate.getFixedIntervalWidth": "/**\n     * Returns the fixed interval width.\n     *\n     * @return The fixed interval width.\n     */\n",
"org.jfree.data.xy.IntervalXYDelegate.setFixedIntervalWidth": "/**\n     * Sets the fixed interval width and, as a side effect, sets the\n     * {@code autoWidth} flag to {@code false}.\n     * <br><br>\n     * Note that changing the interval width amounts to changing the data\n     * values represented by the dataset.  Therefore, the dataset\n     * that is using this delegate is responsible for generating the\n     * appropriate {@link DatasetChangeEvent}.\n     *\n     * @param w  the width (negative values not permitted).\n     */\n",
"org.jfree.data.xy.IntervalXYDelegate.getIntervalWidth": "/**\n     * Returns the interval width.  This method will return either the\n     * auto calculated interval width or the manually specified interval\n     * width, depending on the {@link #isAutoWidth()} result.\n     *\n     * @return The interval width to use.\n     */\n",
"org.jfree.data.xy.IntervalXYDelegate.getStartX": "/**\n     * Returns the start value of the x-interval for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The start value of the x-interval (possibly {@code null}).\n     *\n     * @see #getStartXValue(int, int)\n     */\n",
"org.jfree.data.xy.IntervalXYDelegate.getStartXValue": "/**\n     * Returns the start value of the x-interval for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The start value of the x-interval.\n     *\n     * @see #getStartX(int, int)\n     */\n",
"org.jfree.data.xy.IntervalXYDelegate.getEndX": "/**\n     * Returns the end value of the x-interval for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The end value of the x-interval (possibly {@code null}).\n     *\n     * @see #getEndXValue(int, int)\n     */\n",
"org.jfree.data.xy.IntervalXYDelegate.getEndXValue": "/**\n     * Returns the end value of the x-interval for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The end value of the x-interval.\n     *\n     * @see #getEndX(int, int)\n     */\n",
"org.jfree.data.xy.IntervalXYDelegate.getDomainLowerBound": "/**\n     * Returns the minimum x-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         x-interval is taken into account.\n     *\n     * @return The minimum value.\n     */\n",
"org.jfree.data.xy.IntervalXYDelegate.getDomainUpperBound": "/**\n     * Returns the maximum x-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         x-interval is taken into account.\n     *\n     * @return The maximum value.\n     */\n",
"org.jfree.data.xy.IntervalXYDelegate.getDomainBounds": "/**\n     * Returns the range of the values in the dataset's domain, including\n     * or excluding the interval around each x-value as specified.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         x-interval should be taken into account.\n     *\n     * @return The range.\n     */\n",
"org.jfree.data.xy.IntervalXYDelegate.datasetChanged": "/**\n     * Handles events from the dataset by recalculating the interval if\n     * necessary.\n     *\n     * @param e  the event.\n     */\n",
"org.jfree.data.xy.IntervalXYDelegate.recalculateInterval": "/**\n     * Recalculate the minimum width \"from scratch\".\n     *\n     * @return The minimum width.\n     */\n",
"org.jfree.data.xy.IntervalXYDelegate.calculateIntervalForSeries": "/**\n     * Calculates the interval width for a given series.\n     *\n     * @param series  the series index.\n     *\n     * @return The interval width.\n     */\n",
"org.jfree.data.xy.IntervalXYDelegate.equals": "/**\n     * Tests the delegate for equality with an arbitrary object.  The\n     * equality test considers two delegates to be equal if they would\n     * calculate the same intervals for any given dataset (for this reason, the\n     * dataset itself is NOT included in the equality test, because it is just\n     * a reference back to the current 'owner' of the delegate).\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.IntervalXYDelegate.clone": "/**\n     * @return A clone of this delegate.\n     *\n     * @throws CloneNotSupportedException if the object cannot be cloned.\n     */\n",
"org.jfree.data.xy.IntervalXYDelegate.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.xy.VectorDataItem.getXValue": "/**\n     * Returns the x-value.\n     *\n     * @return The x-value (never {@code null}).\n     */\n",
"org.jfree.data.xy.VectorDataItem.getYValue": "/**\n     * Returns the y-value.\n     *\n     * @return The y-value.\n     */\n",
"org.jfree.data.xy.VectorDataItem.getVector": "/**\n     * Returns the vector.\n     *\n     * @return The vector (possibly {@code null}).\n     */\n",
"org.jfree.data.xy.VectorDataItem.getVectorX": "/**\n     * Returns the x-component for the vector.\n     *\n     * @return The x-component.\n     */\n",
"org.jfree.data.xy.VectorDataItem.getVectorY": "/**\n     * Returns the y-component for the vector.\n     *\n     * @return The y-component.\n     */\n",
"org.jfree.data.xy.AbstractXYZDataset.getZValue": "/**\n     * Returns the z-value (as a double primitive) for an item within a series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The z-value.\n     */\n",
"org.jfree.data.xy.XYDataItem.getX": "/**\n     * Returns the x-value.\n     *\n     * @return The x-value (never {@code null}).\n     */\n",
"org.jfree.data.xy.XYDataItem.getXValue": "/**\n     * Returns the x-value as a double primitive.\n     *\n     * @return The x-value.\n     *\n     * @see #getX()\n     * @see #getYValue()\n     *\n     * @since 1.0.9\n     */\n",
"org.jfree.data.xy.XYDataItem.getY": "/**\n     * Returns the y-value.\n     *\n     * @return The y-value (possibly {@code null}).\n     */\n",
"org.jfree.data.xy.XYDataItem.getYValue": "/**\n     * Returns the y-value as a double primitive.\n     *\n     * @return The y-value.\n     *\n     * @see #getY()\n     * @see #getXValue()\n     *\n     * @since 1.0.9\n     */\n",
"org.jfree.data.xy.XYDataItem.setY": "/**\n     * Sets the y-value for this data item.  Note that there is no\n     * corresponding method to change the x-value.\n     *\n     * @param y  the new y-value.\n     */\n",
"org.jfree.data.xy.XYDataItem.setY": "/**\n     * Sets the y-value for this data item.  Note that there is no\n     * corresponding method to change the x-value.\n     *\n     * @param y  the new y-value ({@code null} permitted).\n     */\n",
"org.jfree.data.xy.XYDataItem.compareTo": "/**\n     * Returns an integer indicating the order of this object relative to\n     * another object.\n     * <P>\n     * For the order we consider only the x-value:\n     * negative == \"less-than\", zero == \"equal\", positive == \"greater-than\".\n     *\n     * @param o1  the object being compared to.\n     *\n     * @return An integer indicating the order of this data pair object\n     *      relative to another object.\n     */\n",
"org.jfree.data.xy.XYDataItem.clone": "/**\n     * Returns a clone of this object.\n     *\n     * @return A clone.\n     */\n",
"org.jfree.data.xy.XYDataItem.equals": "/**\n     * Tests if this object is equal to another.\n     *\n     * @param obj  the object to test against for equality ({@code null}\n     *             permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.XYDataItem.hashCode": "/**\n     * Returns a hash code.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.xy.XYDataItem.toString": "/**\n     * Returns a string representing this instance, primarily for debugging\n     * use.\n     *\n     * @return A string.\n     */\n",
"org.jfree.data.xy.VectorSeriesCollection.addSeries": "/**\n     * Adds a series to the collection and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param series  the series ({@code null} not permitted).\n     */\n",
"org.jfree.data.xy.VectorSeriesCollection.removeSeries": "/**\n     * Removes the specified series from the collection and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param series  the series ({@code null} not permitted).\n     *\n     * @return A boolean indicating whether the series has actually been\n     *         removed.\n     */\n",
"org.jfree.data.xy.VectorSeriesCollection.removeAllSeries": "/**\n     * Removes all the series from the collection and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     */\n",
"org.jfree.data.xy.VectorSeriesCollection.getSeriesCount": "/**\n     * Returns the number of series in the collection.\n     *\n     * @return The series count.\n     */\n",
"org.jfree.data.xy.VectorSeriesCollection.getSeries": "/**\n     * Returns a series from the collection.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The series.\n     *\n     * @throws IllegalArgumentException if {@code series} is not in the\n     *     range {@code 0} to {@code getSeriesCount() - 1}.\n     */\n",
"org.jfree.data.xy.VectorSeriesCollection.getSeriesKey": "/**\n     * Returns the key for a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     *\n     * @return The key for a series.\n     *\n     * @throws IllegalArgumentException if {@code series} is not in the\n     *     specified range.\n     */\n",
"org.jfree.data.xy.VectorSeriesCollection.indexOf": "/**\n     * Returns the index of the specified series, or -1 if that series is not\n     * present in the dataset.\n     *\n     * @param series  the series ({@code null} not permitted).\n     *\n     * @return The series index.\n     */\n",
"org.jfree.data.xy.VectorSeriesCollection.getItemCount": "/**\n     * Returns the number of items in the specified series.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The item count.\n     *\n     * @throws IllegalArgumentException if {@code series} is not in the\n     *     range {@code 0} to {@code getSeriesCount() - 1}.\n     */\n",
"org.jfree.data.xy.VectorSeriesCollection.getXValue": "/**\n     * Returns the x-value for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.xy.VectorSeriesCollection.getX": "/**\n     * Returns the x-value for an item within a series.  Note that this method\n     * creates a new {@link Double} instance every time it is called---use\n     * {@link #getXValue(int, int)} instead, if possible.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.xy.VectorSeriesCollection.getYValue": "/**\n     * Returns the y-value for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The y-value.\n     */\n",
"org.jfree.data.xy.VectorSeriesCollection.getY": "/**\n     * Returns the y-value for an item within a series.  Note that this method\n     * creates a new {@link Double} instance every time it is called---use\n     * {@link #getYValue(int, int)} instead, if possible.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The y-value.\n     */\n",
"org.jfree.data.xy.VectorSeriesCollection.getVector": "/**\n     * Returns the vector for an item in a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The vector (possibly {@code null}).\n     */\n",
"org.jfree.data.xy.VectorSeriesCollection.getVectorXValue": "/**\n     * Returns the x-component of the vector for an item in a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The x-component of the vector.\n     */\n",
"org.jfree.data.xy.VectorSeriesCollection.getVectorYValue": "/**\n     * Returns the y-component of the vector for an item in a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The y-component of the vector.\n     */\n",
"org.jfree.data.xy.VectorSeriesCollection.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.VectorSeriesCollection.clone": "/**\n     * Returns a clone of this instance.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem.\n     */\n",
"org.jfree.data.xy.DefaultWindDataset.getSeriesCount": "/**\n     * Returns the number of series in the dataset.\n     *\n     * @return The series count.\n     */\n",
"org.jfree.data.xy.DefaultWindDataset.getItemCount": "/**\n     * Returns the number of items in a series.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The item count.\n     */\n",
"org.jfree.data.xy.DefaultWindDataset.getSeriesKey": "/**\n     * Returns the key for a series.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The series key.\n     */\n",
"org.jfree.data.xy.DefaultWindDataset.getX": "/**\n     * Returns the x-value for one item within a series.  This should represent\n     * a point in time, encoded as milliseconds in the same way as\n     * java.util.Date.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The x-value for the item within the series.\n     */\n",
"org.jfree.data.xy.DefaultWindDataset.getY": "/**\n     * Returns the y-value for one item within a series.  This maps to the\n     * {@link #getWindForce(int, int)} method and is implemented because\n     * {@code WindDataset} is an extension of {@link XYDataset}.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The y-value for the item within the series.\n     */\n",
"org.jfree.data.xy.DefaultWindDataset.getWindDirection": "/**\n     * Returns the wind direction for one item within a series.  This is a\n     * number between 0 and 12, like the numbers on an upside-down clock face.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The wind direction for the item within the series.\n     */\n",
"org.jfree.data.xy.DefaultWindDataset.getWindForce": "/**\n     * Returns the wind force for one item within a series.  This is a number\n     * between 0 and 12, as defined by the Beaufort scale.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The wind force for the item within the series.\n     */\n",
"org.jfree.data.xy.DefaultWindDataset.seriesNameListFromDataArray": "/**\n     * Utility method for automatically generating series names.\n     *\n     * @param data  the wind data ({@code null} not permitted).\n     *\n     * @return An array of <i>Series N</i> with N = { 1 .. data.length }.\n     *\n     * @throws NullPointerException if {@code data} is {@code null}.\n     */\n",
"org.jfree.data.xy.DefaultWindDataset.equals": "/**\n     * Checks this {@code WindDataset} for equality with an arbitrary\n     * object.  This method returns {@code true} if and only if:\n     * <ul>\n     *   <li>{@code obj} is not {@code null};</li>\n     *   <li>{@code obj} is an instance of {@code DefaultWindDataset};</li>\n     *   <li>both datasets have the same number of series containing identical\n     *       values.</li>\n     * </ul>\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.DefaultWindDataset.getX": "/**\n     * Returns the x-value.\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.xy.DefaultWindDataset.getWindDirection": "/**\n     * Returns the wind direction.\n     *\n     * @return The wind direction.\n     */\n",
"org.jfree.data.xy.DefaultWindDataset.getWindForce": "/**\n     * Returns the wind force.\n     *\n     * @return The wind force.\n     */\n",
"org.jfree.data.xy.DefaultWindDataset.compareTo": "/**\n     * Compares this item to another object.\n     *\n     * @param object  the other object.\n     *\n     * @return An int that indicates the relative comparison.\n     */\n",
"org.jfree.data.xy.DefaultWindDataset.equals": "/**\n     * Tests this {@code WindDataItem} for equality with an arbitrary\n     * object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.xy.VectorSeries.add": "/**\n     * Adds a data item to the series.\n     *\n     * @param x  the x-value.\n     * @param y  the y-value.\n     * @param deltaX  the vector x.\n     * @param deltaY  the vector y.\n     */\n",
"org.jfree.data.xy.VectorSeries.add": "/**\n     * Adds a data item to the series and, if requested, sends a \n     * {@link SeriesChangeEvent} to all registered listeners.\n     * \n     * @param item  the data item ({@code null} not permitted).\n     * @param notify  notify listeners?\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.data.xy.VectorSeries.remove": "/**\n     * Removes the item at the specified index and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param index  the index.\n     *\n     * @return The item removed.\n     */\n",
"org.jfree.data.xy.VectorSeries.getXValue": "/**\n     * Returns the x-value for the specified item.\n     *\n     * @param index  the item index.\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.xy.VectorSeries.getYValue": "/**\n     * Returns the y-value for the specified item.\n     *\n     * @param index  the item index.\n     *\n     * @return The y-value.\n     */\n",
"org.jfree.data.xy.VectorSeries.getVectorXValue": "/**\n     * Returns the x-component of the vector for an item in the series.\n     *\n     * @param index  the item index.\n     *\n     * @return The x-component of the vector.\n     */\n",
"org.jfree.data.xy.VectorSeries.getVectorYValue": "/**\n     * Returns the y-component of the vector for an item in the series.\n     *\n     * @param index  the item index.\n     *\n     * @return The y-component of the vector.\n     */\n",
"org.jfree.data.xy.VectorSeries.getDataItem": "/**\n     * Returns the data item at the specified index.\n     *\n     * @param index  the item index.\n     *\n     * @return The data item.\n     */\n",
"org.jfree.data.xy.VectorXYDataset.getVectorXValue": "/**\n     * Returns the x-component of the vector for an item in a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The x-component of the vector.\n     */\n",
"org.jfree.data.xy.VectorXYDataset.getVectorYValue": "/**\n     * Returns the y-component of the vector for an item in a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The y-component of the vector.\n     */\n",
"org.jfree.data.xy.VectorXYDataset.getVector": "/**\n     * Returns the vector for an item in a series.  Depending on the particular\n     * dataset implementation, this may involve creating a new {@link Vector}\n     * instance --- if you are just interested in the x and y components,\n     * use the {@link #getVectorXValue(int, int)} and\n     * {@link #getVectorYValue(int, int)} methods instead.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The vector (possibly {@code null}).\n     */\n",
"org.jfree.data.xy.AbstractXYDataset.getDomainOrder": "/**\n     * Returns the order of the domain (X) values.\n     *\n     * @return The domain order.\n     */\n",
"org.jfree.data.xy.AbstractXYDataset.getXValue": "/**\n     * Returns the x-value (as a double primitive) for an item within a series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xy.AbstractXYDataset.getYValue": "/**\n     * Returns the y-value (as a double primitive) for an item within a series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.RangeType.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.data.RangeType.equals": "/**\n     * Returns {@code true} if this object is equal to the specified\n     * object, and {@code false} otherwise.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.RangeType.hashCode": "/**\n     * Returns a hash code value for the object.\n     *\n     * @return The hashcode\n     */\n",
"org.jfree.data.RangeType.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     *\n     * @return The object.\n     *\n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.data.resources.DataPackageResources_ru.getContents": "/**\n     * Returns the array of strings in the resource bundle.\n     *\n     * @return The localised resources.\n     */\n",
"org.jfree.data.resources.DataPackageResources_pl.getContents": "/**\n     * Returns the array of strings in the resource bundle.\n     *\n     * @return The localised resources.\n     */\n",
"org.jfree.data.resources.DataPackageResources_es.getContents": "/**\n     * Returns the array of strings in the resource bundle.\n     *\n     * @return The localised resources.\n     */\n",
"org.jfree.data.resources.DataPackageResources.getContents": "/**\n     * Returns the array of strings in the resource bundle.\n     *\n     * @return The localised resources.\n     */\n",
"org.jfree.data.resources.DataPackageResources_de.getContents": "/**\n     * Returns the array of strings in the resource bundle.\n     *\n     * @return The localised resources.\n     */\n",
"org.jfree.data.resources.DataPackageResources_fr.getContents": "/**\n     * Returns the array of strings in the resource bundle.\n     *\n     * @return The localised resources.\n     */\n",
"org.jfree.data.category.CategoryRangeInfo.getRangeBounds": "/**\n     * Returns the range of the values in this dataset's range.\n     *\n     * @param visibleSeriesKeys  the keys of the visible series.\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     *\n     * @return The range (or {@code null} if the dataset contains no\n     *     values).\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesCount": "/**\n     * Returns the number of series in the dataset (possibly zero).\n     *\n     * @return The number of series in the dataset.\n     *\n     * @see #getRowCount()\n     * @see #getCategoryCount()\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesIndex": "/**\n     * Returns a series index.\n     *\n     * @param seriesKey  the series key.\n     *\n     * @return The series index.\n     *\n     * @see #getRowIndex(Comparable)\n     * @see #getSeriesKey(int)\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesKey": "/**\n     * Returns the name of the specified series.\n     *\n     * @param series  the index of the required series (zero-based).\n     *\n     * @return The name of the specified series.\n     *\n     * @see #getSeriesIndex(Comparable)\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.setSeriesKeys": "/**\n     * Sets the names of the series in the dataset.\n     *\n     * @param seriesKeys  the new keys ({@code null} not permitted, the\n     *         length of the array must match the number of series in the\n     *         dataset).\n     *\n     * @see #setCategoryKeys(Comparable[])\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.getCategoryCount": "/**\n     * Returns the number of categories in the dataset.\n     *\n     * @return The number of categories in the dataset.\n     *\n     * @see #getColumnCount()\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnKeys": "/**\n     * Returns a list of the categories in the dataset.  This method supports\n     * the {@link CategoryDataset} interface.\n     *\n     * @return A list of the categories in the dataset.\n     *\n     * @see #getRowKeys()\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.setCategoryKeys": "/**\n     * Sets the categories for the dataset.\n     *\n     * @param categoryKeys  an array of objects representing the categories in\n     *                      the dataset.\n     *\n     * @see #getRowKeys()\n     * @see #setSeriesKeys(Comparable[])\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.getValue": "/**\n     * Returns the data value for one category in a series.\n     * <P>\n     * This method is part of the CategoryDataset interface.  Not particularly\n     * meaningful for this class...returns the end value.\n     *\n     * @param series    The required series (zero based index).\n     * @param category  The required category.\n     *\n     * @return The data value for one category in a series (null possible).\n     *\n     * @see #getEndValue(Comparable, Comparable)\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.getValue": "/**\n     * Returns the data value for one category in a series.\n     * <P>\n     * This method is part of the CategoryDataset interface.  Not particularly\n     * meaningful for this class...returns the end value.\n     *\n     * @param series  the required series (zero based index).\n     * @param category  the required category.\n     *\n     * @return The data value for one category in a series (null possible).\n     *\n     * @see #getEndValue(int, int)\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.getStartValue": "/**\n     * Returns the start data value for one category in a series.\n     *\n     * @param series  the required series.\n     * @param category  the required category.\n     *\n     * @return The start data value for one category in a series\n     *         (possibly {@code null}).\n     *\n     * @see #getStartValue(int, int)\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.getStartValue": "/**\n     * Returns the start data value for one category in a series.\n     *\n     * @param series  the required series (zero based index).\n     * @param category  the required category.\n     *\n     * @return The start data value for one category in a series\n     *         (possibly {@code null}).\n     *\n     * @see #getStartValue(Comparable, Comparable)\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.getEndValue": "/**\n     * Returns the end data value for one category in a series.\n     *\n     * @param series  the required series.\n     * @param category  the required category.\n     *\n     * @return The end data value for one category in a series (null possible).\n     *\n     * @see #getEndValue(int, int)\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.getEndValue": "/**\n     * Returns the end data value for one category in a series.\n     *\n     * @param series  the required series (zero based index).\n     * @param category  the required category.\n     *\n     * @return The end data value for one category in a series (null possible).\n     *\n     * @see #getEndValue(Comparable, Comparable)\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.setStartValue": "/**\n     * Sets the start data value for one category in a series.\n     *\n     * @param series  the series (zero-based index).\n     * @param category  the category.\n     *\n     * @param value The value.\n     *\n     * @see #setEndValue(int, Comparable, Number)\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.setEndValue": "/**\n     * Sets the end data value for one category in a series.\n     *\n     * @param series  the series (zero-based index).\n     * @param category  the category.\n     *\n     * @param value the value.\n     *\n     * @see #setStartValue(int, Comparable, Number)\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.getCategoryIndex": "/**\n     * Returns the index for the given category.\n     *\n     * @param category  the category ({@code null} not permitted).\n     *\n     * @return The index.\n     *\n     * @see #getColumnIndex(Comparable)\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.generateKeys": "/**\n     * Generates an array of keys, by appending a space plus an integer\n     * (starting with 1) to the supplied prefix string.\n     *\n     * @param count  the number of keys required.\n     * @param prefix  the name prefix.\n     *\n     * @return An array of <i>prefixN</i> with N = { 1 .. count}.\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnKey": "/**\n     * Returns a column key.\n     *\n     * @param column  the column index.\n     *\n     * @return The column key.\n     *\n     * @see #getRowKey(int)\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnIndex": "/**\n     * Returns a column index.\n     *\n     * @param columnKey  the column key ({@code null} not permitted).\n     *\n     * @return The column index.\n     *\n     * @see #getCategoryIndex(Comparable)\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.getRowIndex": "/**\n     * Returns a row index.\n     *\n     * @param rowKey  the row key.\n     *\n     * @return The row index.\n     *\n     * @see #getSeriesIndex(Comparable)\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.getRowKeys": "/**\n     * Returns a list of the series in the dataset.  This method supports the\n     * {@link CategoryDataset} interface.\n     *\n     * @return A list of the series in the dataset.\n     *\n     * @see #getColumnKeys()\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.getRowKey": "/**\n     * Returns the name of the specified series.\n     *\n     * @param row  the index of the required row/series (zero-based).\n     *\n     * @return The name of the specified series.\n     *\n     * @see #getColumnKey(int)\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnCount": "/**\n     * Returns the number of categories in the dataset.  This method is part of\n     * the {@link CategoryDataset} interface.\n     *\n     * @return The number of categories in the dataset.\n     *\n     * @see #getCategoryCount()\n     * @see #getRowCount()\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.getRowCount": "/**\n     * Returns the number of series in the dataset (possibly zero).\n     *\n     * @return The number of series in the dataset.\n     *\n     * @see #getSeriesCount()\n     * @see #getColumnCount()\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.equals": "/**\n     * Tests this dataset for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.clone": "/**\n     * Returns a clone of this dataset.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning the\n     *         dataset.\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.equal": "/**\n     * Tests two double[][] arrays for equality.\n     *\n     * @param array1  the first array ({@code null} permitted).\n     * @param array2  the second arrray ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.category.DefaultIntervalCategoryDataset.clone": "/**\n     * Clones a two dimensional array of {@code Number} objects.\n     *\n     * @param array  the array ({@code null} not permitted).\n     *\n     * @return A clone of the array.\n     */\n",
"org.jfree.data.category.CategoryToPieDataset.getUnderlyingDataset": "/**\n     * Returns the underlying dataset.\n     *\n     * @return The underlying dataset (possibly {@code null}).\n     *\n     * @since 1.0.2\n     */\n",
"org.jfree.data.category.CategoryToPieDataset.getExtractType": "/**\n     * Returns the extract type, which determines whether data is read from\n     * one row or one column of the underlying dataset.\n     *\n     * @return The extract type.\n     *\n     * @since 1.0.2\n     */\n",
"org.jfree.data.category.CategoryToPieDataset.getExtractIndex": "/**\n     * Returns the index of the row or column from which to extract the data.\n     *\n     * @return The extract index.\n     *\n     * @since 1.0.2\n     */\n",
"org.jfree.data.category.CategoryToPieDataset.getItemCount": "/**\n     * Returns the number of items (values) in the collection.  If the\n     * underlying dataset is {@code null}, this method returns zero.\n     *\n     * @return The item count.\n     */\n",
"org.jfree.data.category.CategoryToPieDataset.getValue": "/**\n     * Returns a value from the dataset.\n     *\n     * @param item  the item index (zero-based).\n     *\n     * @return The value (possibly {@code null}).\n     *\n     * @throws IndexOutOfBoundsException if {@code item} is not in the\n     *     range {@code 0} to {@code getItemCount() -1}.\n     */\n",
"org.jfree.data.category.CategoryToPieDataset.getKey": "/**\n     * Returns the key at the specified index.\n     *\n     * @param index  the item index (in the range {@code 0} to\n     *     {@code getItemCount() -1}).\n     *\n     * @return The key.\n     *\n     * @throws IndexOutOfBoundsException if {@code index} is not in the\n     *     specified range.\n     */\n",
"org.jfree.data.category.CategoryToPieDataset.getIndex": "/**\n     * Returns the index for a given key, or {@code -1} if there is no\n     * such key.\n     *\n     * @param key  the key.\n     *\n     * @return The index for the key, or {@code -1}.\n     */\n",
"org.jfree.data.category.CategoryToPieDataset.getKeys": "/**\n     * Returns the keys for the dataset.\n     * <p>\n     * If the underlying dataset is {@code null}, this method returns an\n     * empty list.\n     *\n     * @return The keys.\n     */\n",
"org.jfree.data.category.CategoryToPieDataset.getValue": "/**\n     * Returns the value for a given key.  If the key is not recognised, the\n     * method should return {@code null} (but note that {@code null}\n     * can be associated with a valid key also).\n     *\n     * @param key  the key.\n     *\n     * @return The value (possibly {@code null}).\n     */\n",
"org.jfree.data.category.CategoryToPieDataset.datasetChanged": "/**\n     * Sends a {@link DatasetChangeEvent} to all registered listeners, with\n     * this (not the underlying) dataset as the source.\n     *\n     * @param event  the event (ignored, a new event with this dataset as the\n     *     source is sent to the listeners).\n     */\n",
"org.jfree.data.category.CategoryToPieDataset.equals": "/**\n     * Tests this dataset for equality with an arbitrary object, returning\n     * {@code true} if {@code obj} is a dataset containing the same\n     * keys and values in the same order as this dataset.\n     *\n     * @param obj  the object to test ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.category.SlidingCategoryDataset.getUnderlyingDataset": "/**\n     * Returns the underlying dataset that was supplied to the constructor.\n     *\n     * @return The underlying dataset (never {@code null}).\n     */\n",
"org.jfree.data.category.SlidingCategoryDataset.getFirstCategoryIndex": "/**\n     * Returns the index of the first visible category.\n     *\n     * @return The index.\n     *\n     * @see #setFirstCategoryIndex(int)\n     */\n",
"org.jfree.data.category.SlidingCategoryDataset.setFirstCategoryIndex": "/**\n     * Sets the index of the first category that should be used from the\n     * underlying dataset, and sends a {@link DatasetChangeEvent} to all\n     * registered listeners.\n     *\n     * @param first  the index.\n     *\n     * @see #getFirstCategoryIndex()\n     */\n",
"org.jfree.data.category.SlidingCategoryDataset.getMaximumCategoryCount": "/**\n     * Returns the maximum category count.\n     *\n     * @return The maximum category count.\n     *\n     * @see #setMaximumCategoryCount(int)\n     */\n",
"org.jfree.data.category.SlidingCategoryDataset.setMaximumCategoryCount": "/**\n     * Sets the maximum category count and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param max  the maximum.\n     *\n     * @see #getMaximumCategoryCount()\n     */\n",
"org.jfree.data.category.SlidingCategoryDataset.lastCategoryIndex": "/**\n     * Returns the index of the last column for this dataset, or -1.\n     *\n     * @return The index.\n     */\n",
"org.jfree.data.category.SlidingCategoryDataset.getColumnIndex": "/**\n     * Returns the index for the specified column key.\n     *\n     * @param key  the key.\n     *\n     * @return The column index, or -1 if the key is not recognised.\n     */\n",
"org.jfree.data.category.SlidingCategoryDataset.getColumnKey": "/**\n     * Returns the column key for a given index.\n     *\n     * @param column  the column index (zero-based).\n     *\n     * @return The column key.\n     *\n     * @throws IndexOutOfBoundsException if {@code row} is out of bounds.\n     */\n",
"org.jfree.data.category.SlidingCategoryDataset.getColumnKeys": "/**\n     * Returns the column keys.\n     *\n     * @return The keys.\n     *\n     * @see #getColumnKey(int)\n     */\n",
"org.jfree.data.category.SlidingCategoryDataset.getRowIndex": "/**\n     * Returns the row index for a given key.\n     *\n     * @param key  the row key.\n     *\n     * @return The row index, or {@code -1} if the key is unrecognised.\n     */\n",
"org.jfree.data.category.SlidingCategoryDataset.getRowKey": "/**\n     * Returns the row key for a given index.\n     *\n     * @param row  the row index (zero-based).\n     *\n     * @return The row key.\n     *\n     * @throws IndexOutOfBoundsException if {@code row} is out of bounds.\n     */\n",
"org.jfree.data.category.SlidingCategoryDataset.getRowKeys": "/**\n     * Returns the row keys.\n     *\n     * @return The keys.\n     */\n",
"org.jfree.data.category.SlidingCategoryDataset.getValue": "/**\n     * Returns the value for a pair of keys.\n     *\n     * @param rowKey  the row key ({@code null} not permitted).\n     * @param columnKey  the column key ({@code null} not permitted).\n     *\n     * @return The value (possibly {@code null}).\n     *\n     * @throws UnknownKeyException if either key is not defined in the dataset.\n     */\n",
"org.jfree.data.category.SlidingCategoryDataset.getColumnCount": "/**\n     * Returns the number of columns in the table.\n     *\n     * @return The column count.\n     */\n",
"org.jfree.data.category.SlidingCategoryDataset.getRowCount": "/**\n     * Returns the number of rows in the table.\n     *\n     * @return The row count.\n     */\n",
"org.jfree.data.category.SlidingCategoryDataset.getValue": "/**\n     * Returns a value from the table.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The value (possibly {@code null}).\n     */\n",
"org.jfree.data.category.SlidingCategoryDataset.equals": "/**\n     * Tests this {@code SlidingCategoryDataset} for equality with an\n     * arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.category.SlidingCategoryDataset.clone": "/**\n     * Returns an independent copy of the dataset.  Note that:\n     * <ul>\n     * <li>the underlying dataset is only cloned if it implements the\n     * {@link PublicCloneable} interface;</li>\n     * <li>the listeners registered with this dataset are not carried over to\n     * the cloned dataset.</li>\n     * </ul>\n     *\n     * @return An independent copy of the dataset.\n     *\n     * @throws CloneNotSupportedException if the dataset cannot be cloned for\n     *         any reason.\n     */\n",
"org.jfree.data.category.IntervalCategoryDataset.getStartValue": "/**\n     * Returns the start value for the interval for a given series and category.\n     *\n     * @param series  the series (zero-based index).\n     * @param category  the category (zero-based index).\n     *\n     * @return The start value (possibly {@code null}).\n     *\n     * @see #getEndValue(int, int)\n     */\n",
"org.jfree.data.category.IntervalCategoryDataset.getStartValue": "/**\n     * Returns the start value for the interval for a given series and category.\n     *\n     * @param series  the series key.\n     * @param category  the category key.\n     *\n     * @return The start value (possibly {@code null}).\n     *\n     * @see #getEndValue(Comparable, Comparable)\n     */\n",
"org.jfree.data.category.IntervalCategoryDataset.getEndValue": "/**\n     * Returns the end value for the interval for a given series and category.\n     *\n     * @param series  the series (zero-based index).\n     * @param category  the category (zero-based index).\n     *\n     * @return The end value (possibly {@code null}).\n     *\n     * @see #getStartValue(int, int)\n     */\n",
"org.jfree.data.category.IntervalCategoryDataset.getEndValue": "/**\n     * Returns the end value for the interval for a given series and category.\n     *\n     * @param series  the series key.\n     * @param category  the category key.\n     *\n     * @return The end value (possibly {@code null}).\n     *\n     * @see #getStartValue(Comparable, Comparable)\n     */\n",
"org.jfree.data.category.DefaultCategoryDataset.getRowCount": "/**\n     * Returns the number of rows in the table.\n     *\n     * @return The row count.\n     *\n     * @see #getColumnCount()\n     */\n",
"org.jfree.data.category.DefaultCategoryDataset.getColumnCount": "/**\n     * Returns the number of columns in the table.\n     *\n     * @return The column count.\n     *\n     * @see #getRowCount()\n     */\n",
"org.jfree.data.category.DefaultCategoryDataset.getValue": "/**\n     * Returns a value from the table.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The value (possibly {@code null}).\n     *\n     * @see #addValue(Number, Comparable, Comparable)\n     * @see #removeValue(Comparable, Comparable)\n     */\n",
"org.jfree.data.category.DefaultCategoryDataset.getRowKey": "/**\n     * Returns the key for the specified row.\n     *\n     * @param row  the row index (zero-based).\n     *\n     * @return The row key.\n     *\n     * @see #getRowIndex(Comparable)\n     * @see #getRowKeys()\n     * @see #getColumnKey(int)\n     */\n",
"org.jfree.data.category.DefaultCategoryDataset.getRowIndex": "/**\n     * Returns the row index for a given key.\n     *\n     * @param key  the row key ({@code null} not permitted).\n     *\n     * @return The row index.\n     *\n     * @see #getRowKey(int)\n     */\n",
"org.jfree.data.category.DefaultCategoryDataset.getRowKeys": "/**\n     * Returns the row keys.\n     *\n     * @return The keys.\n     *\n     * @see #getRowKey(int)\n     */\n",
"org.jfree.data.category.DefaultCategoryDataset.getColumnKey": "/**\n     * Returns a column key.\n     *\n     * @param column  the column index (zero-based).\n     *\n     * @return The column key.\n     *\n     * @see #getColumnIndex(Comparable)\n     */\n",
"org.jfree.data.category.DefaultCategoryDataset.getColumnIndex": "/**\n     * Returns the column index for a given key.\n     *\n     * @param key  the column key ({@code null} not permitted).\n     *\n     * @return The column index.\n     *\n     * @see #getColumnKey(int)\n     */\n",
"org.jfree.data.category.DefaultCategoryDataset.getColumnKeys": "/**\n     * Returns the column keys.\n     *\n     * @return The keys.\n     *\n     * @see #getColumnKey(int)\n     */\n",
"org.jfree.data.category.DefaultCategoryDataset.getValue": "/**\n     * Returns the value for a pair of keys.\n     *\n     * @param rowKey  the row key ({@code null} not permitted).\n     * @param columnKey  the column key ({@code null} not permitted).\n     *\n     * @return The value (possibly {@code null}).\n     *\n     * @throws UnknownKeyException if either key is not defined in the dataset.\n     *\n     * @see #addValue(Number, Comparable, Comparable)\n     */\n",
"org.jfree.data.category.DefaultCategoryDataset.addValue": "/**\n     * Adds a value to the table.  Performs the same function as setValue().\n     *\n     * @param value  the value.\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     *\n     * @see #getValue(Comparable, Comparable)\n     * @see #removeValue(Comparable, Comparable)\n     */\n",
"org.jfree.data.category.DefaultCategoryDataset.addValue": "/**\n     * Adds a value to the table.\n     *\n     * @param value  the value.\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     *\n     * @see #getValue(Comparable, Comparable)\n     */\n",
"org.jfree.data.category.DefaultCategoryDataset.setValue": "/**\n     * Adds or updates a value in the table and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param value  the value ({@code null} permitted).\n     * @param rowKey  the row key ({@code null} not permitted).\n     * @param columnKey  the column key ({@code null} not permitted).\n     *\n     * @see #getValue(Comparable, Comparable)\n     */\n",
"org.jfree.data.category.DefaultCategoryDataset.setValue": "/**\n     * Adds or updates a value in the table and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param value  the value.\n     * @param rowKey  the row key ({@code null} not permitted).\n     * @param columnKey  the column key ({@code null} not permitted).\n     *\n     * @see #getValue(Comparable, Comparable)\n     */\n",
"org.jfree.data.category.DefaultCategoryDataset.incrementValue": "/**\n     * Adds the specified value to an existing value in the dataset (if the\n     * existing value is {@code null}, it is treated as if it were 0.0).\n     *\n     * @param value  the value.\n     * @param rowKey  the row key ({@code null} not permitted).\n     * @param columnKey  the column key ({@code null} not permitted).\n     *\n     * @throws UnknownKeyException if either key is not defined in the dataset.\n     */\n",
"org.jfree.data.category.DefaultCategoryDataset.removeValue": "/**\n     * Removes a value from the dataset and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     *\n     * @see #addValue(Number, Comparable, Comparable)\n     */\n",
"org.jfree.data.category.DefaultCategoryDataset.removeRow": "/**\n     * Removes a row from the dataset and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param rowIndex  the row index.\n     *\n     * @see #removeColumn(int)\n     */\n",
"org.jfree.data.category.DefaultCategoryDataset.removeRow": "/**\n     * Removes a row from the dataset and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param rowKey  the row key.\n     *\n     * @see #removeColumn(Comparable)\n     */\n",
"org.jfree.data.category.DefaultCategoryDataset.removeColumn": "/**\n     * Removes a column from the dataset and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param columnIndex  the column index.\n     *\n     * @see #removeRow(int)\n     */\n",
"org.jfree.data.category.DefaultCategoryDataset.removeColumn": "/**\n     * Removes a column from the dataset and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param columnKey  the column key ({@code null} not permitted).\n     *\n     * @see #removeRow(Comparable)\n     *\n     * @throws UnknownKeyException if {@code columnKey} is not defined\n     *         in the dataset.\n     */\n",
"org.jfree.data.category.DefaultCategoryDataset.clear": "/**\n     * Clears all data from the dataset and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     */\n",
"org.jfree.data.category.DefaultCategoryDataset.equals": "/**\n     * Tests this dataset for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.category.DefaultCategoryDataset.hashCode": "/**\n     * Returns a hash code for the dataset.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.category.DefaultCategoryDataset.clone": "/**\n     * Returns a clone of the dataset.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning the\n     *         dataset.\n     */\n",
"org.jfree.data.statistics.StatisticalCategoryDataset.getMeanValue": "/**\n     * Returns the mean value for an item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The mean value (possibly {@code null}).\n     */\n",
"org.jfree.data.statistics.StatisticalCategoryDataset.getMeanValue": "/**\n     * Returns the mean value for an item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the columnKey.\n     *\n     * @return The mean value (possibly {@code null}).\n     */\n",
"org.jfree.data.statistics.StatisticalCategoryDataset.getStdDevValue": "/**\n     * Returns the standard deviation value for an item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The standard deviation (possibly {@code null}).\n     */\n",
"org.jfree.data.statistics.StatisticalCategoryDataset.getStdDevValue": "/**\n     * Returns the standard deviation value for an item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the columnKey.\n     *\n     * @return The standard deviation (possibly {@code null}).\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics": "/**\n     * Calculates the statistics required for a {@link BoxAndWhiskerItem}\n     * from a list of {@code Number} objects.  Any items in the list\n     * that are {@code null}, not an instance of {@code Number}, or\n     * equivalent to {@code Double.NaN}, will be ignored.\n     *\n     * @param values  a list of numbers (a {@code null} list is not\n     *                permitted).\n     *\n     * @return A box-and-whisker item.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics": "/**\n     * Calculates the statistics required for a {@link BoxAndWhiskerItem}\n     * from a list of {@code Number} objects.  Any items in the list\n     * that are {@code null}, not an instance of {@code Number}, or\n     * equivalent to {@code Double.NaN}, will be ignored.\n     *\n     * @param values  a list of numbers (a {@code null} list is not\n     *                permitted).\n     * @param stripNullAndNaNItems  a flag that controls the handling of null\n     *     and NaN items.\n     *\n     * @return A box-and-whisker item.\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerCalculator.calculateQ1": "/**\n     * Calculates the first quartile for a list of numbers in ascending order.\n     * If the items in the list are not in ascending order, the result is\n     * unspecified.  If the list contains items that are {@code null}, not\n     * an instance of {@code Number}, or equivalent to\n     * {@code Double.NaN}, the result is unspecified.\n     *\n     * @param values  the numbers in ascending order ({@code null} not\n     *     permitted).\n     *\n     * @return The first quartile.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerCalculator.calculateQ3": "/**\n     * Calculates the third quartile for a list of numbers in ascending order.\n     * If the items in the list are not in ascending order, the result is\n     * unspecified.  If the list contains items that are {@code null}, not\n     * an instance of {@code Number}, or equivalent to\n     * {@code Double.NaN}, the result is unspecified.\n     *\n     * @param values  the list of values ({@code null} not permitted).\n     *\n     * @return The third quartile.\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getOutlierCoefficient": "/**\n     * Returns the value used as the outlier coefficient. The outlier\n     * coefficient gives an indication of the degree of certainty in an\n     * unskewed distribution.  Increasing the coefficient increases the number\n     * of values included. Currently only used to ensure farout coefficient is\n     * greater than the outlier coefficient\n     *\n     * @return A {@code double} representing the value used to calculate\n     *         outliers.\n     *\n     * @see #setOutlierCoefficient(double)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.setOutlierCoefficient": "/**\n     * Sets the value used as the outlier coefficient\n     *\n     * @param outlierCoefficient  being a {@code double} representing the\n     *                            value used to calculate outliers.\n     *\n     * @see #getOutlierCoefficient()\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getFaroutCoefficient": "/**\n     * Returns the value used as the farout coefficient. The farout coefficient\n     * allows the calculation of which values will be off the graph.\n     *\n     * @return A {@code double} representing the value used to calculate\n     *         farouts.\n     *\n     * @see #setFaroutCoefficient(double)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.setFaroutCoefficient": "/**\n     * Sets the value used as the farouts coefficient. The farout coefficient\n     * must b greater than the outlier coefficient.\n     *\n     * @param faroutCoefficient being a {@code double} representing the\n     *                          value used to calculate farouts.\n     *\n     * @see #getFaroutCoefficient()\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getSeriesCount": "/**\n     * Returns the number of series in the dataset.\n     * <p>\n     * This implementation only allows one series.\n     *\n     * @return The number of series.\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getItemCount": "/**\n     * Returns the number of items in the specified series.\n     *\n     * @param series  the index (zero-based) of the series.\n     *\n     * @return The number of items in the specified series.\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.add": "/**\n     * Adds an item to the dataset and sends a {@link DatasetChangeEvent} to\n     * all registered listeners.\n     *\n     * @param date  the date ({@code null} not permitted).\n     * @param item  the item ({@code null} not permitted).\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getSeriesKey": "/**\n     * Returns the name of the series stored in this dataset.\n     *\n     * @param i  the index of the series. Currently ignored.\n     *\n     * @return The name of this series.\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getItem": "/**\n     * Return an item from within the dataset.\n     *\n     * @param series  the series index (ignored, since this dataset contains\n     *                only one series).\n     * @param item  the item within the series (zero-based index)\n     *\n     * @return The item.\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getX": "/**\n     * Returns the x-value for one item in a series.\n     * <p>\n     * The value returned is a Long object generated from the underlying Date\n     * object.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getXDate": "/**\n     * Returns the x-value for one item in a series, as a Date.\n     * <p>\n     * This method is provided for convenience only.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The x-value as a Date.\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getY": "/**\n     * Returns the y-value for one item in a series.\n     * <p>\n     * This method (from the XYDataset interface) is mapped to the\n     * getMeanValue() method.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The y-value.\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getMeanValue": "/**\n     * Returns the mean for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The mean for the specified series and item.\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getMedianValue": "/**\n     * Returns the median-value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The median-value for the specified series and item.\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getQ1Value": "/**\n     * Returns the Q1 median-value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The Q1 median-value for the specified series and item.\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getQ3Value": "/**\n     * Returns the Q3 median-value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The Q3 median-value for the specified series and item.\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getMinRegularValue": "/**\n     * Returns the min-value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The min-value for the specified series and item.\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getMaxRegularValue": "/**\n     * Returns the max-value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The max-value for the specified series and item.\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getMinOutlier": "/**\n     * Returns the minimum value which is not a farout.\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return A {@code Number} representing the maximum non-farout value.\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getMaxOutlier": "/**\n     * Returns the maximum value which is not a farout, ie Q3 + (interquartile\n     * range * farout coefficient).\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return A {@code Number} representing the maximum non-farout value.\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getOutliers": "/**\n     * Returns a list of outliers for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The list of outliers for the specified series and item\n     *         (possibly {@code null}).\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getRangeLowerBound": "/**\n     * Returns the minimum y-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     *\n     * @return The minimum value.\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getRangeUpperBound": "/**\n     * Returns the maximum y-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     *\n     * @return The maximum value.\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getRangeBounds": "/**\n     * Returns the range of the values in this dataset's range.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     *\n     * @return The range.\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.equals": "/**\n     * Tests this dataset for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.clone": "/**\n     * Returns a clone of the plot.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if the cloning is not supported.\n     */\n",
"org.jfree.data.statistics.Statistics.calculateMean": "/**\n     * Returns the mean of an array of numbers.  This is equivalent to calling\n     * {@code calculateMean(values, true)}.\n     *\n     * @param values  the values ({@code null} not permitted).\n     *\n     * @return The mean.\n     */\n",
"org.jfree.data.statistics.Statistics.calculateMean": "/**\n     * Returns the mean of an array of numbers.\n     *\n     * @param values  the values ({@code null} not permitted).\n     * @param includeNullAndNaN  a flag that controls whether or not\n     *     {@code null} and {@code Double.NaN} values are included\n     *     in the calculation (if either is present in the array, the result is\n     *     {@link Double#NaN}).\n     *\n     * @return The mean.\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.data.statistics.Statistics.calculateMean": "/**\n     * Returns the mean of a collection of {@code Number} objects.\n     *\n     * @param values  the values ({@code null} not permitted).\n     *\n     * @return The mean.\n     */\n",
"org.jfree.data.statistics.Statistics.calculateMean": "/**\n     * Returns the mean of a collection of {@code Number} objects.\n     *\n     * @param values  the values ({@code null} not permitted).\n     * @param includeNullAndNaN  a flag that controls whether or not\n     *     {@code null} and {@code Double.NaN} values are included\n     *     in the calculation (if either is present in the array, the result is\n     *     {@link Double#NaN}).\n     *\n     * @return The mean.\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.data.statistics.Statistics.calculateMedian": "/**\n     * Calculates the median for a list of values ({@code Number} objects).\n     * The list of values will be copied, and the copy sorted, before\n     * calculating the median.  To avoid this step (if your list of values\n     * is already sorted), use the {@link #calculateMedian(List, boolean)}\n     * method.\n     *\n     * @param values  the values ({@code null} permitted).\n     *\n     * @return The median.\n     */\n",
"org.jfree.data.statistics.Statistics.calculateMedian": "/**\n     * Calculates the median for a list of values ({@code Number} objects).\n     * If {@code copyAndSort} is {@code false}, the list is assumed\n     * to be presorted in ascending order by value.\n     *\n     * @param values  the values ({@code null} permitted).\n     * @param copyAndSort  a flag that controls whether the list of values is\n     *                     copied and sorted.\n     *\n     * @return The median.\n     */\n",
"org.jfree.data.statistics.Statistics.calculateMedian": "/**\n     * Calculates the median for a sublist within a list of values\n     * ({@code Number} objects).\n     *\n     * @param values  the values, in any order ({@code null} not permitted).\n     * @param start  the start index.\n     * @param end  the end index.\n     *\n     * @return The median.\n     */\n",
"org.jfree.data.statistics.Statistics.calculateMedian": "/**\n     * Calculates the median for a sublist within a list of values\n     * ({@code Number} objects).  The entire list will be sorted if the\n     * {@code ascending} argument is {@code false}.\n     *\n     * @param values  the values ({@code null} not permitted).\n     * @param start  the start index.\n     * @param end  the end index.\n     * @param copyAndSort  a flag that that controls whether the list of values\n     *                     is copied and sorted.\n     *\n     * @return The median.\n     */\n",
"org.jfree.data.statistics.Statistics.getStdDev": "/**\n     * Returns the standard deviation of a set of numbers.\n     *\n     * @param data  the data ({@code null} or zero length array not\n     *     permitted).\n     *\n     * @return The standard deviation of a set of numbers.\n     */\n",
"org.jfree.data.statistics.Statistics.getLinearFit": "/**\n     * Fits a straight line to a set of (x, y) data, returning the slope and\n     * intercept.\n     *\n     * @param xData  the x-data ({@code null} not permitted).\n     * @param yData  the y-data ({@code null} not permitted).\n     *\n     * @return A double array with the intercept in [0] and the slope in [1].\n     */\n",
"org.jfree.data.statistics.Statistics.getSlope": "/**\n     * Finds the slope of a regression line using least squares.\n     *\n     * @param xData  the x-values ({@code null} not permitted).\n     * @param yData  the y-values ({@code null} not permitted).\n     *\n     * @return The slope.\n     */\n",
"org.jfree.data.statistics.Statistics.getCorrelation": "/**\n     * Calculates the correlation between two datasets.  Both arrays should\n     * contain the same number of items.  Null values are treated as zero.\n     * <P>\n     * Information about the correlation calculation was obtained from:\n     *\n     * http://trochim.human.cornell.edu/kb/statcorr.htm\n     *\n     * @param data1  the first dataset.\n     * @param data2  the second dataset.\n     *\n     * @return The correlation.\n     */\n",
"org.jfree.data.statistics.Statistics.getMovingAverage": "/**\n     * Returns a data set for a moving average on the data set passed in.\n     *\n     * @param xData  an array of the x data.\n     * @param yData  an array of the y data.\n     * @param period  the number of data points to average\n     *\n     * @return A double[][] the length of the data set in the first dimension,\n     *         with two doubles for x and y in the second dimension\n     */\n",
"org.jfree.data.statistics.HistogramBin.getCount": "/**\n     * Returns the number of items in the bin.\n     *\n     * @return The item count.\n     */\n",
"org.jfree.data.statistics.HistogramBin.incrementCount": "/**\n     * Increments the item count.\n     */\n",
"org.jfree.data.statistics.HistogramBin.getStartBoundary": "/**\n     * Returns the start boundary.\n     *\n     * @return The start boundary.\n     */\n",
"org.jfree.data.statistics.HistogramBin.getEndBoundary": "/**\n     * Returns the end boundary.\n     *\n     * @return The end boundary.\n     */\n",
"org.jfree.data.statistics.HistogramBin.getBinWidth": "/**\n     * Returns the bin width.\n     *\n     * @return The bin width.\n     */\n",
"org.jfree.data.statistics.HistogramBin.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the object to test against.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.statistics.HistogramBin.clone": "/**\n     * Returns a clone of the bin.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException not thrown by this class.\n     */\n",
"org.jfree.data.statistics.SimpleHistogramBin.getLowerBound": "/**\n     * Returns the lower bound.\n     *\n     * @return The lower bound.\n     */\n",
"org.jfree.data.statistics.SimpleHistogramBin.getUpperBound": "/**\n     * Return the upper bound.\n     *\n     * @return The upper bound.\n     */\n",
"org.jfree.data.statistics.SimpleHistogramBin.getItemCount": "/**\n     * Returns the item count.\n     *\n     * @return The item count.\n     */\n",
"org.jfree.data.statistics.SimpleHistogramBin.setItemCount": "/**\n     * Sets the item count.\n     *\n     * @param count  the item count.\n     */\n",
"org.jfree.data.statistics.SimpleHistogramBin.accepts": "/**\n     * Returns {@code true} if the specified value belongs in the bin,\n     * and {@code false} otherwise.\n     *\n     * @param value  the value.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.statistics.SimpleHistogramBin.overlapsWith": "/**\n     * Returns {@code true} if this bin overlaps with the specified bin,\n     * and {@code false} otherwise.\n     *\n     * @param bin  the other bin ({@code null} not permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.statistics.SimpleHistogramBin.compareTo": "/**\n     * Compares the bin to an arbitrary object and returns the relative\n     * ordering.\n     *\n     * @param obj  the object.\n     *\n     * @return An integer indicating the relative ordering of the this bin and\n     *         the given object.\n     */\n",
"org.jfree.data.statistics.SimpleHistogramBin.equals": "/**\n     * Tests this bin for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.statistics.SimpleHistogramBin.clone": "/**\n     * Returns a clone of the bin.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException not thrown by this class.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerXYDataset.getMeanValue": "/**\n     * Returns the mean for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The mean for the specified series and item.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerXYDataset.getMedianValue": "/**\n     * Returns the median-value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The median-value for the specified series and item.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerXYDataset.getQ1Value": "/**\n     * Returns the Q1 median-value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The Q1 median-value for the specified series and item.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerXYDataset.getQ3Value": "/**\n     * Returns the Q3 median-value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The Q3 median-value for the specified series and item.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerXYDataset.getMinRegularValue": "/**\n     * Returns the min-value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The min-value for the specified series and item.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerXYDataset.getMaxRegularValue": "/**\n     * Returns the max-value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The max-value for the specified series and item.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerXYDataset.getMinOutlier": "/**\n     * Returns the minimum value which is not a farout.\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return A {@code Number} representing the maximum non-farout value.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerXYDataset.getMaxOutlier": "/**\n     * Returns the maximum value which is not a farout, ie Q3 + (interquartile\n     * range * farout coefficient).\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return A {@code Number} representing the maximum non-farout value.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerXYDataset.getOutliers": "/**\n     * Returns a list of outliers for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The list of outliers for the specified series and item\n     *         (possibly {@code null}).\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerXYDataset.getOutlierCoefficient": "/**\n     * Returns the value used as the outlier coefficient. The outlier\n     * coefficient gives an indication of the degree of certainty in an\n     * unskewed distribution.  Increasing the coefficient increases the number\n     * of values included.  Currently only used to ensure farout coefficient\n     * is greater than the outlier coefficient\n     *\n     * @return A {@code double} representing the value used to calculate\n     *         outliers\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerXYDataset.getFaroutCoefficient": "/**\n     * Returns the value used as the farout coefficient. The farout coefficient\n     * allows the calculation of which values will be off the graph.\n     *\n     * @return A {@code double} representing the value used to calculate\n     *         farouts\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerCategoryDataset.getMeanValue": "/**\n     * Returns the mean value for an item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The mean value.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerCategoryDataset.getMeanValue": "/**\n     * Returns the average value for an item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the columnKey.\n     *\n     * @return The average value.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerCategoryDataset.getMedianValue": "/**\n     * Returns the median value for an item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The median value.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerCategoryDataset.getMedianValue": "/**\n     * Returns the median value for an item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the columnKey.\n     *\n     * @return The median value.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerCategoryDataset.getQ1Value": "/**\n     * Returns the q1median value for an item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The q1median value.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerCategoryDataset.getQ1Value": "/**\n     * Returns the q1median value for an item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the columnKey.\n     *\n     * @return The q1median value.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerCategoryDataset.getQ3Value": "/**\n     * Returns the q3median value for an item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The q3median value.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerCategoryDataset.getQ3Value": "/**\n     * Returns the q3median value for an item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the columnKey.\n     *\n     * @return The q3median value.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerCategoryDataset.getMinRegularValue": "/**\n     * Returns the minimum regular (non-outlier) value for an item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The minimum regular value.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerCategoryDataset.getMinRegularValue": "/**\n     * Returns the minimum regular (non-outlier) value for an item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the columnKey.\n     *\n     * @return The minimum regular value.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerCategoryDataset.getMaxRegularValue": "/**\n     * Returns the maximum regular (non-outlier) value for an item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The maximum regular value.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerCategoryDataset.getMaxRegularValue": "/**\n     * Returns the maximum regular (non-outlier) value for an item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the columnKey.\n     *\n     * @return The maximum regular value.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerCategoryDataset.getMinOutlier": "/**\n     * Returns the minimum outlier (non-farout) for an item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The minimum outlier.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerCategoryDataset.getMinOutlier": "/**\n     * Returns the minimum outlier (non-farout) for an item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the columnKey.\n     *\n     * @return The minimum outlier.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerCategoryDataset.getMaxOutlier": "/**\n     * Returns the maximum outlier (non-farout) for an item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The maximum outlier.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerCategoryDataset.getMaxOutlier": "/**\n     * Returns the maximum outlier (non-farout) for an item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the columnKey.\n     *\n     * @return The maximum outlier.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerCategoryDataset.getOutliers": "/**\n     * Returns a list of outlier values for an item.  The list may be empty,\n     * but should never be {@code null}.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return A list of outliers for an item.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerCategoryDataset.getOutliers": "/**\n     * Returns a list of outlier values for an item.  The list may be empty,\n     * but should never be {@code null}.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the columnKey.\n     *\n     * @return A list of outlier values for an item.\n     */\n",
"org.jfree.data.statistics.DefaultMultiValueCategoryDataset.add": "/**\n     * Adds a list of values to the dataset ({@code null} and Double.NaN\n     * items are automatically removed) and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param values  a list of values ({@code null} not permitted).\n     * @param rowKey  the row key ({@code null} not permitted).\n     * @param columnKey  the column key ({@code null} not permitted).\n     */\n",
"org.jfree.data.statistics.DefaultMultiValueCategoryDataset.getValues": "/**\n     * Returns a list (possibly empty) of the values for the specified item.\n     * The returned list should be unmodifiable.\n     *\n     * @param row  the row index (zero-based).\n     * @param column   the column index (zero-based).\n     *\n     * @return The list of values.\n     */\n",
"org.jfree.data.statistics.DefaultMultiValueCategoryDataset.getValues": "/**\n     * Returns a list (possibly empty) of the values for the specified item.\n     * The returned list should be unmodifiable.\n     *\n     * @param rowKey  the row key ({@code null} not permitted).\n     * @param columnKey  the column key ({@code null} not permitted).\n     *\n     * @return The list of values.\n     */\n",
"org.jfree.data.statistics.DefaultMultiValueCategoryDataset.getValue": "/**\n     * Returns the average value for the specified item.\n     *\n     * @param row  the row key.\n     * @param column  the column key.\n     *\n     * @return The average value.\n     */\n",
"org.jfree.data.statistics.DefaultMultiValueCategoryDataset.getValue": "/**\n     * Returns the average value for the specified item.\n     *\n     * @param row  the row index.\n     * @param column  the column index.\n     *\n     * @return The average value.\n     */\n",
"org.jfree.data.statistics.DefaultMultiValueCategoryDataset.getColumnIndex": "/**\n     * Returns the column index for a given key.\n     *\n     * @param key  the column key.\n     *\n     * @return The column index.\n     */\n",
"org.jfree.data.statistics.DefaultMultiValueCategoryDataset.getColumnKey": "/**\n     * Returns a column key.\n     *\n     * @param column the column index (zero-based).\n     *\n     * @return The column key.\n     */\n",
"org.jfree.data.statistics.DefaultMultiValueCategoryDataset.getColumnKeys": "/**\n     * Returns the column keys.\n     *\n     * @return The keys.\n     */\n",
"org.jfree.data.statistics.DefaultMultiValueCategoryDataset.getRowIndex": "/**\n     * Returns the row index for a given key.\n     *\n     * @param key the row key.\n     *\n     * @return The row index.\n     */\n",
"org.jfree.data.statistics.DefaultMultiValueCategoryDataset.getRowKey": "/**\n     * Returns a row key.\n     *\n     * @param row the row index (zero-based).\n     *\n     * @return The row key.\n     */\n",
"org.jfree.data.statistics.DefaultMultiValueCategoryDataset.getRowKeys": "/**\n     * Returns the row keys.\n     *\n     * @return The keys.\n     */\n",
"org.jfree.data.statistics.DefaultMultiValueCategoryDataset.getRowCount": "/**\n     * Returns the number of rows in the table.\n     *\n     * @return The row count.\n     */\n",
"org.jfree.data.statistics.DefaultMultiValueCategoryDataset.getColumnCount": "/**\n     * Returns the number of columns in the table.\n     *\n     * @return The column count.\n     */\n",
"org.jfree.data.statistics.DefaultMultiValueCategoryDataset.getRangeLowerBound": "/**\n     * Returns the minimum y-value in the dataset.\n     *\n     * @param includeInterval a flag that determines whether or not the\n     *                        y-interval is taken into account.\n     *\n     * @return The minimum value.\n     */\n",
"org.jfree.data.statistics.DefaultMultiValueCategoryDataset.getRangeUpperBound": "/**\n     * Returns the maximum y-value in the dataset.\n     *\n     * @param includeInterval a flag that determines whether or not the\n     *                        y-interval is taken into account.\n     *\n     * @return The maximum value.\n     */\n",
"org.jfree.data.statistics.DefaultMultiValueCategoryDataset.getRangeBounds": "/**\n     * Returns the range of the values in this dataset's range.\n     *\n     * @param includeInterval a flag that determines whether or not the\n     *                        y-interval is taken into account.\n     * @return The range.\n     */\n",
"org.jfree.data.statistics.DefaultMultiValueCategoryDataset.equals": "/**\n     * Tests this dataset for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.statistics.DefaultMultiValueCategoryDataset.clone": "/**\n     * Returns a clone of this instance.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if the dataset cannot be cloned.\n     */\n",
"org.jfree.data.statistics.HistogramType.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.data.statistics.HistogramType.equals": "/**\n     * Tests this type for equality with an arbitrary object.\n     *\n     * @param obj  the object to test against.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.statistics.HistogramType.hashCode": "/**\n     * Returns a hash code value for the object.\n     *\n     * @return The hashcode\n     */\n",
"org.jfree.data.statistics.HistogramType.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     *\n     * @return The object.\n     *\n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.data.statistics.MeanAndStandardDeviation.getMean": "/**\n     * Returns the mean.\n     *\n     * @return The mean.\n     */\n",
"org.jfree.data.statistics.MeanAndStandardDeviation.getMeanValue": "/**\n     * Returns the mean as a double primitive.  If the underlying mean is\n     * {@code null}, this method will return {@code Double.NaN}.\n     *\n     * @return The mean.\n     *\n     * @see #getMean()\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.data.statistics.MeanAndStandardDeviation.getStandardDeviation": "/**\n     * Returns the standard deviation.\n     *\n     * @return The standard deviation.\n     */\n",
"org.jfree.data.statistics.MeanAndStandardDeviation.getStandardDeviationValue": "/**\n     * Returns the standard deviation as a double primitive.  If the underlying\n     * standard deviation is {@code null}, this method will return\n     * {@code Double.NaN}.\n     *\n     * @return The standard deviation.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.data.statistics.MeanAndStandardDeviation.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.statistics.MeanAndStandardDeviation.toString": "/**\n     * Returns a string representing this instance.\n     *\n     * @return A string.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.data.statistics.SimpleHistogramDataset.getAdjustForBinSize": "/**\n     * Returns a flag that controls whether or not the bin count is divided by\n     * the bin size in the {@link #getXValue(int, int)} method.\n     *\n     * @return A boolean.\n     *\n     * @see #setAdjustForBinSize(boolean)\n     */\n",
"org.jfree.data.statistics.SimpleHistogramDataset.setAdjustForBinSize": "/**\n     * Sets the flag that controls whether or not the bin count is divided by\n     * the bin size in the {@link #getYValue(int, int)} method, and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param adjust  the flag.\n     *\n     * @see #getAdjustForBinSize()\n     */\n",
"org.jfree.data.statistics.SimpleHistogramDataset.getSeriesCount": "/**\n     * Returns the number of series in the dataset (always 1 for this dataset).\n     *\n     * @return The series count.\n     */\n",
"org.jfree.data.statistics.SimpleHistogramDataset.getSeriesKey": "/**\n     * Returns the key for a series.  Since this dataset only stores a single\n     * series, the {@code series} argument is ignored.\n     *\n     * @param series  the series (zero-based index, ignored in this dataset).\n     *\n     * @return The key for the series.\n     */\n",
"org.jfree.data.statistics.SimpleHistogramDataset.getDomainOrder": "/**\n     * Returns the order of the domain (or X) values returned by the dataset.\n     *\n     * @return The order (never {@code null}).\n     */\n",
"org.jfree.data.statistics.SimpleHistogramDataset.getItemCount": "/**\n     * Returns the number of items in a series.  Since this dataset only stores\n     * a single series, the {@code series} argument is ignored.\n     *\n     * @param series  the series index (zero-based, ignored in this dataset).\n     *\n     * @return The item count.\n     */\n",
"org.jfree.data.statistics.SimpleHistogramDataset.addBin": "/**\n     * Adds a bin to the dataset.  An exception is thrown if the bin overlaps\n     * with any existing bin in the dataset.\n     *\n     * @param bin  the bin ({@code null} not permitted).\n     *\n     * @see #removeAllBins()\n     */\n",
"org.jfree.data.statistics.SimpleHistogramDataset.addObservation": "/**\n     * Adds an observation to the dataset (by incrementing the item count for\n     * the appropriate bin).  A runtime exception is thrown if the value does\n     * not fit into any bin.\n     *\n     * @param value  the value.\n     */\n",
"org.jfree.data.statistics.SimpleHistogramDataset.addObservation": "/**\n     * Adds an observation to the dataset (by incrementing the item count for\n     * the appropriate bin).  A runtime exception is thrown if the value does\n     * not fit into any bin.\n     *\n     * @param value  the value.\n     * @param notify  send {@link DatasetChangeEvent} to listeners?\n     */\n",
"org.jfree.data.statistics.SimpleHistogramDataset.addObservations": "/**\n     * Adds a set of values to the dataset and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param values  the values ({@code null} not permitted).\n     *\n     * @see #clearObservations()\n     */\n",
"org.jfree.data.statistics.SimpleHistogramDataset.clearObservations": "/**\n     * Removes all current observation data and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @since 1.0.6\n     *\n     * @see #addObservations(double[])\n     * @see #removeAllBins()\n     */\n",
"org.jfree.data.statistics.SimpleHistogramDataset.removeAllBins": "/**\n     * Removes all bins and sends a {@link DatasetChangeEvent} to all\n     * registered listeners.\n     *\n     * @since 1.0.6\n     *\n     * @see #addBin(SimpleHistogramBin)\n     */\n",
"org.jfree.data.statistics.SimpleHistogramDataset.getX": "/**\n     * Returns the x-value for an item within a series.  The x-values may or\n     * may not be returned in ascending order, that is up to the class\n     * implementing the interface.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The x-value (never {@code null}).\n     */\n",
"org.jfree.data.statistics.SimpleHistogramDataset.getXValue": "/**\n     * Returns the x-value (as a double primitive) for an item within a series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.statistics.SimpleHistogramDataset.getY": "/**\n     * Returns the y-value for an item within a series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The y-value (possibly {@code null}).\n     */\n",
"org.jfree.data.statistics.SimpleHistogramDataset.getYValue": "/**\n     * Returns the y-value (as a double primitive) for an item within a series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The y-value.\n     *\n     * @see #getAdjustForBinSize()\n     */\n",
"org.jfree.data.statistics.SimpleHistogramDataset.getStartX": "/**\n     * Returns the starting X value for the specified series and item.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.statistics.SimpleHistogramDataset.getStartXValue": "/**\n     * Returns the start x-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The start x-value.\n     */\n",
"org.jfree.data.statistics.SimpleHistogramDataset.getEndX": "/**\n     * Returns the ending X value for the specified series and item.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.statistics.SimpleHistogramDataset.getEndXValue": "/**\n     * Returns the end x-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The end x-value.\n     */\n",
"org.jfree.data.statistics.SimpleHistogramDataset.getStartY": "/**\n     * Returns the starting Y value for the specified series and item.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.statistics.SimpleHistogramDataset.getStartYValue": "/**\n     * Returns the start y-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The start y-value.\n     */\n",
"org.jfree.data.statistics.SimpleHistogramDataset.getEndY": "/**\n     * Returns the ending Y value for the specified series and item.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.statistics.SimpleHistogramDataset.getEndYValue": "/**\n     * Returns the end y-value (as a double primitive) for an item within a\n     * series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The end y-value.\n     */\n",
"org.jfree.data.statistics.SimpleHistogramDataset.equals": "/**\n     * Compares the dataset for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.statistics.SimpleHistogramDataset.clone": "/**\n     * Returns a clone of the dataset.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException not thrown by this class, but maybe\n     *         by subclasses (if any).\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerItem.getMean": "/**\n     * Returns the mean.\n     *\n     * @return The mean (possibly {@code null}).\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerItem.getMedian": "/**\n     * Returns the median.\n     *\n     * @return The median (possibly {@code null}).\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerItem.getQ1": "/**\n     * Returns the first quartile.\n     *\n     * @return The first quartile (possibly {@code null}).\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerItem.getQ3": "/**\n     * Returns the third quartile.\n     *\n     * @return The third quartile (possibly {@code null}).\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerItem.getMinRegularValue": "/**\n     * Returns the minimum regular value.\n     *\n     * @return The minimum regular value (possibly {@code null}).\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerItem.getMaxRegularValue": "/**\n     * Returns the maximum regular value.\n     *\n     * @return The maximum regular value (possibly {@code null}).\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerItem.getMinOutlier": "/**\n     * Returns the minimum outlier.\n     *\n     * @return The minimum outlier (possibly {@code null}).\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerItem.getMaxOutlier": "/**\n     * Returns the maximum outlier.\n     *\n     * @return The maximum outlier (possibly {@code null}).\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerItem.getOutliers": "/**\n     * Returns a list of outliers.\n     *\n     * @return A list of outliers (possibly {@code null}).\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerItem.toString": "/**\n     * Returns a string representation of this instance, primarily for\n     * debugging purposes.\n     *\n     * @return A string representation of this instance.\n     */\n",
"org.jfree.data.statistics.BoxAndWhiskerItem.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the object to test against ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getMeanValue": "/**\n     * Returns the mean value for an item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The mean value (possibly {@code null}).\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getValue": "/**\n     * Returns the value for an item (for this dataset, the mean value is\n     * returned).\n     *\n     * @param row  the row index.\n     * @param column  the column index.\n     *\n     * @return The value (possibly {@code null}).\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getValue": "/**\n     * Returns the value for an item (for this dataset, the mean value is\n     * returned).\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the columnKey.\n     *\n     * @return The value (possibly {@code null}).\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getMeanValue": "/**\n     * Returns the mean value for an item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the columnKey.\n     *\n     * @return The mean value (possibly {@code null}).\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getStdDevValue": "/**\n     * Returns the standard deviation value for an item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The standard deviation (possibly {@code null}).\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getStdDevValue": "/**\n     * Returns the standard deviation value for an item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the columnKey.\n     *\n     * @return The standard deviation (possibly {@code null}).\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getColumnIndex": "/**\n     * Returns the column index for a given key.\n     *\n     * @param key  the column key ({@code null} not permitted).\n     *\n     * @return The column index.\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getColumnKey": "/**\n     * Returns a column key.\n     *\n     * @param column  the column index (zero-based).\n     *\n     * @return The column key.\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getColumnKeys": "/**\n     * Returns the column keys.\n     *\n     * @return The keys.\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getRowIndex": "/**\n     * Returns the row index for a given key.\n     *\n     * @param key  the row key ({@code null} not permitted).\n     *\n     * @return The row index.\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getRowKey": "/**\n     * Returns a row key.\n     *\n     * @param row  the row index (zero-based).\n     *\n     * @return The row key.\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getRowKeys": "/**\n     * Returns the row keys.\n     *\n     * @return The keys.\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getRowCount": "/**\n     * Returns the number of rows in the table.\n     *\n     * @return The row count.\n     *\n     * @see #getColumnCount()\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getColumnCount": "/**\n     * Returns the number of columns in the table.\n     *\n     * @return The column count.\n     *\n     * @see #getRowCount()\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.add": "/**\n     * Adds a mean and standard deviation to the table.\n     *\n     * @param mean  the mean.\n     * @param standardDeviation  the standard deviation.\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.add": "/**\n     * Adds a mean and standard deviation to the table.\n     *\n     * @param mean  the mean.\n     * @param standardDeviation  the standard deviation.\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.remove": "/**\n     * Removes an item from the dataset and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param rowKey  the row key ({@code null} not permitted).\n     * @param columnKey  the column key ({@code null} not permitted).\n     *\n     * @see #add(double, double, Comparable, Comparable)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.removeRow": "/**\n     * Removes a row from the dataset and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param rowIndex  the row index.\n     *\n     * @see #removeColumn(int)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.removeRow": "/**\n     * Removes a row from the dataset and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param rowKey  the row key ({@code null} not permitted).\n     *\n     * @see #removeColumn(Comparable)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.removeColumn": "/**\n     * Removes a column from the dataset and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param columnIndex  the column index.\n     *\n     * @see #removeRow(int)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.removeColumn": "/**\n     * Removes a column from the dataset and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param columnKey  the column key ({@code null} not permitted).\n     *\n     * @see #removeRow(Comparable)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.clear": "/**\n     * Clears all data from the dataset and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.updateBounds": "/**\n     * Iterate over all the data items and update the cached bound values.\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getRangeLowerBound": "/**\n     * Returns the minimum y-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     *\n     * @return The minimum value.\n     *\n     * @see #getRangeUpperBound(boolean)\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getRangeUpperBound": "/**\n     * Returns the maximum y-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     *\n     * @return The maximum value.\n     *\n     * @see #getRangeLowerBound(boolean)\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getRangeBounds": "/**\n     * Returns the bounds of the values in this dataset's y-values.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     *\n     * @return The range.\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.statistics.DefaultStatisticalCategoryDataset.clone": "/**\n     * Returns a clone of this dataset.\n     *\n     * @return A clone of this dataset.\n     *\n     * @throws CloneNotSupportedException if cloning cannot be completed.\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.add": "/**\n     * Adds a list of values relating to one box-and-whisker entity to the\n     * table.  The various median values are calculated.\n     *\n     * @param list  a collection of values from which the various medians will\n     *              be calculated.\n     * @param rowKey  the row key ({@code null} not permitted).\n     * @param columnKey  the column key ({@code null} not permitted).\n     *\n     * @see #add(BoxAndWhiskerItem, Comparable, Comparable)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.add": "/**\n     * Adds a list of values relating to one Box and Whisker entity to the\n     * table.  The various median values are calculated.\n     *\n     * @param item  a box and whisker item ({@code null} not permitted).\n     * @param rowKey  the row key ({@code null} not permitted).\n     * @param columnKey  the column key ({@code null} not permitted).\n     *\n     * @see #add(List, Comparable, Comparable)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.remove": "/**\n     * Removes an item from the dataset and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param rowKey  the row key ({@code null} not permitted).\n     * @param columnKey  the column key ({@code null} not permitted).\n     *\n     * @see #add(BoxAndWhiskerItem, Comparable, Comparable)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.removeRow": "/**\n     * Removes a row from the dataset and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param rowIndex  the row index.\n     *\n     * @see #removeColumn(int)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.removeRow": "/**\n     * Removes a row from the dataset and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param rowKey  the row key.\n     *\n     * @see #removeColumn(Comparable)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.removeColumn": "/**\n     * Removes a column from the dataset and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param columnIndex  the column index.\n     *\n     * @see #removeRow(int)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.removeColumn": "/**\n     * Removes a column from the dataset and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param columnKey  the column key.\n     *\n     * @see #removeRow(Comparable)\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.clear": "/**\n     * Clears all data from the dataset and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getItem": "/**\n     * Return an item from within the dataset.\n     *\n     * @param row  the row index.\n     * @param column  the column index.\n     *\n     * @return The item.\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getValue": "/**\n     * Returns the value for an item.\n     *\n     * @param row  the row index.\n     * @param column  the column index.\n     *\n     * @return The value.\n     *\n     * @see #getMedianValue(int, int)\n     * @see #getValue(Comparable, Comparable)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getValue": "/**\n     * Returns the value for an item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the columnKey.\n     *\n     * @return The value.\n     *\n     * @see #getMedianValue(Comparable, Comparable)\n     * @see #getValue(int, int)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getMeanValue": "/**\n     * Returns the mean value for an item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The mean value.\n     *\n     * @see #getItem(int, int)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getMeanValue": "/**\n     * Returns the mean value for an item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     *\n     * @return The mean value.\n     *\n     * @see #getItem(int, int)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getMedianValue": "/**\n     * Returns the median value for an item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The median value.\n     *\n     * @see #getItem(int, int)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getMedianValue": "/**\n     * Returns the median value for an item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the columnKey.\n     *\n     * @return The median value.\n     *\n     * @see #getItem(int, int)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getQ1Value": "/**\n     * Returns the first quartile value.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The first quartile value.\n     *\n     * @see #getItem(int, int)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getQ1Value": "/**\n     * Returns the first quartile value.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     *\n     * @return The first quartile value.\n     *\n     * @see #getItem(int, int)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getQ3Value": "/**\n     * Returns the third quartile value.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The third quartile value.\n     *\n     * @see #getItem(int, int)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getQ3Value": "/**\n     * Returns the third quartile value.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     *\n     * @return The third quartile value.\n     *\n     * @see #getItem(int, int)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getColumnIndex": "/**\n     * Returns the column index for a given key.\n     *\n     * @param key  the column key ({@code null} not permitted).\n     *\n     * @return The column index.\n     *\n     * @see #getColumnKey(int)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getColumnKey": "/**\n     * Returns a column key.\n     *\n     * @param column  the column index (zero-based).\n     *\n     * @return The column key.\n     *\n     * @see #getColumnIndex(Comparable)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getColumnKeys": "/**\n     * Returns the column keys.\n     *\n     * @return The keys.\n     *\n     * @see #getRowKeys()\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getRowIndex": "/**\n     * Returns the row index for a given key.\n     *\n     * @param key  the row key ({@code null} not permitted).\n     *\n     * @return The row index.\n     *\n     * @see #getRowKey(int)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getRowKey": "/**\n     * Returns a row key.\n     *\n     * @param row  the row index (zero-based).\n     *\n     * @return The row key.\n     *\n     * @see #getRowIndex(Comparable)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getRowKeys": "/**\n     * Returns the row keys.\n     *\n     * @return The keys.\n     *\n     * @see #getColumnKeys()\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getRowCount": "/**\n     * Returns the number of rows in the table.\n     *\n     * @return The row count.\n     *\n     * @see #getColumnCount()\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getColumnCount": "/**\n     * Returns the number of columns in the table.\n     *\n     * @return The column count.\n     *\n     * @see #getRowCount()\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getRangeLowerBound": "/**\n     * Returns the minimum y-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     *\n     * @return The minimum value.\n     *\n     * @see #getRangeUpperBound(boolean)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getRangeUpperBound": "/**\n     * Returns the maximum y-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     *\n     * @return The maximum value.\n     *\n     * @see #getRangeLowerBound(boolean)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getRangeBounds": "/**\n     * Returns the range of the values in this dataset's range.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     *\n     * @return The range.\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getMinRegularValue": "/**\n     * Returns the minimum regular (non outlier) value for an item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The minimum regular value.\n     *\n     * @see #getItem(int, int)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getMinRegularValue": "/**\n     * Returns the minimum regular (non outlier) value for an item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     *\n     * @return The minimum regular value.\n     *\n     * @see #getItem(int, int)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getMaxRegularValue": "/**\n     * Returns the maximum regular (non outlier) value for an item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The maximum regular value.\n     *\n     * @see #getItem(int, int)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getMaxRegularValue": "/**\n     * Returns the maximum regular (non outlier) value for an item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     *\n     * @return The maximum regular value.\n     *\n     * @see #getItem(int, int)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getMinOutlier": "/**\n     * Returns the minimum outlier (non farout) value for an item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The minimum outlier.\n     *\n     * @see #getItem(int, int)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getMinOutlier": "/**\n     * Returns the minimum outlier (non farout) value for an item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     *\n     * @return The minimum outlier.\n     *\n     * @see #getItem(int, int)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getMaxOutlier": "/**\n     * Returns the maximum outlier (non farout) value for an item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The maximum outlier.\n     *\n     * @see #getItem(int, int)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getMaxOutlier": "/**\n     * Returns the maximum outlier (non farout) value for an item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     *\n     * @return The maximum outlier.\n     *\n     * @see #getItem(int, int)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getOutliers": "/**\n     * Returns a list of outlier values for an item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return A list of outlier values.\n     *\n     * @see #getItem(int, int)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getOutliers": "/**\n     * Returns a list of outlier values for an item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     *\n     * @return A list of outlier values.\n     *\n     * @see #getItem(int, int)\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.updateBounds": "/**\n     * Resets the cached bounds, by iterating over the entire dataset to find\n     * the current bounds.\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.equals": "/**\n     * Tests this dataset for equality with an arbitrary object.\n     *\n     * @param obj  the object to test against ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.clone": "/**\n     * Returns a clone of this dataset.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if cloning is not possible.\n     */\n",
"org.jfree.data.statistics.Regression.getOLSRegression": "/**\n     * Returns the parameters 'a' and 'b' for an equation y = a + bx, fitted to\n     * the data using ordinary least squares regression.  The result is\n     * returned as a double[], where result[0] --&gt; a, and result[1] --&gt; b.\n     *\n     * @param data  the data.\n     *\n     * @return The parameters.\n     */\n",
"org.jfree.data.statistics.Regression.getOLSRegression": "/**\n     * Returns the parameters 'a' and 'b' for an equation y = a + bx, fitted to\n     * the data using ordinary least squares regression. The result is returned\n     * as a double[], where result[0] --&gt; a, and result[1] --&gt; b.\n     *\n     * @param data  the data.\n     * @param series  the series (zero-based index).\n     *\n     * @return The parameters.\n     */\n",
"org.jfree.data.statistics.Regression.getPowerRegression": "/**\n     * Returns the parameters 'a' and 'b' for an equation y = ax^b, fitted to\n     * the data using a power regression equation.  The result is returned as\n     * an array, where double[0] --&gt; a, and double[1] --&gt; b.\n     *\n     * @param data  the data.\n     *\n     * @return The parameters.\n     */\n",
"org.jfree.data.statistics.Regression.getPowerRegression": "/**\n     * Returns the parameters 'a' and 'b' for an equation y = ax^b, fitted to\n     * the data using a power regression equation.  The result is returned as\n     * an array, where double[0] --&gt; a, and double[1] --&gt; b.\n     *\n     * @param data  the data.\n     * @param series  the series to fit the regression line against.\n     *\n     * @return The parameters.\n     */\n",
"org.jfree.data.statistics.Regression.getPolynomialRegression": "/**\n     * Returns the parameters 'a0', 'a1', 'a2', ..., 'an' for a polynomial \n     * function of order n, y = a0 + a1 * x + a2 * x^2 + ... + an * x^n,\n     * fitted to the data using a polynomial regression equation.\n     * The result is returned as an array with a length of n + 2,\n     * where double[0] --&gt; a0, double[1] --&gt; a1, .., double[n] --&gt; an.\n     * and double[n + 1] is the correlation coefficient R2\n     * Reference: J. D. Faires, R. L. Burden, Numerische Methoden (german\n     * edition), pp. 243ff and 327ff.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     * @param series  the series to fit the regression line against (the series\n     *         must have at least order + 1 non-NaN items).\n     * @param order  the order of the function (&gt; 0).\n     *\n     * @return The parameters.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.data.statistics.Regression.calculateSubMatrix": "/**\n     * Returns a matrix with the following features: (1) the number of rows\n     * and columns is 1 less than that of the original matrix; (2)the matrix\n     * is triangular, i.e. all elements a (row, column) with column &gt; row are\n     * zero.  This method is used for calculating a polynomial regression.\n     * \n     * @param matrix  the start matrix.\n     *\n     * @return The new matrix.\n     */\n",
"org.jfree.data.statistics.HistogramDataset.getType": "/**\n     * Returns the histogram type.\n     *\n     * @return The type (never {@code null}).\n     */\n",
"org.jfree.data.statistics.HistogramDataset.setType": "/**\n     * Sets the histogram type and sends a {@link DatasetChangeEvent} to all\n     * registered listeners.\n     *\n     * @param type  the type ({@code null} not permitted).\n     */\n",
"org.jfree.data.statistics.HistogramDataset.addSeries": "/**\n     * Adds a series to the dataset, using the specified number of bins,\n     * and sends a {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param key  the series key ({@code null} not permitted).\n     * @param values the values ({@code null} not permitted).\n     * @param bins  the number of bins (must be at least 1).\n     */\n",
"org.jfree.data.statistics.HistogramDataset.addSeries": "/**\n     * Adds a series to the dataset. Any data value less than minimum will be\n     * assigned to the first bin, and any data value greater than maximum will\n     * be assigned to the last bin.  Values falling on the boundary of\n     * adjacent bins will be assigned to the higher indexed bin.\n     *\n     * @param key  the series key ({@code null} not permitted).\n     * @param values  the raw observations.\n     * @param bins  the number of bins (must be at least 1).\n     * @param minimum  the lower bound of the bin range.\n     * @param maximum  the upper bound of the bin range.\n     */\n",
"org.jfree.data.statistics.HistogramDataset.getMinimum": "/**\n     * Returns the minimum value in an array of values.\n     *\n     * @param values  the values ({@code null} not permitted and\n     *                zero-length array not permitted).\n     *\n     * @return The minimum value.\n     */\n",
"org.jfree.data.statistics.HistogramDataset.getMaximum": "/**\n     * Returns the maximum value in an array of values.\n     *\n     * @param values  the values ({@code null} not permitted and\n     *                zero-length array not permitted).\n     *\n     * @return The maximum value.\n     */\n",
"org.jfree.data.statistics.HistogramDataset.getBins": "/**\n     * Returns the bins for a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     *\n     * @return A list of bins.\n     *\n     * @throws IndexOutOfBoundsException if {@code series} is outside the\n     *     specified range.\n     */\n",
"org.jfree.data.statistics.HistogramDataset.getTotal": "/**\n     * Returns the total number of observations for a series.\n     *\n     * @param series  the series index.\n     *\n     * @return The total.\n     */\n",
"org.jfree.data.statistics.HistogramDataset.getBinWidth": "/**\n     * Returns the bin width for a series.\n     *\n     * @param series  the series index (zero based).\n     *\n     * @return The bin width.\n     */\n",
"org.jfree.data.statistics.HistogramDataset.getSeriesCount": "/**\n     * Returns the number of series in the dataset.\n     *\n     * @return The series count.\n     */\n",
"org.jfree.data.statistics.HistogramDataset.getSeriesKey": "/**\n     * Returns the key for a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     *\n     * @return The series key.\n     *\n     * @throws IndexOutOfBoundsException if {@code series} is outside the\n     *     specified range.\n     */\n",
"org.jfree.data.statistics.HistogramDataset.getItemCount": "/**\n     * Returns the number of data items for a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     *\n     * @return The item count.\n     *\n     * @throws IndexOutOfBoundsException if {@code series} is outside the\n     *     specified range.\n     */\n",
"org.jfree.data.statistics.HistogramDataset.getX": "/**\n     * Returns the X value for a bin.  This value won't be used for plotting\n     * histograms, since the renderer will ignore it.  But other renderers can\n     * use it (for example, you could use the dataset to create a line\n     * chart).\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (zero based).\n     *\n     * @return The start value.\n     *\n     * @throws IndexOutOfBoundsException if {@code series} is outside the\n     *     specified range.\n     */\n",
"org.jfree.data.statistics.HistogramDataset.getY": "/**\n     * Returns the y-value for a bin (calculated to take into account the\n     * histogram type).\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (zero based).\n     *\n     * @return The y-value.\n     *\n     * @throws IndexOutOfBoundsException if {@code series} is outside the\n     *     specified range.\n     */\n",
"org.jfree.data.statistics.HistogramDataset.getStartX": "/**\n     * Returns the start value for a bin.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (zero based).\n     *\n     * @return The start value.\n     *\n     * @throws IndexOutOfBoundsException if {@code series} is outside the\n     *     specified range.\n     */\n",
"org.jfree.data.statistics.HistogramDataset.getEndX": "/**\n     * Returns the end value for a bin.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (zero based).\n     *\n     * @return The end value.\n     *\n     * @throws IndexOutOfBoundsException if {@code series} is outside the\n     *     specified range.\n     */\n",
"org.jfree.data.statistics.HistogramDataset.getStartY": "/**\n     * Returns the start y-value for a bin (which is the same as the y-value,\n     * this method exists only to support the general form of the\n     * {@link IntervalXYDataset} interface).\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (zero based).\n     *\n     * @return The y-value.\n     *\n     * @throws IndexOutOfBoundsException if {@code series} is outside the\n     *     specified range.\n     */\n",
"org.jfree.data.statistics.HistogramDataset.getEndY": "/**\n     * Returns the end y-value for a bin (which is the same as the y-value,\n     * this method exists only to support the general form of the\n     * {@link IntervalXYDataset} interface).\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     * @param item  the item index (zero based).\n     *\n     * @return The Y value.\n     *\n     * @throws IndexOutOfBoundsException if {@code series} is outside the\n     *     specified range.\n     */\n",
"org.jfree.data.statistics.HistogramDataset.equals": "/**\n     * Tests this dataset for equality with an arbitrary object.\n     *\n     * @param obj  the object to test against ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.statistics.HistogramDataset.clone": "/**\n     * Returns a clone of the dataset.\n     *\n     * @return A clone of the dataset.\n     *\n     * @throws CloneNotSupportedException if the object cannot be cloned.\n     */\n",
"org.jfree.data.statistics.MultiValueCategoryDataset.getValues": "/**\n     * Returns a list (possibly empty) of the values for the specified item.\n     * The returned list should be unmodifiable.\n     *\n     * @param row  the row index (zero-based).\n     * @param column   the column index (zero-based).\n     *\n     * @return The list of values.\n     */\n",
"org.jfree.data.statistics.MultiValueCategoryDataset.getValues": "/**\n     * Returns a list (possibly empty) of the values for the specified item.\n     * The returned list should be unmodifiable.\n     *\n     * @param rowKey  the row key ({@code null} not permitted).\n     * @param columnKey  the column key ({@code null} not permitted).\n     *\n     * @return The list of values.\n     */\n",
"org.jfree.data.DomainInfo.getDomainLowerBound": "/**\n     * Returns the minimum x-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         x-interval is taken into account.\n     *\n     * @return The minimum value or {@code Double.NaN} if there are no \n     *     values.\n     */\n",
"org.jfree.data.DomainInfo.getDomainUpperBound": "/**\n     * Returns the maximum x-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         x-interval is taken into account.\n     *\n     * @return The maximum value or {@code Double.NaN} if there are no \n     *     values.\n     */\n",
"org.jfree.data.DomainInfo.getDomainBounds": "/**\n     * Returns the range of the values in this dataset's domain.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         x-interval is taken into account.\n     *\n     * @return The range (or {@code null} if the dataset contains no\n     *     values).\n     */\n",
"org.jfree.data.KeyedObject.getKey": "/**\n     * Returns the key.\n     *\n     * @return The key.\n     */\n",
"org.jfree.data.KeyedObject.getObject": "/**\n     * Returns the object.\n     *\n     * @return The object (possibly {@code null}).\n     */\n",
"org.jfree.data.KeyedObject.setObject": "/**\n     * Sets the object.\n     *\n     * @param object  the object ({@code null} permitted).\n     */\n",
"org.jfree.data.KeyedObject.clone": "/**\n     * Returns a clone of this object.  It is assumed that the key is an\n     * immutable object, so it is not deep-cloned.  The object is deep-cloned\n     * if it implements {@link PublicCloneable}, otherwise a shallow clone is\n     * made.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning.\n     */\n",
"org.jfree.data.KeyedObject.equals": "/**\n     * Tests if this object is equal to another.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.DataUtils.equal": "/**\n     * Tests two arrays for equality.  To be considered equal, the arrays must\n     * have exactly the same dimensions, and the values in each array must also\n     * match (two values that qre both NaN or both INF are considered equal\n     * in this test).\n     *\n     * @param a  the first array ({@code null} permitted).\n     * @param b  the second array ({@code null} permitted).\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.data.DataUtils.clone": "/**\n     * Returns a clone of the specified array.\n     *\n     * @param source  the source array ({@code null} not permitted).\n     *\n     * @return A clone of the array.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.data.DataUtils.calculateColumnTotal": "/**\n     * Returns the total of the values in one column of the supplied data\n     * table.\n     *\n     * @param data  the table of values ({@code null} not permitted).\n     * @param column  the column index (zero-based).\n     *\n     * @return The total of the values in the specified column.\n     */\n",
"org.jfree.data.DataUtils.calculateColumnTotal": "/**\n     * Returns the total of the values in one column of the supplied data\n     * table by taking only the row numbers in the array into account.\n     *\n     * @param data  the table of values ({@code null} not permitted).\n     * @param column  the column index (zero-based).\n     * @param validRows the array with valid rows (zero-based).\n     *\n     * @return The total of the valid values in the specified column.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.data.DataUtils.calculateRowTotal": "/**\n     * Returns the total of the values in one row of the supplied data\n     * table.\n     *\n     * @param data  the table of values ({@code null} not permitted).\n     * @param row  the row index (zero-based).\n     *\n     * @return The total of the values in the specified row.\n     */\n",
"org.jfree.data.DataUtils.calculateRowTotal": "/**\n     * Returns the total of the values in one row of the supplied data\n     * table by taking only the column numbers in the array into account.\n     *\n     * @param data  the table of values ({@code null} not permitted).\n     * @param row  the row index (zero-based).\n     * @param validCols the array with valid cols (zero-based).\n     *\n     * @return The total of the valid values in the specified row.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.data.DataUtils.createNumberArray": "/**\n     * Constructs an array of {@code Number} objects from an array of\n     * {@code double} primitives.\n     *\n     * @param data  the data ({@code null} not permitted).\n     *\n     * @return An array of {@code double}.\n     */\n",
"org.jfree.data.DataUtils.createNumberArray2D": "/**\n     * Constructs an array of arrays of {@code Number} objects from a\n     * corresponding structure containing {@code double} primitives.\n     *\n     * @param data  the data ({@code null} not permitted).\n     *\n     * @return An array of {@code double}.\n     */\n",
"org.jfree.data.DataUtils.getCumulativePercentages": "/**\n     * Returns a {@link KeyedValues} instance that contains the cumulative\n     * percentage values for the data in another {@link KeyedValues} instance.\n     * <p>\n     * The percentages are values between 0.0 and 1.0 (where 1.0 = 100%).\n     *\n     * @param data  the data ({@code null} not permitted).\n     *\n     * @return The cumulative percentages.\n     */\n",
"org.jfree.data.KeyToGroupMap.getGroupCount": "/**\n     * Returns the number of groups in the map.\n     *\n     * @return The number of groups in the map.\n     */\n",
"org.jfree.data.KeyToGroupMap.getGroups": "/**\n     * Returns a list of the groups (always including the default group) in the\n     * map.  The returned list is independent of the map, so altering the list\n     * will have no effect.\n     *\n     * @return The groups (never {@code null}).\n     */\n",
"org.jfree.data.KeyToGroupMap.getGroupIndex": "/**\n     * Returns the index for the group.\n     *\n     * @param group  the group.\n     *\n     * @return The group index (or -1 if the group is not represented within\n     *         the map).\n     */\n",
"org.jfree.data.KeyToGroupMap.getGroup": "/**\n     * Returns the group that a key is mapped to.\n     *\n     * @param key  the key ({@code null} not permitted).\n     *\n     * @return The group (never {@code null}, returns the default group if\n     *         there is no mapping for the specified key).\n     */\n",
"org.jfree.data.KeyToGroupMap.mapKeyToGroup": "/**\n     * Maps a key to a group.\n     *\n     * @param key  the key ({@code null} not permitted).\n     * @param group  the group ({@code null} permitted, clears any\n     *               existing mapping).\n     */\n",
"org.jfree.data.KeyToGroupMap.getKeyCount": "/**\n     * Returns the number of keys mapped to the specified group.  This method\n     * won't always return an accurate result for the default group, since\n     * explicit mappings are not required for this group.\n     *\n     * @param group  the group ({@code null} not permitted).\n     *\n     * @return The key count.\n     */\n",
"org.jfree.data.KeyToGroupMap.equals": "/**\n     * Tests the map for equality against an arbitrary object.\n     *\n     * @param obj  the object to test against ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.KeyToGroupMap.clone": "/**\n     * Returns a clone of the map.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  if there is a problem cloning the\n     *                                     map.\n     */\n",
"org.jfree.data.KeyToGroupMap.clone": "/**\n     * Attempts to clone the specified object using reflection.\n     *\n     * @param object  the object ({@code null} permitted).\n     *\n     * @return The cloned object, or the original object if cloning failed.\n     */\n",
"org.jfree.data.KeyToGroupMap.clone": "/**\n     * Returns a clone of the list.\n     *\n     * @param list  the list.\n     *\n     * @return A clone of the list.\n     *\n     * @throws CloneNotSupportedException if the list could not be cloned.\n     */\n",
"org.jfree.data.KeyedObjects.getItemCount": "/**\n     * Returns the number of items (values) in the collection.\n     *\n     * @return The item count.\n     */\n",
"org.jfree.data.KeyedObjects.getObject": "/**\n     * Returns an object from the list.\n     *\n     * @param item  the item index (zero-based).\n     *\n     * @return The object (possibly {@code null}).\n     *\n     * @throws IndexOutOfBoundsException if {@code item} is out of bounds.\n     */\n",
"org.jfree.data.KeyedObjects.getKey": "/**\n     * Returns the key at the specified position in the list.\n     *\n     * @param index  the item index (zero-based).\n     *\n     * @return The row key.\n     *\n     * @throws IndexOutOfBoundsException if {@code item} is out of bounds.\n     *\n     * @see #getIndex(Comparable)\n     */\n",
"org.jfree.data.KeyedObjects.getIndex": "/**\n     * Returns the index for a given key, or {@code -1}.\n     *\n     * @param key  the key ({@code null} not permitted).\n     *\n     * @return The index, or {@code -1} if the key is unrecognised.\n     *\n     * @see #getKey(int)\n     */\n",
"org.jfree.data.KeyedObjects.getKeys": "/**\n     * Returns a list containing all the keys in the list.\n     *\n     * @return The keys (never {@code null}).\n     */\n",
"org.jfree.data.KeyedObjects.getObject": "/**\n     * Returns the object for a given key. If the key is not recognised, the\n     * method should return {@code null}.\n     *\n     * @param key  the key.\n     *\n     * @return The object (possibly {@code null}).\n     *\n     * @see #addObject(Comparable, Object)\n     */\n",
"org.jfree.data.KeyedObjects.addObject": "/**\n     * Adds a new object to the collection, or overwrites an existing object.\n     * This is the same as the {@link #setObject(Comparable, Object)} method.\n     *\n     * @param key  the key.\n     * @param object  the object.\n     *\n     * @see #getObject(Comparable)\n     */\n",
"org.jfree.data.KeyedObjects.setObject": "/**\n     * Replaces an existing object, or adds a new object to the collection.\n     * This is the same as the {@link #addObject(Comparable, Object)}\n     * method.\n     *\n     * @param key  the key ({@code null} not permitted).\n     * @param object  the object.\n     *\n     * @see #getObject(Comparable)\n     */\n",
"org.jfree.data.KeyedObjects.insertValue": "/**\n     * Inserts a new value at the specified position in the dataset or, if\n     * there is an existing item with the specified key, updates the value\n     * for that item and moves it to the specified position.\n     *\n     * @param position  the position (in the range {@code 0} to\n     *                  {@code getItemCount()}).\n     * @param key  the key ({@code null} not permitted).\n     * @param value  the value ({@code null} permitted).\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.data.KeyedObjects.removeValue": "/**\n     * Removes a value from the collection.\n     *\n     * @param index  the index of the item to remove.\n     *\n     * @see #removeValue(Comparable)\n     */\n",
"org.jfree.data.KeyedObjects.removeValue": "/**\n     * Removes a value from the collection.\n     *\n     * @param key  the key ({@code null} not permitted).\n     *\n     * @see #removeValue(int)\n     *\n     * @throws UnknownKeyException if the key is not recognised.\n     */\n",
"org.jfree.data.KeyedObjects.clear": "/**\n     * Clears all values from the collection.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.data.KeyedObjects.clone": "/**\n     * Returns a clone of this object.  Keys in the list should be immutable\n     * and are not cloned.  Objects in the list are cloned only if they\n     * implement {@link PublicCloneable}.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning.\n     */\n",
"org.jfree.data.KeyedObjects.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.KeyedObjects.hashCode": "/**\n     * Returns a hash code.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.gantt.TaskSeries.add": "/**\n     * Adds a task to the series and sends a\n     * {@link org.jfree.data.general.SeriesChangeEvent} to all registered\n     * listeners.\n     *\n     * @param task  the task ({@code null} not permitted).\n     */\n",
"org.jfree.data.gantt.TaskSeries.remove": "/**\n     * Removes a task from the series and sends\n     * a {@link org.jfree.data.general.SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param task  the task.\n     */\n",
"org.jfree.data.gantt.TaskSeries.removeAll": "/**\n     * Removes all tasks from the series and sends\n     * a {@link org.jfree.data.general.SeriesChangeEvent}\n     * to all registered listeners.\n     */\n",
"org.jfree.data.gantt.TaskSeries.getItemCount": "/**\n     * Returns the number of items in the series.\n     *\n     * @return The item count.\n     */\n",
"org.jfree.data.gantt.TaskSeries.get": "/**\n     * Returns a task from the series.\n     *\n     * @param index  the task index (zero-based).\n     *\n     * @return The task.\n     */\n",
"org.jfree.data.gantt.TaskSeries.get": "/**\n     * Returns the task in the series that has the specified description.\n     *\n     * @param description  the name ({@code null} not permitted).\n     *\n     * @return The task (possibly {@code null}).\n     */\n",
"org.jfree.data.gantt.TaskSeries.getTasks": "/**\n     * Returns an unmodifialble list of the tasks in the series.\n     *\n     * @return The tasks.\n     */\n",
"org.jfree.data.gantt.TaskSeries.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the object to test against ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.gantt.TaskSeries.clone": "/**\n     * Returns an independent copy of this series.\n     *\n     * @return A clone of the series.\n     *\n     * @throws CloneNotSupportedException if there is some problem cloning\n     *     the dataset.\n     */\n",
"org.jfree.data.gantt.GanttCategoryDataset.getPercentComplete": "/**\n     * Returns the percent complete for a given item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The percent complete.\n     *\n     * @see #getPercentComplete(Comparable, Comparable)\n     */\n",
"org.jfree.data.gantt.GanttCategoryDataset.getPercentComplete": "/**\n     * Returns the percent complete for a given item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     *\n     * @return The percent complete.\n     *\n     * @see #getPercentComplete(int, int)\n     */\n",
"org.jfree.data.gantt.GanttCategoryDataset.getSubIntervalCount": "/**\n     * Returns the number of sub-intervals for a given item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The sub-interval count.\n     *\n     * @see #getSubIntervalCount(Comparable, Comparable)\n     */\n",
"org.jfree.data.gantt.GanttCategoryDataset.getSubIntervalCount": "/**\n     * Returns the number of sub-intervals for a given item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     *\n     * @return The sub-interval count.\n     *\n     * @see #getSubIntervalCount(int, int)\n     */\n",
"org.jfree.data.gantt.GanttCategoryDataset.getStartValue": "/**\n     * Returns the start value of a sub-interval for a given item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param subinterval  the sub-interval index (zero-based).\n     *\n     * @return The start value (possibly {@code null}).\n     *\n     * @see #getEndValue(int, int, int)\n     */\n",
"org.jfree.data.gantt.GanttCategoryDataset.getStartValue": "/**\n     * Returns the start value of a sub-interval for a given item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     * @param subinterval  the sub-interval.\n     *\n     * @return The start value (possibly {@code null}).\n     *\n     * @see #getEndValue(Comparable, Comparable, int)\n     */\n",
"org.jfree.data.gantt.GanttCategoryDataset.getEndValue": "/**\n     * Returns the end value of a sub-interval for a given item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param subinterval  the sub-interval.\n     *\n     * @return The end value (possibly {@code null}).\n     *\n     * @see #getStartValue(int, int, int)\n     */\n",
"org.jfree.data.gantt.GanttCategoryDataset.getEndValue": "/**\n     * Returns the end value of a sub-interval for a given item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     * @param subinterval  the sub-interval.\n     *\n     * @return The end value (possibly {@code null}).\n     *\n     * @see #getStartValue(Comparable, Comparable, int)\n     */\n",
"org.jfree.data.gantt.GanttCategoryDataset.getPercentComplete": "/**\n     * Returns the percentage complete value of a sub-interval for a given item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param subinterval  the sub-interval.\n     *\n     * @return The percent complete value (possibly {@code null}).\n     *\n     * @see #getPercentComplete(Comparable, Comparable, int)\n     */\n",
"org.jfree.data.gantt.GanttCategoryDataset.getPercentComplete": "/**\n     * Returns the percentage complete value of a sub-interval for a given item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     * @param subinterval  the sub-interval.\n     *\n     * @return The percent complete value (possibly {@code null}).\n     *\n     * @see #getPercentComplete(int, int, int)\n     */\n",
"org.jfree.data.gantt.XYTaskDataset.getTasks": "/**\n     * Returns the underlying task series collection that was supplied to the\n     * constructor.\n     *\n     * @return The underlying collection (never {@code null}).\n     */\n",
"org.jfree.data.gantt.XYTaskDataset.getSeriesWidth": "/**\n     * Returns the width of the interval for each series this dataset.\n     *\n     * @return The width of the series interval.\n     *\n     * @see #setSeriesWidth(double)\n     */\n",
"org.jfree.data.gantt.XYTaskDataset.setSeriesWidth": "/**\n     * Sets the series interval width and sends a {@link DatasetChangeEvent} to\n     * all registered listeners.\n     *\n     * @param w  the width.\n     *\n     * @see #getSeriesWidth()\n     */\n",
"org.jfree.data.gantt.XYTaskDataset.isTransposed": "/**\n     * Returns a flag that indicates whether or not the dataset is transposed.\n     * The default is {@code false} which means the x-values are integers\n     * corresponding to the series indices, and the y-values are millisecond\n     * values corresponding to the task date/time intervals.  If the flag\n     * is set to {@code true}, the x and y-values are reversed.\n     *\n     * @return The flag.\n     *\n     * @see #setTransposed(boolean)\n     */\n",
"org.jfree.data.gantt.XYTaskDataset.setTransposed": "/**\n     * Sets the flag that controls whether or not the dataset is transposed\n     * and sends a {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param transposed  the new flag value.\n     *\n     * @see #isTransposed()\n     */\n",
"org.jfree.data.gantt.XYTaskDataset.getSeriesCount": "/**\n     * Returns the number of series in the dataset.\n     *\n     * @return The series count.\n     */\n",
"org.jfree.data.gantt.XYTaskDataset.getSeriesKey": "/**\n     * Returns the name of a series.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The name of a series.\n     */\n",
"org.jfree.data.gantt.XYTaskDataset.getItemCount": "/**\n     * Returns the number of items (tasks) in the specified series.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The item count.\n     */\n",
"org.jfree.data.gantt.XYTaskDataset.getXValue": "/**\n     * Returns the x-value (as a double primitive) for an item within a series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.gantt.XYTaskDataset.getStartXValue": "/**\n     * Returns the starting date/time for the specified item (task) in the\n     * given series, measured in milliseconds since 1-Jan-1970 (as in\n     * java.util.Date).\n     *\n     * @param series  the series index.\n     * @param item  the item (or task) index.\n     *\n     * @return The start date/time.\n     */\n",
"org.jfree.data.gantt.XYTaskDataset.getEndXValue": "/**\n     * Returns the ending date/time for the specified item (task) in the\n     * given series, measured in milliseconds since 1-Jan-1970 (as in\n     * java.util.Date).\n     *\n     * @param series  the series index.\n     * @param item  the item (or task) index.\n     *\n     * @return The end date/time.\n     */\n",
"org.jfree.data.gantt.XYTaskDataset.getX": "/**\n     * Returns the x-value for the specified series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The x-value (in milliseconds).\n     */\n",
"org.jfree.data.gantt.XYTaskDataset.getStartX": "/**\n     * Returns the starting date/time for the specified item (task) in the\n     * given series, measured in milliseconds since 1-Jan-1970 (as in\n     * java.util.Date).\n     *\n     * @param series  the series index.\n     * @param item  the item (or task) index.\n     *\n     * @return The start date/time.\n     */\n",
"org.jfree.data.gantt.XYTaskDataset.getEndX": "/**\n     * Returns the ending date/time for the specified item (task) in the\n     * given series, measured in milliseconds since 1-Jan-1970 (as in\n     * java.util.Date).\n     *\n     * @param series  the series index.\n     * @param item  the item (or task) index.\n     *\n     * @return The end date/time.\n     */\n",
"org.jfree.data.gantt.XYTaskDataset.getYValue": "/**\n     * Returns the y-value (as a double primitive) for an item within a series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.gantt.XYTaskDataset.getStartYValue": "/**\n     * Returns the starting value of the y-interval for an item in the\n     * given series.\n     *\n     * @param series  the series index.\n     * @param item  the item (or task) index.\n     *\n     * @return The y-interval start.\n     */\n",
"org.jfree.data.gantt.XYTaskDataset.getEndYValue": "/**\n     * Returns the ending value of the y-interval for an item in the\n     * given series.\n     *\n     * @param series  the series index.\n     * @param item  the item (or task) index.\n     *\n     * @return The y-interval end.\n     */\n",
"org.jfree.data.gantt.XYTaskDataset.getY": "/**\n     * Returns the y-value for the specified series/item.  In this\n     * implementation, we return the series index as the y-value (this means\n     * that every item in the series has a constant integer value).\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The y-value.\n     */\n",
"org.jfree.data.gantt.XYTaskDataset.getStartY": "/**\n     * Returns the starting value of the y-interval for an item in the\n     * given series.\n     *\n     * @param series  the series index.\n     * @param item  the item (or task) index.\n     *\n     * @return The y-interval start.\n     */\n",
"org.jfree.data.gantt.XYTaskDataset.getEndY": "/**\n     * Returns the ending value of the y-interval for an item in the\n     * given series.\n     *\n     * @param series  the series index.\n     * @param item  the item (or task) index.\n     *\n     * @return The y-interval end.\n     */\n",
"org.jfree.data.gantt.XYTaskDataset.datasetChanged": "/**\n     * Receives a change event from the underlying dataset and responds by\n     * firing a change event for this dataset.\n     *\n     * @param event  the event.\n     */\n",
"org.jfree.data.gantt.XYTaskDataset.equals": "/**\n     * Tests this dataset for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.gantt.XYTaskDataset.clone": "/**\n     * Returns a clone of this dataset.\n     *\n     * @return A clone of this dataset.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning.\n     */\n",
"org.jfree.data.gantt.Task.getDescription": "/**\n     * Returns the task description.\n     *\n     * @return The task description (never {@code null}).\n     */\n",
"org.jfree.data.gantt.Task.setDescription": "/**\n     * Sets the task description.\n     *\n     * @param description  the description ({@code null} not permitted).\n     */\n",
"org.jfree.data.gantt.Task.getDuration": "/**\n     * Returns the duration (actual or estimated) of the task.\n     *\n     * @return The task duration (possibly {@code null}).\n     */\n",
"org.jfree.data.gantt.Task.setDuration": "/**\n     * Sets the task duration (actual or estimated).\n     *\n     * @param duration  the duration ({@code null} permitted).\n     */\n",
"org.jfree.data.gantt.Task.getPercentComplete": "/**\n     * Returns the percentage complete for this task.\n     *\n     * @return The percentage complete (possibly {@code null}).\n     */\n",
"org.jfree.data.gantt.Task.setPercentComplete": "/**\n     * Sets the percentage complete for the task.\n     *\n     * @param percent  the percentage ({@code null} permitted).\n     */\n",
"org.jfree.data.gantt.Task.setPercentComplete": "/**\n     * Sets the percentage complete for the task.\n     *\n     * @param percent  the percentage.\n     */\n",
"org.jfree.data.gantt.Task.addSubtask": "/**\n     * Adds a sub-task to the task.\n     *\n     * @param subtask  the subtask ({@code null} not permitted).\n     */\n",
"org.jfree.data.gantt.Task.removeSubtask": "/**\n     * Removes a sub-task from the task.\n     *\n     * @param subtask  the subtask.\n     */\n",
"org.jfree.data.gantt.Task.getSubtaskCount": "/**\n     * Returns the sub-task count.\n     *\n     * @return The sub-task count.\n     */\n",
"org.jfree.data.gantt.Task.getSubtask": "/**\n     * Returns a sub-task.\n     *\n     * @param index  the index.\n     *\n     * @return The sub-task.\n     */\n",
"org.jfree.data.gantt.Task.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param object  the other object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.gantt.Task.clone": "/**\n     * Returns a clone of the task.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  never thrown by this class, but\n     *         subclasses may not support cloning.\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getSeries": "/**\n     * Returns a series from the collection.\n     *\n     * @param key  the series key ({@code null} not permitted).\n     *\n     * @return The series.\n     *\n     * @since 1.0.1\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getSeries": "/**\n     * Returns a series from the collection.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The series.\n     *\n     * @since 1.0.1\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getSeriesCount": "/**\n     * Returns the number of series in the collection.\n     *\n     * @return The series count.\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getSeriesKey": "/**\n     * Returns the name of a series.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The name of a series.\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getRowCount": "/**\n     * Returns the number of rows (series) in the collection.\n     *\n     * @return The series count.\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getRowKeys": "/**\n     * Returns the row keys.  In this case, each series is a key.\n     *\n     * @return The row keys.\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getColumnCount": "/**\n     * Returns the number of column in the dataset.\n     *\n     * @return The column count.\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getColumnKeys": "/**\n     * Returns a list of the column keys in the dataset.\n     *\n     * @return The category list.\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getColumnKey": "/**\n     * Returns a column key.\n     *\n     * @param index  the column index.\n     *\n     * @return The column key.\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getColumnIndex": "/**\n     * Returns the column index for a column key.\n     *\n     * @param columnKey  the column key ({@code null} not permitted).\n     *\n     * @return The column index.\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getRowIndex": "/**\n     * Returns the row index for the given row key.\n     *\n     * @param rowKey  the row key.\n     *\n     * @return The index.\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getRowKey": "/**\n     * Returns the key for a row.\n     *\n     * @param index  the row index (zero-based).\n     *\n     * @return The key.\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.add": "/**\n     * Adds a series to the dataset and sends a\n     * {@link org.jfree.data.general.DatasetChangeEvent} to all registered\n     * listeners.\n     *\n     * @param series  the series ({@code null} not permitted).\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.remove": "/**\n     * Removes a series from the collection and sends\n     * a {@link org.jfree.data.general.DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param series  the series.\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.remove": "/**\n     * Removes a series from the collection and sends\n     * a {@link org.jfree.data.general.DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param series  the series (zero based index).\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.removeAll": "/**\n     * Removes all the series from the collection and sends\n     * a {@link org.jfree.data.general.DatasetChangeEvent}\n     * to all registered listeners.\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getValue": "/**\n     * Returns the value for an item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     *\n     * @return The item value.\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getValue": "/**\n     * Returns the value for a task.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The start value.\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getStartValue": "/**\n     * Returns the start value for a task.  This is a date/time value, measured\n     * in milliseconds since 1-Jan-1970.\n     *\n     * @param rowKey  the series.\n     * @param columnKey  the category.\n     *\n     * @return The start value (possibly {@code null}).\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getStartValue": "/**\n     * Returns the start value for a task.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The start value.\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getEndValue": "/**\n     * Returns the end value for a task.  This is a date/time value, measured\n     * in milliseconds since 1-Jan-1970.\n     *\n     * @param rowKey  the series.\n     * @param columnKey  the category.\n     *\n     * @return The end value (possibly {@code null}).\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getEndValue": "/**\n     * Returns the end value for a task.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The end value.\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getPercentComplete": "/**\n     * Returns the percent complete for a given item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The percent complete (possibly {@code null}).\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getPercentComplete": "/**\n     * Returns the percent complete for a given item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     *\n     * @return The percent complete.\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getSubIntervalCount": "/**\n     * Returns the number of sub-intervals for a given item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The sub-interval count.\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getSubIntervalCount": "/**\n     * Returns the number of sub-intervals for a given item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     *\n     * @return The sub-interval count.\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getStartValue": "/**\n     * Returns the start value of a sub-interval for a given item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param subinterval  the sub-interval index (zero-based).\n     *\n     * @return The start value (possibly {@code null}).\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getStartValue": "/**\n     * Returns the start value of a sub-interval for a given item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     * @param subinterval  the subinterval.\n     *\n     * @return The start value (possibly {@code null}).\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getEndValue": "/**\n     * Returns the end value of a sub-interval for a given item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param subinterval  the subinterval.\n     *\n     * @return The end value (possibly {@code null}).\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getEndValue": "/**\n     * Returns the end value of a sub-interval for a given item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     * @param subinterval  the subinterval.\n     *\n     * @return The end value (possibly {@code null}).\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getPercentComplete": "/**\n     * Returns the percentage complete value of a sub-interval for a given item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param subinterval  the sub-interval.\n     *\n     * @return The percent complete value (possibly {@code null}).\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.getPercentComplete": "/**\n     * Returns the percentage complete value of a sub-interval for a given item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     * @param subinterval  the sub-interval.\n     *\n     * @return The percent complete value (possibly {@code null}).\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.seriesChanged": "/**\n     * Called when a series belonging to the dataset changes.\n     *\n     * @param event  information about the change.\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.refreshKeys": "/**\n     * Refreshes the keys.\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.gantt.TaskSeriesCollection.clone": "/**\n     * Returns an independent copy of this dataset.\n     *\n     * @return A clone of the dataset.\n     *\n     * @throws CloneNotSupportedException if there is some problem cloning\n     *     the dataset.\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.getUnderlyingDataset": "/**\n     * Returns the underlying dataset that was supplied to the constructor.\n     *\n     * @return The underlying dataset (never {@code null}).\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.getFirstCategoryIndex": "/**\n     * Returns the index of the first visible category.\n     *\n     * @return The index.\n     *\n     * @see #setFirstCategoryIndex(int)\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.setFirstCategoryIndex": "/**\n     * Sets the index of the first category that should be used from the\n     * underlying dataset, and sends a {@link DatasetChangeEvent} to all\n     * registered listeners.\n     *\n     * @param first  the index.\n     *\n     * @see #getFirstCategoryIndex()\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.getMaximumCategoryCount": "/**\n     * Returns the maximum category count.\n     *\n     * @return The maximum category count.\n     *\n     * @see #setMaximumCategoryCount(int)\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.setMaximumCategoryCount": "/**\n     * Sets the maximum category count and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param max  the maximum.\n     *\n     * @see #getMaximumCategoryCount()\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.lastCategoryIndex": "/**\n     * Returns the index of the last column for this dataset, or -1.\n     *\n     * @return The index.\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.getColumnIndex": "/**\n     * Returns the index for the specified column key.\n     *\n     * @param key  the key.\n     *\n     * @return The column index, or -1 if the key is not recognised.\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.getColumnKey": "/**\n     * Returns the column key for a given index.\n     *\n     * @param column  the column index (zero-based).\n     *\n     * @return The column key.\n     *\n     * @throws IndexOutOfBoundsException if {@code row} is out of bounds.\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.getColumnKeys": "/**\n     * Returns the column keys.\n     *\n     * @return The keys.\n     *\n     * @see #getColumnKey(int)\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.getRowIndex": "/**\n     * Returns the row index for a given key.\n     *\n     * @param key  the row key.\n     *\n     * @return The row index, or {@code -1} if the key is unrecognised.\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.getRowKey": "/**\n     * Returns the row key for a given index.\n     *\n     * @param row  the row index (zero-based).\n     *\n     * @return The row key.\n     *\n     * @throws IndexOutOfBoundsException if {@code row} is out of bounds.\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.getRowKeys": "/**\n     * Returns the row keys.\n     *\n     * @return The keys.\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.getValue": "/**\n     * Returns the value for a pair of keys.\n     *\n     * @param rowKey  the row key ({@code null} not permitted).\n     * @param columnKey  the column key ({@code null} not permitted).\n     *\n     * @return The value (possibly {@code null}).\n     *\n     * @throws UnknownKeyException if either key is not defined in the dataset.\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.getColumnCount": "/**\n     * Returns the number of columns in the table.\n     *\n     * @return The column count.\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.getRowCount": "/**\n     * Returns the number of rows in the table.\n     *\n     * @return The row count.\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.getValue": "/**\n     * Returns a value from the table.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The value (possibly {@code null}).\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.getPercentComplete": "/**\n     * Returns the percent complete for a given item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     *\n     * @return The percent complete.\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.getPercentComplete": "/**\n     * Returns the percentage complete value of a sub-interval for a given item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     * @param subinterval  the sub-interval.\n     *\n     * @return The percent complete value (possibly {@code null}).\n     *\n     * @see #getPercentComplete(int, int, int)\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.getEndValue": "/**\n     * Returns the end value of a sub-interval for a given item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     * @param subinterval  the sub-interval.\n     *\n     * @return The end value (possibly {@code null}).\n     *\n     * @see #getStartValue(Comparable, Comparable, int)\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.getEndValue": "/**\n     * Returns the end value of a sub-interval for a given item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param subinterval  the sub-interval.\n     *\n     * @return The end value (possibly {@code null}).\n     *\n     * @see #getStartValue(int, int, int)\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.getPercentComplete": "/**\n     * Returns the percent complete for a given item.\n     *\n     * @param series  the row index (zero-based).\n     * @param category  the column index (zero-based).\n     *\n     * @return The percent complete.\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.getPercentComplete": "/**\n     * Returns the percentage complete value of a sub-interval for a given item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param subinterval  the sub-interval.\n     *\n     * @return The percent complete value (possibly {@code null}).\n     *\n     * @see #getPercentComplete(Comparable, Comparable, int)\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.getStartValue": "/**\n     * Returns the start value of a sub-interval for a given item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     * @param subinterval  the sub-interval.\n     *\n     * @return The start value (possibly {@code null}).\n     *\n     * @see #getEndValue(Comparable, Comparable, int)\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.getStartValue": "/**\n     * Returns the start value of a sub-interval for a given item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param subinterval  the sub-interval index (zero-based).\n     *\n     * @return The start value (possibly {@code null}).\n     *\n     * @see #getEndValue(int, int, int)\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.getSubIntervalCount": "/**\n     * Returns the number of sub-intervals for a given item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     *\n     * @return The sub-interval count.\n     *\n     * @see #getSubIntervalCount(int, int)\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.getSubIntervalCount": "/**\n     * Returns the number of sub-intervals for a given item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     *\n     * @return The sub-interval count.\n     *\n     * @see #getSubIntervalCount(Comparable, Comparable)\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.getStartValue": "/**\n     * Returns the start value for the interval for a given series and category.\n     *\n     * @param rowKey  the series key.\n     * @param columnKey  the category key.\n     *\n     * @return The start value (possibly {@code null}).\n     *\n     * @see #getEndValue(Comparable, Comparable)\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.getStartValue": "/**\n     * Returns the start value for the interval for a given series and category.\n     *\n     * @param row  the series (zero-based index).\n     * @param column  the category (zero-based index).\n     *\n     * @return The start value (possibly {@code null}).\n     *\n     * @see #getEndValue(int, int)\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.getEndValue": "/**\n     * Returns the end value for the interval for a given series and category.\n     *\n     * @param rowKey  the series key.\n     * @param columnKey  the category key.\n     *\n     * @return The end value (possibly {@code null}).\n     *\n     * @see #getStartValue(Comparable, Comparable)\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.getEndValue": "/**\n     * Returns the end value for the interval for a given series and category.\n     *\n     * @param series  the series (zero-based index).\n     * @param category  the category (zero-based index).\n     *\n     * @return The end value (possibly {@code null}).\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.equals": "/**\n     * Tests this {@code SlidingGanttCategoryDataset} instance for equality \n     * with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.gantt.SlidingGanttCategoryDataset.clone": "/**\n     * Returns an independent copy of the dataset.  Note that:\n     * <ul>\n     * <li>the underlying dataset is only cloned if it implements the\n     * {@link PublicCloneable} interface;</li>\n     * <li>the listeners registered with this dataset are not carried over to\n     * the cloned dataset.</li>\n     * </ul>\n     *\n     * @return An independent copy of the dataset.\n     *\n     * @throws CloneNotSupportedException if the dataset cannot be cloned for\n     *         any reason.\n     */\n",
"org.jfree.data.Values.getItemCount": "/**\n     * Returns the number of items (values) in the collection.\n     *\n     * @return The item count (possibly zero).\n     */\n",
"org.jfree.data.Values.getValue": "/**\n     * Returns the value with the specified index.\n     *\n     * @param index  the item index (in the range {@code 0} to\n     *     {@code getItemCount() -1}).\n     *\n     * @return The value (possibly {@code null}).\n     *\n     * @throws IndexOutOfBoundsException if {@code index} is not in the\n     *     specified range.\n     */\n",
"org.jfree.data.Value.getValue": "/**\n     * Returns the value.\n     *\n     * @return The value (possibly {@code null}).\n     */\n",
"org.jfree.data.RangeInfo.getRangeLowerBound": "/**\n     * Returns the minimum y-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     *\n     * @return The minimum value.\n     */\n",
"org.jfree.data.RangeInfo.getRangeUpperBound": "/**\n     * Returns the maximum y-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     *\n     * @return The maximum value.\n     */\n",
"org.jfree.data.RangeInfo.getRangeBounds": "/**\n     * Returns the range of the values in this dataset's range.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     *\n     * @return The range (or {@code null} if the dataset contains no\n     *     values).\n     */\n",
"org.jfree.data.KeyedValueComparatorType.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.data.KeyedValueComparatorType.equals": "/**\n     * Returns {@code true} if this object is equal to the specified\n     * object, and {@code false} otherwise.\n     *\n     * @param o  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.KeyedValueComparatorType.hashCode": "/**\n     * Returns a hash code.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.Range.getLowerBound": "/**\n     * Returns the lower bound for the range.\n     *\n     * @return The lower bound.\n     */\n",
"org.jfree.data.Range.getUpperBound": "/**\n     * Returns the upper bound for the range.\n     *\n     * @return The upper bound.\n     */\n",
"org.jfree.data.Range.getLength": "/**\n     * Returns the length of the range.\n     *\n     * @return The length.\n     */\n",
"org.jfree.data.Range.getCentralValue": "/**\n     * Returns the central value for the range.\n     *\n     * @return The central value.\n     */\n",
"org.jfree.data.Range.contains": "/**\n     * Returns {@code true} if the range contains the specified value and\n     * {@code false} otherwise.\n     *\n     * @param value  the value to lookup.\n     *\n     * @return {@code true} if the range contains the specified value.\n     */\n",
"org.jfree.data.Range.intersects": "/**\n     * Returns {@code true} if the range intersects with the specified\n     * range, and {@code false} otherwise.\n     *\n     * @param b0  the lower bound (should be &lt;= b1).\n     * @param b1  the upper bound (should be &gt;= b0).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.Range.intersects": "/**\n     * Returns {@code true} if the range intersects with the specified\n     * range, and {@code false} otherwise.\n     *\n     * @param range  another range ({@code null} not permitted).\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.9\n     */\n",
"org.jfree.data.Range.constrain": "/**\n     * Returns the value within the range that is closest to the specified\n     * value.\n     *\n     * @param value  the value.\n     *\n     * @return The constrained value.\n     */\n",
"org.jfree.data.Range.combine": "/**\n     * Creates a new range by combining two existing ranges.\n     * <P>\n     * Note that:\n     * <ul>\n     *   <li>either range can be {@code null}, in which case the other\n     *       range is returned;</li>\n     *   <li>if both ranges are {@code null} the return value is\n     *       {@code null}.</li>\n     * </ul>\n     *\n     * @param range1  the first range ({@code null} permitted).\n     * @param range2  the second range ({@code null} permitted).\n     *\n     * @return A new range (possibly {@code null}).\n     */\n",
"org.jfree.data.Range.combineIgnoringNaN": "/**\n     * Returns a new range that spans both {@code range1} and \n     * {@code range2}.  This method has a special handling to ignore\n     * Double.NaN values.\n     *\n     * @param range1  the first range ({@code null} permitted).\n     * @param range2  the second range ({@code null} permitted).\n     *\n     * @return A new range (possibly {@code null}).\n     *\n     * @since 1.0.15\n     */\n",
"org.jfree.data.Range.min": "/**\n     * Returns the minimum value.  If either value is NaN, the other value is \n     * returned.  If both are NaN, NaN is returned.\n     * \n     * @param d1  value 1.\n     * @param d2  value 2.\n     * \n     * @return The minimum of the two values. \n     */\n",
"org.jfree.data.Range.expandToInclude": "/**\n     * Returns a range that includes all the values in the specified\n     * {@code range} AND the specified {@code value}.\n     *\n     * @param range  the range ({@code null} permitted).\n     * @param value  the value that must be included.\n     *\n     * @return A range.\n     *\n     * @since 1.0.1\n     */\n",
"org.jfree.data.Range.expand": "/**\n     * Creates a new range by adding margins to an existing range.\n     *\n     * @param range  the range ({@code null} not permitted).\n     * @param lowerMargin  the lower margin (expressed as a percentage of the\n     *                     range length).\n     * @param upperMargin  the upper margin (expressed as a percentage of the\n     *                     range length).\n     *\n     * @return The expanded range.\n     */\n",
"org.jfree.data.Range.shift": "/**\n     * Shifts the range by the specified amount.\n     *\n     * @param base  the base range ({@code null} not permitted).\n     * @param delta  the shift amount.\n     *\n     * @return A new range.\n     */\n",
"org.jfree.data.Range.shift": "/**\n     * Shifts the range by the specified amount.\n     *\n     * @param base  the base range ({@code null} not permitted).\n     * @param delta  the shift amount.\n     * @param allowZeroCrossing  a flag that determines whether or not the\n     *                           bounds of the range are allowed to cross\n     *                           zero after adjustment.\n     *\n     * @return A new range.\n     */\n",
"org.jfree.data.Range.shiftWithNoZeroCrossing": "/**\n     * Returns the given {@code value} adjusted by {@code delta} but\n     * with a check to prevent the result from crossing {@code 0.0}.\n     *\n     * @param value  the value.\n     * @param delta  the adjustment.\n     *\n     * @return The adjusted value.\n     */\n",
"org.jfree.data.Range.scale": "/**\n     * Scales the range by the specified factor.\n     *\n     * @param base the base range ({@code null} not permitted).\n     * @param factor the scaling factor (must be non-negative).\n     *\n     * @return A new range.\n     *\n     * @since 1.0.9\n     */\n",
"org.jfree.data.Range.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the object to test against ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.Range.isNaNRange": "/**\n     * Returns {@code true} if both the lower and upper bounds are \n     * {@code Double.NaN}, and {@code false} otherwise.\n     * \n     * @return A boolean.\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.data.Range.hashCode": "/**\n     * Returns a hash code.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.Range.toString": "/**\n     * Returns a string representation of this Range.\n     *\n     * @return A String \"Range[lower,upper]\" where lower=lower range and\n     *         upper=upper range.\n     */\n",
"org.jfree.data.KeyedValue.getKey": "/**\n     * Returns the key associated with the value.  The key returned by this\n     * method should be immutable.\n     *\n     * @return The key (never {@code null}).\n     */\n",
"org.jfree.data.json.impl.JSONArray.writeJSONString": "/**\n     * Encode a list into JSON text and write it to out. \n     * If this list is also a {@link JSONStreamAware} or a {@link JSONAware}, \n     * {@code JSONStreamAware} and {@code JSONAware} specific \n     * behaviours will be ignored at this top level.\n     * \n     * @see org.jfree.data.json.impl.JSONValue#writeJSONString(Object, Writer)\n     * \n     * @param list  the list ({@code null} permitted).\n     * @param out  the output writer ({@code null} not permitted).\n     * \n     * @throws IOException if there is an I/O problem.\n     */\n",
"org.jfree.data.json.impl.JSONArray.writeJSONString": "/**\n     * Writes this array to the specified output writer.\n     * \n     * @param out  the output writer ({@code null} not permitted).\n     * \n     * @throws IOException  if there is an I/O problem.\n     */\n",
"org.jfree.data.json.impl.JSONArray.toJSONString": "/**\n     * Convert a list to JSON text. The result is a JSON array. \n     * If this list is also a {@link JSONAware}, {@link JSONAware} specific \n     * behaviours will be omitted at this top level.\n     * \n     * @see org.jfree.data.json.impl.JSONValue#toJSONString(Object)\n     * \n     * @param list  the list ({@code null} permitted).\n     * \n     * @return JSON text, or \"null\" if list is null.\n     */\n",
"org.jfree.data.json.impl.JSONArray.toJSONString": "/**\n     * Returns a JSON string representation of this list.\n     * \n     * @return A string. \n     */\n",
"org.jfree.data.json.impl.JSONArray.toString": "/**\n     * Returns a string representation of this list.\n     * \n     * @return A string. \n     */\n",
"org.jfree.data.json.impl.JSONValue.writeJSONString": "/**\n     * Encode an object into JSON text and write it to out.\n     * <p>\n     * If this object is a {@code Map} or a {@code List}, and it's \n     * also a {@link JSONStreamAware} or a  {@link JSONAware}, \n     * {@code JSONStreamAware} or {@code JSONAware} will be \n     * considered firstly.\n     * <p>\n     * DO NOT call this method from writeJSONString(Writer) of a class that \n     * implements both JSONStreamAware and (Map or List) with \n     * \"this\" as the first parameter, use JSONObject.writeJSONString(Map, \n     * Writer) or JSONArray.writeJSONString(List, Writer) instead. \n     * \n     * @see org.jfree.data.json.impl.JSONObject#writeJSONString(Map, Writer)\n     * @see org.jfree.data.json.impl.JSONArray#writeJSONString(List, Writer)\n     * \n     * @param value  the value.\n     * @param out  the output writer.\n     * @throws IOException if there is an I/O problem.  \n     */\n",
"org.jfree.data.json.impl.JSONValue.toJSONString": "/**\n     * Convert an object to JSON text.\n     * <p>\n     * If this object is a Map or a List, and it's also a JSONAware, JSONAware \n     * will be considered firstly.\n     * <p>\n     * DO NOT call this method from toJSONString() of a class that implements \n     * both JSONAware and Map or List with \n     * \"this\" as the parameter, use JSONObject.toJSONString(Map) or \n     * JSONArray.toJSONString(List) instead. \n     * \n     * @see org.jfree.data.json.impl.JSONObject#toJSONString(Map)\n     * @see org.jfree.data.json.impl.JSONArray#toJSONString(List)\n     * \n     * @param value the value.\n     * @return JSON text, or \"null\" if value is null or it's an NaN or an INF \n     * number.\n     */\n",
"org.jfree.data.json.impl.JSONValue.escape": "/**\n     * Escape quotes, \\, /, \\r, \\n, \\b, \\f, \\t and other control characters \n     * (U+0000 through U+001F).\n     * \n     * @param s  the string to be escaped ({@code null} permitted).\n     * \n     * @return A string.\n     */\n",
"org.jfree.data.json.impl.JSONValue.escape": "/**\n     * @param s - Must not be null.\n     * @param sb\n     */\n",
"org.jfree.data.json.impl.JSONObject.writeJSONString": "/**\n     * Encode a map into JSON text and write it to out.\n     * If this map is also a {@link JSONAware} or {@link JSONStreamAware}, \n     * {@code JSONAware} or {@code JSONStreamAware} specific \n     * behaviours will be ignored at this top level.\n     * \n     * @see org.jfree.data.json.impl.JSONValue#writeJSONString(Object, Writer)\n     * \n     * @param map  the map to write ({@code null} permitted).\n     * @param out  the output writer ({@code null} not permitted).\n     * \n     * @throws IOException if there is an I/O problem.\n     */\n",
"org.jfree.data.json.impl.JSONObject.writeJSONString": "/**\n     * Writes a JSON string representing this object instance to the specified\n     * output writer.\n     * \n     * @param out  the output writer ({@code null} not permitted).\n     * \n     * @throws IOException if there is an I/O problem.\n     */\n",
"org.jfree.data.json.impl.JSONObject.toJSONString": "/**\n     * Convert a map to JSON text. The result is a JSON object. \n     * If this map is also a {@link JSONAware}, {@code JSONAware} specific \n     * behaviours will be omitted at this top level.\n     * \n     * @see org.jfree.data.json.impl.JSONValue#toJSONString(Object)\n     * \n     * @param map  the map ({@code null} permitted).\n     * \n     * @return JSON text, or \"null\" if map is null.\n     */\n",
"org.jfree.data.json.impl.JSONObject.toJSONString": "/**\n     * Returns a JSON string representing this object.\n     * \n     * @return A JSON string. \n     */\n",
"org.jfree.data.json.impl.JSONObject.toJSONString": "/**\n     * Writes a key and value to a JSON string.\n     * \n     * @param key  the key ({@code null} permitted).\n     * @param value  the value ({@code null} permitted).\n     * @param sb  a string buffer ({@code null} not permitted).\n     * \n     * @return A JSON string fragment representing the key and value. \n     */\n",
"org.jfree.data.json.impl.JSONObject.toString": "/**\n     * Returns a string representation of this object.\n     * \n     * @return A string. \n     */\n",
"org.jfree.data.json.impl.JSONObject.toString": "/**\n     * Returns a JSON string fragment containing the key and value.\n     * \n     * @param key  the key ({@code null} permitted).\n     * @param value  the value ({@code null} permitted).\n     * \n     * @return A JSON string fragment. \n     */\n",
"org.jfree.data.json.impl.JSONStreamAware.writeJSONString": "/**\n     * write JSON string to out.\n     * \n     * @param out  the output writer.\n     * \n     * @throws IOException if there is an I/O problem.  \n     */\n",
"org.jfree.data.json.impl.JSONAware.toJSONString": "/**\n     * Returns a JSON string representing the object.\n     * \n     * @return A JSON string.\n     */\n",
"org.jfree.data.json.JSONUtils.writeKeyedValues": "/**\n     * Returns a string containing the data in JSON format.  The format is\n     * an array of arrays, where each sub-array represents one data value.\n     * The sub-array should contain two items, first the item key as a string\n     * and second the item value as a number.  For example:\n     * {@code [[\"Key A\", 1.0], [\"Key B\", 2.0]]}\n     * <br><br>\n     * Note that this method can be used with instances of {@link PieDataset}.\n     * \n     * @param data  the data ({@code null} not permitted).\n     * \n     * @return A string in JSON format. \n     */\n",
"org.jfree.data.json.JSONUtils.writeKeyedValues": "/**\n     * Writes the data in JSON format to the supplied writer.\n     * <br><br>\n     * Note that this method can be used with instances of {@link PieDataset}.\n     * \n     * @param data  the data ({@code null} not permitted).\n     * @param writer  the writer ({@code null} not permitted).\n     * \n     * @throws IOException if there is an I/O problem.\n     */\n",
"org.jfree.data.json.JSONUtils.writeKeyedValues2D": "/**\n     * Returns a string containing the data in JSON format.  The format is...\n     * <br><br>\n     * Note that this method can be used with instances of \n     * {@link CategoryDataset}.\n     * \n     * @param data  the data ({@code null} not permitted).\n     * \n     * @return A string in JSON format. \n     */\n",
"org.jfree.data.json.JSONUtils.writeKeyedValues2D": "/**\n     * Writes the data in JSON format to the supplied writer.\n     * <br><br>\n     * Note that this method can be used with instances of \n     * {@link CategoryDataset}.\n     * \n     * @param data  the data ({@code null} not permitted).\n     * @param writer  the writer ({@code null} not permitted).\n     * \n     * @throws IOException if there is an I/O problem.\n     */\n",
"org.jfree.data.DefaultKeyedValue.getKey": "/**\n     * Returns the key.\n     *\n     * @return The key (never {@code null}).\n     */\n",
"org.jfree.data.DefaultKeyedValue.getValue": "/**\n     * Returns the value.\n     *\n     * @return The value (possibly {@code null}).\n     */\n",
"org.jfree.data.DefaultKeyedValue.setValue": "/**\n     * Sets the value.\n     *\n     * @param value  the value ({@code null} permitted).\n     */\n",
"org.jfree.data.DefaultKeyedValue.equals": "/**\n     * Tests this key-value pair for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.DefaultKeyedValue.hashCode": "/**\n     * Returns a hash code.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.DefaultKeyedValue.clone": "/**\n     * Returns a clone.  It is assumed that both the key and value are\n     * immutable objects, so only the references are cloned, not the objects\n     * themselves.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException Not thrown by this class, but\n     *         subclasses (if any) might.\n     */\n",
"org.jfree.data.DefaultKeyedValue.toString": "/**\n     * Returns a string representing this instance, primarily useful for\n     * debugging.\n     *\n     * @return A string.\n     */\n",
"org.jfree.data.jdbc.JDBCCategoryDataset.getTranspose": "/**\n     * Returns a flag that controls whether or not the table values are\n     * transposed when added to the dataset.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.jdbc.JDBCCategoryDataset.setTranspose": "/**\n     * Sets a flag that controls whether or not the table values are transposed\n     * when added to the dataset.\n     *\n     * @param transpose  the flag.\n     */\n",
"org.jfree.data.jdbc.JDBCCategoryDataset.executeQuery": "/**\n     * Populates the dataset by executing the supplied query against the\n     * existing database connection.  If no connection exists then no action\n     * is taken.\n     * <p>\n     * The results from the query are extracted and cached locally, thus\n     * applying an upper limit on how many rows can be retrieved successfully.\n     *\n     * @param query  the query.\n     *\n     * @throws SQLException if there is a problem executing the query.\n     */\n",
"org.jfree.data.jdbc.JDBCCategoryDataset.executeQuery": "/**\n     * Populates the dataset by executing the supplied query against the\n     * existing database connection.  If no connection exists then no action\n     * is taken.\n     * <p>\n     * The results from the query are extracted and cached locally, thus\n     * applying an upper limit on how many rows can be retrieved successfully.\n     *\n     * @param con  the connection.\n     * @param query  the query.\n     *\n     * @throws SQLException if there is a problem executing the query.\n     */\n",
"org.jfree.data.jdbc.JDBCPieDataset.executeQuery": "/**\n     *  ExecuteQuery will attempt execute the query passed to it against the\n     *  existing database connection.  If no connection exists then no action\n     *  is taken.\n     *  The results from the query are extracted and cached locally, thus\n     *  applying an upper limit on how many rows can be retrieved successfully.\n     *\n     * @param  query  the query to be executed.\n     *\n     * @throws SQLException if there is a problem executing the query.\n     */\n",
"org.jfree.data.jdbc.JDBCPieDataset.executeQuery": "/**\n     *  ExecuteQuery will attempt execute the query passed to it against the\n     *  existing database connection.  If no connection exists then no action\n     *  is taken.\n     *  The results from the query are extracted and cached locally, thus\n     *  applying an upper limit on how many rows can be retrieved successfully.\n     *\n     * @param  query  the query to be executed\n     * @param  con  the connection the query is to be executed against\n     *\n     * @throws SQLException if there is a problem executing the query.\n     */\n",
"org.jfree.data.jdbc.JDBCPieDataset.close": "/**\n     * Close the database connection\n     */\n",
"org.jfree.data.jdbc.JDBCXYDataset.isTimeSeries": "/**\n     * Returns {@code true} if the dataset represents time series data,\n     * and {@code false} otherwise.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.jdbc.JDBCXYDataset.setTimeSeries": "/**\n     * Sets a flag that indicates whether or not the data represents a time\n     * series.\n     *\n     * @param timeSeries  the new value of the flag.\n     */\n",
"org.jfree.data.jdbc.JDBCXYDataset.executeQuery": "/**\n     * ExecuteQuery will attempt execute the query passed to it against the\n     * existing database connection.  If no connection exists then no action\n     * is taken.\n     *\n     * The results from the query are extracted and cached locally, thus\n     * applying an upper limit on how many rows can be retrieved successfully.\n     *\n     * @param  query  the query to be executed.\n     *\n     * @throws SQLException if there is a problem executing the query.\n     */\n",
"org.jfree.data.jdbc.JDBCXYDataset.executeQuery": "/**\n     * ExecuteQuery will attempt execute the query passed to it against the\n     * provided database connection.  If connection is null then no action is\n     * taken.\n     *\n     * The results from the query are extracted and cached locally, thus\n     * applying an upper limit on how many rows can be retrieved successfully.\n     *\n     * @param  query  the query to be executed.\n     * @param  con  the connection the query is to be executed against.\n     *\n     * @throws SQLException if there is a problem executing the query.\n     */\n",
"org.jfree.data.jdbc.JDBCXYDataset.getX": "/**\n     * Returns the x-value for the specified series and item.  The\n     * implementation is responsible for ensuring that the x-values are\n     * presented in ascending order.\n     *\n     * @param  seriesIndex  the series (zero-based index).\n     * @param  itemIndex  the item (zero-based index).\n     *\n     * @return The x-value\n     *\n     * @see XYDataset\n     */\n",
"org.jfree.data.jdbc.JDBCXYDataset.getY": "/**\n     * Returns the y-value for the specified series and item.\n     *\n     * @param  seriesIndex  the series (zero-based index).\n     * @param  itemIndex  the item (zero-based index).\n     *\n     * @return The yValue value\n     *\n     * @see XYDataset\n     */\n",
"org.jfree.data.jdbc.JDBCXYDataset.getItemCount": "/**\n     * Returns the number of items in the specified series.\n     *\n     * @param  seriesIndex  the series (zero-based index).\n     *\n     * @return The itemCount value\n     *\n     * @see XYDataset\n     */\n",
"org.jfree.data.jdbc.JDBCXYDataset.getItemCount": "/**\n     * Returns the number of items in all series.  This method is defined by\n     * the {@link TableXYDataset} interface.\n     *\n     * @return The item count.\n     */\n",
"org.jfree.data.jdbc.JDBCXYDataset.getSeriesCount": "/**\n     * Returns the number of series in the dataset.\n     *\n     * @return The seriesCount value\n     *\n     * @see XYDataset\n     * @see Dataset\n     */\n",
"org.jfree.data.jdbc.JDBCXYDataset.getSeriesKey": "/**\n     * Returns the key for the specified series.\n     *\n     * @param seriesIndex  the series (zero-based index).\n     *\n     * @return The seriesName value\n     *\n     * @see XYDataset\n     * @see Dataset\n     */\n",
"org.jfree.data.jdbc.JDBCXYDataset.close": "/**\n     * Close the database connection\n     */\n",
"org.jfree.data.jdbc.JDBCXYDataset.getRangeLowerBound": "/**\n     * Returns the minimum y-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     *\n     * @return The minimum value.\n     */\n",
"org.jfree.data.jdbc.JDBCXYDataset.getRangeUpperBound": "/**\n     * Returns the maximum y-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     *\n     * @return The maximum value.\n     */\n",
"org.jfree.data.jdbc.JDBCXYDataset.getRangeBounds": "/**\n     * Returns the range of the values in this dataset's range.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     *\n     * @return The range.\n     */\n",
"org.jfree.data.DomainOrder.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.data.DomainOrder.equals": "/**\n     * Returns {@code true} if this object is equal to the specified\n     * object, and {@code false} otherwise.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.DomainOrder.hashCode": "/**\n     * Returns a hash code value for the object.\n     *\n     * @return The hashcode\n     */\n",
"org.jfree.data.DomainOrder.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     *\n     * @return The object.\n     *\n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.data.KeyedValues.getKey": "/**\n     * Returns the key associated with the item at a given position.  Note\n     * that some implementations allow re-ordering of the data items, so the\n     * result may be transient.\n     *\n     * @param index  the item index (in the range {@code 0} to\n     *     {@code getItemCount() - 1}).\n     *\n     * @return The key (never {@code null}).\n     *\n     * @throws IndexOutOfBoundsException if {@code index} is not in the\n     *     specified range.\n     */\n",
"org.jfree.data.KeyedValues.getIndex": "/**\n     * Returns the index for a given key.\n     *\n     * @param key  the key ({@code null} not permitted).\n     *\n     * @return The index, or {@code -1} if the key is unrecognised.\n     *\n     * @throws IllegalArgumentException if {@code key} is {@code null}.\n     */\n",
"org.jfree.data.KeyedValues.getKeys": "/**\n     * Returns the keys for the values in the collection.  Note that you can\n     * access the values in this collection by key or by index.  For this\n     * reason, the key order is important - this method should return the keys\n     * in order.  The returned list may be unmodifiable.\n     *\n     * @return The keys (never {@code null}).\n     */\n",
"org.jfree.data.KeyedValues.getValue": "/**\n     * Returns the value for a given key.\n     *\n     * @param key  the key.\n     *\n     * @return The value (possibly {@code null}).\n     *\n     * @throws UnknownKeyException if the key is not recognised.\n     */\n",
"org.jfree.data.io.CSV.readCategoryDataset": "/**\n     * Reads a {@link CategoryDataset} from a CSV file or input source.\n     *\n     * @param in  the input source.\n     *\n     * @return A category dataset.\n     *\n     * @throws IOException if there is an I/O problem.\n     */\n",
"org.jfree.data.io.CSV.extractColumnKeys": "/**\n     * Extracts the column keys from a string.\n     *\n     * @param line  a line from the input file.\n     *\n     * @return A list of column keys.\n     */\n",
"org.jfree.data.io.CSV.extractRowKeyAndData": "/**\n     * Extracts the row key and data for a single line from the input source.\n     *\n     * @param line  the line from the input source.\n     * @param dataset  the dataset to be populated.\n     * @param columnKeys  the column keys.\n     */\n",
"org.jfree.data.io.CSV.removeStringDelimiters": "/**\n     * Removes the string delimiters from a key (as well as any white space\n     * outside the delimiters).\n     *\n     * @param key  the key (including delimiters).\n     *\n     * @return The key without delimiters.\n     */\n",
"org.jfree.data.ComparableObjectItem.getComparable": "/**\n     * Returns the x-value.\n     *\n     * @return The x-value (never {@code null}).\n     */\n",
"org.jfree.data.ComparableObjectItem.getObject": "/**\n     * Returns the y-value.\n     *\n     * @return The y-value (possibly {@code null}).\n     */\n",
"org.jfree.data.ComparableObjectItem.setObject": "/**\n     * Sets the y-value for this data item.  Note that there is no\n     * corresponding method to change the x-value.\n     *\n     * @param y  the new y-value ({@code null} permitted).\n     */\n",
"org.jfree.data.ComparableObjectItem.compareTo": "/**\n     * Returns an integer indicating the order of this object relative to\n     * another object.\n     * <P>\n     * For the order we consider only the x-value:\n     * negative == \"less-than\", zero == \"equal\", positive == \"greater-than\".\n     *\n     * @param o1  the object being compared to.\n     *\n     * @return An integer indicating the order of this data pair object\n     *      relative to another object.\n     */\n",
"org.jfree.data.ComparableObjectItem.clone": "/**\n     * Returns a clone of this object.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException not thrown by this class, but\n     *         subclasses may differ.\n     */\n",
"org.jfree.data.ComparableObjectItem.equals": "/**\n     * Tests if this object is equal to another.\n     *\n     * @param obj  the object to test against for equality ({@code null}\n     *             permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.ComparableObjectItem.hashCode": "/**\n     * Returns a hash code.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.xml.DatasetReader.getSAXParserFactory": "/**\n     * Returns the {@link SAXParserFactory} used to create {@link SAXParser} instances.\n     * \n     * @return The {@link SAXParserFactory} (never {@code null}).\n     */\n",
"org.jfree.data.xml.DatasetReader.setSAXParserFactory": "/**\n     * Sets the SAXParserFactory that will be used to create SAXParser instances.  \n     * You would only call this method if you wish to configure a new factory because\n     * the default does not meet requirements.\n     * \n     * @param f  the new factory ({@code null} not permitted).\n     */\n",
"org.jfree.data.xml.DatasetReader.readPieDatasetFromXML": "/**\n     * Reads a {@link PieDataset} from an XML file.\n     *\n     * @param file  the file ({@code null} not permitted).\n     *\n     * @return A dataset.\n     *\n     * @throws IOException if there is a problem reading the file.\n     */\n",
"org.jfree.data.xml.DatasetReader.readPieDatasetFromXML": "/**\n     * Reads a {@link PieDataset} from a stream.\n     *\n     * @param in  the input stream.\n     *\n     * @return A dataset.\n     *\n     * @throws IOException if there is an I/O error.\n     */\n",
"org.jfree.data.xml.DatasetReader.readCategoryDatasetFromXML": "/**\n     * Reads a {@link CategoryDataset} from a file.\n     *\n     * @param file  the file.\n     *\n     * @return A dataset.\n     *\n     * @throws IOException if there is a problem reading the file.\n     */\n",
"org.jfree.data.xml.DatasetReader.readCategoryDatasetFromXML": "/**\n     * Reads a {@link CategoryDataset} from a stream.\n     *\n     * @param in  the stream.\n     *\n     * @return A dataset.\n     *\n     * @throws IOException if there is a problem reading the file.\n     */\n",
"org.jfree.data.xml.PieDatasetHandler.getDataset": "/**\n     * Returns the dataset.\n     *\n     * @return The dataset.\n     */\n",
"org.jfree.data.xml.PieDatasetHandler.addItem": "/**\n     * Adds an item to the dataset under construction.\n     *\n     * @param key  the key.\n     * @param value  the value.\n     */\n",
"org.jfree.data.xml.PieDatasetHandler.startElement": "/**\n     * Starts an element.\n     *\n     * @param namespaceURI  the namespace.\n     * @param localName  the element name.\n     * @param qName  the element name.\n     * @param atts  the element attributes.\n     *\n     * @throws SAXException for errors.\n     */\n",
"org.jfree.data.xml.PieDatasetHandler.endElement": "/**\n     * The end of an element.\n     *\n     * @param namespaceURI  the namespace.\n     * @param localName  the element name.\n     * @param qName  the element name.\n     *\n     * @throws SAXException for errors.\n     */\n",
"org.jfree.data.xml.ValueHandler.startElement": "/**\n     * The start of an element.\n     *\n     * @param namespaceURI  the namespace.\n     * @param localName  the element name.\n     * @param qName  the element name.\n     * @param atts  the attributes.\n     *\n     * @throws SAXException for errors.\n     */\n",
"org.jfree.data.xml.ValueHandler.endElement": "/**\n     * The end of an element.\n     *\n     * @param namespaceURI  the namespace.\n     * @param localName  the element name.\n     * @param qName  the element name.\n     *\n     * @throws SAXException for errors.\n     */\n",
"org.jfree.data.xml.ValueHandler.characters": "/**\n     * Receives some (or all) of the text in the current element.\n     *\n     * @param ch  character buffer.\n     * @param start  the start index.\n     * @param length  the length of the valid character data.\n     */\n",
"org.jfree.data.xml.ValueHandler.getCurrentText": "/**\n     * Returns the current text of the textbuffer.\n     *\n     * @return The current text.\n     */\n",
"org.jfree.data.xml.ValueHandler.clearCurrentText": "/**\n     * Removes all text from the textbuffer at the end of a CDATA section.\n     */\n",
"org.jfree.data.xml.KeyHandler.startElement": "/**\n     * The start of an element.\n     *\n     * @param namespaceURI  the namespace.\n     * @param localName  the element name.\n     * @param qName  the element name.\n     * @param atts  the attributes.\n     *\n     * @throws SAXException for errors.\n     */\n",
"org.jfree.data.xml.KeyHandler.endElement": "/**\n     * The end of an element.\n     *\n     * @param namespaceURI  the namespace.\n     * @param localName  the element name.\n     * @param qName  the element name.\n     *\n     * @throws SAXException for errors.\n     */\n",
"org.jfree.data.xml.KeyHandler.characters": "/**\n     * Receives some (or all) of the text in the current element.\n     *\n     * @param ch  character buffer.\n     * @param start  the start index.\n     * @param length  the length of the valid character data.\n     */\n",
"org.jfree.data.xml.KeyHandler.getCurrentText": "/**\n     * Returns the current text of the textbuffer.\n     *\n     * @return The current text.\n     */\n",
"org.jfree.data.xml.KeyHandler.clearCurrentText": "/**\n     * Removes all text from the textbuffer at the end of a CDATA section.\n     */\n",
"org.jfree.data.xml.CategorySeriesHandler.setSeriesKey": "/**\n     * Sets the series key.\n     *\n     * @param key  the key.\n     */\n",
"org.jfree.data.xml.CategorySeriesHandler.addItem": "/**\n     * Adds an item to the temporary storage for the series.\n     *\n     * @param key  the key.\n     * @param value  the value.\n     */\n",
"org.jfree.data.xml.CategorySeriesHandler.startElement": "/**\n     * The start of an element.\n     *\n     * @param namespaceURI  the namespace.\n     * @param localName  the element name.\n     * @param qName  the element name.\n     * @param atts  the attributes.\n     *\n     * @throws SAXException for errors.\n     */\n",
"org.jfree.data.xml.CategorySeriesHandler.endElement": "/**\n     * The end of an element.\n     *\n     * @param namespaceURI  the namespace.\n     * @param localName  the element name.\n     * @param qName  the element name.\n     */\n",
"org.jfree.data.xml.CategoryDatasetHandler.getDataset": "/**\n     * Returns the dataset.\n     *\n     * @return The dataset.\n     */\n",
"org.jfree.data.xml.CategoryDatasetHandler.addItem": "/**\n     * Adds an item to the dataset.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     * @param value  the value.\n     */\n",
"org.jfree.data.xml.CategoryDatasetHandler.startElement": "/**\n     * The start of an element.\n     *\n     * @param namespaceURI  the namespace.\n     * @param localName  the element name.\n     * @param qName  the element name.\n     * @param atts  the element attributes.\n     *\n     * @throws SAXException for errors.\n     */\n",
"org.jfree.data.xml.CategoryDatasetHandler.endElement": "/**\n     * The end of an element.\n     *\n     * @param namespaceURI  the namespace.\n     * @param localName  the element name.\n     * @param qName  the element name.\n     *\n     * @throws SAXException for errors.\n     */\n",
"org.jfree.data.xml.RootHandler.getSubHandlers": "/**\n     * Returns the stack of sub handlers.\n     *\n     * @return The sub-handler stack.\n     */\n",
"org.jfree.data.xml.RootHandler.characters": "/**\n     * Receives some (or all) of the text in the current element.\n     *\n     * @param ch  character buffer.\n     * @param start  the start index.\n     * @param length  the length of the valid character data.\n     *\n     * @throws SAXException for errors.\n     */\n",
"org.jfree.data.xml.RootHandler.getCurrentHandler": "/**\n     * Returns the handler at the top of the stack.\n     *\n     * @return The handler.\n     */\n",
"org.jfree.data.xml.RootHandler.pushSubHandler": "/**\n     * Pushes a sub-handler onto the stack.\n     *\n     * @param subhandler  the sub-handler.\n     */\n",
"org.jfree.data.xml.RootHandler.popSubHandler": "/**\n     * Pops a sub-handler from the stack.\n     *\n     * @return The sub-handler.\n     */\n",
"org.jfree.data.xml.ItemHandler.getKey": "/**\n     * Returns the key that has been read by the handler, or {@code null}.\n     *\n     * @return The key.\n     */\n",
"org.jfree.data.xml.ItemHandler.setKey": "/**\n     * Sets the key.\n     *\n     * @param key  the key.\n     */\n",
"org.jfree.data.xml.ItemHandler.getValue": "/**\n     * Returns the key that has been read by the handler, or {@code null}.\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.xml.ItemHandler.setValue": "/**\n     * Sets the value.\n     *\n     * @param value  the value.\n     */\n",
"org.jfree.data.xml.ItemHandler.startElement": "/**\n     * The start of an element.\n     *\n     * @param namespaceURI  the namespace.\n     * @param localName  the element name.\n     * @param qName  the element name.\n     * @param atts  the attributes.\n     *\n     * @throws SAXException for errors.\n     */\n",
"org.jfree.data.xml.ItemHandler.endElement": "/**\n     * The end of an element.\n     *\n     * @param namespaceURI  the namespace.\n     * @param localName  the element name.\n     * @param qName  the element name.\n     */\n",
"org.jfree.data.time.TimePeriodValues.getDomainDescription": "/**\n     * Returns the domain description.\n     *\n     * @return The domain description (possibly {@code null}).\n     * \n     * @see #getRangeDescription()\n     * @see #setDomainDescription(String)\n     */\n",
"org.jfree.data.time.TimePeriodValues.setDomainDescription": "/**\n     * Sets the domain description and fires a property change event (with the\n     * property name {@code Domain} if the description changes).\n     *\n     * @param description  the new description ({@code null} permitted).\n     * \n     * @see #getDomainDescription()\n     */\n",
"org.jfree.data.time.TimePeriodValues.getRangeDescription": "/**\n     * Returns the range description.\n     *\n     * @return The range description (possibly {@code null}).\n     * \n     * @see #getDomainDescription()\n     * @see #setRangeDescription(String)\n     */\n",
"org.jfree.data.time.TimePeriodValues.setRangeDescription": "/**\n     * Sets the range description and fires a property change event with the\n     * name {@code Range}.\n     *\n     * @param description  the new description ({@code null} permitted).\n     * \n     * @see #getRangeDescription()\n     */\n",
"org.jfree.data.time.TimePeriodValues.getItemCount": "/**\n     * Returns the number of items in the series.\n     *\n     * @return The item count.\n     */\n",
"org.jfree.data.time.TimePeriodValues.getDataItem": "/**\n     * Returns one data item for the series.\n     *\n     * @param index  the item index (in the range {@code 0} to \n     *     {@code getItemCount() -1}).\n     *\n     * @return One data item for the series.\n     */\n",
"org.jfree.data.time.TimePeriodValues.getTimePeriod": "/**\n     * Returns the time period at the specified index.\n     *\n     * @param index  the item index (in the range {@code 0} to \n     *     {@code getItemCount() -1}).\n     *\n     * @return The time period at the specified index.\n     * \n     * @see #getDataItem(int)\n     */\n",
"org.jfree.data.time.TimePeriodValues.getValue": "/**\n     * Returns the value at the specified index.\n     *\n     * @param index  the item index (in the range {@code 0} to \n     *     {@code getItemCount() -1}).\n     *\n     * @return The value at the specified index (possibly {@code null}).\n     * \n     * @see #getDataItem(int)\n     */\n",
"org.jfree.data.time.TimePeriodValues.add": "/**\n     * Adds a data item to the series and sends a {@link SeriesChangeEvent} to\n     * all registered listeners.\n     *\n     * @param item  the item ({@code null} not permitted).\n     */\n",
"org.jfree.data.time.TimePeriodValues.updateBounds": "/**\n     * Update the index values for the maximum and minimum bounds.\n     * \n     * @param period  the time period.\n     * @param index  the index of the time period.\n     */\n",
"org.jfree.data.time.TimePeriodValues.recalculateBounds": "/**\n     * Recalculates the bounds for the collection of items.\n     */\n",
"org.jfree.data.time.TimePeriodValues.add": "/**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period ({@code null} not permitted).\n     * @param value  the value.\n     * \n     * @see #add(TimePeriod, Number)\n     */\n",
"org.jfree.data.time.TimePeriodValues.add": "/**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period ({@code null} not permitted).\n     * @param value  the value ({@code null} permitted).\n     */\n",
"org.jfree.data.time.TimePeriodValues.update": "/**\n     * Updates (changes) the value of a data item and sends a \n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param index  the index of the data item to update.\n     * @param value  the new value ({@code null} not permitted).\n     */\n",
"org.jfree.data.time.TimePeriodValues.delete": "/**\n     * Deletes data from start until end index (end inclusive) and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param start  the index of the first period to delete.\n     * @param end  the index of the last period to delete.\n     */\n",
"org.jfree.data.time.TimePeriodValues.equals": "/**\n     * Tests the series for equality with another object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} or {@code false}.\n     */\n",
"org.jfree.data.time.TimePeriodValues.hashCode": "/**\n     * Returns a hash code value for the object.\n     *\n     * @return The hashcode\n     */\n",
"org.jfree.data.time.TimePeriodValues.clone": "/**\n     * Returns a clone of the collection.\n     * <P>\n     * Notes:\n     * <ul>\n     *   <li>no need to clone the domain and range descriptions, since String \n     *       object is immutable;</li>\n     *   <li>we pass over to the more general method createCopy(start, end).\n     *   </li>\n     * </ul>\n     *\n     * @return A clone of the time series.\n     * \n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n",
"org.jfree.data.time.TimePeriodValues.createCopy": "/**\n     * Creates a new instance by copying a subset of the data in this \n     * collection.\n     *\n     * @param start  the index of the first item to copy.\n     * @param end  the index of the last item to copy.\n     *\n     * @return A copy of a subset of the items.\n     * \n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n",
"org.jfree.data.time.TimePeriodValues.getMinStartIndex": "/**\n     * Returns the index of the time period with the minimum start milliseconds.\n     * \n     * @return The index.\n     */\n",
"org.jfree.data.time.TimePeriodValues.getMaxStartIndex": "/**\n     * Returns the index of the time period with the maximum start milliseconds.\n     * \n     * @return The index.\n     */\n",
"org.jfree.data.time.TimePeriodValues.getMinMiddleIndex": "/**\n     * Returns the index of the time period with the minimum middle \n     * milliseconds.\n     * \n     * @return The index.\n     */\n",
"org.jfree.data.time.TimePeriodValues.getMaxMiddleIndex": "/**\n     * Returns the index of the time period with the maximum middle \n     * milliseconds.\n     * \n     * @return The index.\n     */\n",
"org.jfree.data.time.TimePeriodValues.getMinEndIndex": "/**\n     * Returns the index of the time period with the minimum end milliseconds.\n     * \n     * @return The index.\n     */\n",
"org.jfree.data.time.TimePeriodValues.getMaxEndIndex": "/**\n     * Returns the index of the time period with the maximum end milliseconds.\n     * \n     * @return The index.\n     */\n",
"org.jfree.data.time.TimePeriodValue.getPeriod": "/**\n     * Returns the time period.\n     *\n     * @return The time period (never {@code null}).\n     */\n",
"org.jfree.data.time.TimePeriodValue.getValue": "/**\n     * Returns the value.\n     *\n     * @return The value (possibly {@code null}).\n     *\n     * @see #setValue(Number)\n     */\n",
"org.jfree.data.time.TimePeriodValue.setValue": "/**\n     * Sets the value for this data item.\n     *\n     * @param value  the new value ({@code null} permitted).\n     *\n     * @see #getValue()\n     */\n",
"org.jfree.data.time.TimePeriodValue.equals": "/**\n     * Tests this object for equality with the target object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.time.TimePeriodValue.hashCode": "/**\n     * Returns a hash code value for the object.\n     *\n     * @return The hashcode\n     */\n",
"org.jfree.data.time.TimePeriodValue.clone": "/**\n     * Clones the object.\n     * <P>\n     * Note: no need to clone the period or value since they are immutable\n     * classes.\n     *\n     * @return A clone.\n     */\n",
"org.jfree.data.time.TimePeriodValue.toString": "/**\n     * Returns a string representing this instance, primarily for use in\n     * debugging.\n     *\n     * @return A string.\n     */\n",
"org.jfree.data.time.Day.getSerialDate": "/**\n     * Returns the day as a {@link SerialDate}.  Note: the reference that is\n     * returned should be an instance of an immutable {@link SerialDate}\n     * (otherwise the caller could use the reference to alter the state of\n     * this {@code Day} instance, and {@code Day} is supposed\n     * to be immutable).\n     *\n     * @return The day as a {@link SerialDate}.\n     */\n",
"org.jfree.data.time.Day.getYear": "/**\n     * Returns the year.\n     *\n     * @return The year.\n     */\n",
"org.jfree.data.time.Day.getMonth": "/**\n     * Returns the month.\n     *\n     * @return The month.\n     */\n",
"org.jfree.data.time.Day.getDayOfMonth": "/**\n     * Returns the day of the month.\n     *\n     * @return The day of the month.\n     */\n",
"org.jfree.data.time.Day.getFirstMillisecond": "/**\n     * Returns the first millisecond of the day.  This will be determined\n     * relative to the time zone specified in the constructor, or in the\n     * calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The first millisecond of the day.\n     *\n     * @see #getLastMillisecond()\n     */\n",
"org.jfree.data.time.Day.getLastMillisecond": "/**\n     * Returns the last millisecond of the day.  This will be\n     * determined relative to the time zone specified in the constructor, or\n     * in the calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The last millisecond of the day.\n     *\n     * @see #getFirstMillisecond()\n     */\n",
"org.jfree.data.time.Day.peg": "/**\n     * Recalculates the start date/time and end date/time for this time period\n     * relative to the supplied calendar (which incorporates a time zone).\n     *\n     * @param calendar  the calendar ({@code null} not permitted).\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.data.time.Day.previous": "/**\n     * Returns the day preceding this one.\n     * No matter what time zone and locale this instance was created with,\n     * the returned instance will use the default calendar for time\n     * calculations, obtained with {@link RegularTimePeriod#getCalendarInstance()}.\n     *\n     * @return The day preceding this one.\n     */\n",
"org.jfree.data.time.Day.next": "/**\n     * Returns the day following this one, or {@code null} if some limit\n     * has been reached.\n     * No matter what time zone and locale this instance was created with,\n     * the returned instance will use the default calendar for time\n     * calculations, obtained with {@link RegularTimePeriod#getCalendarInstance()}.\n     *\n     * @return The day following this one, or {@code null} if some limit\n     *         has been reached.\n     */\n",
"org.jfree.data.time.Day.getSerialIndex": "/**\n     * Returns a serial index number for the day.\n     *\n     * @return The serial index number.\n     */\n",
"org.jfree.data.time.Day.getFirstMillisecond": "/**\n     * Returns the first millisecond of the day, evaluated using the supplied\n     * calendar (which determines the time zone).\n     *\n     * @param calendar  calendar to use ({@code null} not permitted).\n     *\n     * @return The start of the day as milliseconds since 01-01-1970.\n     *\n     * @throws NullPointerException if {@code calendar} is\n     *     {@code null}.\n     */\n",
"org.jfree.data.time.Day.getLastMillisecond": "/**\n     * Returns the last millisecond of the day, evaluated using the supplied\n     * calendar (which determines the time zone).\n     *\n     * @param calendar  calendar to use ({@code null} not permitted).\n     *\n     * @return The end of the day as milliseconds since 01-01-1970.\n     *\n     * @throws NullPointerException if {@code calendar} is\n     *     {@code null}.\n     */\n",
"org.jfree.data.time.Day.equals": "/**\n     * Tests the equality of this Day object to an arbitrary object.  Returns\n     * true if the target is a Day instance or a SerialDate instance\n     * representing the same day as this object. In all other cases,\n     * returns false.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A flag indicating whether or not an object is equal to this day.\n     */\n",
"org.jfree.data.time.Day.hashCode": "/**\n     * Returns a hash code for this object instance.  The approach described by\n     * Joshua Bloch in \"Effective Java\" has been used here:\n     * <p>\n     * {@code http://developer.java.sun.com/developer/Books/effectivejava\n     * /Chapter3.pdf}\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.time.Day.compareTo": "/**\n     * Returns an integer indicating the order of this Day object relative to\n     * the specified object:\n     *\n     * negative == before, zero == same, positive == after.\n     *\n     * @param o1  the object to compare.\n     *\n     * @return negative == before, zero == same, positive == after.\n     */\n",
"org.jfree.data.time.Day.toString": "/**\n     * Returns a string representing the day.\n     *\n     * @return A string representing the day.\n     */\n",
"org.jfree.data.time.Day.parseDay": "/**\n     * Parses the string argument as a day.\n     * <P>\n     * This method is required to recognise YYYY-MM-DD as a valid format.\n     * Anything else, for now, is a bonus.\n     *\n     * @param s  the date string to parse.\n     *\n     * @return {@code null} if the string does not contain any parseable\n     *      string, the day otherwise.\n     */\n",
"org.jfree.data.time.TimePeriodAnchor.toString": "/**\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     */\n",
"org.jfree.data.time.TimePeriodAnchor.equals": "/**\n     * Returns {@code true} if this object is equal to the specified\n     * object, and {@code false} otherwise.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.time.TimePeriodAnchor.hashCode": "/**\n     * Returns a hash code value for the object.\n     *\n     * @return The hashcode\n     */\n",
"org.jfree.data.time.TimePeriodAnchor.readResolve": "/**\n     * Ensures that serialization returns the unique instances.\n     *\n     * @return The object.\n     *\n     * @throws ObjectStreamException if there is a problem.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.enterData": "/**\n         * Enters data into the storage array.\n         *\n         * @param index  the index.\n         * @param value  the value.\n         */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.getData": "/**\n         * Returns a value from the storage array.\n         *\n         * @param index  the index.\n         *\n         * @return The value.\n         */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.setTimeBase": "/**\n     * Fill the pointsInTime with times using TimePeriod.next():\n     * Will silently return if the time array was already populated.\n     *\n     * Also computes the data cached for later use by\n     * methods implementing the DomainInfo interface:\n     *\n     * @param start  the start.\n     *\n     * @return ??.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.findDomainLimits": "/**\n     * Finds the domain limits.  Note: this doesn't need to be synchronized\n     * because it's called from within another method that already is.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.getPosition": "/**\n     * Returns the x position type (START, MIDDLE or END).\n     *\n     * @return The x position type.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.setPosition": "/**\n     * Sets the x position type (START, MIDDLE or END).\n     *\n     * @param position The x position type.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.addSeries": "/**\n     * Adds a series to the dataset.  Only the y-values are supplied, the\n     * x-values are specified elsewhere.\n     *\n     * @param values  the y-values.\n     * @param seriesNumber  the series index (zero-based).\n     * @param seriesKey  the series key.\n     *\n     * Use this as-is during setup only, or add the synchronized keyword around\n     * the copy loop.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.setSeriesKey": "/**\n     * Sets the name of a series.  If planning to add values individually.\n     *\n     * @param seriesNumber  the series.\n     * @param key  the new key.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.addValue": "/**\n     * Adds a value to a series.\n     *\n     * @param seriesNumber  the series index.\n     * @param index  ??.\n     * @param value  the value.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.getSeriesCount": "/**\n     * Returns the number of series in the collection.\n     *\n     * @return The series count.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.getItemCount": "/**\n     * Returns the number of items in a series.\n     * <p>\n     * For this implementation, all series have the same number of items.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The item count.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.translateGet": "/**\n     * Re-map an index, for use in retrieving data.\n     *\n     * @param toFetch  the index.\n     *\n     * @return The translated index.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.offsetFromNewest": "/**\n     * Returns the actual index to a time offset by \"delta\" from newestAt.\n     *\n     * @param delta  the delta.\n     *\n     * @return The offset.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.offsetFromOldest": "/**\n     * ??\n     *\n     * @param delta ??\n     *\n     * @return The offset.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.wrapOffset": "/**\n     * ??\n     *\n     * @param protoIndex  the index.\n     *\n     * @return The offset.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.advanceTime": "/**\n     * Adjust the array offset as needed when a new time-period is added:\n     * Increments the indices \"oldestAt\" and \"newestAt\", mod(array length),\n     * zeroes the series values at newestAt, returns the new TimePeriod.\n     *\n     * @return The new time period.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.invalidateRangeInfo": "/**\n     * Invalidates the range info.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.findMaxValue": "/**\n     * Returns the maximum value.\n     *\n     * @return The maximum value.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.getOldestIndex": "/**\n     * Returns the index of the oldest data item.\n     *\n     * @return The index.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.getNewestIndex": "/**\n     * Returns the index of the newest data item.\n     *\n     * @return The index.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.appendData": "/**\n     * Appends new data.\n     *\n     * @param newData  the data.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.appendData": "/**\n     * Appends data at specified index, for loading up with data from file(s).\n     *\n     * @param  newData  the data\n     * @param  insertionIndex  the index value at which to put it\n     * @param  refresh  value of n in \"refresh the display on every nth call\"\n     *                 (ignored if &lt;= 0 )\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.getNewestTime": "/**\n     * Returns the newest time.\n     *\n     * @return The newest time.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.getOldestTime": "/**\n     * Returns the oldest time.\n     *\n     * @return The oldest time.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.getYValue": "/**\n     * Returns the y-value.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.getY": "/**\n     * Returns the y-value.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.getStartX": "/**\n     * Returns the start x-value.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.getEndX": "/**\n     * Returns the end x-value.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.getStartY": "/**\n     * Returns the start y-value.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.getEndY": "/**\n     * Returns the end y-value.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.getSeriesKey": "/**\n     * Returns the key for a series.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The key.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.fireSeriesChanged": "/**\n     * Sends a {@link SeriesChangeEvent} to all registered listeners.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.getDomainLowerBound": "/**\n     * Returns the minimum x-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         x-interval is taken into account.\n     *\n     * @return The minimum value.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.getDomainUpperBound": "/**\n     * Returns the maximum x-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         x-interval is taken into account.\n     *\n     * @return The maximum value.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.getDomainBounds": "/**\n     * Returns the range of the values in this dataset's domain.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         x-interval is taken into account.\n     *\n     * @return The range.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.getX": "/**\n     * Returns the x-value for a time period.\n     *\n     * @param period  the period.\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.getRangeLowerBound": "/**\n     * Returns the minimum range value.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     *\n     * @return The minimum range value.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.getRangeUpperBound": "/**\n     * Returns the maximum range value.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     *\n     * @return The maximum range value.\n     */\n",
"org.jfree.data.time.DynamicTimeSeriesCollection.getRangeBounds": "/**\n     * Returns the value range.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         y-interval is taken into account.\n     *\n     * @return The range.\n     */\n",
"org.jfree.data.time.FixedMillisecond.getTime": "/**\n     * Returns the date/time (creates a new {@code Date} instance each time \n     * this method is called).\n     *\n     * @return The date/time.\n     */\n",
"org.jfree.data.time.FixedMillisecond.peg": "/**\n     * This method is overridden to do nothing.\n     *\n     * @param calendar  ignored\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.data.time.FixedMillisecond.previous": "/**\n     * Returns the millisecond preceding this one.\n     *\n     * @return The millisecond preceding this one.\n     */\n",
"org.jfree.data.time.FixedMillisecond.next": "/**\n     * Returns the millisecond following this one.\n     *\n     * @return The millisecond following this one.\n     */\n",
"org.jfree.data.time.FixedMillisecond.equals": "/**\n     * Tests the equality of this object against an arbitrary Object.\n     *\n     * @param object  the object to compare\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.time.FixedMillisecond.hashCode": "/**\n     * Returns a hash code for this object instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.time.FixedMillisecond.compareTo": "/**\n     * Returns an integer indicating the order of this Millisecond object\n     * relative to the specified\n     * object: negative == before, zero == same, positive == after.\n     *\n     * @param o1    the object to compare.\n     *\n     * @return negative == before, zero == same, positive == after.\n     */\n",
"org.jfree.data.time.FixedMillisecond.getFirstMillisecond": "/**\n     * Returns the first millisecond of the time period.\n     *\n     * @return The first millisecond of the time period.\n     */\n",
"org.jfree.data.time.FixedMillisecond.getFirstMillisecond": "/**\n     * Returns the first millisecond of the time period.\n     *\n     * @param calendar  the calendar.\n     *\n     * @return The first millisecond of the time period.\n     */\n",
"org.jfree.data.time.FixedMillisecond.getLastMillisecond": "/**\n     * Returns the last millisecond of the time period.\n     *\n     * @return The last millisecond of the time period.\n     */\n",
"org.jfree.data.time.FixedMillisecond.getLastMillisecond": "/**\n     * Returns the last millisecond of the time period.\n     *\n     * @param calendar  the calendar.\n     *\n     * @return The last millisecond of the time period.\n     */\n",
"org.jfree.data.time.FixedMillisecond.getMiddleMillisecond": "/**\n     * Returns the millisecond closest to the middle of the time period.\n     *\n     * @return The millisecond closest to the middle of the time period.\n     */\n",
"org.jfree.data.time.FixedMillisecond.getMiddleMillisecond": "/**\n     * Returns the millisecond closest to the middle of the time period.\n     *\n     * @param calendar  the calendar.\n     *\n     * @return The millisecond closest to the middle of the time period.\n     */\n",
"org.jfree.data.time.FixedMillisecond.getSerialIndex": "/**\n     * Returns a serial index number for the millisecond.\n     *\n     * @return The serial index number.\n     */\n",
"org.jfree.data.time.TimeSeries.getDomainDescription": "/**\n     * Returns the domain description.\n     *\n     * @return The domain description (possibly {@code null}).\n     *\n     * @see #setDomainDescription(String)\n     */\n",
"org.jfree.data.time.TimeSeries.setDomainDescription": "/**\n     * Sets the domain description and sends a {@code PropertyChangeEvent}\n     * (with the property name {@code Domain}) to all registered\n     * property change listeners.\n     *\n     * @param description  the description ({@code null} permitted).\n     *\n     * @see #getDomainDescription()\n     */\n",
"org.jfree.data.time.TimeSeries.getRangeDescription": "/**\n     * Returns the range description.\n     *\n     * @return The range description (possibly {@code null}).\n     *\n     * @see #setRangeDescription(String)\n     */\n",
"org.jfree.data.time.TimeSeries.setRangeDescription": "/**\n     * Sets the range description and sends a {@code PropertyChangeEvent}\n     * (with the property name {@code Range}) to all registered listeners.\n     *\n     * @param description  the description ({@code null} permitted).\n     *\n     * @see #getRangeDescription()\n     */\n",
"org.jfree.data.time.TimeSeries.getItemCount": "/**\n     * Returns the number of items in the series.\n     *\n     * @return The item count.\n     */\n",
"org.jfree.data.time.TimeSeries.getItems": "/**\n     * Returns the list of data items for the series (the list contains\n     * {@link TimeSeriesDataItem} objects and is unmodifiable).\n     *\n     * @return The list of data items.\n     */\n",
"org.jfree.data.time.TimeSeries.getMaximumItemCount": "/**\n     * Returns the maximum number of items that will be retained in the series.\n     * The default value is {@code Integer.MAX_VALUE}.\n     *\n     * @return The maximum item count.\n     *\n     * @see #setMaximumItemCount(int)\n     */\n",
"org.jfree.data.time.TimeSeries.setMaximumItemCount": "/**\n     * Sets the maximum number of items that will be retained in the series.\n     * If you add a new item to the series such that the number of items will\n     * exceed the maximum item count, then the FIRST element in the series is\n     * automatically removed, ensuring that the maximum item count is not\n     * exceeded.\n     *\n     * @param maximum  the maximum (requires &gt;= 0).\n     *\n     * @see #getMaximumItemCount()\n     */\n",
"org.jfree.data.time.TimeSeries.getMaximumItemAge": "/**\n     * Returns the maximum item age (in time periods) for the series.\n     *\n     * @return The maximum item age.\n     *\n     * @see #setMaximumItemAge(long)\n     */\n",
"org.jfree.data.time.TimeSeries.setMaximumItemAge": "/**\n     * Sets the number of time units in the 'history' for the series.  This\n     * provides one mechanism for automatically dropping old data from the\n     * time series. For example, if a series contains daily data, you might set\n     * the history count to 30.  Then, when you add a new data item, all data\n     * items more than 30 days older than the latest value are automatically\n     * dropped from the series.\n     *\n     * @param periods  the number of time periods.\n     *\n     * @see #getMaximumItemAge()\n     */\n",
"org.jfree.data.time.TimeSeries.findValueRange": "/**\n     * Returns the range of y-values in the time series.  Any {@code null} or \n     * {@code Double.NaN} data values in the series will be ignored (except for\n     * the special case where all data values are {@code null}, in which case \n     * the return value is {@code Range(Double.NaN, Double.NaN)}).  If the time \n     * series contains no items, this method will return {@code null}.\n     * \n     * @return The range of y-values in the time series (possibly {@code null}).\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.data.time.TimeSeries.findValueRange": "/**\n     * Returns the range of y-values in the time series that fall within \n     * the specified range of x-values.  This is equivalent to\n     * {@code findValueRange(xRange, TimePeriodAnchor.MIDDLE, timeZone)}.\n     * \n     * @param xRange  the subrange of x-values ({@code null} not permitted).\n     * @param timeZone  the time zone used to convert x-values to time periods\n     *     ({@code null} not permitted).\n     * \n     * @return The range. \n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.data.time.TimeSeries.findValueRange": "/**\n     * Finds the range of y-values that fall within the specified range of\n     * x-values (where the x-values are interpreted as milliseconds since the\n     * epoch and converted to time periods using the specified timezone).\n     * \n     * @param xRange  the subset of x-values to use ({@code null} not\n     *     permitted).\n     * @param xAnchor  the anchor point for the x-values ({@code null}\n     *     not permitted).\n     * @param zone  the time zone ({@code null} not permitted).\n     * \n     * @return The range of y-values.\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.data.time.TimeSeries.findValueRange": "/**\n     * Finds the range of y-values that fall within the specified range of\n     * x-values (where the x-values are interpreted as milliseconds since the\n     * epoch and converted to time periods using the specified calendar).\n     * \n     * @param xRange  the subset of x-values to use ({@code null} not\n     *     permitted).\n     * @param xAnchor  the anchor point for the x-values ({@code null}\n     *     not permitted).\n     * @param calendar  the calendar ({@code null} not permitted).\n     * \n     * @return The range of y-values.\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.data.time.TimeSeries.getMinY": "/**\n     * Returns the smallest y-value in the series, ignoring any \n     * {@code null} and {@code Double.NaN} values.  This method \n     * returns {@code Double.NaN} if there is no smallest y-value (for \n     * example, when the series is empty).\n     *\n     * @return The smallest y-value.\n     *\n     * @see #getMaxY()\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.data.time.TimeSeries.getMaxY": "/**\n     * Returns the largest y-value in the series, ignoring any \n     * {@code null} and {@code Double.NaN} values.  This method \n     * returns {@code Double.NaN} if there is no largest y-value\n     * (for example, when the series is empty).\n     *\n     * @return The largest y-value.\n     *\n     * @see #getMinY()\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.data.time.TimeSeries.getTimePeriodClass": "/**\n     * Returns the time period class for this series.\n     * <p>\n     * Only one time period class can be used within a single series (enforced).\n     * If you add a data item with a {@link Year} for the time period, then all\n     * subsequent data items must also have a {@link Year} for the time period.\n     *\n     * @return The time period class (may be {@code null} but only for\n     *     an empty series).\n     */\n",
"org.jfree.data.time.TimeSeries.getDataItem": "/**\n     * Returns a data item from the dataset.  Note that the returned object\n     * is a clone of the item in the series, so modifying it will have no \n     * effect on the data series.\n     * \n     * @param index  the item index.\n     * \n     * @return The data item.\n     */\n",
"org.jfree.data.time.TimeSeries.getDataItem": "/**\n     * Returns the data item for a specific period.  Note that the returned\n     * object is a clone of the item in the series, so modifying it will have\n     * no effect on the data series.\n     *\n     * @param period  the period of interest ({@code null} not allowed).\n     *\n     * @return The data item matching the specified period (or\n     *         {@code null} if there is no match).\n     *\n     * @see #getDataItem(int)\n     */\n",
"org.jfree.data.time.TimeSeries.getRawDataItem": "/**\n     * Returns a data item for the series.  This method returns the object\n     * that is used for the underlying storage - you should not modify the\n     * contents of the returned value unless you know what you are doing.\n     *\n     * @param index  the item index (zero-based).\n     *\n     * @return The data item.\n     *\n     * @see #getDataItem(int)\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.data.time.TimeSeries.getRawDataItem": "/**\n     * Returns a data item for the series.  This method returns the object\n     * that is used for the underlying storage - you should not modify the\n     * contents of the returned value unless you know what you are doing.\n     *\n     * @param period  the item index (zero-based).\n     *\n     * @return The data item.\n     *\n     * @see #getDataItem(RegularTimePeriod)\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.data.time.TimeSeries.getTimePeriod": "/**\n     * Returns the time period at the specified index.\n     *\n     * @param index  the index of the data item.\n     *\n     * @return The time period.\n     */\n",
"org.jfree.data.time.TimeSeries.getNextTimePeriod": "/**\n     * Returns a time period that would be the next in sequence on the end of\n     * the time series.\n     *\n     * @return The next time period.\n     */\n",
"org.jfree.data.time.TimeSeries.getTimePeriods": "/**\n     * Returns a collection of all the time periods in the time series.\n     *\n     * @return A collection of all the time periods.\n     */\n",
"org.jfree.data.time.TimeSeries.getTimePeriodsUniqueToOtherSeries": "/**\n     * Returns a collection of time periods in the specified series, but not in\n     * this series, and therefore unique to the specified series.\n     *\n     * @param series  the series to check against this one.\n     *\n     * @return The unique time periods.\n     */\n",
"org.jfree.data.time.TimeSeries.getIndex": "/**\n     * Returns the index for the item (if any) that corresponds to a time\n     * period.\n     *\n     * @param period  the time period ({@code null} not permitted).\n     *\n     * @return The index.\n     */\n",
"org.jfree.data.time.TimeSeries.getValue": "/**\n     * Returns the value at the specified index.\n     *\n     * @param index  index of a value.\n     *\n     * @return The value (possibly {@code null}).\n     */\n",
"org.jfree.data.time.TimeSeries.getValue": "/**\n     * Returns the value for a time period.  If there is no data item with the\n     * specified period, this method will return {@code null}.\n     *\n     * @param period  time period ({@code null} not permitted).\n     *\n     * @return The value (possibly {@code null}).\n     */\n",
"org.jfree.data.time.TimeSeries.add": "/**\n     * Adds a data item to the series and sends a {@link SeriesChangeEvent} to\n     * all registered listeners.\n     *\n     * @param item  the (timeperiod, value) pair ({@code null} not permitted).\n     */\n",
"org.jfree.data.time.TimeSeries.add": "/**\n     * Adds a data item to the series and sends a {@link SeriesChangeEvent} to\n     * all registered listeners.\n     *\n     * @param item  the (timeperiod, value) pair ({@code null} not permitted).\n     * @param notify  notify listeners?\n     */\n",
"org.jfree.data.time.TimeSeries.add": "/**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period ({@code null} not permitted).\n     * @param value  the value.\n     */\n",
"org.jfree.data.time.TimeSeries.add": "/**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period ({@code null} not permitted).\n     * @param value  the value.\n     * @param notify  notify listeners?\n     */\n",
"org.jfree.data.time.TimeSeries.add": "/**\n     * Adds a new data item to the series and sends\n     * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered\n     * listeners.\n     *\n     * @param period  the time period ({@code null} not permitted).\n     * @param value  the value ({@code null} permitted).\n     */\n",
"org.jfree.data.time.TimeSeries.add": "/**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period ({@code null} not permitted).\n     * @param value  the value ({@code null} permitted).\n     * @param notify  notify listeners?\n     */\n",
"org.jfree.data.time.TimeSeries.update": "/**\n     * Updates (changes) the value for a time period.  Throws a\n     * {@link SeriesException} if the period does not exist.\n     *\n     * @param period  the period ({@code null} not permitted).\n     * @param value  the value.\n     * \n     * @since 1.0.14\n     */\n",
"org.jfree.data.time.TimeSeries.update": "/**\n     * Updates (changes) the value for a time period.  Throws a\n     * {@link SeriesException} if the period does not exist.\n     *\n     * @param period  the period ({@code null} not permitted).\n     * @param value  the value ({@code null} permitted).\n     */\n",
"org.jfree.data.time.TimeSeries.update": "/**\n     * Updates (changes) the value of a data item.\n     *\n     * @param index  the index of the data item.\n     * @param value  the new value ({@code null} permitted).\n     */\n",
"org.jfree.data.time.TimeSeries.addAndOrUpdate": "/**\n     * Adds or updates data from one series to another.  Returns another series\n     * containing the values that were overwritten.\n     *\n     * @param series  the series to merge with this.\n     *\n     * @return A series containing the values that were overwritten.\n     */\n",
"org.jfree.data.time.TimeSeries.addOrUpdate": "/**\n     * Adds or updates an item in the times series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param period  the time period to add/update ({@code null} not\n     *                permitted).\n     * @param value  the new value.\n     *\n     * @return A copy of the overwritten data item, or {@code null} if no\n     *         item was overwritten.\n     */\n",
"org.jfree.data.time.TimeSeries.addOrUpdate": "/**\n     * Adds or updates an item in the times series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param period  the time period to add/update ({@code null} not\n     *                permitted).\n     * @param value  the new value ({@code null} permitted).\n     *\n     * @return A copy of the overwritten data item, or {@code null} if no\n     *         item was overwritten.\n     */\n",
"org.jfree.data.time.TimeSeries.addOrUpdate": "/**\n     * Adds or updates an item in the times series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param item  the data item ({@code null} not permitted).\n     *\n     * @return A copy of the overwritten data item, or {@code null} if no\n     *         item was overwritten.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.data.time.TimeSeries.removeAgedItems": "/**\n     * Age items in the series.  Ensure that the timespan from the youngest to\n     * the oldest record in the series does not exceed maximumItemAge time\n     * periods.  Oldest items will be removed if required.\n     *\n     * @param notify  controls whether or not a {@link SeriesChangeEvent} is\n     *                sent to registered listeners IF any items are removed.\n     */\n",
"org.jfree.data.time.TimeSeries.removeAgedItems": "/**\n     * Age items in the series.  Ensure that the timespan from the supplied\n     * time to the oldest record in the series does not exceed history count.\n     * oldest items will be removed if required.\n     *\n     * @param latest  the time to be compared against when aging data\n     *     (specified in milliseconds).\n     * @param notify  controls whether or not a {@link SeriesChangeEvent} is\n     *                sent to registered listeners IF any items are removed.\n     */\n",
"org.jfree.data.time.TimeSeries.clear": "/**\n     * Removes all data items from the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     */\n",
"org.jfree.data.time.TimeSeries.delete": "/**\n     * Deletes the data item for the given time period and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.  If there is no\n     * item with the specified time period, this method does nothing.\n     *\n     * @param period  the period of the item to delete ({@code null} not\n     *                permitted).\n     */\n",
"org.jfree.data.time.TimeSeries.delete": "/**\n     * Deletes data from start until end index (end inclusive).\n     *\n     * @param start  the index of the first period to delete.\n     * @param end  the index of the last period to delete.\n     */\n",
"org.jfree.data.time.TimeSeries.delete": "/**\n     * Deletes data from start until end index (end inclusive).\n     *\n     * @param start  the index of the first period to delete.\n     * @param end  the index of the last period to delete.\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.data.time.TimeSeries.clone": "/**\n     * Returns a clone of the time series.\n     * <P>\n     * Notes:\n     * <ul>\n     *   <li>no need to clone the domain and range descriptions, since String\n     *     object is immutable;</li>\n     *   <li>we pass over to the more general method clone(start, end).</li>\n     * </ul>\n     *\n     * @return A clone of the time series.\n     *\n     * @throws CloneNotSupportedException not thrown by this class, but\n     *         subclasses may differ.\n     */\n",
"org.jfree.data.time.TimeSeries.createCopy": "/**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the index of the first time period to copy.\n     * @param end  the index of the last time period to copy.\n     *\n     * @return A series containing a copy of this times series from start until\n     *         end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n",
"org.jfree.data.time.TimeSeries.createCopy": "/**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the first time period to copy ({@code null} not\n     *         permitted).\n     * @param end  the last time period to copy ({@code null} not permitted).\n     *\n     * @return A time series containing a copy of this time series from start\n     *         until end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n",
"org.jfree.data.time.TimeSeries.equals": "/**\n     * Tests the series for equality with an arbitrary object.\n     *\n     * @param obj  the object to test against ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.time.TimeSeries.hashCode": "/**\n     * Returns a hash code value for the object.\n     *\n     * @return The hashcode\n     */\n",
"org.jfree.data.time.TimeSeries.updateBoundsForAddedItem": "/**\n     * Updates the cached values for the minimum and maximum data values.\n     *\n     * @param item  the item added ({@code null} not permitted).\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.data.time.TimeSeries.updateBoundsForRemovedItem": "/**\n     * Updates the cached values for the minimum and maximum data values on\n     * the basis that the specified item has just been removed.\n     *\n     * @param item  the item added ({@code null} not permitted).\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.data.time.TimeSeries.updateMinMaxYByIteration": "/**\n     * Finds the bounds of the x and y values for the series, by iterating\n     * through all the data items.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.data.time.TimeSeries.minIgnoreNaN": "/**\n     * A function to find the minimum of two values, but ignoring any\n     * Double.NaN values.\n     *\n     * @param a  the first value.\n     * @param b  the second value.\n     *\n     * @return The minimum of the two values.\n     */\n",
"org.jfree.data.time.TimeSeries.maxIgnoreNaN": "/**\n     * A function to find the maximum of two values, but ignoring any\n     * Double.NaN values.\n     *\n     * @param a  the first value.\n     * @param b  the second value.\n     *\n     * @return The maximum of the two values.\n     */\n",
"org.jfree.data.time.Hour.getHour": "/**\n     * Returns the hour.\n     *\n     * @return The hour (0 &lt;= hour &lt;= 23).\n     */\n",
"org.jfree.data.time.Hour.getDay": "/**\n     * Returns the day in which this hour falls.\n     *\n     * @return The day.\n     */\n",
"org.jfree.data.time.Hour.getYear": "/**\n     * Returns the year in which this hour falls.\n     *\n     * @return The year.\n     */\n",
"org.jfree.data.time.Hour.getMonth": "/**\n     * Returns the month in which this hour falls.\n     *\n     * @return The month.\n     */\n",
"org.jfree.data.time.Hour.getDayOfMonth": "/**\n     * Returns the day-of-the-month in which this hour falls.\n     *\n     * @return The day-of-the-month.\n     */\n",
"org.jfree.data.time.Hour.getFirstMillisecond": "/**\n     * Returns the first millisecond of the hour.  This will be determined\n     * relative to the time zone specified in the constructor, or in the\n     * calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The first millisecond of the hour.\n     *\n     * @see #getLastMillisecond()\n     */\n",
"org.jfree.data.time.Hour.getLastMillisecond": "/**\n     * Returns the last millisecond of the hour.  This will be\n     * determined relative to the time zone specified in the constructor, or\n     * in the calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The last millisecond of the hour.\n     *\n     * @see #getFirstMillisecond()\n     */\n",
"org.jfree.data.time.Hour.peg": "/**\n     * Recalculates the start date/time and end date/time for this time period\n     * relative to the supplied calendar (which incorporates a time zone).\n     *\n     * @param calendar  the calendar ({@code null} not permitted).\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.data.time.Hour.previous": "/**\n     * Returns the hour preceding this one.\n     * No matter what time zone and locale this instance was created with,\n     * the returned instance will use the default calendar for time\n     * calculations, obtained with {@link RegularTimePeriod#getCalendarInstance()}.\n     *\n     * @return The hour preceding this one.\n     */\n",
"org.jfree.data.time.Hour.next": "/**\n     * Returns the hour following this one.\n     * No matter what time zone and locale this instance was created with,\n     * the returned instance will use the default calendar for time\n     * calculations, obtained with {@link RegularTimePeriod#getCalendarInstance()}.\n     *\n     * @return The hour following this one.\n     */\n",
"org.jfree.data.time.Hour.getSerialIndex": "/**\n     * Returns a serial index number for the hour.\n     *\n     * @return The serial index number.\n     */\n",
"org.jfree.data.time.Hour.getFirstMillisecond": "/**\n     * Returns the first millisecond of the hour.\n     *\n     * @param calendar  the calendar/timezone ({@code null} not permitted).\n     *\n     * @return The first millisecond.\n     *\n     * @throws NullPointerException if {@code calendar} is\n     *     {@code null}.\n     */\n",
"org.jfree.data.time.Hour.getLastMillisecond": "/**\n     * Returns the last millisecond of the hour.\n     *\n     * @param calendar  the calendar/timezone ({@code null} not permitted).\n     *\n     * @return The last millisecond.\n     *\n     * @throws NullPointerException if {@code calendar} is\n     *     {@code null}.\n     */\n",
"org.jfree.data.time.Hour.equals": "/**\n     * Tests the equality of this object against an arbitrary Object.\n     * <P>\n     * This method will return true ONLY if the object is an Hour object\n     * representing the same hour as this instance.\n     *\n     * @param obj  the object to compare ({@code null} permitted).\n     *\n     * @return {@code true} if the hour and day value of the object\n     *      is the same as this.\n     */\n",
"org.jfree.data.time.Hour.toString": "/**\n     * Returns a string representation of this instance, for debugging\n     * purposes.\n     *\n     * @return A string.\n     */\n",
"org.jfree.data.time.Hour.hashCode": "/**\n     * Returns a hash code for this object instance.  The approach described by\n     * Joshua Bloch in \"Effective Java\" has been used here:\n     * <p>\n     * {@code http://developer.java.sun.com/developer/Books/effectivejava\n     * /Chapter3.pdf}\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.time.Hour.compareTo": "/**\n     * Returns an integer indicating the order of this Hour object relative to\n     * the specified object:\n     *\n     * negative == before, zero == same, positive == after.\n     *\n     * @param o1  the object to compare.\n     *\n     * @return negative == before, zero == same, positive == after.\n     */\n",
"org.jfree.data.time.Hour.parseHour": "/**\n     * Creates an Hour instance by parsing a string.  The string is assumed to\n     * be in the format \"YYYY-MM-DD HH\", perhaps with leading or trailing\n     * whitespace.\n     *\n     * @param s  the hour string to parse.\n     *\n     * @return {@code null} if the string is not parseable, the hour\n     *         otherwise.\n     */\n",
"org.jfree.data.time.TimePeriodValuesCollection.getXPosition": "/**\n     * Returns the position of the X value within each time period.\n     *\n     * @return The position (never {@code null}).\n     *\n     * @see #setXPosition(TimePeriodAnchor)\n     */\n",
"org.jfree.data.time.TimePeriodValuesCollection.setXPosition": "/**\n     * Sets the position of the x axis within each time period.\n     *\n     * @param position  the position ({@code null} not permitted).\n     *\n     * @see #getXPosition()\n     */\n",
"org.jfree.data.time.TimePeriodValuesCollection.getSeriesCount": "/**\n     * Returns the number of series in the collection.\n     *\n     * @return The series count.\n     */\n",
"org.jfree.data.time.TimePeriodValuesCollection.getSeries": "/**\n     * Returns a series.\n     *\n     * @param series  the index of the series (zero-based).\n     *\n     * @return The series.\n     */\n",
"org.jfree.data.time.TimePeriodValuesCollection.getSeriesKey": "/**\n     * Returns the key for a series.\n     *\n     * @param series  the index of the series (zero-based).\n     *\n     * @return The key for a series.\n     */\n",
"org.jfree.data.time.TimePeriodValuesCollection.addSeries": "/**\n     * Adds a series to the collection.  A\n     * {@link org.jfree.data.general.DatasetChangeEvent} is sent to all\n     * registered listeners.\n     *\n     * @param series  the time series.\n     */\n",
"org.jfree.data.time.TimePeriodValuesCollection.removeSeries": "/**\n     * Removes the specified series from the collection.\n     *\n     * @param series  the series to remove ({@code null} not permitted).\n     */\n",
"org.jfree.data.time.TimePeriodValuesCollection.removeSeries": "/**\n     * Removes a series from the collection.\n     *\n     * @param index  the series index (zero-based).\n     */\n",
"org.jfree.data.time.TimePeriodValuesCollection.getItemCount": "/**\n     * Returns the number of items in the specified series.\n     * <P>\n     * This method is provided for convenience.\n     *\n     * @param series  the index of the series of interest (zero-based).\n     *\n     * @return The number of items in the specified series.\n     */\n",
"org.jfree.data.time.TimePeriodValuesCollection.getX": "/**\n     * Returns the x-value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The x-value for the specified series and item.\n     */\n",
"org.jfree.data.time.TimePeriodValuesCollection.getX": "/**\n     * Returns the x-value for a time period.\n     *\n     * @param period  the time period.\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.time.TimePeriodValuesCollection.getStartX": "/**\n     * Returns the starting X value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The starting X value for the specified series and item.\n     */\n",
"org.jfree.data.time.TimePeriodValuesCollection.getEndX": "/**\n     * Returns the ending X value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The ending X value for the specified series and item.\n     */\n",
"org.jfree.data.time.TimePeriodValuesCollection.getY": "/**\n     * Returns the y-value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The y-value for the specified series and item.\n     */\n",
"org.jfree.data.time.TimePeriodValuesCollection.getStartY": "/**\n     * Returns the starting Y value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The starting Y value for the specified series and item.\n     */\n",
"org.jfree.data.time.TimePeriodValuesCollection.getEndY": "/**\n     * Returns the ending Y value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The ending Y value for the specified series and item.\n     */\n",
"org.jfree.data.time.TimePeriodValuesCollection.getDomainLowerBound": "/**\n     * Returns the minimum x-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         x-interval is taken into account.\n     *\n     * @return The minimum value.\n     */\n",
"org.jfree.data.time.TimePeriodValuesCollection.getDomainUpperBound": "/**\n     * Returns the maximum x-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         x-interval is taken into account.\n     *\n     * @return The maximum value.\n     */\n",
"org.jfree.data.time.TimePeriodValuesCollection.getDomainBounds": "/**\n     * Returns the range of the values in this dataset's domain.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         x-interval is taken into account.\n     *\n     * @return The range.\n     */\n",
"org.jfree.data.time.TimePeriodValuesCollection.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.time.DateRange.getLowerDate": "/**\n     * Returns the lower (earlier) date for the range.\n     *\n     * @return The lower date for the range.\n     *\n     * @see #getLowerMillis()\n     */\n",
"org.jfree.data.time.DateRange.getLowerMillis": "/**\n     * Returns the lower bound of the range in milliseconds.\n     *\n     * @return The lower bound.\n     *\n     * @see #getLowerDate()\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.data.time.DateRange.getUpperDate": "/**\n     * Returns the upper (later) date for the range.\n     *\n     * @return The upper date for the range.\n     *\n     * @see #getUpperMillis()\n     */\n",
"org.jfree.data.time.DateRange.getUpperMillis": "/**\n     * Returns the upper bound of the range in milliseconds.\n     *\n     * @return The upper bound.\n     *\n     * @see #getUpperDate()\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.data.time.DateRange.toString": "/**\n     * Returns a string representing the date range (useful for debugging).\n     *\n     * @return A string representing the date range.\n     */\n",
"org.jfree.data.time.Week.getYear": "/**\n     * Returns the year in which the week falls.\n     *\n     * @return The year (never {@code null}).\n     */\n",
"org.jfree.data.time.Week.getYearValue": "/**\n     * Returns the year in which the week falls, as an integer value.\n     *\n     * @return The year.\n     */\n",
"org.jfree.data.time.Week.getWeek": "/**\n     * Returns the week.\n     *\n     * @return The week.\n     */\n",
"org.jfree.data.time.Week.getFirstMillisecond": "/**\n     * Returns the first millisecond of the week.  This will be determined\n     * relative to the time zone specified in the constructor, or in the\n     * calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The first millisecond of the week.\n     *\n     * @see #getLastMillisecond()\n     */\n",
"org.jfree.data.time.Week.getLastMillisecond": "/**\n     * Returns the last millisecond of the week.  This will be\n     * determined relative to the time zone specified in the constructor, or\n     * in the calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The last millisecond of the week.\n     *\n     * @see #getFirstMillisecond()\n     */\n",
"org.jfree.data.time.Week.peg": "/**\n     * Recalculates the start date/time and end date/time for this time period\n     * relative to the supplied calendar (which incorporates a time zone\n     * and information about what day is the first day of the week).\n     *\n     * @param calendar  the calendar ({@code null} not permitted).\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.data.time.Week.previous": "/**\n     * Returns the week preceding this one.  This method will return\n     * {@code null} for some lower limit on the range of weeks (currently\n     * week 1, 1900).  For week 1 of any year, the previous week is always week\n     * 53, but week 53 may not contain any days (you should check for this).\n     * No matter what time zone and locale this instance was created with,\n     * the returned instance will use the default calendar for time\n     * calculations, obtained with {@link RegularTimePeriod#getCalendarInstance()}.\n     *\n     * @return The preceding week (possibly {@code null}).\n     */\n",
"org.jfree.data.time.Week.next": "/**\n     * Returns the week following this one.  This method will return\n     * {@code null} for some upper limit on the range of weeks (currently\n     * week 53, 9999).  For week 52 of any year, the following week is always\n     * week 53, but week 53 may not contain any days (you should check for\n     * this).\n     * No matter what time zone and locale this instance was created with,\n     * the returned instance will use the default calendar for time\n     * calculations, obtained with {@link RegularTimePeriod#getCalendarInstance()}.\n     *\n     * @return The following week (possibly {@code null}).\n     */\n",
"org.jfree.data.time.Week.getSerialIndex": "/**\n     * Returns a serial index number for the week.\n     *\n     * @return The serial index number.\n     */\n",
"org.jfree.data.time.Week.getFirstMillisecond": "/**\n     * Returns the first millisecond of the week, evaluated using the supplied\n     * calendar (which determines the time zone).\n     *\n     * @param calendar  the calendar ({@code null} not permitted).\n     *\n     * @return The first millisecond of the week.\n     *\n     * @throws NullPointerException if {@code calendar} is\n     *     {@code null}.\n     */\n",
"org.jfree.data.time.Week.getLastMillisecond": "/**\n     * Returns the last millisecond of the week, evaluated using the supplied\n     * calendar (which determines the time zone).\n     *\n     * @param calendar  the calendar ({@code null} not permitted).\n     *\n     * @return The last millisecond of the week.\n     *\n     * @throws NullPointerException if {@code calendar} is\n     *     {@code null}.\n     */\n",
"org.jfree.data.time.Week.toString": "/**\n     * Returns a string representing the week (e.g. \"Week 9, 2002\").\n     *\n     * TODO: look at internationalisation.\n     *\n     * @return A string representing the week.\n     */\n",
"org.jfree.data.time.Week.equals": "/**\n     * Tests the equality of this Week object to an arbitrary object.  Returns\n     * true if the target is a Week instance representing the same week as this\n     * object.  In all other cases, returns false.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} if week and year of this and object are the\n     *         same.\n     */\n",
"org.jfree.data.time.Week.hashCode": "/**\n     * Returns a hash code for this object instance.  The approach described by\n     * Joshua Bloch in \"Effective Java\" has been used here:\n     * <p>\n     * {@code http://developer.java.sun.com/developer/Books/effectivejava\n     * /Chapter3.pdf}\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.time.Week.compareTo": "/**\n     * Returns an integer indicating the order of this Week object relative to\n     * the specified object:\n     *\n     * negative == before, zero == same, positive == after.\n     *\n     * @param o1  the object to compare.\n     *\n     * @return negative == before, zero == same, positive == after.\n     */\n",
"org.jfree.data.time.Week.parseWeek": "/**\n     * Parses the string argument as a week.\n     * <P>\n     * This method is required to accept the format \"YYYY-Wnn\".  It will also\n     * accept \"Wnn-YYYY\". Anything else, at the moment, is a bonus.\n     *\n     * @param s  string to parse.\n     *\n     * @return {@code null} if the string is not parseable, the week\n     *         otherwise.\n     */\n",
"org.jfree.data.time.Week.findSeparator": "/**\n     * Finds the first occurrence of ' ', '-', ',' or '.'\n     *\n     * @param s  the string to parse.\n     *\n     * @return {@code -1} if none of the characters was found, the\n     *      index of the first occurrence otherwise.\n     */\n",
"org.jfree.data.time.Week.evaluateAsYear": "/**\n     * Creates a year from a string, or returns null (format exceptions\n     * suppressed).\n     *\n     * @param s  string to parse.\n     *\n     * @return {@code null} if the string is not parseable, the year\n     *         otherwise.\n     */\n",
"org.jfree.data.time.Week.stringToWeek": "/**\n     * Converts a string to a week.\n     *\n     * @param s  the string to parse.\n     * @return {@code -1} if the string does not contain a week number,\n     *         the number of the week otherwise.\n     */\n",
"org.jfree.data.time.Minute.getDay": "/**\n     * Returns the day.\n     *\n     * @return The day.\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.data.time.Minute.getHour": "/**\n     * Returns the hour.\n     *\n     * @return The hour (never {@code null}).\n     */\n",
"org.jfree.data.time.Minute.getHourValue": "/**\n     * Returns the hour.\n     *\n     * @return The hour.\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.data.time.Minute.getMinute": "/**\n     * Returns the minute.\n     *\n     * @return The minute.\n     */\n",
"org.jfree.data.time.Minute.getFirstMillisecond": "/**\n     * Returns the first millisecond of the minute.  This will be determined\n     * relative to the time zone specified in the constructor, or in the\n     * calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The first millisecond of the minute.\n     *\n     * @see #getLastMillisecond()\n     */\n",
"org.jfree.data.time.Minute.getLastMillisecond": "/**\n     * Returns the last millisecond of the minute.  This will be\n     * determined relative to the time zone specified in the constructor, or\n     * in the calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The last millisecond of the minute.\n     *\n     * @see #getFirstMillisecond()\n     */\n",
"org.jfree.data.time.Minute.peg": "/**\n     * Recalculates the start date/time and end date/time for this time period\n     * relative to the supplied calendar (which incorporates a time zone).\n     *\n     * @param calendar  the calendar ({@code null} not permitted).\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.data.time.Minute.previous": "/**\n     * Returns the minute preceding this one.\n     * No matter what time zone and locale this instance was created with,\n     * the returned instance will use the default calendar for time\n     * calculations, obtained with {@link RegularTimePeriod#getCalendarInstance()}.\n     *\n     * @return The minute preceding this one.\n     */\n",
"org.jfree.data.time.Minute.next": "/**\n     * Returns the minute following this one.\n     * No matter what time zone and locale this instance was created with,\n     * the returned instance will use the default calendar for time\n     * calculations, obtained with {@link RegularTimePeriod#getCalendarInstance()}.\n     *\n     * @return The minute following this one.\n     */\n",
"org.jfree.data.time.Minute.getSerialIndex": "/**\n     * Returns a serial index number for the minute.\n     *\n     * @return The serial index number.\n     */\n",
"org.jfree.data.time.Minute.getFirstMillisecond": "/**\n     * Returns the first millisecond of the minute.\n     *\n     * @param calendar  the calendar which defines the timezone\n     *     ({@code null} not permitted).\n     *\n     * @return The first millisecond.\n     *\n     * @throws NullPointerException if {@code calendar} is\n     *     {@code null}.\n     */\n",
"org.jfree.data.time.Minute.getLastMillisecond": "/**\n     * Returns the last millisecond of the minute.\n     *\n     * @param calendar  the calendar / timezone ({@code null} not\n     *     permitted).\n     *\n     * @return The last millisecond.\n     *\n     * @throws NullPointerException if {@code calendar} is\n     *     {@code null}.\n     */\n",
"org.jfree.data.time.Minute.equals": "/**\n     * Tests the equality of this object against an arbitrary Object.\n     * <P>\n     * This method will return true ONLY if the object is a Minute object\n     * representing the same minute as this instance.\n     *\n     * @param obj  the object to compare ({@code null} permitted).\n     *\n     * @return {@code true} if the minute and hour value of this and the\n     *      object are the same.\n     */\n",
"org.jfree.data.time.Minute.hashCode": "/**\n     * Returns a hash code for this object instance.  The approach described\n     * by Joshua Bloch in \"Effective Java\" has been used here:\n     * <p>\n     * {@code http://developer.java.sun.com/developer/Books/effectivejava\n     * /Chapter3.pdf}\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.time.Minute.compareTo": "/**\n     * Returns an integer indicating the order of this Minute object relative\n     * to the specified object:\n     *\n     * negative == before, zero == same, positive == after.\n     *\n     * @param o1  object to compare.\n     *\n     * @return negative == before, zero == same, positive == after.\n     */\n",
"org.jfree.data.time.Minute.parseMinute": "/**\n     * Creates a Minute instance by parsing a string.  The string is assumed to\n     * be in the format \"YYYY-MM-DD HH:MM\", perhaps with leading or trailing\n     * whitespace.\n     *\n     * @param s  the minute string to parse.\n     *\n     * @return {@code null}, if the string is not parseable, the minute\n     *      otherwise.\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.getDomainIsPointsInTime": "/**\n     * Returns a flag that controls whether the domain is treated as 'points in\n     * time'.\n     * <P>\n     * This flag is used when determining the max and min values for the domain.\n     * If true, then only the x-values are considered for the max and min\n     * values.  If false, then the start and end x-values will also be taken\n     * into consideration.\n     *\n     * @return The flag.\n     *\n     * @see #setDomainIsPointsInTime(boolean)\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.setDomainIsPointsInTime": "/**\n     * Sets a flag that controls whether the domain is treated as 'points in\n     * time', or time periods.  A {@link DatasetChangeEvent} is sent to all\n     * registered listeners.\n     *\n     * @param flag  the new value of the flag.\n     *\n     * @see #getDomainIsPointsInTime()\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.getXPosition": "/**\n     * Returns the position within each time period that is used for the X\n     * value.\n     *\n     * @return The anchor position (never {@code null}).\n     *\n     * @see #setXPosition(TimePeriodAnchor)\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.setXPosition": "/**\n     * Sets the position within each time period that is used for the X values,\n     * then sends a {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param anchor  the anchor position ({@code null} not permitted).\n     *\n     * @see #getXPosition()\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.add": "/**\n     * Adds a new data item to the dataset and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param period  the time period.\n     * @param y  the value for this period.\n     * @param seriesName  the name of the series to add the value.\n     *\n     * @see #remove(TimePeriod, Comparable)\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.add": "/**\n     * Adds a new data item to the dataset and, if requested, sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param period  the time period ({@code null} not permitted).\n     * @param y  the value for this period ({@code null} permitted).\n     * @param seriesName  the name of the series to add the value\n     *                    ({@code null} not permitted).\n     * @param notify  whether dataset listener are notified or not.\n     *\n     * @see #remove(TimePeriod, Comparable, boolean)\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.remove": "/**\n     * Removes an existing data item from the dataset.\n     *\n     * @param period  the (existing!) time period of the value to remove\n     *                ({@code null} not permitted).\n     * @param seriesName  the (existing!) series name to remove the value\n     *                    ({@code null} not permitted).\n     *\n     * @see #add(TimePeriod, double, Comparable)\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.remove": "/**\n     * Removes an existing data item from the dataset and, if requested,\n     * sends a {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param period  the (existing!) time period of the value to remove\n     *                ({@code null} not permitted).\n     * @param seriesName  the (existing!) series name to remove the value\n     *                    ({@code null} not permitted).\n     * @param notify  whether dataset listener are notified or not.\n     *\n     * @see #add(TimePeriod, double, Comparable)\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.clear": "/**\n     * Removes all data items from the dataset and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @since 1.0.7\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.getTimePeriod": "/**\n     * Returns the time period for the specified item.  Bear in mind that all\n     * series share the same set of time periods.\n     *\n     * @param item  the item index (0 &lt;= i &lt;= {@link #getItemCount()}).\n     *\n     * @return The time period.\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.getItemCount": "/**\n     * Returns the number of items in ALL series.\n     *\n     * @return The item count.\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.getItemCount": "/**\n     * Returns the number of items in a series.  This is the same value\n     * that is returned by {@link #getItemCount()} since all series\n     * share the same x-values (time periods).\n     *\n     * @param series  the series (zero-based index, ignored).\n     *\n     * @return The number of items within the series.\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.getSeriesCount": "/**\n     * Returns the number of series in the dataset.\n     *\n     * @return The series count.\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.getSeriesKey": "/**\n     * Returns the key for a series.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The key for the series.\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.getX": "/**\n     * Returns the x-value for an item within a series.  The x-values may or\n     * may not be returned in ascending order, that is up to the class\n     * implementing the interface.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.getXValue": "/**\n     * Returns the x-value (as a double primitive) for an item within a series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.getStartX": "/**\n     * Returns the starting X value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item within a series (zero-based index).\n     *\n     * @return The starting X value for the specified series and item.\n     *\n     * @see #getStartXValue(int, int)\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.getStartXValue": "/**\n     * Returns the start x-value (as a double primitive) for an item within\n     * a series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.getEndX": "/**\n     * Returns the ending X value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item within a series (zero-based index).\n     *\n     * @return The ending X value for the specified series and item.\n     *\n     * @see #getEndXValue(int, int)\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.getEndXValue": "/**\n     * Returns the end x-value (as a double primitive) for an item within\n     * a series.\n     *\n     * @param series  the series index (zero-based).\n     * @param item  the item index (zero-based).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.getY": "/**\n     * Returns the y-value for an item within a series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The y-value (possibly {@code null}).\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.getStartY": "/**\n     * Returns the starting Y value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item within a series (zero-based index).\n     *\n     * @return The starting Y value for the specified series and item.\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.getEndY": "/**\n     * Returns the ending Y value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item within a series (zero-based index).\n     *\n     * @return The ending Y value for the specified series and item.\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.getXValue": "/**\n     * Returns the x-value for a time period.\n     *\n     * @param period  the time period.\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.getDomainLowerBound": "/**\n     * Returns the minimum x-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         x-interval is taken into account.\n     *\n     * @return The minimum value.\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.getDomainUpperBound": "/**\n     * Returns the maximum x-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         x-interval is taken into account.\n     *\n     * @return The maximum value.\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.getDomainBounds": "/**\n     * Returns the range of the values in this dataset's domain.\n     *\n     * @param includeInterval  a flag that controls whether or not the\n     *                         x-intervals are taken into account.\n     *\n     * @return The range.\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.equals": "/**\n     * Tests this dataset for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.time.TimeTableXYDataset.clone": "/**\n     * Returns a clone of this dataset.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if the dataset cannot be cloned.\n     */\n",
"org.jfree.data.time.Year.getYear": "/**\n     * Returns the year.\n     *\n     * @return The year.\n     */\n",
"org.jfree.data.time.Year.getFirstMillisecond": "/**\n     * Returns the first millisecond of the year.  This will be determined\n     * relative to the time zone specified in the constructor, or in the\n     * calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The first millisecond of the year.\n     *\n     * @see #getLastMillisecond()\n     */\n",
"org.jfree.data.time.Year.getLastMillisecond": "/**\n     * Returns the last millisecond of the year.  This will be\n     * determined relative to the time zone specified in the constructor, or\n     * in the calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The last millisecond of the year.\n     *\n     * @see #getFirstMillisecond()\n     */\n",
"org.jfree.data.time.Year.peg": "/**\n     * Recalculates the start date/time and end date/time for this time period\n     * relative to the supplied calendar (which incorporates a time zone).\n     *\n     * @param calendar  the calendar ({@code null} not permitted).\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.data.time.Year.previous": "/**\n     * Returns the year preceding this one.\n     * No matter what time zone and locale this instance was created with,\n     * the returned instance will use the default calendar for time\n     * calculations, obtained with {@link RegularTimePeriod#getCalendarInstance()}.\n     *\n     * @return The year preceding this one (or {@code null} if the\n     *         current year is -9999).\n     */\n",
"org.jfree.data.time.Year.next": "/**\n     * Returns the year following this one.\n     * No matter what time zone and locale this instance was created with,\n     * the returned instance will use the default calendar for time\n     * calculations, obtained with {@link RegularTimePeriod#getCalendarInstance()}.\n     *\n     * @return The year following this one (or {@code null} if the current\n     *         year is 9999).\n     */\n",
"org.jfree.data.time.Year.getSerialIndex": "/**\n     * Returns a serial index number for the year.\n     * <P>\n     * The implementation simply returns the year number (e.g. 2002).\n     *\n     * @return The serial index number.\n     */\n",
"org.jfree.data.time.Year.getFirstMillisecond": "/**\n     * Returns the first millisecond of the year, evaluated using the supplied\n     * calendar (which determines the time zone).\n     *\n     * @param calendar  the calendar ({@code null} not permitted).\n     *\n     * @return The first millisecond of the year.\n     *\n     * @throws NullPointerException if {@code calendar} is\n     *     {@code null}.\n     */\n",
"org.jfree.data.time.Year.getLastMillisecond": "/**\n     * Returns the last millisecond of the year, evaluated using the supplied\n     * calendar (which determines the time zone).\n     *\n     * @param calendar  the calendar ({@code null} not permitted).\n     *\n     * @return The last millisecond of the year.\n     *\n     * @throws NullPointerException if {@code calendar} is\n     *     {@code null}.\n     */\n",
"org.jfree.data.time.Year.equals": "/**\n     * Tests the equality of this {@code Year} object to an arbitrary\n     * object.  Returns {@code true} if the target is a {@code Year}\n     * instance representing the same year as this object.  In all other cases,\n     * returns {@code false}.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} if the year of this and the object are the\n     *         same.\n     */\n",
"org.jfree.data.time.Year.hashCode": "/**\n     * Returns a hash code for this object instance.  The approach described by\n     * Joshua Bloch in \"Effective Java\" has been used here:\n     * <p>\n     * {@code http://developer.java.sun.com/developer/Books/effectivejava\n     *     /Chapter3.pdf}\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.time.Year.compareTo": "/**\n     * Returns an integer indicating the order of this {@code Year} object\n     * relative to the specified object:\n     *\n     * negative == before, zero == same, positive == after.\n     *\n     * @param o1  the object to compare.\n     *\n     * @return negative == before, zero == same, positive == after.\n     */\n",
"org.jfree.data.time.Year.toString": "/**\n     * Returns a string representing the year..\n     *\n     * @return A string representing the year.\n     */\n",
"org.jfree.data.time.Year.parseYear": "/**\n     * Parses the string argument as a year.\n     * <P>\n     * The string format is YYYY.\n     *\n     * @param s  a string representing the year.\n     *\n     * @return {@code null} if the string is not parseable, the year\n     *         otherwise.\n     */\n",
"org.jfree.data.time.ohlc.OHLCItem.getPeriod": "/**\n     * Returns the period.\n     *\n     * @return The period (never {@code null}).\n     */\n",
"org.jfree.data.time.ohlc.OHLCItem.getYValue": "/**\n     * Returns the y-value.\n     *\n     * @return The y-value.\n     */\n",
"org.jfree.data.time.ohlc.OHLCItem.getOpenValue": "/**\n     * Returns the open value.\n     *\n     * @return The open value.\n     */\n",
"org.jfree.data.time.ohlc.OHLCItem.getHighValue": "/**\n     * Returns the high value.\n     *\n     * @return The high value.\n     */\n",
"org.jfree.data.time.ohlc.OHLCItem.getLowValue": "/**\n     * Returns the low value.\n     *\n     * @return The low value.\n     */\n",
"org.jfree.data.time.ohlc.OHLCItem.getCloseValue": "/**\n     * Returns the close value.\n     *\n     * @return The close value.\n     */\n",
"org.jfree.data.time.ohlc.OHLC.getOpen": "/**\n     * Returns the open value.\n     *\n     * @return The open value.\n     */\n",
"org.jfree.data.time.ohlc.OHLC.getClose": "/**\n     * Returns the close value.\n     *\n     * @return The close value.\n     */\n",
"org.jfree.data.time.ohlc.OHLC.getHigh": "/**\n     * Returns the high value.\n     *\n     * @return The high value.\n     */\n",
"org.jfree.data.time.ohlc.OHLC.getLow": "/**\n     * Returns the low value.\n     *\n     * @return The low value.\n     */\n",
"org.jfree.data.time.ohlc.OHLC.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.time.ohlc.OHLC.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeriesCollection.getXPosition": "/**\n     * Returns the position within each time period that is used for the X\n     * value when the collection is used as an {@link XYDataset}.\n     *\n     * @return The anchor position (never {@code null}).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeriesCollection.setXPosition": "/**\n     * Sets the position within each time period that is used for the X values\n     * when the collection is used as an {@link XYDataset}, then sends a\n     * {@link DatasetChangeEvent} is sent to all registered listeners.\n     *\n     * @param anchor  the anchor position ({@code null} not permitted).\n     *\n     * @since 1.0.11\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeriesCollection.addSeries": "/**\n     * Adds a series to the collection and sends a {@link DatasetChangeEvent}\n     * to all registered listeners.\n     *\n     * @param series  the series ({@code null} not permitted).\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeriesCollection.getSeriesCount": "/**\n     * Returns the number of series in the collection.\n     *\n     * @return The series count.\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeriesCollection.getSeries": "/**\n     * Returns a series from the collection.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The series.\n     *\n     * @throws IllegalArgumentException if {@code series} is not in the\n     *     range {@code 0} to {@code getSeriesCount() - 1}.\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeriesCollection.getSeriesKey": "/**\n     * Returns the key for a series.\n     *\n     * @param series  the series index (in the range {@code 0} to\n     *     {@code getSeriesCount() - 1}).\n     *\n     * @return The key for a series.\n     *\n     * @throws IllegalArgumentException if {@code series} is not in the\n     *     specified range.\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeriesCollection.getItemCount": "/**\n     * Returns the number of items in the specified series.\n     *\n     * @param series  the series (zero-based index).\n     *\n     * @return The item count.\n     *\n     * @throws IllegalArgumentException if {@code series} is not in the\n     *     range {@code 0} to {@code getSeriesCount() - 1}.\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeriesCollection.getX": "/**\n     * Returns the x-value for a time period.\n     *\n     * @param period  the time period ({@code null} not permitted).\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeriesCollection.getXValue": "/**\n     * Returns the x-value for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeriesCollection.getX": "/**\n     * Returns the x-value for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeriesCollection.getY": "/**\n     * Returns the y-value for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The y-value.\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeriesCollection.getOpenValue": "/**\n     * Returns the open-value for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The open-value.\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeriesCollection.getOpen": "/**\n     * Returns the open-value for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The open-value.\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeriesCollection.getCloseValue": "/**\n     * Returns the close-value for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The close-value.\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeriesCollection.getClose": "/**\n     * Returns the close-value for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The close-value.\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeriesCollection.getHighValue": "/**\n     * Returns the high-value for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The high-value.\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeriesCollection.getHigh": "/**\n     * Returns the high-value for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The high-value.\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeriesCollection.getLowValue": "/**\n     * Returns the low-value for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The low-value.\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeriesCollection.getLow": "/**\n     * Returns the low-value for an item within a series.\n     *\n     * @param series  the series index.\n     * @param item  the item index.\n     *\n     * @return The low-value.\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeriesCollection.getVolume": "/**\n     * Returns {@code null} always, because this dataset doesn't record\n     * any volume data.\n     *\n     * @param series  the series index (ignored).\n     * @param item  the item index (ignored).\n     *\n     * @return {@code null}.\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeriesCollection.getVolumeValue": "/**\n     * Returns {@code Double.NaN} always, because this dataset doesn't\n     * record any volume data.\n     *\n     * @param series  the series index (ignored).\n     * @param item  the item index (ignored).\n     *\n     * @return {@code Double.NaN}.\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeriesCollection.removeSeries": "/**\n     * Removes the series with the specified index and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param index  the series index.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeriesCollection.removeSeries": "/**\n     * Removes the specified series from the dataset and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param series  the series ({@code null} not permitted).\n     *\n     * @return {@code true} if the series was removed, and\n     *     {@code false} otherwise.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeriesCollection.removeAllSeries": "/**\n     * Removes all the series from the collection and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeriesCollection.equals": "/**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeriesCollection.hashCode": "/**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeriesCollection.clone": "/**\n     * Returns a clone of this instance.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem.\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeries.getPeriod": "/**\n     * Returns the time period for the specified item.\n     *\n     * @param index  the item index.\n     *\n     * @return The time period.\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeries.getDataItem": "/**\n     * Returns the data item at the specified index.\n     *\n     * @param index  the item index.\n     *\n     * @return The data item.\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeries.add": "/**\n     * Adds a data item to the series.\n     *\n     * @param period  the period.\n     * @param open  the open-value.\n     * @param high  the high-value.\n     * @param low  the low-value.\n     * @param close  the close-value.\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeries.add": "/**\n     * Adds a data item to the series.  The values from the item passed to\n     * this method will be copied into a new object.\n     * \n     * @param item  the item ({@code null} not permitted).\n     * \n     * @since 1.0.17\n     */\n",
"org.jfree.data.time.ohlc.OHLCSeries.remove": "/**\n     * Removes the item with the specified index.\n     *\n     * @param index  the item index.\n     * \n     * @return The item removed.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.data.time.TimeSeriesDataItem.getPeriod": "/**\n     * Returns the time period.\n     *\n     * @return The time period (never {@code null}).\n     */\n",
"org.jfree.data.time.TimeSeriesDataItem.getValue": "/**\n     * Returns the value.\n     *\n     * @return The value ({@code null} possible).\n     *\n     * @see #setValue(java.lang.Number)\n     */\n",
"org.jfree.data.time.TimeSeriesDataItem.setValue": "/**\n     * Sets the value for this data item.\n     *\n     * @param value  the value ({@code null} permitted).\n     *\n     * @see #getValue()\n     */\n",
"org.jfree.data.time.TimeSeriesDataItem.equals": "/**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the other object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.time.TimeSeriesDataItem.hashCode": "/**\n     * Returns a hash code.\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.time.TimeSeriesDataItem.compareTo": "/**\n     * Returns an integer indicating the order of this data pair object\n     * relative to another object.\n     * <P>\n     * For the order we consider only the timing:\n     * negative == before, zero == same, positive == after.\n     *\n     * @param o1  The object being compared to.\n     *\n     * @return An integer indicating the order of the data item object\n     *         relative to another object.\n     */\n",
"org.jfree.data.time.TimeSeriesDataItem.clone": "/**\n     * Clones the data item.  Note: there is no need to clone the period or\n     * value since they are immutable classes.\n     *\n     * @return A clone of the data item.\n     */\n",
"org.jfree.data.time.TimeSeriesTableModel.getColumnCount": "/**\n     * Returns the number of columns in the table model.  For this particular\n     * model, the column count is fixed at 2.\n     *\n     * @return The column count.\n     */\n",
"org.jfree.data.time.TimeSeriesTableModel.getColumnClass": "/**\n     * Returns the column class in the table model.\n     *\n     * @param column  the column index.\n     *\n     * @return The column class in the table model.\n     */\n",
"org.jfree.data.time.TimeSeriesTableModel.getColumnName": "/**\n     * Returns the name of a column\n     *\n     * @param column  the column index.\n     *\n     * @return The name of a column.\n     */\n",
"org.jfree.data.time.TimeSeriesTableModel.getRowCount": "/**\n     * Returns the number of rows in the table model.\n     *\n     * @return The row count.\n     */\n",
"org.jfree.data.time.TimeSeriesTableModel.getValueAt": "/**\n     * Returns the data value for a cell in the table model.\n     *\n     * @param row  the row number.\n     * @param column  the column number.\n     *\n     * @return The data value for a cell in the table model.\n     */\n",
"org.jfree.data.time.TimeSeriesTableModel.isCellEditable": "/**\n     * Returns a flag indicating whether or not the specified cell is editable.\n     *\n     * @param row  the row number.\n     * @param column  the column number.\n     *\n     * @return {@code true} if the specified cell is editable.\n     */\n",
"org.jfree.data.time.TimeSeriesTableModel.setValueAt": "/**\n     * Updates the time series.\n     *\n     * @param value  the new value.\n     * @param row  the row.\n     * @param column  the column.\n     */\n",
"org.jfree.data.time.TimeSeriesTableModel.seriesChanged": "/**\n     * Receives notification that the time series has been changed.  Responds\n     * by firing a table data change event.\n     *\n     * @param event  the event.\n     */\n",
"org.jfree.data.time.SimpleTimePeriod.getStart": "/**\n     * Returns the start date/time.\n     *\n     * @return The start date/time (never {@code null}).\n     */\n",
"org.jfree.data.time.SimpleTimePeriod.getStartMillis": "/**\n     * Returns the start date/time in milliseconds.\n     *\n     * @return The start.\n     *\n     * @since 1.0.10.\n     */\n",
"org.jfree.data.time.SimpleTimePeriod.getEnd": "/**\n     * Returns the end date/time.\n     *\n     * @return The end date/time (never {@code null}).\n     */\n",
"org.jfree.data.time.SimpleTimePeriod.getEndMillis": "/**\n     * Returns the end date/time in milliseconds.\n     *\n     * @return The end.\n     *\n     * @since 1.0.10.\n     */\n",
"org.jfree.data.time.SimpleTimePeriod.equals": "/**\n     * Tests this time period instance for equality with an arbitrary object.\n     * The object is considered equal if it is an instance of {@link TimePeriod}\n     * and it has the same start and end dates.\n     *\n     * @param obj  the other object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.time.SimpleTimePeriod.compareTo": "/**\n     * Returns an integer that indicates the relative ordering of two\n     * time periods.\n     *\n     * @param obj  the object ({@code null} not permitted).\n     *\n     * @return An integer.\n     *\n     * @throws ClassCastException if {@code obj} is not an instance of\n     *                            {@link TimePeriod}.\n     */\n",
"org.jfree.data.time.SimpleTimePeriod.hashCode": "/**\n     * Returns a hash code for this object instance.  The approach described by\n     * Joshua Bloch in \"Effective Java\" has been used here - see:\n     * <p>\n     * {@code http://developer.java.sun.com/\n     * developer/Books/effectivejava/Chapter3.pdf}\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.time.TimePeriod.getStart": "/**\n     * Returns the start date/time.  This will always be on or before the\n     * end date.\n     *\n     * @return The start date/time (never {@code null}).\n     */\n",
"org.jfree.data.time.TimePeriod.getEnd": "/**\n     * Returns the end date/time.  This will always be on or after the\n     * start date.\n     *\n     * @return The end date/time (never {@code null}).\n     */\n",
"org.jfree.data.time.Month.getYear": "/**\n     * Returns the year in which the month falls.\n     *\n     * @return The year in which the month falls (as a Year object).\n     */\n",
"org.jfree.data.time.Month.getYearValue": "/**\n     * Returns the year in which the month falls.\n     *\n     * @return The year in which the month falls (as an int).\n     */\n",
"org.jfree.data.time.Month.getMonth": "/**\n     * Returns the month.  Note that 1=JAN, 2=FEB, ...\n     *\n     * @return The month.\n     */\n",
"org.jfree.data.time.Month.getFirstMillisecond": "/**\n     * Returns the first millisecond of the month.  This will be determined\n     * relative to the time zone specified in the constructor, or in the\n     * calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The first millisecond of the month.\n     *\n     * @see #getLastMillisecond()\n     */\n",
"org.jfree.data.time.Month.getLastMillisecond": "/**\n     * Returns the last millisecond of the month.  This will be\n     * determined relative to the time zone specified in the constructor, or\n     * in the calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The last millisecond of the month.\n     *\n     * @see #getFirstMillisecond()\n     */\n",
"org.jfree.data.time.Month.peg": "/**\n     * Recalculates the start date/time and end date/time for this time period\n     * relative to the supplied calendar (which incorporates a time zone).\n     *\n     * @param calendar  the calendar ({@code null} not permitted).\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.data.time.Month.previous": "/**\n     * Returns the month preceding this one.  Note that the returned\n     * {@link Month} is \"pegged\" using the default calendar, obtained\n     * with {@link RegularTimePeriod#getCalendarInstance()}, irrespective of\n     * the time-zone used to peg of the current month (which is not recorded\n     * anywhere).  See the {@link #peg(Calendar)} method.\n     *\n     * @return The month preceding this one.\n     */\n",
"org.jfree.data.time.Month.next": "/**\n     * Returns the month following this one.  Note that the returned\n     * {@link Month} is \"pegged\" using the default calendar, obtained\n     * with {@link RegularTimePeriod#getCalendarInstance()}, irrespective of\n     * the time-zone used to peg of the current month (which is not recorded\n     * anywhere).  See the {@link #peg(Calendar)} method.\n     *\n     * @return The month following this one.\n     */\n",
"org.jfree.data.time.Month.getSerialIndex": "/**\n     * Returns a serial index number for the month.\n     *\n     * @return The serial index number.\n     */\n",
"org.jfree.data.time.Month.toString": "/**\n     * Returns a string representing the month (e.g. \"January 2002\").\n     * <P>\n     * To do: look at internationalisation.\n     *\n     * @return A string representing the month.\n     */\n",
"org.jfree.data.time.Month.equals": "/**\n     * Tests the equality of this Month object to an arbitrary object.\n     * Returns true if the target is a Month instance representing the same\n     * month as this object.  In all other cases, returns false.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} if month and year of this and object are the\n     *         same.\n     */\n",
"org.jfree.data.time.Month.hashCode": "/**\n     * Returns a hash code for this object instance.  The approach described by\n     * Joshua Bloch in \"Effective Java\" has been used here:\n     * <p>\n     * {@code http://developer.java.sun.com/developer/Books/effectivejava\n     * /Chapter3.pdf}\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.time.Month.compareTo": "/**\n     * Returns an integer indicating the order of this Month object relative to\n     * the specified\n     * object: negative == before, zero == same, positive == after.\n     *\n     * @param o1  the object to compare.\n     *\n     * @return negative == before, zero == same, positive == after.\n     */\n",
"org.jfree.data.time.Month.getFirstMillisecond": "/**\n     * Returns the first millisecond of the month, evaluated using the supplied\n     * calendar (which determines the time zone).\n     *\n     * @param calendar  the calendar ({@code null} not permitted).\n     *\n     * @return The first millisecond of the month.\n     *\n     * @throws NullPointerException if {@code calendar} is\n     *     {@code null}.\n     */\n",
"org.jfree.data.time.Month.getLastMillisecond": "/**\n     * Returns the last millisecond of the month, evaluated using the supplied\n     * calendar (which determines the time zone).\n     *\n     * @param calendar  the calendar ({@code null} not permitted).\n     *\n     * @return The last millisecond of the month.\n     *\n     * @throws NullPointerException if {@code calendar} is\n     *     {@code null}.\n     */\n",
"org.jfree.data.time.Month.parseMonth": "/**\n     * Parses the string argument as a month.  This method is required to\n     * accept the format \"YYYY-MM\".  It will also accept \"MM-YYYY\". Anything\n     * else, at the moment, is a bonus.\n     *\n     * @param s  the string to parse ({@code null} permitted).\n     *\n     * @return {@code null} if the string is not parseable, the month\n     *         otherwise.\n     */\n",
"org.jfree.data.time.Month.findSeparator": "/**\n     * Finds the first occurrence of '-', or if that character is not found,\n     * the first occurrence of ',', or the first occurrence of ' ' or '.'\n     *\n     * @param s  the string to parse.\n     *\n     * @return The position of the separator character, or {@code -1} if\n     *     none of the characters were found.\n     */\n",
"org.jfree.data.time.Month.evaluateAsYear": "/**\n     * Creates a year from a string, or returns {@code null} (format\n     * exceptions suppressed).\n     *\n     * @param s  the string to parse.\n     *\n     * @return {@code null} if the string is not parseable, the year\n     *         otherwise.\n     */\n",
"org.jfree.data.time.MovingAverage.createMovingAverage": "/**\n     * Creates a new {@link TimeSeriesCollection} containing a moving average\n     * series for each series in the source collection.\n     *\n     * @param source  the source collection.\n     * @param suffix  the suffix added to each source series name to create the\n     *                corresponding moving average series name.\n     * @param periodCount  the number of periods in the moving average\n     *                     calculation.\n     * @param skip  the number of initial periods to skip.\n     *\n     * @return A collection of moving average time series.\n     */\n",
"org.jfree.data.time.MovingAverage.createMovingAverage": "/**\n     * Creates a new {@link TimeSeries} containing moving average values for\n     * the given series.  If the series is empty (contains zero items), the\n     * result is an empty series.\n     *\n     * @param source  the source series.\n     * @param name  the name of the new series.\n     * @param periodCount  the number of periods used in the average\n     *                     calculation.\n     * @param skip  the number of initial periods to skip.\n     *\n     * @return The moving average series.\n     */\n",
"org.jfree.data.time.MovingAverage.createPointMovingAverage": "/**\n     * Creates a new {@link TimeSeries} containing moving average values for\n     * the given series, calculated by number of points (irrespective of the\n     * 'age' of those points).  If the series is empty (contains zero items),\n     * the result is an empty series.\n     * <p>\n     * Developed by Benoit Xhenseval (www.ObjectLab.co.uk).\n     *\n     * @param source  the source series.\n     * @param name  the name of the new series.\n     * @param pointCount  the number of POINTS used in the average calculation\n     *                    (not periods!)\n     *\n     * @return The moving average series.\n     */\n",
"org.jfree.data.time.MovingAverage.createMovingAverage": "/**\n     * Creates a new {@link XYDataset} containing the moving averages of each\n     * series in the {@code source} dataset.\n     *\n     * @param source  the source dataset.\n     * @param suffix  the string to append to source series names to create\n     *                target series names.\n     * @param period  the averaging period.\n     * @param skip  the length of the initial skip period.\n     *\n     * @return The dataset.\n     */\n",
"org.jfree.data.time.MovingAverage.createMovingAverage": "/**\n     * Creates a new {@link XYDataset} containing the moving averages of each\n     * series in the {@code source} dataset.\n     *\n     * @param source  the source dataset.\n     * @param suffix  the string to append to source series names to create\n     *                target series names.\n     * @param period  the averaging period.\n     * @param skip  the length of the initial skip period.\n     *\n     * @return The dataset.\n     */\n",
"org.jfree.data.time.MovingAverage.createMovingAverage": "/**\n     * Creates a new {@link XYSeries} containing the moving averages of one\n     * series in the {@code source} dataset.\n     *\n     * @param source  the source dataset.\n     * @param series  the series index (zero based).\n     * @param name  the name for the new series.\n     * @param period  the averaging period.\n     * @param skip  the length of the initial skip period.\n     *\n     * @return The dataset.\n     */\n",
"org.jfree.data.time.Quarter.getQuarter": "/**\n     * Returns the quarter.\n     *\n     * @return The quarter.\n     */\n",
"org.jfree.data.time.Quarter.getYear": "/**\n     * Returns the year.\n     *\n     * @return The year.\n     */\n",
"org.jfree.data.time.Quarter.getYearValue": "/**\n     * Returns the year.\n     *\n     * @return The year.\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.data.time.Quarter.getFirstMillisecond": "/**\n     * Returns the first millisecond of the quarter.  This will be determined\n     * relative to the time zone specified in the constructor, or in the\n     * calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The first millisecond of the quarter.\n     *\n     * @see #getLastMillisecond()\n     */\n",
"org.jfree.data.time.Quarter.getLastMillisecond": "/**\n     * Returns the last millisecond of the quarter.  This will be\n     * determined relative to the time zone specified in the constructor, or\n     * in the calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The last millisecond of the quarter.\n     *\n     * @see #getFirstMillisecond()\n     */\n",
"org.jfree.data.time.Quarter.peg": "/**\n     * Recalculates the start date/time and end date/time for this time period\n     * relative to the supplied calendar (which incorporates a time zone).\n     *\n     * @param calendar  the calendar ({@code null} not permitted).\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.data.time.Quarter.previous": "/**\n     * Returns the quarter preceding this one.\n     * No matter what time zone and locale this instance was created with,\n     * the returned instance will use the default calendar for time\n     * calculations, obtained with {@link RegularTimePeriod#getCalendarInstance()}.\n     *\n     * @return The quarter preceding this one (or {@code null} if this is\n     *     Q1 1900).\n     */\n",
"org.jfree.data.time.Quarter.next": "/**\n     * Returns the quarter following this one.\n     * No matter what time zone and locale this instance was created with,\n     * the returned instance will use the default calendar for time\n     * calculations, obtained with {@link RegularTimePeriod#getCalendarInstance()}.\n     *\n     * @return The quarter following this one (or null if this is Q4 9999).\n     */\n",
"org.jfree.data.time.Quarter.getSerialIndex": "/**\n     * Returns a serial index number for the quarter.\n     *\n     * @return The serial index number.\n     */\n",
"org.jfree.data.time.Quarter.equals": "/**\n     * Tests the equality of this Quarter object to an arbitrary object.\n     * Returns {@code true} if the target is a Quarter instance\n     * representing the same quarter as this object.  In all other cases,\n     * returns {@code false}.\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return {@code true} if quarter and year of this and the object are\n     *         the same.\n     */\n",
"org.jfree.data.time.Quarter.hashCode": "/**\n     * Returns a hash code for this object instance.  The approach described by\n     * Joshua Bloch in \"Effective Java\" has been used here:\n     * <p>\n     * {@code http://developer.java.sun.com/developer/Books/effectivejava\n     * /Chapter3.pdf}\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.time.Quarter.compareTo": "/**\n     * Returns an integer indicating the order of this Quarter object relative\n     * to the specified object:\n     *\n     * negative == before, zero == same, positive == after.\n     *\n     * @param o1  the object to compare\n     *\n     * @return negative == before, zero == same, positive == after.\n     */\n",
"org.jfree.data.time.Quarter.toString": "/**\n     * Returns a string representing the quarter (e.g. \"Q1/2002\").\n     *\n     * @return A string representing the quarter.\n     */\n",
"org.jfree.data.time.Quarter.getFirstMillisecond": "/**\n     * Returns the first millisecond in the Quarter, evaluated using the\n     * supplied calendar (which determines the time zone).\n     *\n     * @param calendar  the calendar ({@code null} not permitted).\n     *\n     * @return The first millisecond in the Quarter.\n     *\n     * @throws NullPointerException if {@code calendar} is\n     *     {@code null}.\n     */\n",
"org.jfree.data.time.Quarter.getLastMillisecond": "/**\n     * Returns the last millisecond of the Quarter, evaluated using the\n     * supplied calendar (which determines the time zone).\n     *\n     * @param calendar  the calendar ({@code null} not permitted).\n     *\n     * @return The last millisecond of the Quarter.\n     *\n     * @throws NullPointerException if {@code calendar} is\n     *     {@code null}.\n     */\n",
"org.jfree.data.time.Quarter.parseQuarter": "/**\n     * Parses the string argument as a quarter.\n     * <P>\n     * This method should accept the following formats: \"YYYY-QN\" and \"QN-YYYY\",\n     * where the \"-\" can be a space, a forward-slash (/), comma or a dash (-).\n     * @param s A string representing the quarter.\n     *\n     * @return The quarter.\n     */\n",
"org.jfree.data.time.Second.getSecond": "/**\n     * Returns the second within the minute.\n     *\n     * @return The second (0 - 59).\n     */\n",
"org.jfree.data.time.Second.getMinute": "/**\n     * Returns the minute.\n     *\n     * @return The minute (never {@code null}).\n     */\n",
"org.jfree.data.time.Second.getFirstMillisecond": "/**\n     * Returns the first millisecond of the second.  This will be determined\n     * relative to the time zone specified in the constructor, or in the\n     * calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The first millisecond of the second.\n     *\n     * @see #getLastMillisecond()\n     */\n",
"org.jfree.data.time.Second.getLastMillisecond": "/**\n     * Returns the last millisecond of the second.  This will be\n     * determined relative to the time zone specified in the constructor, or\n     * in the calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The last millisecond of the second.\n     *\n     * @see #getFirstMillisecond()\n     */\n",
"org.jfree.data.time.Second.peg": "/**\n     * Recalculates the start date/time and end date/time for this time period\n     * relative to the supplied calendar (which incorporates a time zone).\n     *\n     * @param calendar  the calendar ({@code null} not permitted).\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.data.time.Second.previous": "/**\n     * Returns the second preceding this one.\n     * No matter what time zone and locale this instance was created with,\n     * the returned instance will use the default calendar for time\n     * calculations, obtained with {@link RegularTimePeriod#getCalendarInstance()}.\n     *\n     * @return The second preceding this one.\n     */\n",
"org.jfree.data.time.Second.next": "/**\n     * Returns the second following this one.\n     * No matter what time zone and locale this instance was created with,\n     * the returned instance will use the default calendar for time\n     * calculations, obtained with {@link RegularTimePeriod#getCalendarInstance()}.\n     *\n     * @return The second following this one.\n     */\n",
"org.jfree.data.time.Second.getSerialIndex": "/**\n     * Returns a serial index number for the minute.\n     *\n     * @return The serial index number.\n     */\n",
"org.jfree.data.time.Second.getFirstMillisecond": "/**\n     * Returns the first millisecond of the minute.\n     *\n     * @param calendar  the calendar/timezone ({@code null} not permitted).\n     *\n     * @return The first millisecond.\n     *\n     * @throws NullPointerException if {@code calendar} is {@code null}.\n     */\n",
"org.jfree.data.time.Second.getLastMillisecond": "/**\n     * Returns the last millisecond of the second.\n     *\n     * @param calendar  the calendar/timezone ({@code null} not permitted).\n     *\n     * @return The last millisecond.\n     *\n     * @throws NullPointerException if {@code calendar} is {@code null}.\n     */\n",
"org.jfree.data.time.Second.equals": "/**\n     * Tests the equality of this object against an arbitrary Object.\n     * <P>\n     * This method will return true ONLY if the object is a Second object\n     * representing the same second as this instance.\n     *\n     * @param obj  the object to compare ({@code null} permitted).\n     *\n     * @return {@code true} if second and minute of this and the object\n     *         are the same.\n     */\n",
"org.jfree.data.time.Second.hashCode": "/**\n     * Returns a hash code for this object instance.  The approach described by\n     * Joshua Bloch in \"Effective Java\" has been used here:\n     * <p>\n     * {@code http://developer.java.sun.com/developer/Books/effectivejava\n     * /Chapter3.pdf}\n     *\n     * @return A hash code.\n     */\n",
"org.jfree.data.time.Second.compareTo": "/**\n     * Returns an integer indicating the order of this Second object relative\n     * to the specified\n     * object: negative == before, zero == same, positive == after.\n     *\n     * @param o1  the object to compare.\n     *\n     * @return negative == before, zero == same, positive == after.\n     */\n",
"org.jfree.data.time.Second.parseSecond": "/**\n     * Creates a new instance by parsing a string.  The string is assumed to\n     * be in the format \"YYYY-MM-DD HH:MM:SS\", perhaps with leading or trailing\n     * whitespace.\n     *\n     * @param s  the string to parse.\n     *\n     * @return The second, or {@code null} if the string is not parseable.\n     */\n",
"org.jfree.data.time.Millisecond.getSecond": "/**\n     * Returns the second.\n     *\n     * @return The second.\n     */\n",
"org.jfree.data.time.Millisecond.getMillisecond": "/**\n     * Returns the millisecond.\n     *\n     * @return The millisecond.\n     */\n",
"org.jfree.data.time.Millisecond.getFirstMillisecond": "/**\n     * Returns the first millisecond of the second.  This will be determined\n     * relative to the time zone specified in the constructor, or in the\n     * calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The first millisecond of the second.\n     *\n     * @see #getLastMillisecond()\n     */\n",
"org.jfree.data.time.Millisecond.getLastMillisecond": "/**\n     * Returns the last millisecond of the second.  This will be\n     * determined relative to the time zone specified in the constructor, or\n     * in the calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The last millisecond of the second.\n     *\n     * @see #getFirstMillisecond()\n     */\n",
"org.jfree.data.time.Millisecond.peg": "/**\n     * Recalculates the start date/time and end date/time for this time period\n     * relative to the supplied calendar (which incorporates a time zone).\n     *\n     * @param calendar  the calendar ({@code null} not permitted).\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.data.time.Millisecond.previous": "/**\n     * Returns the millisecond preceding this one.\n     * No matter what time zone and locale this instance was created with,\n     * the returned instance will use the default calendar for time\n     * calculations, obtained with {@link RegularTimePeriod#getCalendarInstance()}.\n     *\n     * @return The millisecond preceding this one.\n     */\n",
"org.jfree.data.time.Millisecond.next": "/**\n     * Returns the millisecond following this one.\n     * No matter what time zone and locale this instance was created with,\n     * the returned instance will use the default calendar for time\n     * calculations, obtained with {@link RegularTimePeriod#getCalendarInstance()}.\n     *\n     * @return The millisecond following this one.\n     */\n",
"org.jfree.data.time.Millisecond.getSerialIndex": "/**\n     * Returns a serial index number for the millisecond.\n     *\n     * @return The serial index number.\n     */\n",
"org.jfree.data.time.Millisecond.equals": "/**\n     * Tests the equality of this object against an arbitrary Object.\n     * <P>\n     * This method will return true ONLY if the object is a Millisecond object\n     * representing the same millisecond as this instance.\n     *\n     * @param obj  the object to compare\n     *\n     * @return {@code true} if milliseconds and seconds of this and object\n     *      are the same.\n     */\n",
"org.jfree.data.time.Millisecond.hashCode": "/**\n     * Returns a hash code for this object instance.  The approach described by\n     * Joshua Bloch in \"Effective Java\" has been used here:\n     * <p>\n     * {@code http://developer.java.sun.com/developer/Books/effectivejava\n     * /Chapter3.pdf}\n     *\n     * @return A hashcode.\n     */\n",
"org.jfree.data.time.Millisecond.compareTo": "/**\n     * Returns an integer indicating the order of this Millisecond object\n     * relative to the specified object:\n     *\n     * negative == before, zero == same, positive == after.\n     *\n     * @param obj  the object to compare\n     *\n     * @return negative == before, zero == same, positive == after.\n     */\n",
"org.jfree.data.time.Millisecond.getFirstMillisecond": "/**\n     * Returns the first millisecond of the time period.\n     *\n     * @param calendar  the calendar ({@code null} not permitted).\n     *\n     * @return The first millisecond of the time period.\n     *\n     * @throws NullPointerException if {@code calendar} is\n     *     {@code null}.\n     */\n",
"org.jfree.data.time.Millisecond.getLastMillisecond": "/**\n     * Returns the last millisecond of the time period.\n     *\n     * @param calendar  the calendar ({@code null} not permitted).\n     *\n     * @return The last millisecond of the time period.\n     *\n     * @throws NullPointerException if {@code calendar} is\n     *     {@code null}.\n     */\n",
"org.jfree.data.time.RegularTimePeriod.createInstance": "/**\n     * Creates a time period that includes the specified millisecond, assuming\n     * the given time zone.\n     *\n     * @param c  the time period class.\n     * @param millisecond  the time.\n     * @param zone  the time zone.\n     * @param locale  the locale.\n     *\n     * @return The time period.\n     */\n",
"org.jfree.data.time.RegularTimePeriod.downsize": "/**\n     * Returns a subclass of {@link RegularTimePeriod} that is smaller than\n     * the specified class.\n     *\n     * @param c  a subclass of {@link RegularTimePeriod}.\n     *\n     * @return A class.\n     */\n",
"org.jfree.data.time.RegularTimePeriod.getCalendarInstance": "/**\n     * Creates or returns a thread-local Calendar instance.\n     * This function is used by the various subclasses to obtain a calendar for\n     * date-time to/from ms-since-epoch conversions (and to determine\n     * the first day of the week, in case of {@link Week}).\n     * <p>\n     * If a thread-local calendar was set with {@link #setThreadLocalCalendarInstance(Calendar)},\n     * then it is simply returned.\n     * <p>\n     * Otherwise, If a global calendar prototype was set with {@link #setCalendarInstancePrototype(Calendar)},\n     * then it is cloned and set as the thread-local calendar instance for future use,\n     * as if it was set with {@link #setThreadLocalCalendarInstance(Calendar)}.\n     * <p>\n     * Otherwise, if neither is set, a new instance will be created every\n     * time with {@link Calendar#getInstance()}, resorting to JFreeChart 1.5.0\n     * behavior (leading to huge load on GC and high memory consumption\n     * if many instances are created).\n     *\n     * @return a thread-local Calendar instance\n     */\n",
"org.jfree.data.time.RegularTimePeriod.setThreadLocalCalendarInstance": "/**\n     * Sets the thread-local calendar instance for time calculations.\n     * <p>\n     * {@code RegularTimePeriod} instances sometimes need a {@link Calendar}\n     * to perform time calculations (date-time from/to milliseconds-since-epoch).\n     * In JFreeChart 1.5.0, they created a new {@code Calendar} instance\n     * every time they needed one.  This created a huge load on GC and lead\n     * to high memory consumption.  To avoid this, a thread-local {@code Calendar}\n     * instance can be set, which will then be used for time calculations\n     * every time, unless the caller passes a specific {@code Calendar}\n     * instance in places where the API allows it.\n     * <p>\n     * If the specified calendar is {@code null}, or if this method was never called,\n     * then the next time a calendar instance is needed, a new one will be created by cloning\n     * the global prototype set with {@link #setCalendarInstancePrototype(Calendar)}.\n     * If none was set either, then a new instance will be created every time\n     * with {@link Calendar#getInstance()}, resorting to JFreeChart 1.5.0 behavior.\n     *\n     * @param calendar the new thread-local calendar instance\n     */\n",
"org.jfree.data.time.RegularTimePeriod.setCalendarInstancePrototype": "/**\n     * Sets a global calendar prototype for time calculations.\n     * <p>\n     * {@code RegularTimePeriod} instances sometimes need a {@link Calendar}\n     * to perform time calculations (date-time from/to milliseconds-since-epoch).\n     * In JFreeChart 1.5.0, they created a new {@code Calendar} instance\n     * every time they needed one.  This created a huge load on GC and lead\n     * to high memory consumption.  To avoid this, a prototype {@code Calendar}\n     * can be set, which will be then cloned by every thread that needs\n     * a {@code Calendar} instance.  The prototype is not cloned right away,\n     * and stored instead for later cloning, therefore the caller must not\n     * alter the prototype after it has been passed to this method.\n     * <p>\n     * If the prototype is {@code null}, then thread-local calendars\n     * set with {@link #setThreadLocalCalendarInstance(Calendar)} will be\n     * used instead.  If none was set for some thread, then a new instance will be\n     * created with {@link Calendar#getInstance()} every time one is needed.\n     * However, if the prototype was already cloned by some thread,\n     * then setting it to {@code null} has no effect, and that thread must\n     * explicitly set its own instance to {@code null} or something else to get\n     * rid of the cloned calendar.\n     * <p>\n     * Calling {@code setCalendarInstancePrototype(Calendar.getInstance())}\n     * somewhere early in an application will effectively mimic JFreeChart\n     * 1.5.0 behavior (using the default calendar everywhere unless explicitly\n     * specified), while preventing the many-allocations problem.  There is one\n     * important caveat, however: once a prototype is cloned by some\n     * thread, calling {@link TimeZone#setDefault(TimeZone)}\n     * or {@link Locale#setDefault(Locale)}} will have no\n     * effect on future calculations.  To avoid this problem, simply set\n     * the default time zone and locale before setting the prototype.\n     *\n     * @param calendar the new thread-local calendar instance\n     */\n",
"org.jfree.data.time.RegularTimePeriod.previous": "/**\n     * Returns the time period preceding this one, or {@code null} if some\n     * lower limit has been reached.\n     *\n     * @return The previous time period (possibly {@code null}).\n     */\n",
"org.jfree.data.time.RegularTimePeriod.next": "/**\n     * Returns the time period following this one, or {@code null} if some\n     * limit has been reached.\n     *\n     * @return The next time period (possibly {@code null}).\n     */\n",
"org.jfree.data.time.RegularTimePeriod.getSerialIndex": "/**\n     * Returns a serial index number for the time unit.\n     *\n     * @return The serial index number.\n     */\n",
"org.jfree.data.time.RegularTimePeriod.peg": "/**\n     * Recalculates the start date/time and end date/time for this time period\n     * relative to the supplied calendar (which incorporates a time zone).\n     *\n     * @param calendar  the calendar ({@code null} not permitted).\n     *\n     * @since 1.0.3\n     */\n",
"org.jfree.data.time.RegularTimePeriod.getStart": "/**\n     * Returns the date/time that marks the start of the time period.  This\n     * method returns a new {@code Date} instance every time it is called.\n     *\n     * @return The start date/time.\n     *\n     * @see #getFirstMillisecond()\n     */\n",
"org.jfree.data.time.RegularTimePeriod.getEnd": "/**\n     * Returns the date/time that marks the end of the time period.  This\n     * method returns a new {@code Date} instance every time it is called.\n     *\n     * @return The end date/time.\n     *\n     * @see #getLastMillisecond()\n     */\n",
"org.jfree.data.time.RegularTimePeriod.getFirstMillisecond": "/**\n     * Returns the first millisecond of the time period.  This will be\n     * determined relative to the time zone specified in the constructor, or\n     * in the calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The first millisecond of the time period.\n     *\n     * @see #getLastMillisecond()\n     */\n",
"org.jfree.data.time.RegularTimePeriod.getFirstMillisecond": "/**\n     * Returns the first millisecond of the time period, evaluated using the\n     * supplied calendar (which incorporates a timezone).\n     *\n     * @param calendar  the calendar ({@code null} not permitted).\n     *\n     * @return The first millisecond of the time period.\n     *\n     * @throws NullPointerException if {@code calendar} is {@code null}.\n     *\n     * @see #getLastMillisecond(Calendar)\n     */\n",
"org.jfree.data.time.RegularTimePeriod.getLastMillisecond": "/**\n     * Returns the last millisecond of the time period.  This will be\n     * determined relative to the time zone specified in the constructor, or\n     * in the calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The last millisecond of the time period.\n     *\n     * @see #getFirstMillisecond()\n     */\n",
"org.jfree.data.time.RegularTimePeriod.getLastMillisecond": "/**\n     * Returns the last millisecond of the time period, evaluated using the\n     * supplied calendar (which incorporates a timezone).\n     *\n     * @param calendar  the calendar ({@code null} not permitted).\n     *\n     * @return The last millisecond of the time period.\n     *\n     * @see #getFirstMillisecond(Calendar)\n     */\n",
"org.jfree.data.time.RegularTimePeriod.getMiddleMillisecond": "/**\n     * Returns the millisecond closest to the middle of the time period.\n     *\n     * @return The middle millisecond.\n     */\n",
"org.jfree.data.time.RegularTimePeriod.getMiddleMillisecond": "/**\n     * Returns the millisecond closest to the middle of the time period,\n     * evaluated using the supplied calendar (which incorporates a timezone).\n     *\n     * @param calendar  the calendar.\n     *\n     * @return The middle millisecond.\n     */\n",
"org.jfree.data.time.RegularTimePeriod.getMillisecond": "/**\n     * Returns the millisecond (relative to the epoch) corresponding to the \n     * specified {@code anchor} using the supplied {@code calendar} \n     * (which incorporates a time zone).\n     * \n     * @param anchor  the anchor ({@code null} not permitted).\n     * @param calendar  the calendar ({@code null} not permitted).\n     * \n     * @return Milliseconds since the epoch.\n     * \n     * @since 1.0.18\n     */\n",
"org.jfree.data.time.RegularTimePeriod.toString": "/**\n     * Returns a string representation of the time period.\n     *\n     * @return The string.\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.getDomainOrder": "/**\n     * Returns the order of the domain values in this dataset.\n     *\n     * @return {@link DomainOrder#ASCENDING}\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.getXPosition": "/**\n     * Returns the position within each time period that is used for the X\n     * value when the collection is used as an\n     * {@link org.jfree.data.xy.XYDataset}.\n     *\n     * @return The anchor position (never {@code null}).\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.setXPosition": "/**\n     * Sets the position within each time period that is used for the X values\n     * when the collection is used as an {@link XYDataset}, then sends a\n     * {@link DatasetChangeEvent} is sent to all registered listeners.\n     *\n     * @param anchor  the anchor position ({@code null} not permitted).\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.getSeries": "/**\n     * Returns a list of all the series in the collection.\n     *\n     * @return The list (which is unmodifiable).\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.getSeriesCount": "/**\n     * Returns the number of series in the collection.\n     *\n     * @return The series count.\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.indexOf": "/**\n     * Returns the index of the specified series, or -1 if that series is not\n     * present in the dataset.\n     *\n     * @param series  the series ({@code null} not permitted).\n     *\n     * @return The series index.\n     *\n     * @since 1.0.6\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.getSeries": "/**\n     * Returns a series.\n     *\n     * @param series  the index of the series (zero-based).\n     *\n     * @return The series.\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.getSeries": "/**\n     * Returns the series with the specified key, or {@code null} if\n     * there is no such series.\n     *\n     * @param key  the series key ({@code null} permitted).\n     *\n     * @return The series with the given key.\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.getSeriesKey": "/**\n     * Returns the key for a series.\n     *\n     * @param series  the index of the series (zero-based).\n     *\n     * @return The key for a series.\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.getSeriesIndex": "/**\n     * Returns the index of the series with the specified key, or -1 if no\n     * series has that key.\n     * \n     * @param key  the key ({@code null} not permitted).\n     * \n     * @return The index.\n     * \n     * @since 1.0.17\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.addSeries": "/**\n     * Adds a series to the collection and sends a {@link DatasetChangeEvent} to\n     * all registered listeners.\n     *\n     * @param series  the series ({@code null} not permitted).\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.removeSeries": "/**\n     * Removes the specified series from the collection and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     *\n     * @param series  the series ({@code null} not permitted).\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.removeSeries": "/**\n     * Removes a series from the collection.\n     *\n     * @param index  the series index (zero-based).\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.removeAllSeries": "/**\n     * Removes all the series from the collection and sends a\n     * {@link DatasetChangeEvent} to all registered listeners.\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.getItemCount": "/**\n     * Returns the number of items in the specified series.  This method is\n     * provided for convenience.\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The item count.\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.getXValue": "/**\n     * Returns the x-value (as a double primitive) for an item within a series.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.getX": "/**\n     * Returns the x-value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.getX": "/**\n     * Returns the x-value for a time period.\n     *\n     * @param period  the time period ({@code null} not permitted).\n     *\n     * @return The x-value.\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.getStartX": "/**\n     * Returns the starting X value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.getEndX": "/**\n     * Returns the ending X value for the specified series and item.\n     *\n     * @param series The series (zero-based index).\n     * @param item  The item (zero-based index).\n     *\n     * @return The value.\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.getY": "/**\n     * Returns the y-value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The value (possibly {@code null}).\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.getStartY": "/**\n     * Returns the starting Y value for the specified series and item.\n     *\n     * @param series  the series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The value (possibly {@code null}).\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.getEndY": "/**\n     * Returns the ending Y value for the specified series and item.\n     *\n     * @param series  te series (zero-based index).\n     * @param item  the item (zero-based index).\n     *\n     * @return The value (possibly {@code null}).\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.getSurroundingItems": "/**\n     * Returns the indices of the two data items surrounding a particular\n     * millisecond value.\n     *\n     * @param series  the series index.\n     * @param milliseconds  the time.\n     *\n     * @return An array containing the (two) indices of the items surrounding\n     *         the time.\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.getDomainLowerBound": "/**\n     * Returns the minimum x-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         x-interval is taken into account.\n     *\n     * @return The minimum value.\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.getDomainUpperBound": "/**\n     * Returns the maximum x-value in the dataset.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         x-interval is taken into account.\n     *\n     * @return The maximum value.\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.getDomainBounds": "/**\n     * Returns the range of the values in this dataset's domain.\n     *\n     * @param includeInterval  a flag that determines whether or not the\n     *                         x-interval is taken into account.\n     *\n     * @return The range.\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.getDomainBounds": "/**\n     * Returns the bounds of the domain values for the specified series.\n     *\n     * @param visibleSeriesKeys  a list of keys for the visible series.\n     * @param includeInterval  include the x-interval?\n     *\n     * @return A range.\n     *\n     * @since 1.0.13\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.getRangeBounds": "/**\n     * Returns the bounds for the y-values in the dataset.\n     * \n     * @param includeInterval  ignored for this dataset.\n     * \n     * @return The range of value in the dataset (possibly {@code null}).\n     *\n     * @since 1.0.15\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.getRangeBounds": "/**\n     * Returns the bounds for the y-values in the dataset.\n     *\n     * @param visibleSeriesKeys  the visible series keys.\n     * @param xRange  the x-range ({@code null} not permitted).\n     * @param includeInterval  ignored.\n     *\n     * @return The bounds.\n     *\n     * @since 1.0.14\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.vetoableChange": "/**\n     * Receives notification that the key for one of the series in the \n     * collection has changed, and vetos it if the key is already present in \n     * the collection.\n     * \n     * @param e  the event.\n     * \n     * @since 1.0.17\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.equals": "/**\n     * Tests this time series collection for equality with another object.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.hashCode": "/**\n     * Returns a hash code value for the object.\n     *\n     * @return The hashcode\n     */\n",
"org.jfree.data.time.TimeSeriesCollection.clone": "/**\n     * Returns a clone of this time series collection.\n     *\n     * @return A clone.\n     *\n     * @throws java.lang.CloneNotSupportedException if there is a problem \n     *         cloning.\n     */\n" 
}